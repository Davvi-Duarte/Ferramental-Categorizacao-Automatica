repo,pr_number,titulo,descricao,categoria
commons-io,530,[IO-826] Add runtime exception support to broken streams,"https://issues.apache.org/jira/browse/IO-826
As discussed in #528.
One point to note: Is there a reason to keep the deprecated constructors such as BrokenInputStream(final IOException exception)?  Given that the new constructors such as BrokenInputStream(final Throwable exception) accept a superclass of IOException, it seems the old constructor could be removed without a breaking change.",REQ
accumulo,3785,fixes multiple tests in ShellServerIT,Multiple tests in ShellServerIT only ran when their table id was 1 or 2. This commit updates the test to run with any table id.,BUG
helix,2107,Add TTL and Container modes to BaseDataAccessor and its implementations,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #2081
Description

 Here are some details about my PR, including screenshots of any UI changes:

This PR adds support for TTL and Container modes to BaseDataAccessor and its implementations by taking advantage of relevant API from ZkClient and its descendent classes.
Tests

 The following tests are written for this issue:

Two tests (testSyncCreateWithTTL() and testSyncCreateContainer()) were added to TestZkBaseDataAccessor. In addition, testAsyncZkBaseDataAccessor() in the same class was modified to test the newly added API.

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
struts,532,Basic LocalDateTime support,"Add support for LocalDateTime for the LocalDateTime.now() variant. DateTimeFormatter.ISO_LOCAL_DATE_TIME.
See WW-5175",REQ
accumulo,3729,Allow configurable name allocations,Update the UniqueNameAllocator to support a configurable filename range size. The default values match what was previously there so there is no behavior change unless you override the properties.,REF
accumulo,3150,Modified ScanServer to correctly handle tablet failures,"The ScanServer was throwing a NotServingTabletException in both the scan and batch scan cases when there was a failure in loading the tablet. Modified the batch scan case to return the failed tablets in the response instead of throwing the exception.
Closes #3144",BUG
accumulo,2186,Refactor common table property validation to reduce duplication,"Move duplcated code for table property validation to one place
Minor check-style fixes.
fix possible nulll pointer warning (FateServiceHandler)",REF
accumulo,3437,moves hosting request processing from tserver to manager,"Processing of hosting request was moved from the tserver to manager so that the tablet group watcher could be notified.  This considerably reduces the delay in getting an ondemand tablet hosted.
Introduced a cache to avoid reprocessing hosting request for the same tablet in a short time period.
Modified the update of the hosting request column to use a conditional mutation.  This avoids a metadata read before write (the read is now done by the mutation conditions) and avoids race conditions.
Moving the hosting request to the manager could introduce scaling problems, however the cache can help with this. The reduced latency for hosting ondemand tablet is needed, so if there are scaling problems a solution will need to be found that has low latency for hosting.",REF
accumulo,2129,Mark external compaction props as experimental,,REF
accumulo,2369,Fix incorrect scan range output in getsplits command,"In the Accumulo shell, calling getsplits with the verbose option can result in incorret output. It occurs when the tableId of the table
happens to be a single character and there are other tables where the tableId starts with the same character. This results in the output of getsplits displaying splits for the other tables as well.
Closes #2356",BUG
helix,1678,Close zkClients created by TaskStateModelFactory,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #1677
Description

 Here are some details about my PR, including screenshots of any UI changes:

TaskStateModelFactory creates either a shared ZkClient or a FederatedZkClient to read the user-customized number for the configurable thread pool. Neither of the ZkClients are closed in the end, resulting in thread leakage.
Tests

The following is the result of the ""mvn test"" command on the appropriate module:

[INFO] Tests run: 1264, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,046.067 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1264, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:24 h
[INFO] Finished at: 2021-03-26T12:09:01-07:00
[INFO] ------------------------------------------------------------------------

Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,2590,Change location where Thread.start() is called to resolve ErrorProne warning,Closes #2581,BUG
accumulo,1701,Add method to get properties with a prefix,Closes #1627,REQ
helix,1625,Drop current state of the task on disable instances,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
Fixes #1624

Description

 Here are some details about my PR, including screenshots of any UI changes:
In this PR, if an instance is not enabled, the controller drops the current state of the task on the disabled node first before assigning the task to a new instance. Otherwise, once the instance becomes enable controller will see two running tasks.

Tests


 The following tests are written for this issue:
TestTaskCurrentStateDrop.testDropCurrentStateDisableInstance


 The following is the result of the ""mvn test"" command on the appropriate module:
Helix-core:


[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR] org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack.testLackEnoughInstances(org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack)
[ERROR]   Run 1: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:281 » Helix Failed to dr...
[ERROR]   Run 2: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:273 » Helix Cluster CLUS...
[INFO] 
[INFO] 
[ERROR] Tests run: 1258, Failures: 1, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:30 h
[INFO] Finished at: 2021-02-01T11:11:56-08:00
[INFO] ------------------------------------------------------------------------

The failed test passed when I run it individually.
mvn test -Dtest=""TestCrushAutoRebalanceNonRack""
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 28.689 s - in org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  34.777 s
[INFO] Finished at: 2021-02-01T11:28:43-08:00
[INFO] ------------------------------------------------------------------------

Helix-rest:
[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 102.54 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:48 min
[INFO] Finished at: 2021-02-01T11:30:59-08:00
[INFO] ------------------------------------------------------------------------

Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
helix,2462,Enabling INFO level for helix logs for TestClusterStatusMonitorLifecycle integration test.,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
N/A.

NOTE: Since we aren't fixing the actual issue I am marking this as N/A
Description

 Here are some details about my PR, including screenshots of any UI changes:

We need more context to debug the failing TestClusterStatusMonitorLifecyle integration test as we aren't able to reproduce the issue locally. So, we enable INFO level logging for org.apache.helix package.
NOTE: This change will increase the log size for the tests from ~15 MB to ~50MB. We will revert the logging level back to ERROR once we fix the issue.
Tests

 The following tests are written for this issue:
N/A

Changes that Break Backward Compatibility (Optional)
N/A
Documentation (Optional)
N/A
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,4287,Accumulo 4234,"Added a counter in TableMgmtStats to help keep track of tablets that have errors while running a full scan.
Fixes issue#4234",BUG
accumulo,1614,Create max tablets property in new bulk import,"Creates the master.bulk.max.tablets property to allow restricting the
number of tablets in a single bulk import",REQ
helix,2102,Reduce helix controller log and minor code improve,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fix #2080
Description

 Here are some details about my PR, including screenshots of any UI changes:
We are seeing issue in certain product where controller is generating way too many logs that fill up disk space.
In this PR, we reduce a few logger level from INFO to DEBUG and update the logic to avoid duplicated messages in WorkflowDispatcher (Step 5: handle workflow that should STOP)

Tests

 The following tests are written for this issue:

[info] ./zookeeper-api/target/surefire-reports/TestSuite.txt: Tests run: 54, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 123.232 s - in TestSuite
[info] ./recipes/rsync-replicated-file-system/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.585 s - in TestSuite
[info] ./recipes/task-execution/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.582 s - in TestSuite
[info] ./recipes/distributed-lock-manager/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.705 s - in TestSuite
[info] ./recipes/rabbitmq-consumer-group/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.789 s - in TestSuite
[info] ./recipes/service-discovery/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.415 s - in TestSuite
[info] ./metadata-store-directory-common/target/surefire-reports/TestSuite.txt: Tests run: 31, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.745 s - in TestSuite
[info] ./helix-rest/target/surefire-reports/TestSuite.txt: Tests run: 205, Failures: 1, Errors: 0, Skipped: 35, Time elapsed: 138.881 s <<< FAILURE! - in TestSuite
Error:  Test failed: testGetClusters(org.apache.helix.rest.server.TestClusterAccessor)  Time elapsed: 0.513 s  <<< FAILURE!
[info] ./metrics-common/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.335 s - in TestSuite
[info] ./helix-view-aggregator/target/surefire-reports/TestSuite.txt: Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 58.735 s - in TestSuite
[info] ./helix-common/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.272 s - in TestSuite
[info] ./helix-core/target/surefire-reports/TestSuite.txt: Tests run: 1314, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,903.158 s - in TestSuite
[info] ./helix-lock/target/surefire-reports/TestSuite.txt: Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 53.896 s - in TestSuite
Known issue with TestClusterAccessor, verified passed locally.
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,2661,Add base objects for Tablet and TabletServer for the upcoming ScanServer feature,"This commit introduces TabletBase, a base class for Tablets, and TabletHostingServer,
an interface for server components that host Tablets. These changes will be used by
the ScanServer feature that is in the works.
Related to #2411",REQ
helix,1627,Fix ZkAddress null case for TaskStateModelFactory,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fix #1626
Description

 Here are some details about my PR, including screenshots of any UI changes:

If zkAddress is null for the HelixManager passed to TaskStateModelFactory and multizk is not enabled, a NullPointerException will be raised. This PR fixes that by adding a null check.
When #1183 was introduced and null checks were added, this section of code was in a feature branch, and was therefore not covered by the PR 1183.
Tests

 The following tests are written for this issue:

(List the names of added unit/integration tests)

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
opennlp,473,OPENNLP-1428 - Enhance DownloadUtil to avoid the use of hard-coded model urls,"Thank you for contributing to Apache OpenNLP.
In order to streamline the review of the contribution we ask you
to ensure the following steps have been taken:
For all changes:


 Is there a JIRA ticket associated with this PR? Is it referenced
in the commit message?


 Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen ""-"" character.


 Has your PR been rebased against the latest commit within the target branch (typically main)?


 Is your initial contribution a single, squashed commit?


For code changes:

 Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?
 Have you written or updated unit tests to verify your changes?
 If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?
 If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?
 If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?

For documentation related changes:

 Have you ensured that format looks appropriate for the output in which it is rendered?

Note:
Please ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible.",REF
helix,2149,implement util for cloud event,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#2133
Description

 Here are some details about my PR, including screenshots of any UI changes:

This change add implementation for HelixCloudEventUtil
Tests

 The following tests are written for this issue:

TestDefaultCloudEventCallbackImpl.java

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
accumulo,4150,Fix ConcurrentModificationException in QueueMetrics,"The metricsWithoutQueues variable is a SetView
which is sensitive to changes in the underlying
sets. The loop was modifying one of the underlying objects. To prevent the CME from being raised I
copied the objects into a new set.
Closes #4144",BUG
commons-io,325,IOCase.isCaseSensitive(IOCase) result is backward,"When the argument is IOCase.SENSITIVE, I think the static method isCaseSensitive should return true.
I did the following test with the code.
public void testIsCaseSensitive() {
  // return true. I think it is right.
  boolean b1 = IOCase.SENSITIVE.isCaseSensitive();
  System.out.println(b1);

  // but invoke static method and return false.
  boolean b2 = IOCase.isCaseSensitive(IOCase.SENSITIVE);
  System.out.println(b2);
}",BUG
accumulo,2143,Fix external compaction properties names and keys,"Modified the external compaction properties to be in line with other properties
in the codebase. Specifically, I changed

the enum names starting with COORDINATOR to COMPACTION_COORDINATOR
the keys starting with coordinator to compaction_coordinator
properties having to with compaction of files to include the term
compaction in the key

Closes #2142",REF
helix,2507,"Simplify thread naming in TaskStateModelFactory""","Issues

 My PR addresses the following Helix issues and references them in the PR description:
Fixes #325

Description

 Here are some details about my PR, including screenshots of any UI changes:
In TaskStateModelFactory class, we want to name our thread with a sequence number to uniquely identify threads. The mechanics can be simplified by using the BasicThreadPoolFactory which has way for explicitly naming the thread.

Tests

 The following tests are written for this issue:

(List the names of added unit/integration tests)

The following is the result of the ""mvn test"" command on the appropriate module:
mvn -q test run is in progress, will update it as soon as I get the results.

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,3927,Add json property type with simple validation,"Adds a JSON PropertyType and minimal validation that verifies the property value can be parsed into a JSON object.
This was inspired by issue #3909, but does not directly address it.

Some current properties defer validation until use and this PR does not address that. (That could be done in a follow-on PR)
Some configurations require multiple, independent properties be set for a valid configuration, This PR does not  attempt to perform that validation - that responsibility is deferred to the implementations that use those properties.

This implementation was to provide a minimal check, that follow on PRs could extend / leverage to introduce additional property validation.",REQ
accumulo,1891,Add TabletBalancer to SPI package,"This change deprecates existing balancers and introduces copies of each
under the SPI package. The main balancer interface, TabletBalancer, has
been converted from an abstract class to an interface and its method
signatures use only public API types, and some other data types in SPI
sub-packages. The new types used expose the same functionality as the
previous types, and the implementations generally simply wrap the old
thrift objects and delegate, but will allow for easier evolution of the
API in the future.

Deprecated TabletId.getTableId(), which created a new Text object
every time, in favor of new TabletId.getTable() which returns a
TableId. All existing usages of the getTableId() method would
immediately call toString() on the returned Text object, or construct
a TableId from the Text object. Therefore, the new method avoids
object creation and usages read cleaner in many cases.
Add functionality to PluginEnvironment.Configuration for loadClass
(vs just instantiating a class) and also expose derived property
calculation (AccumuloConfiguration.Deriver) as a Supplier.
Deprecated all balancers in org.apache.accumulo.server.master.balancer
except for ChaoticLoadBalancer, which was moved to accumulo-test since
its purpose is only for testing.
Introduce types in org.apache.accumulo.core.spi.balancer.data for
wrapping thrift types needed by the balancers.
Add a BalancerEnvironment to the SPI to support balancer-specific
system operations (table online status check, listing online tablets,
etc) in an API-stable manner.
Convert TabletBalancer from abstract class to interface with init,
getAssignments, and balance methods. The methods take parameters
objects which will make it easier in the future if the balancer API
needs to evolve.
Implement existing balancers (DefaultLoadBalancer, TableLoadBalancer,
GroupBalancer, RegexGroupBalancer, HostRegexTableLoadBalancer) in the
SPI package by copying existing code and converting usages of thrift
types to new stable types, and adjusting method signatures such that
the new TabletBalancer API is implemented.
Changed default balancer and table load balancer properties to use the
new SPI-packaged versions.
Wired support in Master to call either the deprecated or new balancer
depending on which type is specified by the accumulo configuration.

fixes #1880",REF
helix,1580,Update the internal fields of the Data Providr when overriding the data through set methods.,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#1578
Description

 Here are some details about my PR, including screenshots of any UI changes:

It was observed that the set methods in the Helix Data Provider classes, which are used but the Helix tools or tests, are not updating the derived fields.
This makes the override incomplete and it causes some potential issues when the tools are used.
This PR ensures that the set methods are modifying important derived fields.
Tests

 The following tests are written for this issue:

The main changed logic has been covered by the existing tests.
It is hard, and maybe not a good idea to cover all the possible util tool usages.

 The following is the result of the ""mvn test"" command on the appropriate module:

[ERROR] Failures:
[ERROR]   TestDisableCustomCodeRunner.test:236 expected: but was:
[INFO]
[ERROR] Tests run: 1252, Failures: 1, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:32 h
[INFO] Finished at: 2020-12-08T16:37:00-08:00
[INFO] ------------------------------------------------------------------------
Rerun the failed test:
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.117 s - in org.apache.helix.integration.TestDisableCustomCodeRunner
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 18.469 s
[INFO] Finished at: 2020-12-08T17:36:03-08:00
[INFO] ------------------------------------------------------------------------
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,4296,Added unit test for CompactionJobPriorityQueue,Fixes #3466,REF
helix,2055,support common input for operational input on Maintenance Management API ,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#2034
Description

 Here are some details about my PR, including screenshots of any UI changes:

This change adds a common input field for operational check input on Maintenance Management API.
Tests

 The following tests are written for this issue:

testTakeInstanceOperationCheckFailureCommonInput

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
accumulo,1546,Replace try/finally with try-with-resources.,Implement the try-with-resources construct available in Java 7+ where applicable.,REF
struts,657,WW-5279 Improve readability of XmlConfigurationProvider class,WW-5279,REF
httpcomponents-client,235,HTTPCLIENT-2097: Fix PoolingAsyncClientConnectionManager boxed primitive reference equality,https://issues.apache.org/jira/browse/HTTPCLIENT-2097,BUG
accumulo,1774,Refactor Tablet state classes,"Move TabletState, TabletLocationState, TServerInstance and
SuspendingTServer from master to core.metadata package to allow
packages outside of master to use them
Make ample TabletMetadata.Location extend TServerInstance to
eliminate a temporary interface and some redundant object creation
Rewrite GroupBalancer getLocationProvider() method to eliminate
Location inner class
Modify GroupBalancerTest to override new method",REF
accumulo,1970,Deprecate the shell script command,"Mark the shell's ScriptCommand as deprecated and log a warning when used.
This fixes #1949",REF
struts,659,WW-5284 Refactor ActionValidatorManager implementations,"WW-5284
Following on from #656 I realised the implementation could be simplified further. I've merged AbstractActionValidationManager into DefaultActionValidationManager and made AnnotationActionValidationManager an extension of that. Other than that I've only made a handful of functional changes which I'll comment below.",REF
httpcomponents-client,484,HTTPCLIENT-2277:  deprecation of obsolete config parameters and removal of oudated or meaningless tests,@arturobernalg Please kindly have a look. No functional changes. Mostly deprecation and removal of outdated / unused code and some javadoc updates. Also removed verbatim RFC 2616 quotes from the cache test cases.,REF
struts,741,WW-5341 Ensure exclusion list applies to objects from all ClassLoaders,"WW-5341
In applications where there are multiple classloaders, it may be possible for SecurityMemberAccess to obtain a false negative if the classloader used to load the target object was different to the one used to load the exclusion list.
To rectify this, we use String comparison of the class name instead. We still use the default classloader to validate the exclusion list on application start. A future enhancement might be to make the validating classloader configurable.",BUG
helix,1875,Fix adding a task to a job after deleting old tasks,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
Fixes #1874

Description

 Here are some details about my PR, including screenshots of any UI changes:

In this PR, the issue of dynamically adding a task to a job which some of its tasks has been deleted before is being addressed.
Tests


 The following tests are written for this issue:
TestAddDeleteTask.testDeleteMiddleTaskAndAdd


 The following is the result of the ""mvn test"" command on the appropriate module:
Helix-core:


[INFO] Tests run: 1284, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,522.236 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1284, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-core ---
[INFO] Loading execution data file /home/anajari/my_repos/helix/helix-core/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: Core' with 909 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:32 h
[INFO] Finished at: 2021-09-16T08:47:28-07:00
[INFO] ------------------------------------------------------------------------

Helix-rest:
[INFO] Tests run: 179, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 126.955 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 179, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-rest ---
[INFO] Loading execution data file /home/anajari/my_repos/helix/helix-rest/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 79 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:14 min
[INFO] Finished at: 2021-09-16T09:38:30-07:00
[INFO] ------------------------------------------------------------------------

Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,4185,clean up AddressUtil.parseAddress usage,"The utility AddressUtil,parseAddress() had a boolean parameter to allowed addresses to be created without a port. Other than another utility method that allows setting the default port the value was always false (required port)  This PR removes the boolean from the method signature.
Discovered this while trying to use HostAndPort in favor of strings where possible.  Submitting this a separate PR because it is stand-alone change that is easier to review.",REF
commons-lang,1148,Address minor redundancies after code inspection,This time the focus is on unnecessary string concatenation and redundant local assignments.,REF
accumulo,2126,Unit test converting client props to BatchWriterConfig,"Created two unit tests for the conversion of client properties to BatchWriterConfig. One using default values and another using modified values.
Refactored getBatchWriterConfig as suggested in initial ticket.
Added code in getBatchWriterConfig to allow for updating BATCH_WRTIER_THREADS_MAX as it was missing in the method as it existed.",REF
accumulo,4272,Ensured that TabletMgmtStats are incremented in TabletGroupWatcher,Fixes #4233,BUG
struts,531,[WW-5168] Support submit unchecked in Javatemplates and fixes logic for FTL template,"Fixes WW-5168
Closes #530",BUG
accumulo,3664,change exit error code for ZooPropEditor,Changed exit status ( From comment in PR #3620 ),BUG
accumulo,4085,Use LogEntry concrete type in more places,"Track the actual column qualifier read from the metadata table, so when it is deleted, it can delete the actual entry, rather than try to delete the existing entry with the new format (requires no longer strictly requiring that log entries start with a -/). This fixes #4061 for the main branch for 3.1; a similar issue may still exist for 2.1, but will require a different fix.
Remove use of Collection<Collection<String>> and use Collection<LogEntry> where possible, since the former was for a previous WAL storage format that we do not support, and the latter preserves the strongly-typed LogEntry in more places",REF
accumulo,2178,Catch NoNodeException in CompactRange,"Fixes #1919
It is possible for a compaction to run after a table is deleted so
catch the exception and print to debug, avoiding the FATE warning",BUG
zookeeper,1915,ZOOKEEPER-4607 : Fix decode problem when sub tnx type is error.,"If there is a -101 error in the multi txn, the error byte array is {-1, -1, -1, -101}.
In the TxnLogToolkit, it uses toString to decode, it will decode it to the unknown character.
Before:
session 0x1000017f0b701dc cxid 0x1 zxid 0x3208 multi error:����;error:����;error:����

After:
session 0x1000017f0b701dc cxid 0x1 zxid 0x3208 multi error:-101;error:-2;error:-2",BUG
accumulo,4104,"Fix HTML headings in javadoc, change from h3 to h4",,BUG
accumulo,2335,"Deprecate replication classes, properties, etc.",,REF
accumulo,1833,Fixes #1760 - `listcompactions` command error is not helpful,Fixing issue #1760. Adding more helpful error messages for the listcompactions command when a tserver address is passed.,BUG
helix,1846,Fix management mode history duplicate recording,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixed #1845
Description

 Here are some details about my PR, including screenshots of any UI changes:

The management mode history has duplicate entries. It does not impact the normal function, but it's good to get it fixed to avoid confusion.
Enable cluster freeze mode in a staging cluster. Because of multiple events(live instance change events), the management mode pipeline could be run multiple times. Then the same mode history is recorded multiple times.
 ""MANAGEMENT_MODE_HISTORY"": [
      ""{STATUS=COMPLETED, CONTROLLER=host1, MODE=CLUSTER_FREEZE, FROM_HOST=host2, TIME=2021-08-18T20:58:51.659Z}"",
      ""{STATUS=COMPLETED, CONTROLLER=host1, MODE=CLUSTER_FREEZE, FROM_HOST=host2, TIME=2021-08-18T21:02:08.893Z}"",
      ""{STATUS=COMPLETED, CONTROLLER=host1, MODE=CLUSTER_FREEZE, FROM_HOST=host2, TIME=2021-08-18T21:09:03.659Z}"",
      ""{STATUS=COMPLETED, CONTROLLER=host1, MODE=CLUSTER_FREEZE, FROM_HOST=host2 TIME=2021-08-18T21:13:03.660Z}

Tests

 The following tests are written for this issue:

TestManagementModeStage
TestClusterFreezeMode

The following is the result of the ""mvn test"" command on the appropriate module:

12:45:13,985 [INFO] Results:
12:45:13,985 [INFO]
12:45:13,985 [ERROR] Failures:
12:45:13,985 [ERROR]   TestZeroReplicaAvoidance.testWagedRebalancer:182 expected:<true> but was:<false>
12:45:13,985 [INFO]
12:45:13,985 [ERROR] Tests run: 1282, Failures: 1, Errors: 0, Skipped: 0
12:45:13,986 [INFO]
12:45:13,991 [INFO] ------------------------------------------------------------------------
12:45:13,992 [INFO] BUILD FAILURE
12:45:13,992 [INFO] ------------------------------------------------------------------------
12:45:13,993 [INFO] Total time:  01:21 h
12:45:13,993 [INFO] Finished at: 2021-08-23T12:45:13-07:00
12:45:13,993 [INFO] ------------------------------------------------------------------------


13:50:28,577 [INFO] Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 31.701 s - in TestSuite
13:50:28,962 [INFO]
13:50:28,962 [INFO] Results:
13:50:28,963 [INFO]
13:50:28,963 [INFO] Tests run: 20, Failures: 0, Errors: 0, Skipped: 0
13:50:28,963 [INFO]
13:50:28,967 [INFO]
13:50:28,968 [INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-core ---
13:50:29,003 [INFO] Loading execution data file /home/hulu/Projects/helix/helix-core/target/jacoco.exec
13:50:29,473 [INFO] Analyzed bundle 'Apache Helix :: Core' with 909 classes
13:50:30,936 [INFO] ------------------------------------------------------------------------
13:50:30,936 [INFO] BUILD SUCCESS
13:50:30,937 [INFO] ------------------------------------------------------------------------
13:50:30,938 [INFO] Total time:  37.736 s
13:50:30,938 [INFO] Finished at: 2021-08-23T13:50:30-07:00
13:50:30,939 [INFO] ------------------------------------------------------------------------

Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
httpcomponents-client,351,Async HttpClient builders to support custom IOSessionListener ,Add the option to set an IOSessionListener on HttpAsyncClientBuilder,REF
accumulo,2236,Add new property to configure rfile sorted recovery,"Closes #2187
Create new property prefix ""tserver.wal.sort.file."" to configure the
rfiles written during sorted recovery
Add method to LogSorter to convert the sort file properties to table
files properties
Create new tests in SortedLogRecoveryTest
Make method public in Compression to use in test
Add property to MultiTableRecoveryIT to allow testing in an IT",REQ
accumulo,3195,Use Collections.unmodifiableList for static ACL declarations,"Uses Collections.unmodifiableList to limit the exposure of the PRIVATE and PUBLIC collections.
Adds tests that replicate the current ZooKeeper check (in ZooKeeper, the method is private)

Spotbugs warns (MS_MUTABLE_COLLECTION) for the the public, static definitions in ZooUtil for PRIVATE and PUBLIC ZooKeeper ACLs that expose a mutable collection (ArrayList).  This was discovered when refactoring ServiceLock from fate to another package in core.  Verified, that with this change, spotbugs does not flag the issue.
Using an immutable collection like List.of() or List.copyOf() result in an NPE from ZooKeeper.  ZooKeeper that performs a ACL check on operations like create,... The ZooKeeper check calls acl.contains((Object) null) which throws an NPE in Java (JDK-8265905)",REF
accumulo,2045,Move ignoreEmptyDir opt to ImportOptions interface,Update the importdirectory ignoreEmptyDir option to use the bulk import fluent API. The ignoreEmptyDir option is moved into the ImportOptions interface and can be set during the call to the load method.,REF
opennlp,461,OPENNLP-1416 Enhance JavaDoc in opennlp.tools.formats.ad package,"Change

adds missing JavaDoc
improves existing documentation for clarity
removes superfluous text
adds 'final' modifier where useful and applicable
adds 'Override' annotation where useful and applicable
simplifies several constructors, removing duplicate code
fixes non-JNC compliant naming of constants
fixes several typos

Tasks
Thank you for contributing to Apache OpenNLP.
In order to streamline the review of the contribution we ask you
to ensure the following steps have been taken:
For all changes:


 Is there a JIRA ticket associated with this PR? Is it referenced
in the commit message?


 Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen ""-"" character.


 Has your PR been rebased against the latest commit within the target branch (typically master)?


 Is your initial contribution a single, squashed commit?


For code changes:

 Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?
 Have you written or updated unit tests to verify your changes?
 If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?
 If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?
 If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?

For documentation related changes:

 Have you ensured that format looks appropriate for the output in which it is rendered?

Note:
Please ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible.",REF
struts,666,WW-5290 Refactor ConfigurationManager,"WW-5290
Apart from improving the readability and maintainability of this class, this refactor fixes some logic issues and prevents improper use. It enforces thread safety and also improves performance, specifically on initialisation. We no longer do 2 reloads unnecessarily in certain scenarios.
I've additionally ran these changes through the Confluence DC test suite and everything is passing. :)",REF
accumulo,4101,Fix 4100 - move header length check to test,"Move the assert check to a unit test and deletes redundant check
simple IDE suggested QA checks.

Fixes #4100",REF
accumulo,2804,Modify CompactionCheck logic to run expensive checks less often,"This change splits the prior memoized check into two, one that
is less expensive and is checked more often and one that is more
expensive, likely to change less often and is checked less often
Closes #1610",REF
helix,1579,"Task Current State Migration: helix-rest, utils, tests changes","Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #1549 (Partially)
Description

 Here are some details about my PR, including screenshots of any UI changes:

To address excessive ZooKeeper reads caused by task framework CurrentState updates, it is proposed to move task framework CurrentStates to their separate path.
The change is divided to multiple phases. This is a part of the first phase where non-essential changes are included. For the first part, see #1550.
Tests

 The following is the result of the ""mvn test"" command on the appropriate module:

[INFO] Tests run: 1251, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,127.55 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1251, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:25 h
[INFO] Finished at: 2020-12-09T20:09:32-08:00
[INFO] ------------------------------------------------------------------------

[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 90.526 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:35 min
[INFO] Finished at: 2020-12-10T09:38:47-08:00
[INFO] ------------------------------------------------------------------------

Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,4284,Create accumulo.fate table during upgrade,"Use the same code as ZooKeeperInitializer to create the new accumulo.fate table
Fixes #4167",REF
accumulo,2289,Adds unit test for compaction file tracking,"While writing these unit test one bug was found and fixed.
This adds unit test for the changes made in #2199 plus unit test for code that existed before that.",REF
accumulo,1650,Batching Strategy for SimpleGarbageCollector Fix #1543,Solution for #1543. Takes @ctubbsii  batching changes on #1441 and applying it to the SimpleGarbageCollector. I am not fully confident on my test for this feature so feadback on that will be much appreciated.,BUG
accumulo,3568,Change Wait.waitFor to throw IllegalStateException,"Instead of returning a boolean with the condition status, throw an IllegalStateException if the condition
is not satisfied after the wait period expires.


Fixes #3564",REF
accumulo,1705,Clean up a few forEach loops,"Miscellaneous minor clean up found while working on unrelated code,
including:

Using forEach loops on collections to streamline loops
Inline one-time-use simple private methods
Remove braces in some simple one-statement lambdas",REF
accumulo,1381,Update gc metrics reporting to use hadoop metrics2,"Publish current gc metrics to hadoop 2 metrics reporting system.
Add gc run counter that increments on each gc cycle run
Add metric to track time required for gc post op (compact, flush, none)
Improved testing using a metrics2 file sink for it tests.",REF
accumulo,2135,Test converting client props to ConditionalWriterConfig,"Created two unit tests for the conversion of client properties to ConditionalWriterConfig. One using default values and another using modified values.
Refactored getConditionalWriterConfig into two methods to facilitate unit testing.
Closes #2131",REF
accumulo,4121,Small improvements to new AccumuloStore related code,,REF
commons-collections,300,[COLLECTIONS-802] Fix remove failed by removing set null to currentKe…,"…y and currentValue.

The problem occur when the iterator called hasNext and return false, which set null to currentKey. Hence remove method calling parent.remove(currentKey); will not remove the current entry.
Propose to fix by removing lines setting null, other than releasing the reference earlier, can't think of other reason to set them to null.
Rename variable to be more understandable.",BUG
accumulo,4212,Better error when compaction executors are not set,"Gson returns a null array when executors either isn't defined, or is an empty string.
The code then throws an NPE when attempting to iterate through the array.
    ExecutorConfig[] execConfigs =
        new Gson().fromJson(params.getOptions().get(""executors""), ExecutorConfig[].class);

    List<Executor> tmpExec = new ArrayList<>();
    for (ExecutorConfig executorConfig : execConfigs) {

This change throws an IllegalStateException before the NPE would occur and adds an actionable exception message.
This change is only targeted to 2.1 as this situation is already handled in main.",BUG
helix,2410,use reconnect timeout for crud retry timeout,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#2237
Description

 Here are some details about my PR, including screenshots of any UI changes:

Had an offline discussion with other committers.
Since operation retry waits for connect state change event, it will retry when reconnect succeeded and retry will be canceled when reconnect errored or timed out. There is no need to have 2 configurable timeout for CRUD operation retry and reconnect retry.
This change remove crud operation retry timeout.
Tests

 The following tests are written for this issue:

NA

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,1632,Fix #1609 dynamically reinitialize compaction services when config ch…,…anges,BUG
helix,1680,Use specific message for stoppable API partitions in initial state,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
Fixes #1679

Description

 Here are some details about my PR, including screenshots of any UI changes:
In this PR, when stoppable rest API is called and a partition on sibling node is in initial
state of the statemodel, we skip the healthcheck for that partition/instance
and put an appropriate message regarding this failure.

Tests


 The following tests are written for this issue:
TestInstanceValidationUtilInRest.testPartitionLevelCheckInitState


 The following is the result of the ""mvn test"" command on the appropriate module:
Helix-core:


[INFO] Tests run: 1264, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4,911.786 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1264, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:21 h
[INFO] Finished at: 2021-03-23T19:24:15-07:00
[INFO] ------------------------------------------------------------------------

Helix-rest:
[INFO] Tests run: 172, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 92.044 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 172, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:39 min
[INFO] Finished at: 2021-03-24T09:59:10-07:00
[INFO] ------------------------------------------------------------------------

Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
helix,2032,Code refactor and cleanup on instance validation,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
#2022

Description

 Here are some details about my PR, including screenshots of any UI changes:
Cleanup the usage in checking instance enable/disable using InstanceValidationUtil

Tests

 The following tests are written for this issue:

(List the names of added unit/integration tests)

The following is the result of the ""mvn test"" command on the appropriate module:

[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 59.725 s - in TestSuite
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO]
[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-view-aggregator ---
[INFO] Loading execution data file /home/qqu/workspace/qqu-helix/helix-view-aggregator/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: View Aggregator' with 15 classes
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for Apache Helix 1.0.3-SNAPSHOT:
[INFO]
[INFO] Apache Helix ....................................... SUCCESS [  1.235 s]
[INFO] Apache Helix :: Metrics Common ..................... SUCCESS [  4.014 s]
[INFO] Apache Helix :: Metadata Store Directory Common .... SUCCESS [ 14.624 s]
[INFO] Apache Helix :: ZooKeeper API ...................... SUCCESS [02:28 min]
[INFO] Apache Helix :: Helix Common ....................... SUCCESS [  2.168 s]
[INFO] Apache Helix :: Core ............................... SUCCESS [  01:47 h]
[INFO] Apache Helix :: Admin Webapp ....................... SUCCESS [  0.932 s]
[INFO] Apache Helix :: Restful Interface .................. SUCCESS [02:49 min]
[INFO] Apache Helix :: Distributed Lock ................... SUCCESS [ 56.694 s]
[INFO] Apache Helix :: HelixAgent ......................... SUCCESS [  0.556 s]
[INFO] Apache Helix :: Recipes ............................ SUCCESS [  0.015 s]
[INFO] Apache Helix :: Recipes :: Rabbitmq Consumer Group . SUCCESS [  1.859 s]
[INFO] Apache Helix :: Recipes :: Rsync Replicated File Store SUCCESS [  2.003 s]
[INFO] Apache Helix :: Recipes :: distributed lock manager  SUCCESS [  1.975 s]
[INFO] Apache Helix :: Recipes :: distributed task execution SUCCESS [  1.756 s]
[INFO] Apache Helix :: Recipes :: service discovery ....... SUCCESS [  1.842 s]
[INFO] Apache Helix :: View Aggregator .................... SUCCESS [01:01 min]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:55 h
[INFO] Finished at: 2022-04-11T17:25:03-07:00
[INFO] ------------------------------------------------------------------------
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,3479,TabletGroupWatcher update to handle servers being shutdown,"The change updates TabletGroupWatcher to remove servers being shutdown from being sent as candidates for assignment. There was previous logic (e.g. v1.10) that filtered the servers being shutdown from being included in the candidate list.
Verified that on t-server shutdown the tablets are unloaded and assigned to a different host (with HostRegexTableLoadBalancer).
# Configured system with sample tablets; and 5 t-servers:
# Shutdown one t-server:
$> bin/accumulo admin stop localhost:9997

# Manager logs report unload and t-server being shutdown is not in candidate list:
...
[manager.EventCoordinator] INFO : tablet 1;20230601_1728;20230601_1727 was unloaded from localhost:9997
...
[balancer.HostRegexTableLoadBalancer] DEBUG: Sending 40 tablets to balancer for table test_1 for assignment 
  within tservers [localhost:10000[10001cc843d0007], localhost:10003[10001cc843d000a],
  localhost:10004[10001cc843d000b], localhost:10005[10001cc843d000c]]

Closes #3368",BUG
accumulo,2896,ScanServerSelector - Break nested interfaces into their own files,"Fixes #2855
This PR follows the suggestion outlined in #2855 to break the nested interfaces in ScanServerSelector into their own files.",REF
httpcomponents-client,372,ResponseEntityProxy.writeTo(null) leaves connections in the correct state,"Previously writeTo would conditionally delegate to the wrapped
entity if the provided outputstream was non-null, however in the
null case the entity would not be drained and the connection would
be released potentially with bytes remaining. If this occurs in
practice, it may result in timeouts as the server expects to write
data to the response while the client is attempting to send a
request.
I haven't seen this create issues in practice, but I noticed the
oddity while working on #371.",BUG
accumulo,4282,FateIT Repo Error Test,"Closes #4266
This adds a test testRepoFails() to FateIT in 2.1 which ensures undo() is called and in the expected order when an error occurs in a Repo's call() or isReady() methods.",REF
accumulo,3141,Add id info to config check utility,"The ConfigCheckUtil.validate function logs  issues with properties, but does not include an id to help  find where the issue is occurring.  This PR adds the namespace or table id - or if an id is not provided, it assumes the property is from the site configuration.
This was noticed after upgrading a 2.1 instance with replication configured. PR #3137 is independent of these changes, but this PR does provide additional information once upgrades are possible with PR #3137
Before the changes, the logs looks like:
2022-12-27T17:55:57,477 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name)
2022-12-27T17:55:57,477 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.password.peer1)
2022-12-27T17:55:57,477 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.peer1)
2022-12-27T17:55:57,477 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.user.peer1)
2022-12-27T17:55:57,485 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name)
2022-12-27T17:55:57,485 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.password.peer1)
2022-12-27T17:55:57,485 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.peer1)
2022-12-27T17:55:57,485 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.user.peer1)


With these changes:
2022-12-27T22:15:30,945 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name) for site

2022-12-27T18:49:40,286 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name) for +accumulo
2022-12-27T18:49:40,286 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.password.peer1) for +accumulo
2022-12-27T18:49:40,286 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.peer1) for +accumulo
2022-12-27T18:49:40,286 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.user.peer1) for +accumulo
2022-12-27T18:49:40,293 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name) for +r
2022-12-27T18:49:40,293 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.password.peer1) for +r
2022-12-27T18:49:40,293 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.peer1) for +r
2022-12-27T18:49:40,293 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.user.peer1) for +r
2022-12-27T18:49:40,299 [balancer.TableLoadBalancer] INFO : Loaded class org.apache.accumulo.core.spi.balancer.SimpleLoadBalancer for table +r",REF
accumulo,2549,Migrate Minicluster module to JUnit5,Part of issue #2441 This PR contains changes for the conversion from JUnit4 to JUnit5 for the accumulo-minicluster module.,REF
accumulo,2097,Fix history test inside ShellServerIT,"Fixes #2091.
The history command was failing due to the executed commands not being written to the history file. This change will write the expected commands to the history file but solely for the history test at this moment since some tests broke with the change.",BUG
accumulo,1541,Replace use of equals() with Object.equals(),Utilize newer Java language features to simplfy code by using Object.equals() rather than equals().,REF
accumulo,1553,Simplify some VolumeManager tooling,"Replace getVolumeByPath(p).getFileSystem() with getFileSystemByPath(p)
(no caller used getVolumeByPath without immediately calling getFileSystem)
Remove redundant null checks for path argument by pushing down into
getFileSystemByPath method
Remove unneeded NonConfiguredVolume class and test
Remove unneeded (and unused) VolumeManager.getContentSummary
Rename create method with overwrite capability to make API more clear
Retain all exceptions when closing filesystems (as suppressed)
Simplify/shorten implementations for VolumeManagerImpl methods
Make VolumeManager AutoCloseable (it already had a close method)
Fix tests (ZooLockTest -> ZooLockIT, and numerous incorrect usages of
TemporaryFolder)",REF
helix,1732,Change Workflow monitor and PerInstanceResource monitor from static m…,"…etrics to dynamic metrics
Issues

 My PR addresses the following Helix issues and references them in the PR description:
Fixed #1683

Description

 Here are some details about my PR, including screenshots of any UI changes:

These PR continues to change some legacy metrics that use static metric to the standard ones that use dynamic metric. The changed monitor includes workflow monitor and perinstanceresource monitor. There are also some corresponding changes made in the test and caller functions.
Tests

The following is the result of the ""mvn test"" command on the appropriate module:
Helix-core:
[INFO] Tests run: 1268, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,062.131 s - in TestSuite
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 1268, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO]
[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-core ---
[INFO] Loading execution data file /home/mnzhang/helix/helix-core/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: Core' with 894 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:24 h
[INFO] Finished at: 2021-05-11T11:27:32-07:00

Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,2648,Address TODOs found in code,I looked through some of the TODOs in the comments and did my best to address those that I could.,REF
accumulo,1927,Document master/manager rename in Upgrader9to10 re #1922,,REF
accumulo,3403,Set finished time for GC cycles even if Exception,"Always set the finished time for GC cycles, even if an exception occurred in the cycle. This prevents a GCStatus object containing a started time, but the finished time staying the default value of 0.
Ideally, this wouldn't be a problem if we used the setter/getter methods on Thrift objects so that we can tell the difference between a 0 that has been set and one that is 0 just because it's a primitive type that defaults to 0 when unset. Thrift tracks which fields are set using isSetFieldname methods, but since we're not consistently using those, and just grabbing the value of the field without checking if it has been set, we need to make sure that we've set it to something sensible.
I believe this fixes #3374",BUG
accumulo,2213,Refactored code that does bookeeping for compacting files.,Refactored the code that tracks the status of each tablets files that are involved in compactions.  The refactoring pulled the code into its own class.  No functionality was changed.  This change was done in preparation for #2199   This change will also make it possible to write unit tests for this functionality.  Comprehensive unit test for this code can be added after changes for #2199 are made.,REF
accumulo,1746,Close #1739. Cleanup Splits file if CreateTable FaTE operation fails.,Uses the same cleanup logic that is used if the operation is successful. Closes #1739,REF
accumulo,1605,Fixes #564 adds support multiple compaction executors,"This change adds support for multiple compaction executors and
multuple concurrent compactions per tablet.
The best way to understand these changes is to look at the documentation
at core/src/main/java/org/apache/accumulo/core/spi/compaction/package-info.java
The javadocs mentioned above are hard to read in source form and are rendered at the link below.
https://keith-turner.github.io/apidocs-accumulo-564/org/apache/accumulo/core/spi/compaction/package-summary.html
The following link was added on 5/13 and goes over some use cases
https://gist.github.com/keith-turner/f6f7ca661d88b935b74f57dbdeeb07d3
The following link was added on 6/1 and documents a test I ran on a cluster with this code.
https://gist.github.com/keith-turner/29b72dfa97acad53c395dd0724b65f1c",REQ
zookeeper,2114,ZOOKEEPER-4791: Improve logging when the connection to a remote serve…,…r is closed,REF
struts,552,[WW-5165] Upgrades Spring to version 5.3.20,"Refs WW-5165
Closes #534",REF
accumulo,3813,Modified ExternalCompactionUtil.findCompactionCoordinator to use ZooCache,Closes #3783,REF
commons-collections,315,replaced merge with old mergeInPlace,"This change makes merge() act like other collections {{merge}} methods and update the item in place.  The mergeInPlace() method is removed.  Any previous use of merge should be replaced with
BloomFilter bf = bf1.copy();
bf.merge( thing );

fixes https://issues.apache.org/jira/browse/COLLECTIONS-829",REF
accumulo,2243,Minor changes to compactable error message template,,REF
httpcomponents-client,501,HTTPCLIENT-2277: RFC 9111 conformance improvements / bug fixes,"Aligns the behavior of the caching protocol handlers with the specification requirements (sections 3 and 4 RFC 9111)
Improved normalization of variant header elements
Bug fixes",BUG
commons-collections,316,COLLECTIONS-823: Modified ArrayCountingBloomFilter.forEachBitMap to be more efficient,"Resolves https://issues.apache.org/jira/projects/COLLECTIONS/issues/COLLECTIONS-823
Modifies ArrayCountingBloomFilter.forEachBitmap() to be more efficient. by not creating an array of longs but building each long and calling the consumer in turn.",REF
opennlp,512,OPENNLP-1476 Modernize DictionaryEntryPersistor to create XMLReader via javax.xml.parsers.SAXParserFactory,"Notes:

I experienced a lower built-time when compared with the latest main branch (MacOS, M1)
main: ~ 60s, with this change/PR: ~ 55s

[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  55.863 s

Tasks
Thank you for contributing to Apache OpenNLP.
In order to streamline the review of the contribution we ask you
to ensure the following steps have been taken:
For all changes:


 Is there a JIRA ticket associated with this PR? Is it referenced
in the commit message?


 Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen ""-"" character.


 Has your PR been rebased against the latest commit within the target branch (typically main)?


 Is your initial contribution a single, squashed commit?


For code changes:

 Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?
 Have you written or updated unit tests to verify your changes?
 If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?
 If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?
 If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?

For documentation related changes:

 Have you ensured that format looks appropriate for the output in which it is rendered?

Note:
Please ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible.",REF
accumulo,2106,Make LogReader more discoverable,"Use the KeywordExecutable service to make wal-info (the WAL LogReader class) available as part of the Accumulo command line. Can be used by running:
accumulo wal-info
Closes #2100",REF
helix,1508,Fix ondemand rebalance flooding and log flooding caused by dangling jobs,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #1506, #1507
Description

 Here are some details about my PR, including screenshots of any UI changes:

This PR fixes 2 issues:

Ondemand rebalance flooding after TF IS removal. This is caused by an old problem. A jobConfig can exist for the previous iterations of a workflow, but the job doesn't exist in the job DAG. Because of runtime DAG refresh logic, such a jobConfig will cause the runtime DAG to be refreshed every time the pipeline runs. A new runtime DAG causes all the jobs to be reprocessed, and during processing, the cleanup logic is run for every job that has already completed. Before IS removal, the cleanup logic attempts to delete the IS again, which has no effect; in the new code, an onDemand rebalance is triggered instead.
This ""dangling job"" will not be removed, so the job dag refresh keeps on happening, which causes the ondemand rebalances to keep on firing.
Log flooding for jobs that miss target resources after TF IS removal. Similarly, ""dangling jobs"" can have missing target resources once their target resources are deleted. Before IS removal, this is not a problem because this log is only triggered when the job is first processed; now, the processing logic happens every pipeline (since it's config based, instead of IS based), so the log could keep on firing.

Tests

 The following is the result of the ""mvn test"" command on the appropriate module:

[INFO] Tests run: 1237, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4,907.142 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1237, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:21 h
[INFO] Finished at: 2020-11-03T13:22:54-08:00
[INFO] ------------------------------------------------------------------------

Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,3481,Remove redundant main from zoo-info-viewer tool,"removes instanceName and instanceId as command line options
improves KeywordStartIT to check for methods that have a main in addition to verifying legacy utilities keep a main
small doc improvements clarifying main usage in tools",REF
accumulo,1765,Issue #1742 - Added forEach to ScannerBase. Added test in ScannerIT.,,REQ
accumulo,1795,Read/Write config files consistently,"Use UTF-8 for all FileReaders and FileWriters
Use an InputStreamReader instead of a FileReader for reading class
path resources identified with a URL rather than a file name
This fixes a failure in some ITs, including VolumeIT, which reads a
class path resource, rather than a file
Ensure PropertiesConfigurations use read() and write() instead of
less convenient getlayout() methods to load/save",REF
accumulo,2234,Create AccumuloDataVersion,"Move data version from ServerConstants to AccumuloDataVersion and added
javadoc description
Create AccumuloDataVersion.get() for getting data version
Move other constants from ServerConstants to Constants
Rename ServerConstants to ServerDirs",REF
accumulo,2339,"Update parent POM, plugins, LICENSE","Update Apache parent POM to 24

Take advantage of enforcer rules built-in to Apache parent POM

Use minimalJavaBuildVersion and minimalMavenBuildVersion properties
Remove redundant enforcer checks in our POM


Remove redundant version information and plugin definitions from
Apache POM that aren't overridden

Update build plugin versions to latest

Sort BOM dependencies in dependencyManagement before others (a change
in behavior with latest sortpom-maven-plugin that's not possible to
override, but this makes more sense anyway)
Sort sortpom-maven-plugin's options, ensure blank lines are removed (a
change in the default that is overridable), and ensure space before
the closing slash on empty elements to keep it consistent with other
plugins that update the POM
Update spotbugs-related Random issues (and minor Random tweaks)

Always assign SecureRandom objects to SecureRandom variables, so
spotbugs doesn't flag them as insecure Random usages
Allow SecureRandom objects to be reused using a static final
instance for many classes, to avoid one-off object uses (usually
private, except for a public instance for sharing across ITs)
While fixing Random-related spotbugs issues, apply naming
consistently
Remove use of explicit SHA1PRNG implementation of SecureRandom,
preferring non-blocking native implementation (default), and relying
on users to configure their SecureRandom provider through Java
security settings if they want something different from the default
Remove incorrect attempts to try to seed SecureRandom objects with a
predictable seed (SecureRandom default implementation isn't
predictable, even with a specific seed, since it uses the OS's
native random source)
Remove unneeded spotbugs warnings suppressions
Use a fixed-length stream of random numbers in several places where
a loop was used to iterate a fixed number of times and the loop
variable wasn't needed
For the rare cases where we use a predictable random with a known
seed for testing, pass the seed in the constructor to avoid useless
initiationalization steps to do the initial seed only to
reinitialize immediately with a call to setSeed



Fix pom/license issues related to micrometer (re #2305)

Move metrics-related dependency versions and transitive dependency
exclusions into project's parent pom's dependencyManagement section
Update LICENSE to include CC0 artifacts used for metrics dependencies
Remove property for micrometer version that is only used once for the
micrometer BOM

Other

Rename incorrect filename RolllingStatsTest.java to
RollingStatsTest.java to match the class name RollingStatsTest
Update AuthenticationTokenTest to use IntStream.allMatch to loop until
a byte array is generated that isn't all zeros, instead of using
assertFalse, which has a (rare) chance of failing the test
unnecessarily",REF
helix,2097,Clean up after TestAuthValidator --  fix TestClusterAccessor,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#2096
#2093
Description

 Here are some details about my PR, including screenshots of any UI changes:

TestAuthValidator create 2 clusters testDefaultAuthValidator and testCustomAuthValidator. These 2 clusters are not cleaned up causing TestClusterAccessor. testGetClusters to fail.
Tests

 The following tests are written for this issue:

NA

The following is the result of the ""mvn test"" command on the appropriate module:
CU result:
testHelixViewAggregator(org.apache.helix.view.integration.TestHelixViewAggregator)
Link to issue: #2049
local run:

[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 183.686 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-view-aggregator ---
[INFO] Loading execution data file /Users/xialu/Documents/WorkSpace/helix/helix-view-aggregator/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: View Aggregator' with 15 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  03:09 min
[INFO] Finished at: 2022-05-27T22:28:57-07:00
[INFO] ------------------------------------------------------------------------


Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,3366,Handle exceptions during tablet metadata task,"Make sure to catch and log any errors when the tablet metadata verification task runs to check tablet metadata so that errors do not cause the task and server to halt.
This closes #3346",BUG
accumulo,1575,Skip restricted ports in TServer port search,"Fixes #1573. Includes debug logging for ports being skipped. This has been tested by running 4 TableServer instances on a single node using Uno. Debug logs added in this PR are below, clearly showing the reserved ports being skipped:
2020-03-28T15:04:31,877 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:9997. Error: Could not create ServerSocket on address /0.0.0.0:9997.
2020-03-28T15:04:31,883 [rpc.TServerUtils] DEBUG: Adding port 9999 to list of restricted ports
2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 10001 to list of restricted ports
2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 9997 to list of restricted ports
2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 9998 to list of restricted ports
2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 9995 to list of restricted ports
2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 12234 to list of restricted ports
2020-03-28T15:04:31,886 [rpc.TServerUtils] DEBUG: Adding port 0 to list of restricted ports
2020-03-28T15:04:31,886 [rpc.TServerUtils] DEBUG: During port search, skipping port 9998 as it is reserved for another service
2020-03-28T15:04:31,886 [rpc.TServerUtils] DEBUG: During port search, skipping port 9999 as it is reserved for another service
2020-03-28T15:04:31,886 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server
2020-03-28T15:04:31,887 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10000. Error: Could not create ServerSocket on address /0.0.0.0:10000.
2020-03-28T15:04:31,887 [rpc.TServerUtils] INFO : Unable to use port 10000, retrying. (Thread Name = Thrift Client Server)
2020-03-28T15:04:31,887 [rpc.TServerUtils] DEBUG: During port search, skipping port 10001 as it is reserved for another service
2020-03-28T15:04:31,887 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server
2020-03-28T15:04:31,887 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10002. Error: Could not create ServerSocket on address /0.0.0.0:10002.
2020-03-28T15:04:31,887 [rpc.TServerUtils] INFO : Unable to use port 10002, retrying. (Thread Name = Thrift Client Server)
2020-03-28T15:04:31,887 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server
2020-03-28T15:04:31,909 [tserver.TabletServer] INFO : address = ubdev:10003",BUG
accumulo,1599,Fix #1598 - Reduce MasterMetricsIT test resources.,,REF
accumulo,4260,fixes SplitRecoveryIT to work with newer columns,SplitRecoveryIT is a tricky test to maintain because it is testing upgrade code that deals with older metadata columns that Accumulo no longer recognizes.  This commit adjust the test to work with recent changes to the metadata schema in the elasticity branch.,BUG
accumulo,1868,Fixes #1867. Move authentication before attempting to create new Client object,"There are a few possible options on where we could authenticate so if anyone has feedback on a better way, let me know.
Results after the change:

The user stays as root since the wrong credentials were entered for the user 'jeff'.
Closes #1867",BUG
accumulo,3941,"rename DataLevel tableId() to metaTableId(), doc updates","Renames the DataLevel method tableId to metaTableId to help clarify that the id returned is the reference to the meta data that contain information for that level (USER points to metadata table, METADATA points to ROOT and ROOT point to ZooKeeper)
Also adds some javadoc to emphasize the level, meta data relationship for forLevel and forTable in TabletsMetadata",REF
accumulo,3099,Fix flaky AuthenticationTokenSecretManagerTest,"Part of the ID of the generated token is the issue date which is the current time in millis so this adds a 1 millisecond sleep in between token generation to guarantee the tokens will be unique.
This fixes #3075",BUG
accumulo,3824,Add tests to SampleIT for files with ranges,"This updates the sample ITs to test that sampling works correctly with fenced files and that only sample data that is in the given ranges will be returned on scans
This addresses part of #3766
Original comment: #3761 (comment)",REF
accumulo,3152,Improve JavaDocs for VolumeChooser classes,"Fixes: #3110
Added more documentation for implementations of the VolumeChooser.
Added property table and basic usage examples to PreferredVolumeChooser.
Fixed minor grammatical issues.",REF
helix,1899,add take/free instance(s) API,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#1896
Description

 Here are some details about my PR, including screenshots of any UI changes:

This change adds dummy APIs for take/free instance and the batch mode.
Tests

 The following tests are written for this issue:

NA

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
accumulo,2580,Convert defaultTimeoutSeconds() to defaultTimeout(),"This PR changes AccumuloITBase.defaultTimeoutSeconds() (which returns an int value representing the timeout to apply in seconds) to AccumuloITBase.defaultTimeoutDuration() (which returns a Duration to use for the timeout).
The motivation behind this change is it seems like it would be better to use a stronger, more specific type. In this case we are dealing with time, it seems like Duration makes sense instead of int. The seconds value returned by the current implementation of this method is eventually converted into a Duration anyways.",REF
accumulo,4126,ZooStore deferral time to use System.nanoTime(),"closes #4068

ZooStore now uses System.nanoTime() instead of System.currentTimeMillis()
Added TimeUnit param to unreserve()
Renamed 'defered' -> 'deferred'

Also have branch ready to be compared against elasticity if these changes are good (changes were also requested for AccumuloStore in elasticity)",REF
accumulo,3681,Remove getTabletHostingGoal method from TableOperations,"Remove the getTabletHostingGoal method from TableOperations as the information can now be retrieved with the more robust getTabletInformation method.
The shell command, getgoals, still works as before, but the GetTabletHostingGoalCommand was updated to use the new getTabletInformation method to retrieve the necessary information rather than the removed getTabletHostingGoal method.",REF
accumulo,3639,Adds IT that verifies scans see data written by concurrent writers,"The IT ensures that when there are concurrent writes, scans, and table operations that scans always see any data written before the scan started.",BUG
accumulo,3984,Fix TServerClient.getThriftServerConnection for compactor queue names,This fixes an issue introducted in #3951 where the Compactor and ScanServer now expose the ClientService. The issue fixed here is that #3951 did not account for the extra part in the compactor path in ZooKeeper that is used for the queue name.,BUG
helix,1487,Add a configuration option to allow enable/disable writing error log to ZK,"Issues


 My PR addresses the following Helix issues and references them in the PR description:
fix #1486


Description


 Here are some details about my PR, including screenshots of any UI changes:
Improve statusUpdateUtil log error to ZK by adding an option to enabled
it. By default, it would not log error to ZK. This is to avoid some
error code path that keep flooding ZK sever which cause DoS to Zk.
Such as HelixTaskExecutor onMessage creation messageHandler exception.


Tests


 The following tests are written for this issue:
TestStatusUpdateUtil


 The following is the result of the ""mvn test"" command on the appropriate module:


github passed.
https://github.com/apache/helix/runs/1344486165?check_suite_focus=true
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
opennlp,585,OPENNLP-1543 Add Polish abbreviation dictionary,"What does this PR do?

adds abb_PL.xml to opennlp-tools/lang
adds new test cases for the POL localization
adjusts and enhances existing test cases for the PL locale

Tasks
Thank you for contributing to Apache OpenNLP.
In order to streamline the review of the contribution we ask you
to ensure the following steps have been taken:
For all changes:


 Is there a JIRA ticket associated with this PR? Is it referenced
in the commit message?


 Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen ""-"" character.


 Has your PR been rebased against the latest commit within the target branch (typically main)?


 Is your initial contribution a single, squashed commit?


For code changes:

 Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?
 Have you written or updated unit tests to verify your changes?
 If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?
 If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?
 If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?

For documentation related changes:

 Have you ensured that format looks appropriate for the output in which it is rendered?

Note:
Please ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible.",REQ
helix,2234,Add new submodule meta client - a generic metadata client,"Issues
[WIP] This is a draft PR for meta client. It should be merged to a feature branch instead on master.

 My PR addresses the following Helix issues and references them in the PR description:

#2237
Description

 Here are some details about my PR, including screenshots of any UI changes:

This PR is the first change for MetaClient. It adds a metaclient submodule.
Tests

 The following tests are written for this issue:

NA
Tests will be added with implementations.

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
accumulo,2834,Provide getProperties method on Configuration that does not filter,"The getProperties method which takes a filter is inefficient when
you know that you want to get all properties or you know the names
of the properties. Provide a mechanism to get the properties w/out
using a filter",REF
accumulo,2397,Add consistency checks for lastFlushID and lastCompactID,"Fixes #2153
This PR addresses the following:

Creates a consistency check for getFlushID & lastFlushID
Creates a consistency check for getCompactionID & lastCompactID
Removes TODO relating to change
Fixes a minor misspelling in the area of the original change

In my changes I have created two try / catch blocks surrounding the getFlushID and getCompactionID assignments. One for each consistency check. I was not sure whether the NoNodeException should be thrown, logged or just printed. If anyone has any input regarding that, I would appreciate it.",BUG
accumulo,3028,fixes #2667 wait for metadata write in tablet close,,BUG
accumulo,1706,Related #1664. Allow Candidate batch size to be user configurable,"This is in relation to #1664. This allows the batch size for garbage collecting implemented in #1650 to be configurable.
After a discussion with @ctubbsii, I determined that I couldn't fully test out the upper limits (batch sizes of 64MB for example). With that in mind, I went ahead and made it configurable but kept it at its current default batch size.",REF
accumulo,2084,Add retry counter for log recovery with MinC,"Potential fix for #2035.
The issue with #2035 occurs at 
  
    
      accumulo/server/tserver/src/main/java/org/apache/accumulo/tserver/AssignmentHandler.java
    
    
         Line 175
      in
      30ce59f
    
  
  
    

        
          
           && !tablet.minorCompactNow(MinorCompactionReason.RECOVERY)) { 
        
    
  


If an iterator is misconfigured, this line will never complete and hang in MinorCompactor.java. This potential fix adds a retry counter (only a small amount of retries for testing purposes), solely used when the reason for the minor compaction is recovery. The exception thrown is just a placeholder for now.
The result from this change is the exception thrown allows the assignments to get rescheduled so other tablets can be loaded in.",BUG
accumulo,2224,Versioned Properties - refactored to address PR comments,"This replaces PR #2194 Refactored to address PR comments
This the first step in moving towards a refactored ZooKeeper property storage. Intended to replace using individual nodes in ZooKeeper to save properties to a versioned group that is stored on a ZooKeeper single node. The PR contains the changes that provide serialization / deserialization of the properties along with maintaining versioning information.
Designed to allow evolution of the storage scheme.
Provides a header that maintains schema version, data version, and timestamp.
Optional compression of the byte storage array.",REF
accumulo,1424, Fix check for Standalone properties file. Fixes #1168 ,Revert the revert for #1189 and cleanup the check to only throw error when appropriate.,BUG
helix,1870,Improve Purge Offline Instances API,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #1869
Description

 Here are some details about my PR, including screenshots of any UI changes:

The purgeOfflineInstances API is used to clean up the instance metadata in ZK that is left by offline instances. The API is only used during special use cases where a large amount of instance metadata is left uncleaned; instance metadata should usually be cleaned up manually.
As a cleanup API, purgeOfflineInstances has limitations: it cannot handle the case when participantHistory is missing. This is because purgeOfflineInstances uses the same underlying code as dropInstance. That means after one round of purging, race conditions could write unwanted data (such as messages) back to ZK, and they will never be cleaned up because participantHistory is no longer present.
This PR improves the API such that it will also purge any incomplete instance data, such as instance path without InstanceConfig or ParticipantHistory.
Tests

 The following tests are written for this issue:

Modified TestZkHelixAdmin.testPurgeOfflineInstances

The following is the result of the ""mvn test"" command on the appropriate module:

[INFO] Tests run: 1283, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,709.742 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1283, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-core ---
[INFO] Loading execution data file /home/nesun/helix/helix-core/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: Core' with 909 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:35 h
[INFO] Finished at: 2021-09-10T19:14:54-07:00
[INFO] ------------------------------------------------------------------------

Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,2214,Remove continue point from Garbage Collector,"Updated Garbage Collection code to no longer use a continue point when processing deletion candidates. The GC  now uses an iterator that lasts during the lifetime of a GC cycle.
The GarbageCollectionTest was updated to work with the update, as was the GC integration test.
Closes #1351",REF
accumulo,2377,Remove useless null checks/assignments,,REF
helix,2318,Fix rebalancer failure counter in async scenario,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #2062
Description

 Here are some details about my PR, including screenshots of any UI changes:

Async processes cannot propagate exceptions upwards, so we need to explicitly increment the failure counters during exception handling in the submission block. Since partial rebalance is turning into async, this PR fixes both the old problem (global rebalance missing rebalance failure counter) and the new problem.
Tests

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
httpcomponents-client,287,Fix the issues causing Kerberos/SPNego to fail,"At the beginning of the negotiate, no token is defined in ""WWW-Authenticate: Negotiate"".
Kerberos expects HTTP.",BUG
accumulo,3773,Remove unneeded chop compaction and split code,"This is a follow on to #3761 to clean up code that is no longer necessary. No-chop merge removes the need for chop compactions and splits are no longer necessary to be called from the manager anymore during deletions as files are instead fenced.
This closes #3769",REF
helix,2680,Implement the cross-zone-based stoppable check,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
#2655

Description

 Here are some details about my PR, including screenshots of any UI changes:
Implement the cross-zone-based stoppable check.
Add to_be_stopped_instances parameter in the API payload.
Modify the checks that will be affected by the to_be_stopped_instances. There are two checks that will be affected:

siblingNodesActiveReplicaCheck
perPartitionHealthCheck



Tests

 The following tests are written for this issue:
 mvn test -Dtest=TestInstancesAccessor,TestMaintenanceManagementService,TestInstanceValidationUtilInRest,TestPerInstanceAccessor -pl helix-rest && mvn test -Dtest=TestInstanceValidationUtil -pl helix-core

[INFO] Tests run: 45, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-rest ---
[INFO] Loading execution data file /Users/xiaxgao/IdeaProjects/helix_ps/helix-rest/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 94 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:13 min
[INFO] Finished at: 2023-10-27T00:53:55-07:00
[INFO] ------------------------------------------------------------------------


[INFO] Tests run: 24, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-core ---
[INFO] Loading execution data file /Users/xiaxgao/IdeaProjects/helix_ps/helix-core/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: Core' with 947 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  9.000 s
[INFO] Finished at: 2023-10-24T14:11:11-07:00
[INFO] ------------------------------------------------------------------------


(List the names of added unit/integration tests)

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
accumulo,4059,Make bulk import wait for in-progress bulk imports,closes #4001 and adds a wait step for the bulk import to be delayed until the bulk import files are different.,BUG
accumulo,2643,Separated tablet scan functions from TabletClientService into a new Thrift service,related to #2640,REF
helix,1550,Controller-side Task Current State Migration,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #1549 (Partially)
Description

 Here are some details about my PR, including screenshots of any UI changes:

To address excessive ZooKeeper reads caused by task framework CurrentState updates, it is proposed to move task framework CurrentStates to their separate path.
The change is divided to multiple phases. This is the first phase, where the main focus of the changes are on the controller side. These changes should be backward compatible, and should not break anything even without further changes on participant sides
Tests

 The following tests are written for this issue:

(List the names of added unit/integration tests)

 The following is the result of the ""mvn test"" command on the appropriate module:

[INFO] Tests run: 1250, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,108.977 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1250, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:25 h
[INFO] Finished at: 2020-12-01T12:14:17-08:00
[INFO] ------------------------------------------------------------------------

Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,1934,Stop recovery if tablet is being deleted,,BUG
accumulo,2876,Fix AccumuloConfiguration.get(String) to get Property by key,"Prior commit attempted to create a Property by enum value using the key.
Fixed this to call Property.getPropertyByKey instead.",BUG
accumulo,4007,Add Volume replacement test for logs,"VolumeUtil.switchVolumes is used to perform
volume replacement on LogEntry objects. However,
there was no test for it.
Related to #4004",REF
helix,2153,Add AclRegister interfaces and ClusterAccessor integration,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #2152
Description

 Here are some details about my PR, including screenshots of any UI changes:

This PR introduces the AclRegister interface, an interface that can be implemented with developers' choices of mechanisms on how ACL is created and registered. The implementation is then registered to the rest server, and it's called when clusters are created.
Tests

 The following tests are written for this issue:

TestAclRegister


The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

Rerun failed test in CI:
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 62.693 s - in org.apache.helix.integration.task.TestMaxNumberOfAttemptsMasterSwitch
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
accumulo,3476,Improve javadocs for the TabletFile interface,This improves the javadocs a bit for the new TableFile tInterface. I'm not the best at wording/descriptions so if anyone else has any ideas for improving the wording feel free to suggest changes.,REF
helix,1611,Eliminate redundant job context writes,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
Fixes #1608

Description

 Here are some details about my PR, including screenshots of any UI changes:
In this PR, the job context will only be written to ZK if it has been modified. Otherwise, there is no need to update the context information in the ZK.

Tests


 The following tests are written for this issue:
TestContextRedundantUpdates. testRunningJobContextNoUpdate
TestContextRedundantUpdates. testCompletedJobContextNoUpdate


 The following is the result of the ""mvn test"" command on the appropriate module:
Helix-core:


[INFO] Results:
[INFO]
[ERROR] Failures:
[ERROR] org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack.testLackEnoughInstances(org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack)
[ERROR]   Run 1: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:281 » Helix Failed to dr...
[ERROR]   Run 2: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:273 » Helix Cluster CLUS...
[INFO]
[INFO]
[ERROR] Tests run: 1257, Failures: 1, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:30 h
[INFO] Finished at: 2021-01-12T22:31:26-08:00
[INFO] ------------------------------------------------------------------------

The failed test passed when I run it individually.
mvn test -Dtest=""TestCrushAutoRebalanceNonRack""
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 32.54 s - in org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  38.523 s
[INFO] Finished at: 2021-01-13T09:25:26-08:00
[INFO] ------------------------------------------------------------------------

Helix-rest:
[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 104.468 s - in TestSuite
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:50 min
[INFO] Finished at: 2021-01-13T09:28:57-08:00
[INFO] ------------------------------------------------------------------------

Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,2225,Update Upgrader interface comments to include expected system state.,"Capture discussion on PR #2185 to update javadoc comments.
Doc update only - contains no code changes.",REF
struts,867,WW-5391 Add interface for VelocityManager extension point,"WW-5391
Allows applications to provide a completely custom VelocityManager",REQ
accumulo,3843,improves ComprehensiveIT and adjust sunny ITs,"This change adds a new security test to Comprehensive IT and moves some test from ReadWriteIT into comprehensive IT.  Each test in ReadWriteIT spins up a mini cluster, which takes a lot of time for really simple test.  Also remove the sunny tag from shell ITs as ComprehensiveIT now covers most of what thost test were covering, but using public API instead of shell.",REF
accumulo,3620,add feedback to zoo-prop-editor,"Updated zoo-prop-editor to provide feedback using log statements and improved exception messages as mentioned in PR #3445

adds log statements showing success on set
improved exception messages.
command exit with -1 on errors.",REF
accumulo,3960,Wire up majc queued and running metrics in Manager/CompactionCoordinator,Fixes #3619,REF
wicket,708,WICKET-7087: AjaxLazyLoadPanelTester not available in 10.0.0-M2,"Introduce wicket-extensions-tester module that currently provides only AjaxLazyLoadPanelTester
Add all **-tester modules to wicket-common-tests for better OSGi compatibility.",REF
commons-lang,965,Remove unnecessary statement in DurationFormatUtils,We don't need that conditions. Its always false and will never reach it.  And just because in the line 192 we assigns tmp to duration.,REF
accumulo,2297,Rework GC rest code in Monitor,"Make the GC rest code in Monitor return one list
Create GarbageCollectorStats object to replace GarbageCollectorCycle
Drop unused rest endpoints
Make GC page use datatables to display data
Closes #2285",REF
helix,2653,Fix partitionAssignment API failing due to NPE when no resource config,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

The PartitionAssignment API fails for waged clusters where a resource does not have a respective resource config defined for it in ZK.
This is the error that is shown to users:
{
  ""error"" : ""Failed to compute partition assignment: org.apache.helix.HelixException: getIdealAssignmentForWagedFullAuto(): Calculation failed: Failed to compute BestPossibleState!""
}

This is the error that is found in helix-rest logs (truncated)
2023/10/11 03:20:59.336 ERROR [HelixUtil] [qtp1938380262-5394685] [helix-rest] [] getIdealAssignmentForWagedFullAuto(): Failed to compute ResourceAssignments!
java.lang.NullPointerException: null
at java.util.stream.Collectors.lambda$uniqKeysMapAccumulator$1(Collectors.java:177) ~[?:?]
at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169) ~[?:?]
at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655) ~[?:?]
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484) ~[?:?]
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) ~[?:?]
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913) ~[?:?]
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:?]
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578) ~[?:?]
at org.apache.helix.util.HelixUtil.getAssignmentForWagedFullAutoImpl(HelixUtil.java:318) ~[helix-core-1.1.1-dev-202303311728.jar:1.1.1-dev-202303311728]
at org.apache.helix.util.HelixUtil.getTargetAssignmentForWagedFullAuto(HelixUtil.java:219) ~[helix-core-1.1.1-dev-202303311728.jar:1.1.1-dev-202303311728]

Description

 Here are some details about my PR, including screenshots of any UI changes:

partitionAssignment API fails for clusters where resource configs aren't set due to NPE. This NPE occurs because getResourceConfig() will return null if the resource config does not exist, which is then added into the wagedResourceConfigs list. The below code is where the NPE occurs as one of the items in the list is null.
      dataProvider.setResourceConfigMap(resourceConfigs.stream()
          .collect(Collectors.toMap(ResourceConfig::getResourceName, Function.identity())));

Tests


 The following tests are written for this issue:
No new unit tests. But I did test this by deploying helix-rest locally to confirm that the partitionAssignment API worked after the change


The following is the result of the ""mvn test"" command on the appropriate module:


$mvn test -o -Dtest=TestResourceAssignmentOptimizerAccessor -pl=helix-rest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-rest ---
[INFO] Loading execution data file /Users/gspencer/Desktop/git-repos/helix/helix-rest/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 92 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  54.333 s
[INFO] Finished at: 2023-10-10T21:11:40-07:00
[INFO] ------------------------------------------------------------------------",BUG
accumulo,4120,Return non-merged view of System config,"Closes #4095

Added getSystemProperties() to InstanceOperations which functions similary to getTableProperties() and getNamespaceProperties() from TableOperations and NamespaceOperations.
Added its implementation in InstanceOperationsImpl.
Added a test getSystemPropertiesTest() to PropStoreConfigIT to test that the new method functions as intended.",REF
helix,1764,Remove unused field in ZKHelixDataAccessor - code clean with no logic change,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#1755
Description

 Here are some details about my PR, including screenshots of any UI changes:

 _instanceType is never used in ZKHelixDataAccessor.
Tests

 The following tests are written for this issue:

NA

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
zookeeper,1992,ZOOKEEPER-4682. Make FileSnap.deserialize a static method,"FileSnap.deserialize is effectively a static method. Change it to a static method so that we don't need to do some new FileSnap(null) hacks for workaround calling this method.
a.k.a. pay back some tech debt.",REF
accumulo,3987,Fixes compaction property log message bug,"Fixes an incorrect logging statement from appearing during normal startup conditions when processing service.<service>.planner compaction properties.
Bug was introduced in #3915.
Log message:
[main] WARN  org.apache.accumulo.core.util.compaction.CompactionServicesConfig [] - Ignoring compaction property default.planner as does not match the prefix used by the referenced planner definition

Steps to replicate bug:

git checkout main
Run any of the tests in CompactionServicesConfigTest
See the log message in the output.",BUG
helix,1834,Add TF Available Threads Metrics,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #1833
Description

 Here are some details about my PR, including screenshots of any UI changes:

There is no existing metrics about Task Framework available threads. Certain production issues are caused by simple reasons such as out of threads, and in order to spot those reasons, developers have to spend time reading through logs.
With metrics for available threads, grouped by job types and aggregated on the cluster level, it's now easy for developers to find the thread availability of any cluster.
Tests

 The following tests are written for this issue:

TestClusterStatusMonitor.testRecordAvailableThreadsPerType

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
accumulo,3322,"Upgrader for version 4.0.0, set hosting goals on existing  tablets",Closes #3305,REQ
accumulo,2752,Improve use of Futures in Gatherer,"Attempt to fix #2696. This replaces the complicated mutation retry logic in Gatherer with a more structured/algebraic approach.
This new approach is recursive. Making the recursive call asynchronously should prevent a stack overflow (it does in the tests that I've run), since the task is submitted to the common ForkJoinPool rather than being called directly. This probably imposes a performance penalty, but I don't know how that compares to the cost of the I/O in this codepath.",REF
accumulo,1304,Fix #1281 Update TabletTime.maxMetatdataTime,"Replaced string processing with MetadataTime objects.
Renamed MetadataTime class method valueOf(char) to getType(char) .  The valueOf was confusing and didn't really make sense once it was pulled from the ENUM TimeType class.",REF
accumulo,3244,Alternate time wait calculation using nanos,"Reworks time delay calculation to use delta between nano time samples.
Follow-on to #3167",REF
helix,2549,MultiThreading Stress Test Lattice - Puppy Logic and Skeleton (Part 1),"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#2237
Description

 Here are some details about my PR, including screenshots of any UI changes:

The skeleton / logic of the multithreading stress testing. We are using a concept called ""puppies"" to add in chaos to stress testing. Each puppy that extends the AbstractPuppy class represents one action (i.e. zk.CreatePuppy will create nodes in zk at specified path). The PuppyManager manages puppys by executing them and stopping them when indicated time limit is reached.
Tests

 The following tests are written for this issue:

n/a

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
struts,323,Improve SecurityMemberAccess,"Move public member check to be the first performed
Remove final-s from methods to allow overriding
Split check for statics into two separate methods",REF
helix,2127,Add HelixEventHandlingUtil and use that util for cloud event - Add API,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
#2133

Description

 Here are some details about my PR, including screenshots of any UI changes:

Previously helix event handling depends on batch enable/disable instance. We would like to move away the dependence on generic batch enable/disable instance and use a dedicated Util only for event handling use case.
Tests

 The following tests are written for this issue:

This change only adds PAI signature. Will add test in following PR for API impl.

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
helix,2597,Stabilize TestCardDealingAdjustmentAlgorithmV2 -  sequence all tests,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
#2227

Description

 Here are some details about my PR, including screenshots of any UI changes:

There is a static object created by each tests in the test class. Some test changes this object. sequence all tests to Stabilize.
The test falls more often at metaclient branch.
Tests

 The following tests are written for this issue:

NA

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,3996,Add retry and logging to CloseScannerIT,"This PR adds a retry to the condition we are testing for once all scanners are closed. I also added logs when the condition does not pass.
I am not sure why the condition in the test is checking that the number of scans is less than 3. If anyone has insight on this maybe we can create a variable name for this number or a comment. I tried changing the condition to check that there are 0 scans and still could not get it to fail locally.
This IT has failed twice recently:

https://ci-builds.apache.org/job/Accumulo/job/main/org.apache.accumulo$accumulo-test/611/testReport/junit/org.apache.accumulo.test/CloseScannerIT/testManyScans/
https://ci-builds.apache.org/job/Accumulo/job/main/org.apache.accumulo$accumulo-test/605/testReport/junit/org.apache.accumulo.test/CloseScannerIT/testManyScans/

Error Message
expected: <true> but was: <false>
Stacktrace
org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:180)
	at org.apache.accumulo.test.CloseScannerIT.testManyScans(CloseScannerIT.java:70)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.api.AssertTimeoutPreemptively.lambda$submitTask$3(AssertTimeoutPreemptively.java:95)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)",BUG
accumulo,2112,Improve LocalityGroupUtil.java,"To address issue #2041, this commit contains minor changes to utilize Map.forEach() method instead of Map.entrySet().",REF
helix,2641,CUSTOM_INSTANCE_CHECK and(or) CUSTOM_PARTITION_CHECK optional for stoppable APIs,"Allow for callers to helix-rest stoppable APIs to skip running CUSTOM_INSTANCE_CHECK and(or) CUSTOM_PARTITION_CHECK, as they may not have the need to implement additional custom checks.
Description
Customers are required to implement custom stoppable checks to use helix-rest stoppable APIs. Making these skippable removes that requirement.
Tests

 testGetInstanceStoppableCheckWhenCustomInstanceCheckAndCustomPartitionCheckDisabled

Verifies none of the custom checks cause stoppable to be false


 testGetInstanceStoppableCheckWhenCustomPartitionCheckDisabled

Verifies instance custom check causes stoppable to be false


 testGetInstanceStoppableCheckWhenCustomInstanceCheckDisabled

Verifies partition custom check causes stoppable to be false


 Update TestPerInstanceAccessor and TestInstanceAccessor to make sure they can parse skipHealthCheckCategories

➜  helix git:(custom_stoppable_checks_optional) ✗ mvn clean install -Dmaven.test.skip.exec=true && mvn test -o -Dtest=TestMaintenanceManagementService,TestInstancesAccessor,TestPerInstanceAccessor -pl=helix-rest

...

[INFO] Tests run: 37, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 127.184 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 37, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-rest ---
[INFO] Loading execution data file /Users/zapinto/Documents/git/zpinto/helix/helix-rest/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 92 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:19 min
[INFO] Finished at: 2023-10-04T18:59:33-07:00
[INFO] ------------------------------------------------------------------------

Changes that Break Backward Compatibility (Optional)

Changes are backwards compatible

Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
accumulo,2612,Minor cleanup of ThriftTransportPool,"Remove unnecessary memoization of the checker thread
Inline the Closer Runnable type and make it a lambda
Use primitive long for ERROR_THRESHOLD
Reorder all the class members before all the inner-classes, and place
the fields above the methods to make it easier to navigate the class
Make constructor private and use a static method to construct and
start the checker thread after construction, then return the instance
Make ThriftTransportPool immutable by passing in the maximum age of
idle transports, rather than setting it after it is constructed; this
also changes the default to the general purpose RPC timeout config
value for all servers, rather than just the manager; clients continue
to use the hard-coded 3 seconds, just as before this change",REF
accumulo,2374,Cache the credentials because they are expensive to fetch,"See the discussion and the thread dumps at https://lists.apache.org/thread/rwt4nomkmhty1dy4tsp620sf49o3qnbx
Without this improvement  org.apache.accumulo.test.functional.ConcurrentDeleteTableIT takes 785.503 s on my machine, and I need to use -Dtimeout.factor=3 to pass.
With this improvement the test now passes in 127.771 s, i.e. almost 6 times faster!
""tablet migration-Worker-1"" #4380 daemon prio=5 os_prio=0 cpu=68425.44ms elapsed=75.42s tid=0x0000fffeac074800 nid=0x33077e runnable  [0x0000fffe8f3fd000]
   java.lang.Thread.State: RUNNABLE
        at sun.security.provider.SHA5.implCompressCheck(java.base@11.0.11/SHA5.java:232)
        at sun.security.provider.SHA5.implCompress(java.base@11.0.11/SHA5.java:221)
        at sun.security.provider.DigestBase.engineUpdate(java.base@11.0.11/DigestBase.java:124)
        at java.security.MessageDigest$Delegate.engineUpdate(java.base@11.0.11/MessageDigest.java:623)
        at java.security.MessageDigest.update(java.base@11.0.11/MessageDigest.java:345)
        at org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(Sha2Crypt.java:421)
        at org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(Sha2Crypt.java:585)
        at org.apache.commons.codec.digest.Crypt.crypt(Crypt.java:78)
        at org.apache.commons.codec.digest.Crypt.crypt(Crypt.java:167)
        at org.apache.accumulo.server.security.SystemCredentials$SystemToken.hashInstanceConfigs(SystemCredentials.java:120)
        at org.apache.accumulo.server.security.SystemCredentials$SystemToken.generate(SystemCredentials.java:125)
        at org.apache.accumulo.server.security.SystemCredentials.get(SystemCredentials.java:66)
        at org.apache.accumulo.server.ServerInfo.getCredentials(ServerInfo.java:179)
        at org.apache.accumulo.server.ServerInfo.getPrincipal(ServerInfo.java:148)
        at org.apache.accumulo.server.ServerInfo.getProperties(ServerInfo.java:169)
        at org.apache.accumulo.core.clientImpl.ClientContext.getProperties(ClientContext.java:236)
        at org.apache.accumulo.core.clientImpl.ClientContext.createScanner(ClientContext.java:635)
        at org.apache.accumulo.core.metadata.schema.TabletsMetadata$Builder.buildNonRoot(TabletsMetadata.java:177)
        at org.apache.accumulo.core.metadata.schema.TabletsMetadata$Builder.build(TabletsMetadata.java:125)
        at org.apache.accumulo.core.metadata.schema.AmpleImpl.readTablet(AmpleImpl.java:46)
        at org.apache.accumulo.core.metadata.schema.Ample.readTablet(Ample.java:141)
        at org.apache.accumulo.tserver.tablet.Tablet.closeConsistencyCheck(Tablet.java:1379)
        at org.apache.accumulo.tserver.tablet.Tablet.completeClose(Tablet.java:1331)
        - locked <0x00000000f1585830> (a org.apache.accumulo.tserver.tablet.Tablet)
        at org.apache.accumulo.tserver.tablet.Tablet.close(Tablet.java:1221)
        at org.apache.accumulo.tserver.UnloadTabletHandler.run(UnloadTabletHandler.java:92)
        at io.opentelemetry.context.Context.lambda$wrap$1(Context.java:207)
        at io.opentelemetry.context.Context$$Lambda$209/0x000000010035c840.run(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.11/ThreadPoolExecutor.java:1128)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@11.0.11/ThreadPoolExecutor.java:628)
        at io.opentelemetry.context.Context.lambda$wrap$1(Context.java:207)
        at io.opentelemetry.context.Context$$Lambda$209/0x000000010035c840.run(Unknown Source)
        at java.lang.Thread.run(java.base@11.0.11/Thread.java:829)",REF
opennlp,502,OPENNLP-1468 Simplify test assertions in JUnit tests,"Thank you for contributing to Apache OpenNLP.
In order to streamline the review of the contribution we ask you
to ensure the following steps have been taken:
For all changes:


 Is there a JIRA ticket associated with this PR? Is it referenced
in the commit message?


 Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen ""-"" character.


 Has your PR been rebased against the latest commit within the target branch (typically main)?


 Is your initial contribution a single, squashed commit?


For code changes:

 Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?
 Have you written or updated unit tests to verify your changes?
 If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?
 If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?
 If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?

For documentation related changes:

 Have you ensured that format looks appropriate for the output in which it is rendered?

Note:
Please ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible.",REF
helix,2588,Add API for Instance evacuation,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
#2589

Description

 Here are some details about my PR, including screenshots of any UI changes:
This change adds API only for to-be-removed host.

Tests


 The following tests are written for this issue:
Edit TestPerInstanceAccessor.updateInstance


The following is the result of the ""mvn test"" command on the appropriate module:


(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
accumulo,2727,Simplify config handling for compaction tests,"In pom.xml files:

ensure unit tests configured to run without reusing forks explicitly
override any other includes

In compaction tests:

avoid use of mock object for AccumuloConfiguration when
DefaultConfiguration or ConfigurationCopy will suffice
use static import for EasyMock
Remove unnecessary parameter in test class for AccumuloConfiguration
(retrieve from mocked context object instead)
use var in a few places where it made sense

Avoid UnsupportedOperationException in AccumuloConfiguration:

Make AccumuloConfiguration.isPropertySet abstract and add missing
implementation
Remove unnecessary anonymous inner class subclass instances of
AccumuloConfiguration when ConfigurationCopy initialized with
DefaultConfiguration would suffice

Small Compaction constructor improvements:

Remove redundant constructor code in Compactor and
CompactionCoordinator and ensure code uses the provided
AccumuloConfiguration from tests for all tasks",REF
accumulo,3297,"fix metrics tags, tserver hostname, remove tags from thrift metrics","Fixes tserver initialization so host name and port are reported in metrics
remove extra tags from thrift metrics
Update opentelemetry and micrometer versions
update test to check tag length is sane.
Includes fix for tag length submitted as PR #3296

Currently, tserver metrics tags do not include the host and there are extra tags on the thrift metrics.  Currently the tags are reported as:
METRICS, name: 'accumulo.thrift.idle' num tags: 4, tags: {process.name=tserver, server=TabletServer, Address=0.0.0.0, thread=Thrift Client Server}
METRICS, name: 'accumulo.thrift.idle' num tags: 4, tags: {process.name=tserver, server=TabletServer, Address=0.0.0.0, thread=Thrift Client Server}
METRICS, name: 'accumulo.thrift.idle' num tags: 4, tags: {process.name=manager, server=Manager, Address=server1 thread=Manager Client Service Handler}
METRICS, name: 'accumulo.tserver.scans.files.open' num tags: 3, tags: {process.name=tserver, statistic=value, Address=0.0.0.0}
METRICS, name: 'accumulo.tserver.compactions.majc.queued' num tags: 4, tags: {process.name=tserver, statistic=value, Address=0.0.0.0, id=i.meta.huge}



This update changes the global tags to always include the host and the port number:
METRICS, name: 'accumulo.thrift.idle' num tags: 3, tags: {process.name=tserver, port=32779, host=server1}
METRICS, name: 'accumulo.thrift.idle' num tags: 3, tags: {process.name=tserver, port=39729, host=server1}
METRICS, name: 'accumulo.thrift.idle' num tags: 3, tags: {process.name=manager, port=43165, host=server1}
METRICS, name: 'accumulo.tserver.scans.files.open' num tags: 4, tags: {process.name=tserver, statistic=value, port=32779, host=server1}
METRICS, name: 'accumulo.tserver.compactions.majc.running' num tags: 5, tags: {process.name=tserver, statistic=value, port=32779, host=server1, id=i.root.huge}

Co-authored-by: NAME @ddanielr",BUG
accumulo,1925,Move String intern code and make it generic,"Create an Interner class that implements a deduplicating intern
function for any object type. Add corresponding unit test, and
convert TabletLocator's custom WeakHashMap over to use this
instead.",REF
accumulo,2407,Correct user-facing misspellings (Part 2),"This pull request serves to correct more mistakes in potential user-facing areas.
In my first PR regarding misspellings (#2400), I did not include mistakes found in Javadocs. Most of the corrections in this PR focus on Javadoc as well as a few other mistakes that were overlooked in the original.
This will be my final PR that focuses on misspellings.",BUG
accumulo,3392,fixes race condition in metadata consistency check,"While looking into #3386 I noticed the Accumulo metadata consistency check was incrementing a counter in the incorrect place.  It should increment before writing to the metadata table, but it does not. This could cause the check to report false postives.  The false positive in the case would be transient and should not repeat on subsequent checks.
Also noticed a redundant check when deciding if the file should be added to the set of in memory files.  AFICT this redundant check is harmless, but it could cause problems for future changes.",BUG
accumulo,4011,Move code from Manager class to compaction coordinator,"As an initial step for #4005, introduces an interface for the compaction coordination service in the manager.  Everything in the manager uses this interface to interact with the compaction coordinator.  In order to make this change metrics and compaction queues were moved from manager code to the compaction coordinator code.  Both of these changes were
good for encapsulation.   Hopefully further changes for #4005 lead to
more encapsulation and less code in the Manager class.",REF
helix,2580,Lattice LockClient LockInfoSerializer Implementation,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

LockClient currently uses ZNRecord serializer. Abstracting away any zookeeper specifics and keeping the code easier to understand, LockInfoSerializer is created to serialize and deserialize the LockInfo object used in LockClient.
Furthermore, the old LockInfo structure would show the simplefields as their own separate fields in ZooKeeper. Changing that so the ZNRecord represents all parameters of the lock in ZooKeeper as a field in SimpleFields.
Description

 Here are some details about my PR, including screenshots of any UI changes:

Created the LockInfoSerializer which extends the ZNRecordSerializer. Modified LockClient to use this serializer and updated the LockClient test case to show that it works.
Modified the LockInfo object so that all fields appear as fields in simplefield in Zookeeper as opposed to it's own separate field.
Tests

 The following tests are written for this issue:

LockClientTest.java

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
helix,1534,Fix several tests with resource leakage,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

fix #1226
Description

 Here are some details about my PR, including screenshots of any UI changes:

Fix several tests with resource leakage
Tests

 The following tests are written for this issue:

(List the names of added unit/integration tests)

 The following is the result of the ""mvn test"" command on the appropriate module:
github run pending

Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,4063,Remove active FateTx constraint for bulk import,"Removes the active FateTx ID constraint for metadata mutations when creating bulk import file markers.
Also changes the MutationsRejectedException to return the violation type code.
closes #4047",REF
accumulo,2408,Attempt to verify that MAC processes are up and running in start,Closes #1897,REF
accumulo,3047,Log the client address when FrameBuffer read or write methods return false,"When FrameBuffer read and write methods return false it MAY be due to an error. Log at trace level the client address that it was trying to read from or write to. This will allow the user to modify the log level at runtime when they are seeing FrameBuffer errors being logged to try and identify the client.
Closes #3042",BUG
commons-lang,634,NumberUtilsTest - incorrect types in min/max tests,"Some of the tests related to finding min and max values does not have types declared. As a result min/max of value int methods are being tested multiple times without invoking target methods byte, long etc.
I fixed types and added casting where required.",BUG
accumulo,1761,Refactor TabletGroupWatcher,"Create TabletLists to hold the many different data structures being
tracked in the run method of TabletGroupWatcher
Create methods for some of the logic in the switch case
Pass TabletLists to the flush method and break flush into methods
Rename TabletLocationState.getServer() to getLocation() as location is
a more meaningful name instead of server",REF
helix,2579,Lattice Puppy Stress Test Race Condition Fix and Code Cleanup,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

There was a race condition where the threads running the specific puppies would terminate, leading to the created znodes to be deleted. Because there were listeners on those nodes, they would increase the event change counter when the threads had already finished, causing the tests to fail.
Code cleanup stems from bug: #2577
Description

 Here are some details about my PR, including screenshots of any UI changes:

Removed the cleanup section of the CRUD puppies (as cleanup will happen in the test case). Many of the cleanups weren't necessary and the ones that were (for CreatePuppy) was what caused the race condition.
Re-structured code in AbstractPuppy for less redundancy and modified some print statements for easier readability.
Tests

 The following tests are written for this issue:

TestMultiThreadStressZKClient.java

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,2608,Accumulo Start JUnit5 conversion,Converts Accumulo-start module from JUnit4 to JUnit5.,REF
accumulo,4024,Fix MemoryStarved ITs,"Rewrite MemoryConsumingIterator's method to compute the amount of memory to consume, so that:

The implementation is more comprehensible
Replace exception with bounds checking
Avoid allocating more than necessary (a single byte is sufficient)
The log message includes the amount of used memory detected
The waiting message appears, even when memory was allocated, because that's the behavior
Give the GC more time to detect the changed GC condition before trying to detect the low memory condition

Also, remove hard-coded comments for size of heap and incorrect interval frequency, and increase the configured free memory threshold, so that the memory percentage isn't so low, it doesn't get lower than the minimum that G1GC needs to do its job by default on a 256K VM.
This fixes #3868
Also include trivial fixes:

Fix deprecation warning issues for getSplitCreationTime by making impl class deprecated instead of suppressing the interface deprecation, and use regular deprecations, not forRemoval=true, which complicates the way deprecations get inherited (see comments on #3977)
Remove unused Logger",REF
accumulo,2496,Modify ZooKeeperTestingServer to use Junit TemporaryFolder,"Modify ZooKeeperTestingServer to use Junit TemporaryFolder
for creating the ZooKeeper data directory instead of /tmp.
Related to #2474",REF
accumulo,3154,Modify FilePrefix.fromPrefix to be more dynamic,,REF
accumulo,1945,Create readTablets method in Ample. Closes #1473,"Modify TabletsMetadata to impl readTablets in Ample
Modify classes calling TabletsMetadata to pass the client object as
part of the builder init, instead of the final build method
Add testAmpleReadTablets to MetadataIT

Co-authored-by: cradal 20303105+cradal@users.noreply.github.com
Updated version of #1651",REF
commons-collections,317,moved IndexFilter to its own file.,Partial fix for Collections 821,REF
helix,2392,check connnect only called once,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#2393
Description

 Here are some details about my PR, including screenshots of any UI changes:
This change adds an extra check in ZkClient.connect so that it will only be invoked once.
Also avoid close called in between of isclosed check and connection establishment in connect().

Tests

 The following tests are written for this issue:

NA

The following is the result of the ""mvn test"" command on the appropriate module:

[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 337.691 s - in org.apache.helix.rest.server.TestResourceAssignmentOptimizerAccessor
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
[INFO] 


Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,2490,Changes to ExternalCompaction ITs,"Added CompactionCoordinator and Compactor to MiniAccumuloCluster. Modified ITs
to extend SharedMiniClusterBase so that MAC was not being restarted for each
test method.",REF
accumulo,4201,fixes periodic failure with CompactionIT,The test CompactionIT.testConcurrentSplit() would periodically fail because it relied on the old behavior of WaitFor.  Changed the test to use custom code that waits up to three seconds for a condition to be met and then continues.,BUG
helix,1620,Per Replica Throttle -- 1st: Skeleton implementation with output message same as input,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

enhance #343; first part skeleton.
Description

 Here are some details about my PR, including screenshots of any UI changes:

First part of Per Replica throttling, skeleton.
Per replica throttling replacing intermediate stage which is partition based. The finer granularity
would skip boosting unnecessary replica in a recovery partition.
Tests

 The following tests are written for this issue:

(List the names of added unit/integration tests)

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,2987,Fixes for new Admin fate command,Closes #2974,BUG
accumulo,2895,Improvements to AESCryptoService,"Reduce Cipher.getInstance calls to once per file vs once per block
Move wrap cipher to ThreadLocal thread
Add flush at the end of createCryptoParameters() before returning the byte array
Add logger and init checks",REF
helix,2352,Refactoring MetaClient Exceptions,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

N/A
Description

 Here are some details about my PR, including screenshots of any UI changes:

Moving exception classes into a separate package: org.apache.helix.metaclient.exception
Tests

 The following tests are written for this issue:

(List the names of added unit/integration tests)

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
helix,2555,ZkClient - only register one time watcher for read data when not using persist listener.,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#2554
Description

 Here are some details about my PR, including screenshots of any UI changes:

Fix issue 2554.
ZkClient tries to resubscribe one time watcher when reading an entry that has listener subscribed. In metaclient use case, we do not need to resubscribe as we are using persist watcher.
This change checks is persist watcher label is true. Only resubscribe if not using persist watcher.
Tests


 The following tests are written for this issue:
TestZkMetaclient.testChangeListener()
This new test was constantly failing before the fix.


The following is the result of the ""mvn test"" command on the appropriate module:


(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,3659,"make option exclude-parent-properties, other minor clean-up","Change command option from exclude-parent to exclude-parent-properties for clarity.
clarify command description present to uses
comment clean-up

From additional comment in PR #3562 made after merge.",REF
helix,2333,Prepare zkclient for meta-client DataChangeListener implementation,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
N.A.

Description

 Here are some details about my PR, including screenshots of any UI changes:
Some new features and improve in zookeeper-api to prepare meta-client implementation.


Add a new method in IZkDataListener and a converter class in ZkMetaClient so that it's easier to reuse existing zkclient.
Implement connectOnInit flag (backward compatible) to control whether zkclient should connect during initialization. (Meta-client API will require a separate connect() method to be called explicitly to connect.)
Minor change in the code flow, constructor and ZkClientMonitor.

Tests


 The following tests are written for this issue:


The following is the result of the ""mvn test"" command on the appropriate module:
[INFO] Reactor Summary for Apache Helix 1.0.5-SNAPSHOT:
[INFO]
[INFO] Apache Helix ....................................... SUCCESS [  3.743 s]
[INFO] Apache Helix :: Metrics Common ..................... SUCCESS [  4.606 s]
[INFO] Apache Helix :: Metadata Store Directory Common .... SUCCESS [  3.312 s]
[INFO] Apache Helix :: ZooKeeper API ...................... SUCCESS [  6.523 s]
[INFO] Apache Helix :: Helix Common ....................... SUCCESS [  2.037 s]
[INFO] Apache Helix :: Core ............................... SUCCESS [ 18.894 s]
[INFO] Apache Helix :: Admin Webapp ....................... SUCCESS [  2.963 s]
[INFO] Apache Helix :: Restful Interface .................. SUCCESS [  6.143 s]
[INFO] Apache Helix :: Distributed Lock ................... SUCCESS [  1.735 s]
[INFO] Apache Helix :: HelixAgent ......................... SUCCESS [  2.277 s]
[INFO] Apache Helix :: Recipes ............................ SUCCESS [  0.043 s]
[INFO] Apache Helix :: Recipes :: Rabbitmq Consumer Group . SUCCESS [  2.419 s]
[INFO] Apache Helix :: Recipes :: Rsync Replicated File Store SUCCESS [  2.026 s]
[INFO] Apache Helix :: Recipes :: distributed lock manager  SUCCESS [  2.317 s]
[INFO] Apache Helix :: Recipes :: distributed task execution SUCCESS [  2.331 s]
[INFO] Apache Helix :: Recipes :: service discovery ....... SUCCESS [  2.548 s]
[INFO] Apache Helix :: View Aggregator .................... SUCCESS [  1.638 s]
[INFO] Apache Helix :: Meta Client ........................ SUCCESS [  1.241 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:08 min
[INFO] Finished at: 2023-01-05T13:18:08-05:00
[INFO] ------------------------------------------------------------------------


(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
wicket,604,[WICKET-7070] quickstart should be fixed,,BUG
helix,2488,add leader election API and dummy class,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
#2237

Description

 Here are some details about my PR, including screenshots of any UI changes:

This change adds leader election API and dummy class
Tests

 The following tests are written for this issue:

(List the names of added unit/integration tests)

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
helix,2470,code clean up - debug log format,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

#1521
Description

 Here are some details about my PR, including screenshots of any UI changes:

We no longer need to do isDebugEnabled check in slf4j.Logger. It is already had performance improvement integrated.
Tests

 The following tests are written for this issue:

NA

The following is the result of the ""mvn test"" command on the appropriate module:

(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
struts,477,[WW-5119] Fix: remove contention during localized text lookup (JDK 1.7+),"Backport of pull request #476 for Struts 2.5.x (JDK 1.7 still supported in this branch).
The ConcurrentHashMap.newKeySet() usage (available only in JDK 1.8+) is replaced by a ConcurrentHashMap<String,Boolean> to guarantee JDK 1.7 compatibility.
Fixes WW-5119",BUG
accumulo,3723,increases max wait time for ZK update retry,,REF
accumulo,3870,Use prevEndRow from Extent in ConditionalTabletMutator,Fixes #3356,BUG
accumulo,2646,Replace iterator usage,"I was looking through places where the use of Scanner.Iterator might be improved by using the new Scanner.stream method and found a few patterns to replace that seemed worth-while.

In a lot of places, we create an interator, assert that the iterator hasNext, get the next entry, compare that entry to what we expect it to be, then assert that hasNext is false. All this to make sure there is just one entry. To simplify I changed these places to .stream().collect(onlyElement()) and then perform the assertEquals on the single returned value.
Convert Iterators.size(s.iterator()) == 0 -> s.stream().findAny().isEmpty()
Convert Iterators.size(s.iterator()) > 0 -> s.stream().findAny().isPresent()

I also wanted to see if anyone had an opinion on which of the following equivalent options is better:

scanner.stream().map(Entry::getValue).map(Value::get).map(String::new).map(Integer::parseInt).collect(onlyElement());
scanner.stream().map(entry -> Integer.parseInt(new String(entry.getValue().get()))).collect(onlyElement());

I have both in these changes. To me, one does not seem significantly, different/more readable than the other so I thought I would ask.",REF
struts,861,[WW-5388] Uses the latest JakartaEE FileUpload Servlet 6 package,Closes WW-5388,REF
accumulo,1346,Java 11 improvements to ConditionalWriterImpl,,REF
accumulo,1404,Add example of client to javadoc,,REF
accumulo,3977,Mark TabletStatistics.getSplitCreationTime as deprecated,,REF
commons-lang,269,LANG-1337: Fix test failures in IBM JDK 8 for ToStringBuilderTest by specifying the ArrayList initial capacity.,"See https://issues.apache.org/jira/browse/LANG-1337 for issue description and explanation of the changes here.
In summary, we specify the ArrayList's initial capacity, this way the String built through reflection has the expected value. Tested with Oracle JDK 7 and 8, and IBM JDK 8.",BUG
accumulo,3599,Replace ConcurrentHashMap with Caffine cache for configs,Using a cache instead of a map to ensure that configs are eventually cleaned up on deletions. The issue was raised in PR #3588,REF
commons-io,468,Spelling,"https://issues.apache.org/jira/browse/IO-806
This PR corrects misspellings identified by the check-spelling action.
The misspellings have been reported at https://github.com/jsoref/commons-io/actions/runs/5662536320#summary-15342653080
The action reports that the changes in this PR would make it happy: https://github.com/jsoref/commons-io/actions/runs/5662536436#summary-15342654674

I can fix the summaries to match the requested style, but at the moment I'm all out of available jobs and I'm waiting for the current jobs to finish.",BUG
accumulo,3036,speed up test using shared cluster instance,"This only changes the PropStoreSonfigIT test, with no other code changes.  Using a shared min instance in this test speeds up the my test runs by about 60 to 90 seconds and now completes in around 3:30.",REF
accumulo,2462,Added FaTE TStatus.SUBMITTED,"When a FaTE transaction is created in the Manager its status is set
to IN_PROGRESS even though it's not actually running, it could be
waiting to run. The output from the fate print command will show
that the newly created transaction is IN_PROGRESS and could be
confusing to users. This change introduces the SUBMITTED state, which
is the state of the transaction after it has been created but before
it is executed.",REQ
accumulo,2615,Add details to ZooKeeper watcher logs,"Add more details to the log messages produced while processing ZooKeeper
WatchedEvents. Also, try to standardize some messages by adding the
event at the end, after whatever core message is conveyed. Most of the
time, we won't see these messages, but it definitely helps to have
greater insight into what event triggered the situation, rather than
picking out and printing only certain details from the WatchedEvent.",REF
accumulo,2937,Combine CleanZookeeper and DeleteZooInstance utilities,"Combine the CleanZookeeper utility, which will delete all old instances, and the DeleteZooInstance utility, which deletes a single instance, into one utility class and use a flag to determine which action to take.
This is a follow on to #2807 and replaces PR #2925",REF
accumulo,3032,Handle closed filesystem,,BUG
helix,2710,Prevent the spectator routing table from containing SWAP_IN instances,"Issues

 not populate SWAP_IN replicas in routing tables until SWAP is completed to avoid spectator serving traffic for replicas on the swapping in instance. #2662

Description
During a swap operation, we are essentially creating a mirror node which is labeled with the SWAP_IN instance operation. Until the point that the swap operation is complete we do not want to serve traffic to this node. To achieve this, the RoutingDataCache will have a notion of routableInstanceConfigs and routableLiveInstances.
Only these nodes are used to create the routingTables. At this time, only SWAP_IN instances are considered not to be routable.
Tests

 Updated the swap tests in TestInstanceOperation to include starting a spectator and validating the EV, CS, and Default routing tables.

All TestInstanceOperation tests are passing.
Changes that Break Backward Compatibility (Optional)
NA
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
struts,559,WW-5184 - Add optional parameter value check to ParametersInterceptor,"Implements WW-5184

Add optional parameter value check to ParametersInterceptor
Add Unit Tests",REQ
accumulo,4115,Fix ImportConfiguration.builder().setKeepOffline(),"Fixes #4045
This PR adds logic to properly transition the state of a new table created via importTable() to offline (or online) depending on the value supplied via the ImportConfiguration.
This was corrected by the change in FinishImportTable where the table was never transitioned from the NEW to OFFLINE table state when the (then onlineTable) param was set.
Other changes:

added a check in the IT to make sure the new table is in the OFFLINE state instead of just ""not online""
renamed the member variable from onlineTable to keepOffline for clarity and consistency",BUG
accumulo,2794,Wait for server process to notice property changes in MiniAccumuloClusterTest,"MiniAccumuloClusterTest.testPerTableClasspath is intermittently failing with
a MutationsRejectedException when the BatchWriter is closed because the TabletServer
is not seeing property changes made in the test right before the BatchWriter is
created. This change introduces a small sleep in an attempt to allow the
TabletServer to react to the configuration changes before the BatchWriter is used
in the test thread.",BUG
helix,2666,Fix flaky tests org.apache.helix.rest.metadatastore.TestZkMetadataStoreDirectory (#2645),"Issues

 My PR addresses the following Helix issues and references them in the PR description:

Fixes #2645
Description
Sets return the elements in a non-deterministic order, which means that this assertion is not correct, because it checks whether the collections contain the same elements in the same order. This leads to a flack test. To fix this problem, the assertion has been rewritten to check if the collections contain the same amount of elements as well as booth collections contain all values of the other collection.
Tests that cause problems:


  
    
      helix/helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java
    
    
        Lines 133 to 141
      in
      5f1a3f7
    
  
  
    

        
          
           public void testGetAllMetadataStoreRealms() { 
        

        
          
             Set<String> realms = new HashSet<>(); 
        

        
          
             realms.add(TEST_REALM_1); 
        

        
          
             realms.add(TEST_REALM_2); 
        

        
          
            
        

        
          
             for (String namespace : _routingZkAddrMap.keySet()) { 
        

        
          
               Assert.assertEquals(_metadataStoreDirectory.getAllMetadataStoreRealms(namespace), realms); 
        

        
          
             } 
        

        
          
           } 
        
    
  


and

  
    
      helix/helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java
    
    
        Lines 144 to 152
      in
      5f1a3f7
    
  
  
    

        
          
           public void testGetAllShardingKeys() { 
        

        
          
             Set<String> allShardingKeys = new HashSet<>(); 
        

        
          
             allShardingKeys.addAll(TEST_SHARDING_KEYS_1); 
        

        
          
             allShardingKeys.addAll(TEST_SHARDING_KEYS_2); 
        

        
          
            
        

        
          
             for (String namespace : _routingZkAddrMap.keySet()) { 
        

        
          
               Assert.assertEquals(_metadataStoreDirectory.getAllShardingKeys(namespace), allShardingKeys); 
        

        
          
             } 
        

        
          
           } 
        
    
  


This problem was found by the NonDex Engine – to reproduce run
mvn -pl helix-rest edu.illinois:nondex-maven-plugin:2.1.1:nondex -Dtest=org.apache.helix.rest.metadatastore.TestZkMetadataStoreDirectory
Solution
Replace the assertions with a custom matcher, which checks if the sets contain the same elements without taking care of the order of the elements returned by the set.
Custom Matcher:


  
    
      helix/helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java
    
    
        Lines 378 to 383
      in
      9cd4181
    
  
  
    

        
          
           private void assertCollectionsContainSameElementsIgnoringOrder(Collection<String> collection1, 
        

        
          
            Collection<String> collection2) { 
        

        
          
              Assert.assertEquals(collection2.size(), collection1.size()); 
        

        
          
              Assert.assertTrue(collection2.containsAll(collection1)); 
        

        
          
              Assert.assertTrue(collection1.containsAll(collection2)); 
        

        
          
           } 
        
    
  


Tests
No test have been written – one existing test has been updated.

The following is the result of the ""mvn test"" command on the appropriate module:

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:51 min
[INFO] Finished at: 2023-10-04T23:16:04-05:00
[INFO] ------------------------------------------------------------------------",BUG
helix,1583,Fix redundant workflow context updates for finished workflows,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
Fixes #1582

Description

 Here are some details about my PR, including screenshots of any UI changes:
If the workflow has been finished before, there is no need to update the workflow context.
In this PR, this behavior has been fixed and optimized.

Tests


 The following tests are written for this issue:
TestContextRedundantUpdates
More test will be added to this file as we move toward reducing context writes


 The following is the result of the ""mvn test"" command on the appropriate module:
Helix-core:


[INFO] Tests run: 1253, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,396.908 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1253, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:30 h
[INFO] Finished at: 2020-12-09T00:16:20-08:00
[INFO] ------------------------------------------------------------------------

The failed test is unrelated to this change and is failing even without this PR.
Helix-rest:
[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 103.579 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:49 min
[INFO] Finished at: 2020-12-09T09:28:35-08:00
[INFO] ------------------------------------------------------------------------

Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,3542,Backported MANAGER_TABLET_GROUP_WATCHER_INTERVAL property,"TabletGroupWatcher prior to this change was hardcoded to wait for 60s between loops looking for tablets that needed some type of maintenance. This property allows the user to configure that potentially making the Manager more responsive to tablets being unassigned or unbalanced.
Fixes #3541",REF
zookeeper,2001,ZOOKEEPER-4697: Add Builder to construct ZooKeeper and ZooKeeperAdmin,"Currently, there are 10 constructor variants for ZooKeeper and 4 for ZooKeeperAdmin. It is enough for us to resort to a builder.
The build method throws IOException to make it a drop-in replacement of existing constructors of ZooKeeper.
This pr also unify body of ZooKeeper constructor to one. Previously, there are diverged to two. One has sessionId and sessionPasswd, and another doesn't have. This pr uses sessionId == 0 to differentiate the two as it is used in server side to differentiate session create and reconnect.",REQ
accumulo,1441,Improve Upgrader9to10 code,"This changes the batching strategy for the Upgrader9to10 class.
The previous strategy was to fill a data structure until JVM memory was
sufficiently used up (50% of heap size), then process the upgrade for
those entries, and repeat until no more entries are left to upgrade.
This new strategy batches candidates for upgrade in batches of size 4
million characters (approx. 8MB batches), regardless of memory.
This stabilizes the testing, as it is much simpler to reproduce and test
fixed-size batches, than it is to manipulate the JVM heap size during
testing. As a result, many improvements to the GCUpgrade9to10TestIT were
made here. This also fixes that IT, which began failing with the use of
the G1GC instead of CMS (#1427), because G1GC didn't work well with a
master configured with a 16MB JVM heap and crashed frequently OOMEs.",REF
accumulo,2969,Add missing chopped column to Ample,Fixes #2961,REQ
helix,2505,Replace deprecated verifier with new set of Verifiers,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
Fixes #2485

Description

 Here are some details about my PR, including screenshots of any UI changes:
While debugging the failure for the test case in DistributedController test case, realized we are using deprecated verifier. So let us first use the right verifier and see if it helps with resolving the temporary failures. These are all integration tests which depends on ZK timing and so not sure if just replacing correct verifier will help. But first order problem is to use right code.

Tests

[] The following tests are written for this issue:

(List the names of added unit/integration tests)

The following is the result of the ""mvn test"" command on the appropriate module:
I created a branch and ran the test 4 times to make sure that there is no regression with using different verifier.
Here is the link to the branch with testing:
desaikomal#2
failure were in different test cases.

Changes that Break Backward Compatibility (Optional)

My PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:

(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,2756,Add Verify calls to NamespaceConfigurationTest,,REF
commons-lang,933,[LANG-1689] Simple Optional in ObjectUtils#isEmpty(),"Original JIRA ticket (not by me): https://issues.apache.org/jira/projects/LANG/issues/LANG-1689
Method isEmpty in ObjectUtils was modified to return the negation of Optional.isPresent (i.e. !optional.isPresent()) when the passed in object is an Optional.
The object contained within the Optional is not checked if it is also empty. This gives the caller the option to check if it's present (or not) on their own.

For instance, the caller might want to do something like the following:
ObjectUtils.isEmpty(optional) && ObjectUtils.isNotEmpty(optional.get()).",REF
zookeeper,1799,ZOOKEEPER-4453: NettyServerCnxnFactory: allow to configure the early TLS connection drop feature,"add new flag netty.server.earlyDropSecureConnectionHandshakes to turn on/off ZOOKEEPER-3682
disable ZOOKEEPER-3682 by default
add docs
add tests for this patch and for ZOOKEEPER-3682

see https://issues.apache.org/jira/browse/ZOOKEEPER-4453 for more context",REF
accumulo,3912,Fixes handling of incorrect compaction configuration,"An incorrectly configured compaction service would fail to create.  This would cause tables configured to use that service to spam the logs saying the serivce did not exists.  Two changes were made to address this.
First, when a compaction service fails to create its planner plugin it will log an error and fall back to using a new NullPlanner that does nothing.  Once the configuration is fixed and the planner pluging can be created, it will replace the NullPlanner. Falling back to the NullPlanner allows the service to exists and do nothing, this way tables configured to use it do not complain.
Second, when a table is configured to use a compaction service that does not exist repeated logging of this is suppressed per table.  Also the existing code attempted to fall back to the default compaction service but this was not working.  So the fallback code was removed and the log message was adjusted.  Falling back could cause problems if its not what the user desires.
Two ITs were added to test the above situations.",BUG
httpcomponents-client,343,Httpclient-2194 async retries not including body,"https://issues.apache.org/jira/browse/HTTPCLIENT-2194
We found that our async retries were failing because there was no body being set.  Releasing the entityProducer resets the starting point to 0 and resolved the issue for us.",BUG
helix,2586,Add InstanceConfig override for /partitionAssignment API,"Add InstanceConfig override for /partitionAssignment API to allow for simulating different assignment with different InstanceConfigs.
Issues
NA
Description
This change will allow callers of the /partitionAssignment API to pass a list of InstanceConfigs to override the existing ones. Callers will be able to do things like change the DOMAIN config to simulate FAULT_DOMAINs with skewed capacity and more.
Tests


 testComputePartitionAssignmentWaged
- Add another part of the test that uses the InstanceConfig inputField to replace HELIX_ENABLED in the Instance's persisted(ZK) InstanceConfig. While this particular use of the InstanceConfig may not be necessary since we already have ActivateInstance and DeactivateInstance fields, it is the easiest way to test that the InstanceConfig override can be passed.


The following is the result of the ""mvn test"" command on the appropriate module:


[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 116.65 s - in org.apache.helix.rest.server.TestResourceAssignmentOptimizerAccessor
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-rest ---
[INFO] Loading execution data file /Users/zapinto/Documents/git/zpinto/helix/helix-rest/target/jacoco.exec
[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 92 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:03 min
[INFO] Finished at: 2023-08-09T14:34:45-07:00
[INFO] ------------------------------------------------------------------------

Changes that Break Backward Compatibility (Optional)
Preserves backwards compatibility by adding and not removing old inputFields
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REQ
helix,1685,Change participant message monitor to use dynamic metric,"Issues

 My PR addresses the following Helix issues and references them in the PR description:
Fixed #1683

Description

 Here are some details about my PR, including screenshots of any UI changes:
ParticipantMessageMonitor used a static metric implementation. To uniform our metrics in Helix-core, we would like to convert all static metrics to dynamic metric framework. The PR serves as an example for this cleanup work.

Tests
helix-core
[INFO] Results:
[INFO]
[ERROR] Failures:
[ERROR]   TestResourceChangeDetector.testResetSnapshots:453 expected:<0> but was:<1>
[ERROR]   TestPauseSignal.testPauseSignal:106 expected: but was:
[INFO]
[ERROR] Tests run: 1264, Failures: 2, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:35 h
[INFO] Finished at: 2021-03-24T13:38:47-07:00
(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of ""mvn test"" to here.)
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",REF
accumulo,3725,Use memory percentage for GC batch size,"Update Accumulo to use a memory percentage value to determine the candidate batch size for garbage collection.
Updated Property.java to use a memory type rather than a bytes type.
Added logging to print the size and percentage used by the GC.",REF
helix,1449,HelixClusterVerifier verify() with default waitTillVerify time -- part one,"Issues

 My PR addresses the following Helix issues and references them in the PR description:

fix #1448 part 1
Description


 Here are some details about my PR, including screenshots of any UI changes:
HelixClusterVerifier verify() and related method may return
pre-maturely. The reason is that the verify the converging stable
condition too early before controller has a chance to make
change. Basically the previous stable state is mistaken as the
expected next stable state.
We fix this issue by adding waitTillVerify() timeout in
construction time of verifier.


Tests

 The following tests are written for this issue:

github run https://github.com/apache/helix/runs/1222609480?check_suite_focus=true

 The following is the result of the ""mvn test"" command on the appropriate module:

2020-10-07T21:51:30.9005474Z
2020-10-07T21:51:31.3163346Z [ERROR] Failures:
2020-10-07T21:51:31.3164350Z [ERROR]   TestDisableCustomCodeRunner.test:236 expected: but was:
2020-10-07T21:51:31.3187463Z [ERROR]   TestTaskRebalancer.testNamedQueue » ThreadTimeout Method org.testng.internal.T...
2020-10-07T21:51:31.3189714Z [ERROR]   TestHelixAdminCli.testInstanceOperations:469 » Helix Failed to drop instance: ...
2020-10-07T21:51:31.3190815Z [ERROR] Tests run: 1212, Failures: 3, Errors: 0, Skipped: 4
2020-10-07T21:51:31.3310693Z [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M3:test (default-test) on project helix-core: There are test failures.
2020-10-07T21:51:31.3311431Z [ERROR]
2020-10-07T21:51:31.3312114Z [ERROR] Please refer to /home/runner/work/helix/helix/helix-core/target/surefire-reports for the individual test results.
2020-10-07T21:51:31.3312933Z [ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.
2020-10-07T21:51:31.3313549Z [ERROR] -> [Help 1]
Documentation (Optional)

In case of new functionality, my PR adds documentation in the following wiki page:

(Link the GitHub wiki you added)
Commits

My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from ""How to write a good git commit message"":

Subject is separated from body by a blank line
Subject is limited to 50 characters (not including Jira issue reference)
Subject does not end with a period
Subject uses the imperative mood (""add"", not ""adding"")
Body wraps at 72 characters
Body explains ""what"" and ""why"", not ""how""



Code Quality

My diff has been formatted using helix-style.xml
(helix-style-intellij.xml if IntelliJ IDE is used)",BUG
accumulo,3992,Add resourceGroup as a tag in the emitted metrics,Related to #3991,REQ
accumulo,3923,Update TabletManagementIteratorIT for merge and wal checks,"This updates tests in TabletManagementIteratorIT to verify that the iterator properly detects tablets needing attention if WALs exist on tablets that are part of a merge operation. It also will test that if op type is DELETING that the tablet does not care if there are WALs.
This PR only updates the tests in TabletManagementIteratorIT and doesn't try and do anything with TGW because after the refactoring in #3904 both the iterator and TGW share the same code for checking the goal state (where the WAL checks are done)
However, another possible follow on test improvement would be to create a test for the TabletGoalState class where all the logic was refactored to inside of compute() to test the different cases for computing the resulting state. This could likely just be a normal unit test with mocking and not an IT.",REF
accumulo,2403,Create RunningCompactionInfo in core for reuse,"Create RunningCompactionInfo in core to be reused outside the Monitor
Moves the logic for parsing progress from running compactions to core so that
server utilities can get the progress as well",REF
