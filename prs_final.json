[
    {
        "repo": "commons-io",
        "pr_number": 530,
        "title": {
            "body": "[IO-826] Add runtime exception support to broken streams",
            "bodyHTML": "[IO-826] Add runtime exception support to broken streams"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmPM5vKRqM",
                "body": "While this may not break source compatibility, it would break binary compatibility per https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.12 (at least how I read it and how japicmp sees it).",
                "bodyText": "While this may not break source compatibility, it would break binary compatibility per https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.12 (at least how I read it and how japicmp sees it).",
                "createdAt": "2023-12-20T18:42:21Z",
                "author": "garydgregory"
            },
            {
                "id": "IC_kwDOAAMmPM5vKXHy",
                "body": "Yes, you're absolutely right.  I hadn't thought of that.",
                "bodyText": "Yes, you're absolutely right.  I hadn't thought of that.",
                "createdAt": "2023-12-20T18:59:07Z",
                "author": "markslater"
            },
            {
                "id": "IC_kwDOAAMmPM5vKuk_",
                "body": "## [Codecov](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAttention: `15 lines` in your changes are missing coverage. Please review.\n> Comparison is base [(`6b0ed87`)](https://app.codecov.io/gh/apache/commons-io/commit/6b0ed87f7bbcd807b30436888de445f36b19ce9a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) 86.17% compared to head [(`20f379d`)](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) 86.01%.\n> Report is 6 commits behind head on master.\n\n> :exclamation: Current head 20f379d differs from pull request most recent head d54985b. Consider uploading reports for the commit d54985b to get more accurate results\n\n| [Files](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Patch % | Lines |\n|---|---|---|\n| [...java/org/apache/commons/io/input/BrokenReader.java](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vaW5wdXQvQnJva2VuUmVhZGVyLmphdmE=) | 30.00% | [7 Missing :warning: ](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [...g/apache/commons/io/output/BrokenOutputStream.java](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vb3V0cHV0L0Jyb2tlbk91dHB1dFN0cmVhbS5qYXZh) | 42.85% | [4 Missing :warning: ](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [...ava/org/apache/commons/io/output/BrokenWriter.java](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vb3V0cHV0L0Jyb2tlbldyaXRlci5qYXZh) | 42.85% | [4 Missing :warning: ](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@             Coverage Diff              @@\n##             master     #530      +/-   ##\n============================================\n- Coverage     86.17%   86.01%   -0.17%     \n+ Complexity     3433     3418      -15     \n============================================\n  Files           229      229              \n  Lines          8162     8167       +5     \n  Branches        959      959              \n============================================\n- Hits           7034     7025       -9     \n- Misses          845      860      +15     \n+ Partials        283      282       -1     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/commons-io/pull/530?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n",
                "bodyText": "Codecov Report\nAttention: 15 lines in your changes are missing coverage. Please review.\n\nComparison is base (6b0ed87) 86.17% compared to head (20f379d) 86.01%.\nReport is 6 commits behind head on master.\n\n\n‚ùó Current head 20f379d differs from pull request most recent head d54985b. Consider uploading reports for the commit d54985b to get more accurate results\n\n\n\n\nFiles\nPatch %\nLines\n\n\n\n\n...java/org/apache/commons/io/input/BrokenReader.java\n30.00%\n7 Missing ‚ö†Ô∏è \n\n\n...g/apache/commons/io/output/BrokenOutputStream.java\n42.85%\n4 Missing ‚ö†Ô∏è \n\n\n...ava/org/apache/commons/io/output/BrokenWriter.java\n42.85%\n4 Missing ‚ö†Ô∏è \n\n\n\nAdditional details and impacted files\n@@             Coverage Diff              @@\n##             master     #530      +/-   ##\n============================================\n- Coverage     86.17%   86.01%   -0.17%     \n+ Complexity     3433     3418      -15     \n============================================\n  Files           229      229              \n  Lines          8162     8167       +5     \n  Branches        959      959              \n============================================\n- Hits           7034     7025       -9     \n- Misses          845      860      +15     \n+ Partials        283      282       -1     \n\n‚òî View full report in Codecov by Sentry.\nüì¢ Have feedback on the report? Share it here.",
                "createdAt": "2023-12-20T20:21:21Z",
                "author": "codecov-commenter"
            },
            {
                "id": "IC_kwDOAAMmPM5vPNp8",
                "body": "@markslater PR merged, TY!",
                "bodyText": "@markslater PR merged, TY!",
                "createdAt": "2023-12-21T13:37:31Z",
                "author": "garydgregory"
            }
        ],
        "total_comments_count": 21,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmPM42kbaG",
                "comments": [
                    {
                        "bodyText": "Keep synchronized, there is no reason to break the superclass' specification here.",
                        "body": "Keep `synchronized`, there is no reason to break the superclass' specification here.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 123,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Could you clarify?  I can't see any mention of synchronized in the javadoc.",
                        "body": "Could you clarify?  I can't see any mention of `synchronized` [in the javadoc](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/InputStream.html#reset()).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 123,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Uh? Javadoc doesn't document synchronized keywords. Same for native, see https://docs.oracle.com/en/java/javase/11/javadoc/javadoc-command.html#GUID-B0079316-8AA3-475B-8276-6A4095B5186A",
                        "body": "Uh? Javadoc doesn't document `synchronized` keywords. Same for `native`, see https://docs.oracle.com/en/java/javase/11/javadoc/javadoc-command.html#GUID-B0079316-8AA3-475B-8276-6A4095B5186A\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 123,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I didn't explain myself very well.  I meant to say I don't see any mention of locking in the javadoc.\nI dug a bit deeper and it seems the synchronization of the reset method varies by JDK.  Here's a summary of which JDKs mark it as synchronized, sampled from the ones I had to hand:\n\n\n\n\njava.io.InputStream#reset\njava.io.Reader#reset\n\n\n\n\nopenjdk-7\n‚úÖ\n‚ùå\n\n\ncorretto-1.8.0_392\n‚úÖ\n‚ùå\n\n\ntemurin-11.0.21\n‚úÖ\n‚ùå\n\n\ncorretto-20.0.2.10\n‚ùå\n‚ùå\n\n\ncoretto-21.0.1.12\n‚ùå\n‚ùå\n\n\n\nAFAIK java.io.Reader#reset has never been synchronized, so that one is easy.  For java.io.InputStream#reset, I guess it should be synchronized to line up with Java 8, since that's the library's targeted version?",
                        "body": "I didn't explain myself very well.  I meant to say I don't see any mention of locking in the javadoc.\r\n\r\nI dug a bit deeper and it seems the synchronization of the `reset` method varies by JDK.  Here's a summary of which JDKs mark it as synchronized, sampled from the ones I had to hand:\r\n|   | java.io.InputStream#reset | java.io.Reader#reset |\r\n| - | ---------------------------------- | ---------------------------- |\r\n| openjdk-7 | [:white_check_mark:](https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/io/InputStream.java#L346) | [:x:](https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/io/Reader.java#L248) | \r\n| corretto-1.8.0_392 | [:white_check_mark:](https://github.com/corretto/corretto-8/blob/8.392.08.1/jdk/src/share/classes/java/io/InputStream.java#L347) | [:x:](https://github.com/corretto/corretto-8/blob/8.392.08.1/jdk/src/share/classes/java/io/Reader.java#L248) |\r\n| temurin-11.0.21 | :white_check_mark: | :x: |\r\n| corretto-20.0.2.10 | [:x:](https://github.com/corretto/corretto-20/blob/20.0.2.10.1/src/java.base/share/classes/java/io/InputStream.java#L737) | [:x:](https://github.com/corretto/corretto-20/blob/20.0.2.10.1/src/java.base/share/classes/java/io/Reader.java#L398) |\r\n| coretto-21.0.1.12 | [:x:](https://github.com/corretto/corretto-21/blob/21.0.1.12.1/src/java.base/share/classes/java/io/InputStream.java#L740) | [:x:](https://github.com/corretto/corretto-21/blob/21.0.1.12.1/src/java.base/share/classes/java/io/Reader.java#L398) |\r\n\r\nAFAIK `java.io.Reader#reset` has never been synchronized, so that one is easy.  For `java.io.InputStream#reset`, I guess it should be synchronized to line up with Java 8, since that's the library's targeted version?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 123,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Well, this PR is about a new feature and should not flip-flop an unrelated implementation detail IMO. Especially when the setting seems to change between vendo and version.",
                        "body": "Well, this PR is about a new feature and should not flip-flop an unrelated implementation detail IMO. Especially when the setting seems to change between vendo and version. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 123,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "FWIW, I see synchronized on InputStream Temurin 17 but not Temurin 21.",
                        "body": "FWIW, I see synchronized on InputStream Temurin 17 but not Temurin 21.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 123,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 123,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/io/input/BrokenInputStream.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmPM42kbrB",
                "comments": [
                    {
                        "bodyText": "This is confusing compared to the previous Javadoc IMO because it is in fact the case that an exception is always thrown. You could say instead \"Always throws the exception supplied from a constructor.\"",
                        "body": "This is confusing compared to the previous Javadoc IMO because it is in fact the case that _an_ exception is _always_ thrown. You could say instead \"Always throws the exception supplied from a constructor.\"",
                        "startLine": null,
                        "line": null,
                        "originalLine": 141,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done",
                        "body": "Done",
                        "startLine": null,
                        "line": null,
                        "originalLine": 141,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 141,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/io/input/BrokenInputStream.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmPM42kb3E",
                "comments": [
                    {
                        "bodyText": "Good catch. There is no need to duplicate exception classes, just extract this class into its own file and reuse in all tests.",
                        "body": "Good catch. There is no need to duplicate exception classes, just extract this class into its own file and reuse in all tests.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 38,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done.",
                        "body": "Done.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 38,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 38,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmPM42kcDQ",
                "comments": [
                    {
                        "bodyText": "Let's not duplicate this factory method all over the place. Extract this method in a new class `TestFixtures' or some such name.",
                        "body": "Let's not duplicate this factory method all over the place. Extract this method in a new class `TestFixtures' or some such name.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 44,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done.",
                        "body": "Done.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 44,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 44,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmPM42kg1O",
                "comments": [
                    {
                        "bodyText": "Since there is more than one constructor, I think we should say \"in a constructor\", not in \"in the...\".",
                        "body": "Since there is more than one constructor, I think we should say \"in a constructor\", not in \"in the...\".",
                        "startLine": null,
                        "line": null,
                        "originalLine": 120,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "As you like - I read this as 'in the constructor [you callled]', but I don't have a strong feeling either way.",
                        "body": "As you like - I read this as 'in the constructor [you callled]', but I don't have a strong feeling either way.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 120,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "How about \"always throws the exception configured on construction\"?",
                        "body": "How about \"always throws the exception configured on construction\"?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 120,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "How about \"always throws the exception configured on construction\"?\n\nI'm not going to go round and round on such a small point. I'll likely review post merge and resolve whatever is left.",
                        "body": "> How about \"always throws the exception configured on construction\"?\r\n\r\nI'm not going to go round and round on such a small point. I'll likely review post merge and resolve whatever is left.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 120,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 120,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/io/input/BrokenInputStream.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "markslater",
            "garydgregory",
            "codecov-commenter"
        ],
        "tdv": -60.0,
        "description": {
            "bodyText": "https://issues.apache.org/jira/browse/IO-826\nAs discussed in #528.\nOne point to note: Is there a reason to keep the deprecated constructors such as BrokenInputStream(final IOException exception)?  Given that the new constructors such as BrokenInputStream(final Throwable exception) accept a superclass of IOException, it seems the old constructor could be removed without a breaking change."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3785,
        "title": {
            "body": "fixes multiple tests in ShellServerIT",
            "bodyHTML": "fixes multiple tests in ShellServerIT"
        },
        "comments": [],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4zA60C",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    assertTrue(results.contains(dir), \" Did not see \" + dir);\n          \n          \n            \n                    assertTrue(results.contains(dir), \"Did not see \" + dir);",
                        "body": "```suggestion\r\n        assertTrue(results.contains(dir), \"Did not see \" + dir);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2336,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 2336,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/shell/ShellServerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4zA74A",
                "comments": [
                    {
                        "bodyText": "Are the lines in the output coming in an unpredictable order? Is there a reason why we're doing pattern matching anywhere in the multi-line string result for the lines we expect, instead of just iterating over the lines and checking to verify each line contains the next thing we expect?\nSomething like:\n    Iterator<String> iter = splitLines(result);\n    line = iter.next(); assertTrue(line.contains(firstLineCondition));\n    line = iter.next(); assertTrue(line.contains(nextLineCondition));\n    line = iter.next(); assertTrue(line.contains(nextLineCondition));\n    // ...\n    assertFalse(iter.hasNext());\nThis seems simpler to read and maintain than a bunch of regexes that don't verify that the output is appearing in the expected order.",
                        "body": "Are the lines in the output coming in an unpredictable order? Is there a reason why we're doing pattern matching anywhere in the multi-line string result for the lines we expect, instead of just iterating over the lines and checking to verify each line contains the next thing we expect?\r\n\r\nSomething like:\r\n\r\n```java\r\n    Iterator<String> iter = splitLines(result);\r\n    line = iter.next(); assertTrue(line.contains(firstLineCondition));\r\n    line = iter.next(); assertTrue(line.contains(nextLineCondition));\r\n    line = iter.next(); assertTrue(line.contains(nextLineCondition));\r\n    // ...\r\n    assertFalse(iter.hasNext());\r\n```\r\n\r\nThis seems simpler to read and maintain than a bunch of regexes that don't verify that the output is appearing in the expected order.",
                        "startLine": null,
                        "line": 1334,
                        "originalLine": 1334,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The reason I did pattern matching was because the number of spaces in the output would change when the length of the table id changed.  So for a one character table id would see more spaces in the output than if there was a two digit table id.\nAs for checking the order, that could be a follow on issue.  It would make the test more strict.  The test was not checking the order before these changes.",
                        "body": "The reason I did pattern matching was because the number of spaces in the output would change when the length of the table id changed.  So for a one character table id would see more spaces in the output than if there was a two digit table id.\r\n\r\nAs for checking the order, that could be a follow on issue.  It would make the test more strict.  The test was not checking the order before these changes.",
                        "startLine": null,
                        "line": 1334,
                        "originalLine": 1334,
                        "originalStartLine": null
                    }
                ],
                "line": 1334,
                "startLine": 1334,
                "originalLine": 1334,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/shell/ShellServerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4zA9zW",
                "comments": [
                    {
                        "bodyText": "I think setgoal is not a very good name for a tablet-specific function, as it makes one wonder \"goal for what?\", because \"goal\" is too generic of a term.\nI think \"hosttablet ... always/never/ondemand\" or \"settabletgoal ... always/never/ondemand\". Even these are probably not the best names either, but they give a lot more context to what kind of goal is being set.\nAlternatively, one could have a command named \"tablet\" and a sub-command called something like \"online\", so you get a very expressive command like: \"tablet online... always/never/ondemand\" or maybe \"tablet hosted... always/never/ondemand\".\nOr we could overload the current online command to be able to set a range, and an optional flag for ondemand. So, you get the following:\n> online -t table -b beginRange -e endRange             # \"always\"\n> offline -t table -b beginRange -e endRange            # \"never\"\n> online -t table -b beginRange -e endRange --ondemand  # \"ondemand\"",
                        "body": "I think `setgoal` is not a very good name for a tablet-specific function, as it makes one wonder \"goal for what?\", because \"goal\" is too generic of a term.\r\n\r\nI think \"hosttablet ... always/never/ondemand\" or \"settabletgoal ... always/never/ondemand\". Even these are probably not the best names either, but they give a lot more context to what kind of goal is being set.\r\n\r\nAlternatively, one could have a command named \"tablet\" and a sub-command called something like \"online\", so you get a very expressive command like: \"tablet online... always/never/ondemand\" or maybe \"tablet hosted... always/never/ondemand\".\r\n\r\nOr we could overload the current `online` command to be able to set a range, and an optional flag for `ondemand`. So, you get the following:\r\n\r\n```sh\r\n> online -t table -b beginRange -e endRange             # \"always\"\r\n> offline -t table -b beginRange -e endRange            # \"never\"\r\n> online -t table -b beginRange -e endRange --ondemand  # \"ondemand\"\r\n```\r\n",
                        "startLine": null,
                        "line": 1848,
                        "originalLine": 1848,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Elsewhere, we call this \"hosting goal\", so \"sethostinggoal\" would be appropriate as well.",
                        "body": "Elsewhere, we call this \"hosting goal\", so \"sethostinggoal\" would be appropriate as well.",
                        "startLine": null,
                        "line": 1848,
                        "originalLine": 1848,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ctubbsii  the name of that command is out of scope for this PR, but what you wrote sounds reasonable.  Can you open an issue for reconsidering the name?",
                        "body": "@ctubbsii  the name of that command is out of scope for this PR, but what you wrote sounds reasonable.  Can you open an issue for reconsidering the name?",
                        "startLine": null,
                        "line": 1848,
                        "originalLine": 1848,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Opened #3800",
                        "body": "Opened #3800 ",
                        "startLine": null,
                        "line": 1848,
                        "originalLine": 1848,
                        "originalStartLine": null
                    }
                ],
                "line": 1848,
                "startLine": 1848,
                "originalLine": 1848,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/shell/ShellServerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "ctubbsii",
            "Manno15"
        ],
        "tdv": 36.0,
        "description": {
            "bodyText": "Multiple tests in ShellServerIT only ran when their table id was 1 or 2. This commit updates the test to run with any table id."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2107,
        "title": {
            "body": "Add TTL and Container modes to BaseDataAccessor and its implementations",
            "bodyHTML": "Add TTL and Container modes to BaseDataAccessor and its implementations"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5DqxK2",
                "body": "This PR is ready to be merged, approved by @qqu0127.\r\n\r\nFinal commit message:\r\n\r\n**Add TTL and Container modes to BaseDataAccessor and its implementations**\r\n\r\nThis commit adds support for TTL and Container modes to BaseDataAccessor and its implementations by taking advantage of relevant API from ZkClient and its descendent classes.",
                "bodyText": "This PR is ready to be merged, approved by @qqu0127.\nFinal commit message:\nAdd TTL and Container modes to BaseDataAccessor and its implementations\nThis commit adds support for TTL and Container modes to BaseDataAccessor and its implementations by taking advantage of relevant API from ZkClient and its descendent classes.",
                "createdAt": "2022-05-24T00:57:39Z",
                "author": "rabashizade"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4hfm_K",
                "comments": [
                    {
                        "bodyText": "So this only applies to create? It means this property cannot be added in the middle by override or set?",
                        "body": "So this only applies to create? It means this property cannot be added in the middle by override or set?",
                        "startLine": null,
                        "line": 56,
                        "originalLine": 56,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Zookeeper only supports setting this property at create time, so it can't be overridden later. But now that you bring it up, I realized we create ZNode in set and update API as well when the node doesn't exist. But since the objective in those APIs is to actually update an existing ZNode, I think it's better to not add this capability to them. Please let me know what you think.",
                        "body": "Zookeeper only supports setting this property at create time, so it can't be overridden later. But now that you bring it up, I realized we create ZNode in set and update API as well when the node doesn't exist. But since the objective in those APIs is to actually update an existing ZNode, I think it's better to not add this capability to them. Please let me know what you think.",
                        "startLine": null,
                        "line": 56,
                        "originalLine": 56,
                        "originalStartLine": null
                    }
                ],
                "line": 56,
                "startLine": 56,
                "originalLine": 56,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/BaseDataAccessor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "rabashizade",
            "junkaixue",
            "qqu0127",
            "NealSun96"
        ],
        "tdv": 128.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #2081\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR adds support for TTL and Container modes to BaseDataAccessor and its implementations by taking advantage of relevant API from ZkClient and its descendent classes.\nTests\n\n The following tests are written for this issue:\n\nTwo tests (testSyncCreateWithTTL() and testSyncCreateContainer()) were added to TestZkBaseDataAccessor. In addition, testAsyncZkBaseDataAccessor() in the same class was modified to test the newly added API.\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "struts",
        "pr_number": 532,
        "title": {
            "body": "Basic LocalDateTime support",
            "bodyHTML": "Basic LocalDateTime support"
        },
        "comments": [
            {
                "id": "IC_kwDOAPMNSs5DGOPo",
                "body": "What's the status here? Do we still have a problem with `struts.date.format`?",
                "bodyText": "What's the status here? Do we still have a problem with struts.date.format?",
                "createdAt": "2022-05-13T06:34:53Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5DGRVB",
                "body": "Don't think so.  I did another patch (Apr 22) to remove the !\"\".equals(globalFormat) check, and the globalDateFormat lookup on the LocalDateTime as it will break it.",
                "bodyText": "Don't think so.  I did another patch (Apr 22) to remove the !\"\".equals(globalFormat) check, and the globalDateFormat lookup on the LocalDateTime as it will break it.",
                "createdAt": "2022-05-13T06:55:25Z",
                "author": "gregh3269"
            },
            {
                "id": "IC_kwDOAPMNSs5DJ0nS",
                "body": "Ok, so only tests need to be fixed",
                "bodyText": "Ok, so only tests need to be fixed",
                "createdAt": "2022-05-14T05:50:21Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5DJ3NY",
                "body": "ok, I will have a look.",
                "bodyText": "ok, I will have a look.",
                "createdAt": "2022-05-14T07:03:26Z",
                "author": "gregh3269"
            },
            {
                "id": "IC_kwDOAPMNSs5DMXmI",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/49138500/badge)](https://coveralls.io/builds/49138500)\n\nCoverage increased (+0.03%) to 50.62% when pulling **70b8b30161017ebf9c882ce6c8c5841f178ca055 on gregh3269:Basic_localdatetime_support** into **a987e31a0ea0872b0bc066ca2ef4d61f79dafd74 on apache:master**.\n",
                "bodyText": "Coverage increased (+0.03%) to 50.62% when pulling 70b8b30 on gregh3269:Basic_localdatetime_support into a987e31 on apache:master.",
                "createdAt": "2022-05-16T07:20:00Z",
                "author": "coveralls"
            },
            {
                "id": "IC_kwDOAPMNSs5DQncT",
                "body": "LGTM üëç ",
                "bodyText": "LGTM üëç",
                "createdAt": "2022-05-17T05:31:03Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5DQoSk",
                "body": "...maybe the formatting should be like java.sql.Timestamp, in line, as it only parses with a yyyy-mm-ddThh:mm:ss.  Early days here as its a big topic.",
                "bodyText": "...maybe the formatting should be like java.sql.Timestamp, in line, as it only parses with a yyyy-mm-ddThh:mm:ss.  Early days here as its a big topic.",
                "createdAt": "2022-05-17T05:37:01Z",
                "author": "gregh3269"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs4hT52e",
                "comments": [
                    {
                        "bodyText": "Can this be protected to allow override?",
                        "body": "Can this be `protected` to allow override?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 217,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 217,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/conversion/impl/DateConverter.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "gregh3269",
            "lukaszlenart",
            "coveralls"
        ],
        "tdv": 51.0,
        "description": {
            "bodyText": "Add support for LocalDateTime for the LocalDateTime.now() variant. DateTimeFormatter.ISO_LOCAL_DATE_TIME.\nSee WW-5175"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3729,
        "title": {
            "body": "Allow configurable name allocations",
            "bodyHTML": "Allow configurable name allocations"
        },
        "comments": [],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4xy38_",
                "comments": [
                    {
                        "bodyText": "I don't believe the prefix property is needed. This is only necessary when custom plugins can be created that will expect properties to be set that are not defined in Property.java.",
                        "body": "I don't believe the prefix property is needed. This is only necessary when custom plugins can be created that will expect properties to be set that are not defined in Property.java.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 231,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I wanted to make this a valid zoo property so that it could be configured via the config shell command. Do you have a recommended way to do that without the new prefix? Property.isValidZooPropertyKey() needs to return true for my two new properties.",
                        "body": "I wanted to make this a valid zoo property so that it could be configured via the config shell command. Do you have a recommended way to do that without the new prefix? `Property.isValidZooPropertyKey()` needs to return true for my two new properties.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 231,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "just add those two properties I think.",
                        "body": "just add those two properties I think.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 231,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 231,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4xy_Gq",
                "comments": [
                    {
                        "bodyText": "This log message is misleading, nothing has been allocated yet.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                log.debug(\"Allocated {} filenames\", totalAllocation);\n          \n          \n            \n                log.debug(\"Allocating {} filenames\", totalAllocation);",
                        "body": "This log message is misleading, nothing has been allocated yet.\r\n```suggestion\r\n    log.debug(\"Allocating {} filenames\", totalAllocation);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 96,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/tablets/UniqueNameAllocator.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4xy_Tz",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                      + \"filenames from Zookeeper. This will result in an allocation between base and (base + jitter).\",\n          \n          \n            \n                      + \"filenames from Zookeeper. This will result in an allocation between base and (base + jitter).  This property is ignored when its <= 0 and only base is used.\",",
                        "body": "```suggestion\r\n          + \"filenames from Zookeeper. This will result in an allocation between base and (base + jitter).  This property is ignored when its <= 0 and only base is used.\",\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 238,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 238,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4xy_6u",
                "comments": [
                    {
                        "bodyText": "Logging the value observed in config can be useful.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  log.warn(Property.GENERAL_FILENAME_BASE_ALLOCATION.getKey()\n          \n          \n            \n                      + \" must be greater than 0. Using the default.\");\n          \n          \n            \n                  log.warn(\"{} was set to {}, must be greater than 0. Using the default {}.\", Property.GENERAL_FILENAME_BASE_ALLOCATION.getKey(), baseAllocation, DEFAULT_BASE_ALLOCATION);",
                        "body": "Logging the value observed in config can be useful.\r\n\r\n```suggestion\r\n      log.warn(\"{} was set to {}, must be greater than 0. Using the default {}.\", Property.GENERAL_FILENAME_BASE_ALLOCATION.getKey(), baseAllocation, DEFAULT_BASE_ALLOCATION);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 87,
                        "originalStartLine": 86
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 87,
                "originalStartLine": 86,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/tablets/UniqueNameAllocator.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "jschmidt10",
            "ivakegg",
            "dlmarion",
            "keith-turner",
            "matthpeterson"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Update the UniqueNameAllocator to support a configurable filename range size. The default values match what was previously there so there is no behavior change unless you override the properties."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3150,
        "title": {
            "body": "Modified ScanServer to correctly handle tablet failures",
            "bodyHTML": "Modified ScanServer to correctly handle tablet failures"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5RyWE_",
                "body": "Full IT build passed successfully",
                "bodyText": "Full IT build passed successfully",
                "createdAt": "2023-01-05T12:25:15Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5SCg-S",
                "body": "Full IT build passed",
                "bodyText": "Full IT build passed",
                "createdAt": "2023-01-09T22:04:52Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5Skvhq",
                "body": "@keith-turner - I don't see the patch you mentioned. Is this good to merge without the patch?",
                "bodyText": "@keith-turner - I don't see the patch you mentioned. Is this good to merge without the patch?",
                "createdAt": "2023-01-17T12:39:04Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5SlyXh",
                "body": "> @keith-turner - I don't see the patch you mentioned. Is this good to merge without the patch?\r\n\r\nI had initially posted a patch, but then found some bugs and deleted the patch in the comment (but it seems I left the mention of it).  I pushed updates based on the bugs I found to [this branch](https://github.com/keith-turner/accumulo/tree/3144-scan-server-failures) that I mentioned earlier.  I think it would be good to merge those changes in.  With those changes I was no longer seeing this bug in testing.",
                "bodyText": "@keith-turner - I don't see the patch you mentioned. Is this good to merge without the patch?\n\nI had initially posted a patch, but then found some bugs and deleted the patch in the comment (but it seems I left the mention of it).  I pushed updates based on the bugs I found to this branch that I mentioned earlier.  I think it would be good to merge those changes in.  With those changes I was no longer seeing this bug in testing.",
                "createdAt": "2023-01-17T15:53:19Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5Sp3M8",
                "body": "This was backported to 2.1.1 in #3163 ",
                "bodyText": "This was backported to 2.1.1 in #3163",
                "createdAt": "2023-01-18T09:00:42Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 22,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4olJ-W",
                "comments": [
                    {
                        "bodyText": "It seems helpful to have these comments about when each constructor is used. I wonder if creating new methods (maybe startScan or continueScan) which would use the respective constructor would be helpful or not. Might not make much of a difference, just an observation",
                        "body": "It seems helpful to have these comments about when each constructor is used. I wonder if creating new methods (maybe `startScan` or `continueScan`) which would use the respective constructor would be helpful or not. Might not make much of a difference, just an observation",
                        "startLine": null,
                        "line": 459,
                        "originalLine": 459,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Do you mean create static methods (e.g. ScanReservation.startScan() and ScanReservation.continueScan()), that call a private constructor and return the ScanReservation object? I'm not sure we need that level of indirection, IMO the comments are enough.",
                        "body": "Do you mean create static methods (e.g. ScanReservation.startScan() and ScanReservation.continueScan()), that call a private constructor and return the ScanReservation object? I'm not sure we need that level of indirection, IMO the comments are enough.",
                        "startLine": null,
                        "line": 459,
                        "originalLine": 459,
                        "originalStartLine": null
                    }
                ],
                "line": 459,
                "startLine": 459,
                "originalLine": 459,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ScanServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4omww9",
                "comments": [
                    {
                        "bodyText": "I was wondering if we need to handle the case of the delegate having already set some failures.   Digging around to answer that question I found this code.  Looking at that I think as long the tablet resolver does not return anything that failed then it will naturally be added to the failure by delegate.startMultiScan().  I added comments elsewhere about getting the tablet resolver to not contain failures.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  if (!reservation.getFailures().isEmpty()) {\n          \n          \n            \n                    ims.result.setFailures(reservation.getFailures());\n          \n          \n            \n                  }",
                        "body": "I was wondering if we need to handle the case of the delegate having already set some failures.   Digging around to answer that question I found [this code](https://github.com/apache/accumulo/blob/af6b4978d42e7a1f9102a7ec9605be51c67bb595/server/tserver/src/main/java/org/apache/accumulo/tserver/scan/LookupTask.java#L108-L113).  Looking at that I think as long the tablet resolver does not return anything that failed then it will naturally be added to the failure by delegate.startMultiScan().  I added comments elsewhere about getting the tablet resolver to not contain failures.  \r\n\r\n```suggestion\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 924,
                        "originalStartLine": 921
                    },
                    {
                        "bodyText": "Addressed in 381dac3",
                        "body": "Addressed in 381dac3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 924,
                        "originalStartLine": 921
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 924,
                "originalStartLine": 921,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ScanServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4omxnK",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    failures.add(extent);\n          \n          \n            \n                    failures.add(extent);\n          \n          \n            \n                    tabletsMetadata.remove(extent);",
                        "body": "```suggestion\r\n        failures.add(extent);\r\n        tabletsMetadata.remove(extent);\r\n```",
                        "startLine": null,
                        "line": 527,
                        "originalLine": 519,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 381dac3",
                        "body": "Addressed in 381dac3",
                        "startLine": null,
                        "line": 527,
                        "originalLine": 519,
                        "originalStartLine": null
                    }
                ],
                "line": 527,
                "startLine": 527,
                "originalLine": 519,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ScanServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4omyAN",
                "comments": [
                    {
                        "bodyText": "The following should be the set of non failure tablets, with changes in other comments.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  batch.keySet().forEach(extent -> {\n          \n          \n            \n                  reservation.tabletMetadata.keySet().forEach(extent -> {",
                        "body": "The following should be the set of non failure tablets, with changes in other comments.\r\n\r\n```suggestion\r\n      reservation.tabletMetadata.keySet().forEach(extent -> {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 909,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 381dac3",
                        "body": "Addressed in 381dac3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 909,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 909,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ScanServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4omyOg",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              private Map<KeyExtent,TabletMetadata> reserveFilesInner(Collection<KeyExtent> extents,\n          \n          \n            \n              /*\n          \n          \n            \n               * All extents passed in should end up in either the returned map or the failures set, but no extent should be in both.\n          \n          \n            \n               */\n          \n          \n            \n              private Map<KeyExtent,TabletMetadata> reserveFilesInner(Collection<KeyExtent> extents,",
                        "body": "```suggestion\r\n  /*\r\n   * All extents passed in should end up in either the returned map or the failures set, but no extent should be in both.\r\n   */\r\n  private Map<KeyExtent,TabletMetadata> reserveFilesInner(Collection<KeyExtent> extents,\r\n```",
                        "startLine": null,
                        "line": 509,
                        "originalLine": 501,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 381dac3",
                        "body": "Addressed in 381dac3",
                        "startLine": null,
                        "line": 509,
                        "originalLine": 501,
                        "originalStartLine": null
                    }
                ],
                "line": 509,
                "startLine": 509,
                "originalLine": 501,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ScanServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4omyW-",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                        failures.add(extent);\n          \n          \n            \n                        failures.add(extent);\n          \n          \n            \n                        tabletsMetadata.remove(extent);",
                        "body": "```suggestion\r\n            failures.add(extent);\r\n            tabletsMetadata.remove(extent);\r\n```",
                        "startLine": null,
                        "line": 614,
                        "originalLine": 605,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 381dac3",
                        "body": "Addressed in 381dac3",
                        "startLine": null,
                        "line": 614,
                        "originalLine": 605,
                        "originalStartLine": null
                    }
                ],
                "line": 614,
                "startLine": 614,
                "originalLine": 605,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ScanServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4omyl9",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  tabletsMetadata = reserveFilesInner(extents.keySet(), myReservationId, failedReservations);\n          \n          \n            \n                  failedReservations.clear();\n          \n          \n            \n                  tabletsMetadata = reserveFilesInner(extents.keySet(), myReservationId, failedReservations);",
                        "body": "```suggestion\r\n      failedReservations.clear();\r\n      tabletsMetadata = reserveFilesInner(extents.keySet(), myReservationId, failedReservations);\r\n```",
                        "startLine": null,
                        "line": 667,
                        "originalLine": 656,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 381dac3",
                        "body": "Addressed in 381dac3",
                        "startLine": null,
                        "line": 667,
                        "originalLine": 656,
                        "originalStartLine": null
                    }
                ],
                "line": 667,
                "startLine": 667,
                "originalLine": 656,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ScanServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4omy3-",
                "comments": [
                    {
                        "bodyText": "We could add a validation on the return.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                // Convert failures\n          \n          \n            \n                if(!Collections.disjoint(tabletsMetadata.keySet(), failures) || !extents.keySet().equals(Sets.union(tabletsMetadata.keySet(), failures)) {\n          \n          \n            \n                    throw new AssertionError(\"bug in reserverFilesInner \"+extents.keySet()+\" \"+tabletsMetadata.keySet()+\" \"+failures);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                // Convert failures",
                        "body": "We could add a validation on the return.\r\n\r\n```suggestion\r\n    if(!Collections.disjoint(tabletsMetadata.keySet(), failures) || !extents.keySet().equals(Sets.union(tabletsMetadata.keySet(), failures)) {\r\n        throw new AssertionError(\"bug in reserverFilesInner \"+extents.keySet()+\" \"+tabletsMetadata.keySet()+\" \"+failures);\r\n    }\r\n\r\n    // Convert failures\r\n```",
                        "startLine": null,
                        "line": 678,
                        "originalLine": 658,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 381dac3",
                        "body": "Addressed in 381dac3",
                        "startLine": null,
                        "line": 678,
                        "originalLine": 658,
                        "originalStartLine": null
                    }
                ],
                "line": 678,
                "startLine": 678,
                "originalLine": 658,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ScanServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner",
            "ctubbsii",
            "DomGarguilo"
        ],
        "tdv": 15.0,
        "description": {
            "bodyText": "The ScanServer was throwing a NotServingTabletException in both the scan and batch scan cases when there was a failure in loading the tablet. Modified the batch scan case to return the failed tablets in the response instead of throwing the exception.\nCloses #3144"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2186,
        "title": {
            "body": "Refactor common table property validation to reduce duplication",
            "bodyHTML": "Refactor common table property validation to reduce duplication"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg3MjE3NDMwMQ==",
                "body": "I think there are some issues with the comments being reformatted in Property.java. Did the formatter do this?",
                "bodyText": "I think there are some issues with the comments being reformatted in Property.java. Did the formatter do this?",
                "createdAt": "2021-07-01T11:42:39Z",
                "author": "dlmarion"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg3MjE5OTk4OA==",
                "body": "I‚Äôll see if I can fix it ‚Äì but I didn‚Äôt do it.  Not sure where its coming from at this point.",
                "bodyText": "I‚Äôll see if I can fix it ‚Äì but I didn‚Äôt do it.  Not sure where its coming from at this point.",
                "createdAt": "2021-07-01T12:20:50Z",
                "author": "EdColeman"
            }
        ],
        "total_comments_count": 17,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwNjM1Nzk0OnYy",
                "comments": [
                    {
                        "bodyText": "I'm not sure that this comment change is an improvement. Was this intended, or a formatting issue?",
                        "body": "I'm not sure that this comment change is an improvement. Was this intended, or a formatting issue?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 238,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 238,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwNjM2NTc0OnYy",
                "comments": [
                    {
                        "bodyText": "It seems this comment may have been meant as a separator between MANAGER and the TSERV properties below. It seems that just moving it down one line would be appropriate",
                        "body": "It seems this comment may have been meant as a separator between MANAGER and the TSERV properties below. It seems that just moving it down one line would be appropriate",
                        "startLine": null,
                        "line": null,
                        "originalLine": 351,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 351,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwNjM4NTI5OnYy",
                "comments": [
                    {
                        "bodyText": "I think you can add the following here and remove the loop at line 1237:\nif (p.getKey().startsWith(Property.TABLE_PREFIX.getKey())) {\n    validTableProperties.add(p.getKey());\n}",
                        "body": "I think you can add the following here and remove the loop at line 1237:\r\n\r\n```\r\nif (p.getKey().startsWith(Property.TABLE_PREFIX.getKey())) {\r\n    validTableProperties.add(p.getKey());\r\n}\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1231,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1231,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwODM4Mzk1OnYy",
                "comments": [
                    {
                        "bodyText": "I'm not sure I follow what this test is trying to do. Based on the name, it seems like a one-off sanity check during development. What would a regression in this test mean in the future? Based on the name and description, it seems like it would imply that a previous refactor was somehow breaking, even though that refactor had already happened in the past.\nIf the test still has value for current/contemporary code after the refactor, the name should reflect what it is currently testing, well after this refactor is completed. If not, it should be deleted.",
                        "body": "I'm not sure I follow what this test is trying to do. Based on the name, it seems like a one-off sanity check during development. What would a regression in this test mean in the future? Based on the name and description, it seems like it would imply that a previous refactor was somehow breaking, even though that refactor had already happened in the past.\r\n\r\nIf the test still has value for current/contemporary code after the refactor, the name should reflect what it is currently testing, well after this refactor is completed. If not, it should be deleted.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 198,
                        "originalStartLine": 192
                    },
                    {
                        "bodyText": "The test compares that that current code and the proposed code maps contain the same contents.  It was basically a one-off to show that the proposed code functions the same as what is there now.  No issues deleting it if the code modifications are accepted.",
                        "body": "The test compares that that current code and the proposed code maps contain the same contents.  It was basically a one-off to show that the proposed code functions the same as what is there now.  No issues deleting it if the code modifications are accepted.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 198,
                        "originalStartLine": 192
                    },
                    {
                        "bodyText": "Okay. Just thinking that after this is merged, \"proposed code\" doesn't make sense anymore, because the proposed code becomes the current code. So, after this is merged, it will look like a test comparing the current implementation to a previous one that no longer exists.",
                        "body": "Okay. Just thinking that after this is merged, \"proposed code\" doesn't make sense anymore, because the proposed code becomes the current code. So, after this is merged, it will look like a test comparing the current implementation to a previous one that no longer exists.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 198,
                        "originalStartLine": 192
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 198,
                "originalStartLine": 192,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/conf/PropertyTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwODQyMTcxOnYy",
                "comments": [
                    {
                        "bodyText": "I like that this logic was moved into the previous loop to avoid looping twice... although I don't think it will make much of a difference since it's a static initializer that will only run once and there aren't that many to loop through.\nHowever, it's a problem that the logic has changed to no longer exclude PREFIX types that start with \"table.\" This structure should not contain prefix types, but only actual keys. We don't want users to be able to set table.custom. or table.constraint. by themselves because these are incorrectly deemed to be valid properties when they aren't.",
                        "body": "I like that this logic was moved into the previous loop to avoid looping twice... although I don't think it will make much of a difference since it's a static initializer that will only run once and there aren't that many to loop through.\r\n\r\nHowever, it's a problem that the logic has changed to no longer exclude PREFIX types that start with \"table.\" This structure should not contain prefix types, but only actual keys. We don't want users to be able to set `table.custom.` or `table.constraint.` by themselves because these are incorrectly deemed to be valid properties when they aren't.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1562,
                        "originalStartLine": 1560
                    },
                    {
                        "bodyText": "Should be fixed in update",
                        "body": "Should be fixed in update",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1562,
                        "originalStartLine": 1560
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1562,
                "originalStartLine": 1560,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwODQyODgzOnYy",
                "comments": [
                    {
                        "bodyText": "These don't even need to be assigned here. These 4 lines could be deleted, if the = new HashMap<>(); part were appended to their respective private static final lines instead of just removing the = null; and assigning them here.",
                        "body": "These don't even need to be assigned here. These 4 lines could be deleted, if the `= new HashMap<>();` part were appended to their respective `private static final` lines instead of just removing the `= null;` and assigning them here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1550,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1550,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwODQzMTc1OnYy",
                "comments": [
                    {
                        "bodyText": "Not sure how this made it in. It seems a few blank lines made their way in. It's not a big deal, but the changeset is smaller if these are omitted when not needed.",
                        "body": "Not sure how this made it in. It seems a few blank lines made their way in. It's not a big deal, but the changeset is smaller if these are omitted when not needed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1557,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1557,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwODQzNDM2OnYy",
                "comments": [
                    {
                        "bodyText": "I can't tell if this got moved for aesthetics, or some other reason. Does it behave the same here as it did before, when it was below the if/else?",
                        "body": "I can't tell if this got moved for aesthetics, or some other reason. Does it behave the same here as it did before, when it was below the if/else?",
                        "startLine": null,
                        "line": 1548,
                        "originalLine": 1553,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes - I believe that it was always being assigned - so I moved it to the top so it was easier to see that was happening.",
                        "body": "Yes - I believe that it was always being assigned - so I moved it to the top so it was easier to see that was happening.",
                        "startLine": null,
                        "line": 1548,
                        "originalLine": 1553,
                        "originalStartLine": null
                    }
                ],
                "line": 1548,
                "startLine": 1548,
                "originalLine": 1553,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwOTE3NTU3OnYy",
                "comments": [
                    {
                        "bodyText": "Minor wording clarification (especially using \"prevents\" rather than \"avoids\" to make it clear it's important for blocking the behavior we don't want, and why).\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  // exclude prefix types (avoids being able to set things like table.custom or\n          \n          \n            \n                  // table.constraint)\n          \n          \n            \n                  // exclude prefix types (prevents setting a prefix type, like table.custom or\n          \n          \n            \n                  // table.constraint, directly, since they aren't valid properties on their own)",
                        "body": "Minor wording clarification (especially using \"prevents\" rather than \"avoids\" to make it clear it's important for blocking the behavior we don't want, and why).\r\n```suggestion\r\n      // exclude prefix types (prevents setting a prefix type, like table.custom or\r\n      // table.constraint, directly, since they aren't valid properties on their own)\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1557,
                        "originalStartLine": 1556
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1557,
                "originalStartLine": 1556,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIwOTE4MTg1OnYy",
                "comments": [
                    {
                        "bodyText": "LOL, I think you removed the other blank line, but then added this one. It must be the IDE. It's fine either way. I just think it's funny.",
                        "body": "LOL, I think you removed the other blank line, but then added this one. It must be the IDE. It's fine either way. I just think it's funny.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1544,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1544,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "dlmarion",
            "ctubbsii"
        ],
        "tdv": -10.0,
        "description": {
            "bodyText": "Move duplcated code for table property validation to one place\nMinor check-style fixes.\nfix possible nulll pointer warning (FateServiceHandler)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3437,
        "title": {
            "body": "moves hosting request processing from tserver to manager",
            "bodyHTML": "moves hosting request processing from tserver to manager"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4uIHWn",
                "comments": [
                    {
                        "bodyText": "Is this a max of 10M entries?",
                        "body": "Is this a max of 10M entries?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Should be a max mem of 10M not including overhead of java objects.",
                        "body": "Should be a max mem of 10M not including overhead of java objects.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Ok, I wasn't sure what the Weigher and maxWeight meant. I think it would be more clear if we did something like:\n  private static final long TEN_MB = 10 * 1024 * 1024;\n\nand then use TEN_MB as the method parameter.",
                        "body": "Ok, I wasn't sure what the Weigher and maxWeight meant. I think it would be more clear if we did something like:\r\n```\r\n  private static final long TEN_MB = 10 * 1024 * 1024;\r\n```\r\n\r\nand then use TEN_MB as the method parameter.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "updated in 7ea8d0b",
                        "body": "updated in 7ea8d0b",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 111,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/ManagerClientServiceHandler.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "dlmarion"
        ],
        "tdv": 29.0,
        "description": {
            "bodyText": "Processing of hosting request was moved from the tserver to manager so that the tablet group watcher could be notified.  This considerably reduces the delay in getting an ondemand tablet hosted.\nIntroduced a cache to avoid reprocessing hosting request for the same tablet in a short time period.\nModified the update of the hosting request column to use a conditional mutation.  This avoids a metadata read before write (the read is now done by the mutation conditions) and avoids race conditions.\nMoving the hosting request to the manager could introduce scaling problems, however the cache can help with this. The reduced latency for hosting ondemand tablet is needed, so if there are scaling problems a solution will need to be found that has low latency for hosting."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2129,
        "title": {
            "body": "Mark external compaction props as experimental",
            "bodyHTML": "Mark external compaction props as experimental"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg1MjQzODMxNw==",
                "body": "One more overall comment for this PR: try to keep the subject line for the commit short, and provide additional details in the \"body\" of the git log. If you merge from the GitHub UI, it will give you an opportunity to rewrite the subject line and body of the commit message before committing.",
                "bodyText": "One more overall comment for this PR: try to keep the subject line for the commit short, and provide additional details in the \"body\" of the git log. If you merge from the GitHub UI, it will give you an opportunity to rewrite the subject line and body of the commit message before committing.",
                "createdAt": "2021-06-01T20:54:05Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 13,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4MjI5MDE4OnYy",
                "comments": [
                    {
                        "bodyText": "System.err or using the logger might be better for these.",
                        "body": "System.err or using the logger might be better for these.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'll change to err. My intent was for something to go to .out and not get lost with all of the other output in the log file. Using .err may be more noticeable to the user.",
                        "body": "I'll change to `err`. My intent was for something to go to .out and not get lost with all of the other output in the log file. Using `.err` may be more noticeable to the user.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Changed to err in 42d0c84",
                        "body": "Changed to `err` in 42d0c8445d964f079f39ef4c50d05559191982a3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 45,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/compaction-coordinator/src/main/java/org/apache/accumulo/coordinator/CoordinatorExecutable.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4MjI5NDg3OnYy",
                "comments": [
                    {
                        "bodyText": "Is coordinator.server redundant, since a coordinator is a server?",
                        "body": "Is `coordinator.server` redundant, since a coordinator *is* a server?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1083,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Removed \"server\" from new property names in 42d0c84",
                        "body": "Removed \"server\" from new property names in 42d0c8445d964f079f39ef4c50d05559191982a3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1083,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1083,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4MjMwMzY4OnYy",
                "comments": [
                    {
                        "bodyText": "This directly exposes \"thrift\" as the RPC implementation. It should probably not reference thrift.",
                        "body": "This directly exposes \"thrift\" as the RPC implementation. It should probably not reference thrift.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1051,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Removed 'thrift' from property names in 42d0c84",
                        "body": "Removed 'thrift' from property names in 42d0c8445d964f079f39ef4c50d05559191982a3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1051,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1051,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4MjMzMDk3OnYy",
                "comments": [
                    {
                        "bodyText": "Ports 9100 and 9101 are registered IANA-assigned ports, and should not be used as the default port numbers for these services. Port 9100, in particular, is used by HP JetDirect printing protocol, and probably commonly referenced in enterprise firewall rules (or anywhere where somebody uses networked printers).",
                        "body": "Ports 9100 and 9101 are registered IANA-assigned ports, and should not be used as the default port numbers for these services. Port 9100, in particular, is used by HP JetDirect printing protocol, and probably commonly referenced in enterprise firewall rules (or anywhere where somebody uses networked printers).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1055,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Modified the default port properties in 42d0c84. The default coordinator port is 9132 and the default compactor port is 9133.",
                        "body": "Modified the default port properties in 42d0c8445d964f079f39ef4c50d05559191982a3. The default coordinator port is 9132 and the default compactor port is 9133.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1055,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1055,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4MjMzNjA5OnYy",
                "comments": [
                    {
                        "bodyText": "The default for port search should be false to be consistent with other services that have this feature.",
                        "body": "The default for port search should be false to be consistent with other services that have this feature.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1029,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Changed default from \"true\" to \"false\" in 42d0c84",
                        "body": "Changed default from \"true\" to \"false\" in 42d0c8445d964f079f39ef4c50d05559191982a3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1029,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1029,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "ctubbsii"
        ],
        "tdv": 20.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2369,
        "title": {
            "body": "Fix incorrect scan range output in getsplits command",
            "bodyHTML": "Fix incorrect scan range output in getsplits command"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4c4l2l",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              // tables when a table with lexigraphically earlier ID is queried.\n          \n          \n            \n              // tables when a lexicographical ordered table with an earlier ID is queried.",
                        "body": "```suggestion\r\n  // tables when a lexicographical ordered table with an earlier ID is queried.\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 523,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 523,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ShellIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4c4mTR",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              // of the first 360 or so tables, the test exits witn no results. In initial runs of the ITs\n          \n          \n            \n              // of the first 360 or so tables, the test exits with no results. In initial runs of the ITs",
                        "body": "```suggestion\r\n  // of the first 360 or so tables, the test exits with no results. In initial runs of the ITs\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 534,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 534,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ShellIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jmark99",
            "milleruntime"
        ],
        "tdv": null,
        "description": {
            "bodyText": "In the Accumulo shell, calling getsplits with the verbose option can result in incorret output. It occurs when the tableId of the table\nhappens to be a single character and there are other tables where the tableId starts with the same character. This results in the output of getsplits displaying splits for the other tables as well.\nCloses #2356"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1678,
        "title": {
            "body": "Close zkClients created by TaskStateModelFactory",
            "bodyHTML": "Close zkClients created by TaskStateModelFactory"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDgwNzQ3MTM3Mg==",
                "body": "This PR is ready to be merged, approved by @dasahcc    \r\nFinal commit message:\r\n## Close zkClients created by TaskStateModelFactory ##\r\nThis PR closes the previously unclosed zkClients in TaskStateModelFactory, also added retry timeout and log to the logic. ",
                "bodyText": "This PR is ready to be merged, approved by @dasahcc\nFinal commit message:\nClose zkClients created by TaskStateModelFactory\nThis PR closes the previously unclosed zkClients in TaskStateModelFactory, also added retry timeout and log to the logic.",
                "createdAt": "2021-03-25T20:55:57Z",
                "author": "NealSun96"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDgwODQ5NTQwNg==",
                "body": "This PR is ready to be merged, approved by @narendly     \r\nFinal commit message:\r\n## Close zkClients created by TaskStateModelFactory ##\r\nThis PR closes the previously unclosed zkClients in TaskStateModelFactory, also added retry timeout and log to the logic. ",
                "bodyText": "This PR is ready to be merged, approved by @narendly\nFinal commit message:\nClose zkClients created by TaskStateModelFactory\nThis PR closes the previously unclosed zkClients in TaskStateModelFactory, also added retry timeout and log to the logic.",
                "createdAt": "2021-03-26T20:37:35Z",
                "author": "NealSun96"
            }
        ],
        "total_comments_count": 24,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NTQzOTI4OnYy",
                "comments": [
                    {
                        "bodyText": "Do you think add thins zkClient.close() to a final block may help? If assert fail then this Utest fails, we will miss the close.",
                        "body": "Do you think add thins `zkClient.close()` to a final block may help? If assert fail then this Utest fails, we will miss the close. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 98,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Very true, let me fix it up.",
                        "body": "Very true, let me fix it up. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 98,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 98,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/task/TestTaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NTUwMDYwOnYy",
                "comments": [
                    {
                        "bodyText": "I think it might be helpful to break this function down to:\n\nDo I/O read from ZK (createZkClient(manager), getTargetThreadPoolSize(), cache the read value into a local variable), and close the zkClient.\nInitialize an instance of executorService using the read value\n\nYou could refactor Step 1 into the constructor (this should be 2-3 lines at most) - this way, createThreadPoolExecutor only does what its name says it does - just creating creating an in-memory thread pool, nothing else. This way, we keep private functions modular and the intent is clearer to readers.",
                        "body": "I think it might be helpful to break this function down to:\r\n\r\n1. Do I/O read from ZK (`createZkClient(manager)`, `getTargetThreadPoolSize()`, cache the read value into a local variable), and close the zkClient.\r\n2. Initialize an instance of `executorService` using the read value\r\n\r\nYou could refactor Step 1 into the constructor (this should be 2-3 lines at most) - this way, `createThreadPoolExecutor` only does what its name says it does - just creating creating an in-memory thread pool, nothing else. This way, we keep private functions modular and the intent is clearer to readers.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 185,
                        "originalStartLine": 172
                    },
                    {
                        "bodyText": "@narendly That's a good suggestion. Unfortunately, to keep things DRY, the constructor has to use this(), and Call to 'this()' must be first statement in constructor body.\nThe current approach is fine in my opinion: createThreadPoolExecutor() does what it needs to do to create the thread pool and cleans up after itself.",
                        "body": "@narendly That's a good suggestion. Unfortunately, to keep things DRY, the constructor has to use `this()`, and `Call to 'this()' must be first statement in constructor body`. \r\n\r\nThe current approach is fine in my opinion: `createThreadPoolExecutor()` does what it needs to do to create the thread pool and cleans up after itself. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 185,
                        "originalStartLine": 172
                    },
                    {
                        "bodyText": "Can you refactor ZK operations out first? What I am saying is if Executors.newScheduledThreadPool() fails for any reason would the zkclient be closed properly? I don't see any issues with closing zkclient before we move straight on to thread pool initialization.",
                        "body": "Can you refactor ZK operations out first? What I am saying is if `Executors.newScheduledThreadPool()` fails for any reason would the zkclient be closed properly? I don't see any issues with closing zkclient before we move straight on to thread pool initialization.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 185,
                        "originalStartLine": 172
                    },
                    {
                        "bodyText": "That's true. I wouldn't be able to refactor it into the constructor, but I can place that I/O first in this helper. Thanks for the tips.",
                        "body": "That's true. I wouldn't be able to refactor it into the constructor, but I can place that I/O first in this helper. Thanks for the tips. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 185,
                        "originalStartLine": 172
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 185,
                "originalStartLine": 172,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NjAzODMzOnYy",
                "comments": [
                    {
                        "bodyText": "Use try..finally to make sure the client is close, even any exception is thrown before the close.",
                        "body": "Use try..finally to make sure the client is close, even any exception is thrown before the close.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 183,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 183,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NjE0ODQwOnYy",
                "comments": [
                    {
                        "bodyText": "Could we also set the client config so we don't have infinite operation timeout for this particular zk client?",
                        "body": "Could we also set the client config so we don't have infinite operation timeout for this particular zk client?",
                        "startLine": null,
                        "line": 180,
                        "originalLine": 172,
                        "originalStartLine": null
                    }
                ],
                "line": 180,
                "startLine": 180,
                "originalLine": 172,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NjU4MzcxOnYy",
                "comments": [
                    {
                        "bodyText": "This might be problematic (only applies to SharedZkClient):\n  /**\n   * Construct and init a ZkConnection Manager.\n   *\n   * @param zkConnection\n   * @param connectionTimeout\n   */\n  protected ZkConnectionManager(IZkConnection zkConnection, long connectionTimeout,\n      String monitorKey) {\n    super(zkConnection, (int) connectionTimeout, HelixZkClient.DEFAULT_OPERATION_TIMEOUT,\n        new BasicZkSerializer(new SerializableSerializer()), MONITOR_TYPE, monitorKey, null, true);\n    _monitorKey = monitorKey;\n    LOG.info(\"ZkConnection {} was created for sharing.\", _monitorKey);\n  }\n\nEven if we set and pass in a zkClientConfig, it just gets ignored and will take on a default value, which is infinite. It only honors connectInitTimeout. This is unfortunately a limitation for shared zk client - I'm okay with not addressing this in this PR, but we should document this erroneous behavior.\nAlso, is there a reason we're not giving a client config with timeout to FederatedZkClient?",
                        "body": "This might be problematic (only applies to SharedZkClient):\r\n\r\n```\r\n  /**\r\n   * Construct and init a ZkConnection Manager.\r\n   *\r\n   * @param zkConnection\r\n   * @param connectionTimeout\r\n   */\r\n  protected ZkConnectionManager(IZkConnection zkConnection, long connectionTimeout,\r\n      String monitorKey) {\r\n    super(zkConnection, (int) connectionTimeout, HelixZkClient.DEFAULT_OPERATION_TIMEOUT,\r\n        new BasicZkSerializer(new SerializableSerializer()), MONITOR_TYPE, monitorKey, null, true);\r\n    _monitorKey = monitorKey;\r\n    LOG.info(\"ZkConnection {} was created for sharing.\", _monitorKey);\r\n  }\r\n```\r\n\r\nEven if we set and pass in a zkClientConfig, it just gets ignored and will take on a default value, which is infinite. It only honors `connectInitTimeout`. This is unfortunately a limitation for shared zk client - I'm okay with not addressing this in this PR, but we should document this erroneous behavior.\r\n\r\nAlso, is there a reason we're not giving a client config with timeout to FederatedZkClient?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 165,
                        "originalStartLine": 164
                    },
                    {
                        "bodyText": "Strange. I will revert these lines then, since setting the retry timeout is obsolete. Issue created: #1682.\nI'm not adding a timeout to FederatedZkClient because it creates new connections, instead of possibly reuses old connections like SharedZkClient. I don't see the possibility of newly created connections having mismatching zxid problems and hang infinitely; if that's a concern, then ZkBaseDataAccessor or ZkBucketDataAccessor should also set a retry timeout. In short, since it creates new connections, I don't see it as necessary to go beyond the default behavior and set retry timeouts.",
                        "body": "Strange. I will revert these lines then, since setting the retry timeout is obsolete. Issue created: https://github.com/apache/helix/issues/1682.\r\n\r\nI'm not adding a timeout to FederatedZkClient because it creates new connections, instead of possibly reuses old connections like SharedZkClient. I don't see the possibility of newly created connections having mismatching zxid problems and hang infinitely; if that's a concern, then `ZkBaseDataAccessor` or `ZkBucketDataAccessor` should also set a retry timeout. In short, since it creates new connections, I don't see it as necessary to go beyond the default behavior and set retry timeouts. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 165,
                        "originalStartLine": 164
                    },
                    {
                        "bodyText": "My suggestion is to give it a valid zk client config with a non-infinite operation retry timeout regardless of what type of ZkClient we're using here.\nOperation retry timeout and the server's refusal due to lagging zxid seen are different modes of failure. Other Helix APIs like you mentioned can accept client config at creation - those are managed by users.",
                        "body": "My suggestion is to give it a valid zk client config with a non-infinite operation retry timeout regardless of what type of ZkClient we're using here.\r\n\r\nOperation retry timeout and the server's refusal due to lagging zxid seen are different modes of failure. Other Helix APIs like you mentioned can accept client config at creation - those are managed by users.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 165,
                        "originalStartLine": 164
                    },
                    {
                        "bodyText": "Discussed offline: there are values in preventing infinite hanging on client side. Added retry timeout to both.",
                        "body": "Discussed offline: there are values in preventing infinite hanging on client side. Added retry timeout to both. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 165,
                        "originalStartLine": 164
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 165,
                "originalStartLine": 164,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NjU5ODU4OnYy",
                "comments": [
                    {
                        "bodyText": "It might be beneficial to add an INFO log here that includes various pieces of information (e.g. targetThreadPoolSize)",
                        "body": "It might be beneficial to add an INFO log here that includes various pieces of information (e.g. `targetThreadPoolSize`)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 193,
                        "originalStartLine": 179
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 193,
                "originalStartLine": 179,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NzE3NzQ3OnYy",
                "comments": [
                    {
                        "bodyText": "Question: Are 60 secs good enough? There could transient zk connection issues. My suggestion is make it a bit longer, eg. 5, 10, or 30 mins, to have a higher rate of success.\nAnd a code style suggestion, try to use java Duration instead of this hard coded number, which will make it much easier to read/maintain.\nDuration.ofMinutes(10).toMillis()\n\nThe lazy initialization way mentioned by @jiajunwang was also what I was thinking of when I debugged the code here. Too many things are done for constructing an object was my first impression: creating a ZkClient, connecting to zk and reading the znode. If I did, I'd prefer to lazily construct the threadpool/reading znode after this factory object is constructed. Can be done later.",
                        "body": "Question: Are 60 secs good enough? There could transient zk connection issues. My suggestion is make it a bit longer, eg. 5, 10, or 30 mins, to have a higher rate of success.\r\nAnd a code style suggestion, try to use java `Duration` instead of this hard coded number, which will make it much easier to read/maintain.\r\n```\r\nDuration.ofMinutes(10).toMillis()\r\n```\r\n\r\nThe lazy initialization way mentioned by @jiajunwang was also what I was thinking of when I debugged the code here. Too many things are done for constructing an object was my first impression: creating a ZkClient, connecting to zk and reading the znode. If I did, I'd prefer to lazily construct the threadpool/reading znode after this factory object is constructed. Can be done later.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 137,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That's a good suggestion on code style, thanks. I will go with 5 minutes.\nLazy construction was considered when this feature was first developed. It requires a larger scale of code change, so it won't be done in this bugfix PR. It can be done later, though, like you said.",
                        "body": "That's a good suggestion on code style, thanks. I will go with 5 minutes.\r\n\r\nLazy construction was considered when this feature was first developed. It requires a larger scale of code change, so it won't be done in this bugfix PR. It can be done later, though, like you said. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 137,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 137,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NzE5NTY2OnYy",
                "comments": [
                    {
                        "bodyText": "Why not also include the zkclient creation RealmAwareZkClient zkClient = TaskStateModelFactory.createZkClient(anyParticipantManager); in the verify method? It seems a better practice to create and close the zkclient in the same method.",
                        "body": "Why not also include the zkclient creation `RealmAwareZkClient zkClient = TaskStateModelFactory.createZkClient(anyParticipantManager);` in the verify method? It seems a better practice to create and close the zkclient in the same method.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The test case is for zkClient, so style-wise I didn't want to wrap the main actor in a helper; but since it's a test case, sure, why not.",
                        "body": "The test case is for zkClient, so style-wise I didn't want to wrap the main actor in a helper; but since it's a test case, sure, why not. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 96,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/task/TestTaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgwMzcwNjExOnYy",
                "comments": [
                    {
                        "bodyText": "No hard code \"5\" please.\nGiven this setup won't work as you mentioned in github.com//issues/1682, do we still need to add it here? It seems to be confusing.",
                        "body": "1. No hard code \"5\" please.\r\n2. Given this setup won't work as you mentioned in github.com/apache/helix/issues/1682, do we still need to add it here? It seems to be confusing.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 138,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done.\nIt works for FederatedClient, so we still need to add it.",
                        "body": "1. Done.\r\n2. It works for FederatedClient, so we still need to add it. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 138,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 138,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgwNjYzMTcyOnYy",
                "comments": [
                    {
                        "bodyText": "Nit: constant declarations also include final. So it would be private static final int",
                        "body": "Nit: constant declarations also include `final`. So it would be `private static final int`",
                        "startLine": null,
                        "line": null,
                        "originalLine": 56,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Wow, my 10pm brain is really sloppy... thanks for catching it.",
                        "body": "Wow, my 10pm brain is really sloppy... thanks for catching it. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 56,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 56,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "NealSun96",
            "jiajunwang",
            "huizhilu",
            "xyuanlu",
            "junkaixue",
            "narendly"
        ],
        "tdv": 5.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1677\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nTaskStateModelFactory creates either a shared ZkClient or a FederatedZkClient to read the user-customized number for the configurable thread pool. Neither of the ZkClients are closed in the end, resulting in thread leakage.\nTests\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 1264, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,046.067 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1264, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:24 h\n[INFO] Finished at: 2021-03-26T12:09:01-07:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2590,
        "title": {
            "body": "Change location where Thread.start() is called to resolve ErrorProne warning",
            "bodyHTML": "Change location where Thread.start() is called to resolve ErrorProne warning"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5AUwdH",
                "body": "LGTM! Thanks for taking care of this Dave. EP no longer flags it with this change.",
                "bodyText": "LGTM! Thanks for taking care of this Dave. EP no longer flags it with this change.",
                "createdAt": "2022-03-25T16:15:34Z",
                "author": "jmark99"
            }
        ],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4f2I3x",
                "comments": [
                    {
                        "bodyText": "When collapsing a lambda down to one statement, it is often no longer necessary to have the curly braces, return statement and final semi-colon, except for formatting/readability. This one would have wrapped either way, but it would only be 2 lines instead of 3 if the curly braces were removed.",
                        "body": "When collapsing a lambda down to one statement, it is often no longer necessary to have the curly braces, return statement and final semi-colon, except for formatting/readability. This one would have wrapped either way, but it would only be 2 lines instead of 3 if the curly braces were removed.",
                        "startLine": null,
                        "line": 368,
                        "originalLine": 368,
                        "originalStartLine": null
                    }
                ],
                "line": 368,
                "startLine": 368,
                "originalLine": 368,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/ThriftTransportPool.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4f2JKQ",
                "comments": [
                    {
                        "bodyText": "This changes behavior. This start method is now called whenever this method is called, instead of it only being called once when it is memoized. I think that was the point of memoizing this, to force it to be a singleton, and to prevent it from being started multiple times. If start is called here, and this method is only called once, I'm not sure there's any point in having it memoized anymore.",
                        "body": "This changes behavior. This start method is now called whenever this method is called, instead of it only being called once when it is memoized. I think that was the point of memoizing this, to force it to be a singleton, and to prevent it from being started multiple times. If start is called here, and this method is only called once, I'm not sure there's any point in having it memoized anymore.",
                        "startLine": null,
                        "line": 837,
                        "originalLine": 837,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If start is called here, and this method is only called once, I'm not sure there's any point in having it memoized anymore.\n\nI agree this could be changed further. This method is only called from ClientContext.getTransportPool, and it's only called once.",
                        "body": "> If start is called here, and this method is only called once, I'm not sure there's any point in having it memoized anymore.\r\n\r\nI agree this could be changed further. This method is only called from ClientContext.getTransportPool, and it's only called once.",
                        "startLine": null,
                        "line": 837,
                        "originalLine": 837,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Additional cleanup in #2612",
                        "body": "Additional cleanup in #2612 ",
                        "startLine": null,
                        "line": 837,
                        "originalLine": 837,
                        "originalStartLine": null
                    }
                ],
                "line": 837,
                "startLine": 837,
                "originalLine": 837,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/ThriftTransportPool.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "jmark99",
            "ctubbsii"
        ],
        "tdv": 5.0,
        "description": {
            "bodyText": "Closes #2581"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1701,
        "title": {
            "body": "Add method to get properties with a prefix",
            "bodyHTML": "Add method to get properties with a prefix"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4Nzg4ODAyMA==",
                "body": "One open question is should I be filtering out sensitive properties?",
                "bodyText": "One open question is should I be filtering out sensitive properties?",
                "createdAt": "2020-09-06T20:08:41Z",
                "author": "jkosh44"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4NzkxNzA5MQ==",
                "body": "> One open question is should I be filtering out sensitive properties?\r\n\r\nThis is for pluggable components, vetted by an admin, and placed on a server's class path. So, it has access to everything anyway. I don't think there'd be any point.\r\n\r\nAlso, did you see the test failure? I'm not sure if that's related to these changes, but might be worth looking into.",
                "bodyText": "One open question is should I be filtering out sensitive properties?\n\nThis is for pluggable components, vetted by an admin, and placed on a server's class path. So, it has access to everything anyway. I don't think there'd be any point.\nAlso, did you see the test failure? I'm not sure if that's related to these changes, but might be worth looking into.",
                "createdAt": "2020-09-06T22:18:15Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4NzkyMjI1Ng==",
                "body": "> Overall, this looks good to me. I made some suggestions for improvements, and I think this could use a unit test, but otherwise, looks okay.\r\n> \r\n> Are you able to include a unit test for this?\r\n\r\n@ctubbsii I've made the changes you suggested (and I'm adding a unit test now). One scenario I was thinking about is if the provided prefix is a subset of a recognized prefix.\r\nFor example, let's say we are given the prefix \"a.b.c\" and \"a.b\" is a recognized prefix. Then it may be more efficient to check for this scenario and only iterate through \"a.b\"'s properties instead of iterating through all the properties. What do you think (if that made sense)?",
                "bodyText": "Overall, this looks good to me. I made some suggestions for improvements, and I think this could use a unit test, but otherwise, looks okay.\nAre you able to include a unit test for this?\n\n@ctubbsii I've made the changes you suggested (and I'm adding a unit test now). One scenario I was thinking about is if the provided prefix is a subset of a recognized prefix.\nFor example, let's say we are given the prefix \"a.b.c\" and \"a.b\" is a recognized prefix. Then it may be more efficient to check for this scenario and only iterate through \"a.b\"'s properties instead of iterating through all the properties. What do you think (if that made sense)?",
                "createdAt": "2020-09-06T22:41:44Z",
                "author": "jkosh44"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4NzkyMjM4Ng==",
                "body": "> > One open question is should I be filtering out sensitive properties?\r\n> \r\n> This is for pluggable components, vetted by an admin, and placed on a server's class path. So, it has access to everything anyway. I don't think there'd be any point.\r\n> \r\n> Also, did you see the test failure? I'm not sure if that's related to these changes, but might be worth looking into.\r\n\r\nI did not see the test failure, did it happen during the checks? If so can you send a link? I thought all the checks passed.",
                "bodyText": "One open question is should I be filtering out sensitive properties?\n\nThis is for pluggable components, vetted by an admin, and placed on a server's class path. So, it has access to everything anyway. I don't think there'd be any point.\nAlso, did you see the test failure? I'm not sure if that's related to these changes, but might be worth looking into.\n\nI did not see the test failure, did it happen during the checks? If so can you send a link? I thought all the checks passed.",
                "createdAt": "2020-09-06T22:42:28Z",
                "author": "jkosh44"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4Nzk3MTA1MA==",
                "body": "> I did not see the test failure, did it happen during the checks? If so can you send a link? I thought all the checks passed.\r\n\r\nhttps://github.com/apache/accumulo/runs/1078818587\r\n\r\nIt happened with commit f4e3c51efed22f9c17185bf023883ecb1962e6e9 . It might just have been a transient issue with GitHub Actions containers, or an unrelated problem. It did not seem to reoccur with your latest commits.\r\n\r\nSpeaking of your commits. You don't need to force-push when update the PR. In fact, it actually makes it harder to review, because it GitHub sends notifications to followers showing the diff between the current code and the previous... but that link doesn't work on force-pushes, because the earlier commits are no longer present. When it comes time to merge, we'll squash it all down to one, anyway, so it's better to just add commits instead of force-pushing.",
                "bodyText": "I did not see the test failure, did it happen during the checks? If so can you send a link? I thought all the checks passed.\n\nhttps://github.com/apache/accumulo/runs/1078818587\nIt happened with commit f4e3c51 . It might just have been a transient issue with GitHub Actions containers, or an unrelated problem. It did not seem to reoccur with your latest commits.\nSpeaking of your commits. You don't need to force-push when update the PR. In fact, it actually makes it harder to review, because it GitHub sends notifications to followers showing the diff between the current code and the previous... but that link doesn't work on force-pushes, because the earlier commits are no longer present. When it comes time to merge, we'll squash it all down to one, anyway, so it's better to just add commits instead of force-pushing.",
                "createdAt": "2020-09-07T01:41:16Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4Nzk4MDUwNQ==",
                "body": "@ctubbsii Sorry about the force pushing, bad habits. I'll add the verify to my tests, thanks for the info, I'm not as familiar with EasyMock as I'd like to be.\r\n\r\nDid you see my comment about the prefix subset?",
                "bodyText": "@ctubbsii Sorry about the force pushing, bad habits. I'll add the verify to my tests, thanks for the info, I'm not as familiar with EasyMock as I'd like to be.\nDid you see my comment about the prefix subset?",
                "createdAt": "2020-09-07T02:11:16Z",
                "author": "jkosh44"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4Nzk4MjUyNw==",
                "body": "> Did you see my comment about the prefix subset?\r\n\r\nI missed it the first time. I think I see what you're suggesting, but I don't think it's worth it. If you can show that it's a substantive performance advantage, then it might make sense... but I suspect it'd be a negligible difference, and just more code complexity to maintain, without real benefit.",
                "bodyText": "Did you see my comment about the prefix subset?\n\nI missed it the first time. I think I see what you're suggesting, but I don't think it's worth it. If you can show that it's a substantive performance advantage, then it might make sense... but I suspect it'd be a negligible difference, and just more code complexity to maintain, without real benefit.",
                "createdAt": "2020-09-07T02:17:15Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4Nzk4NzcwNw==",
                "body": "I agree with the complexity comment. I'm good to merge if you are.",
                "bodyText": "I agree with the complexity comment. I'm good to merge if you are.",
                "createdAt": "2020-09-07T02:32:58Z",
                "author": "jkosh44"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4Nzk5OTU0MA==",
                "body": "Thanks for the PR @jkosh44 !\r\n\r\nI see you've contributed before, but you're not on our \"people\" page, listing contributors. If you wish to be added as a contributor to https://accumulo.apache.org/people/ , please open a pull request to add yourself at https://github.com/apache/accumulo-website/edit/master/pages/people.md and leave a reference to `apache/accumulo#1701` in your commit log.\r\n\r\nIf you intend to be a regular contributor to Accumulo projects, please consider subscribing to our developer mailing list (https://accumulo.apache.org/contact-us/) and introducing yourself. :smiley_cat:",
                "bodyText": "Thanks for the PR @jkosh44 !\nI see you've contributed before, but you're not on our \"people\" page, listing contributors. If you wish to be added as a contributor to https://accumulo.apache.org/people/ , please open a pull request to add yourself at https://github.com/apache/accumulo-website/edit/master/pages/people.md and leave a reference to apache/accumulo#1701 in your commit log.\nIf you intend to be a regular contributor to Accumulo projects, please consider subscribing to our developer mailing list (https://accumulo.apache.org/contact-us/) and introducing yourself. üò∫",
                "createdAt": "2020-09-07T03:09:23Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY4ODAwODMzOA==",
                "body": "Thanks for the review @ctubbsii! \r\nI'm not sure how regularly I plan on contributing, but I'll do all that now. ",
                "bodyText": "Thanks for the review @ctubbsii!\nI'm not sure how regularly I plan on contributing, but I'll do all that now.",
                "createdAt": "2020-09-07T03:35:05Z",
                "author": "jkosh44"
            }
        ],
        "total_comments_count": 23,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzUyNzU2OnYy",
                "comments": [
                    {
                        "bodyText": "I know this should probably have a @since tag, I'm just not sure what version to put. Please let me know and I'll add it.",
                        "body": "I know this should probably have a `@since` tag, I'm just not sure what version to put. Please let me know and I'll add it.",
                        "startLine": null,
                        "line": 65,
                        "originalLine": 64,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "2.1.0 would be the version we would add this kind of thing to.",
                        "body": "2.1.0 would be the version we would add this kind of thing to.",
                        "startLine": null,
                        "line": 65,
                        "originalLine": 64,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks, added",
                        "body": "Thanks, added",
                        "startLine": null,
                        "line": 65,
                        "originalLine": 64,
                        "originalStartLine": null
                    }
                ],
                "line": 65,
                "startLine": 65,
                "originalLine": 64,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/PluginEnvironment.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzYyMTQ0OnYy",
                "comments": [
                    {
                        "bodyText": "This method isn't necessary, since this loop can be avoided.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              /**\n          \n          \n            \n               * Checks if the given property prefix is valid. A valid property prefix is equal to some prefix\n          \n          \n            \n               * defined in this class.\n          \n          \n            \n               *\n          \n          \n            \n               * @param prefix\n          \n          \n            \n               *          property prefix\n          \n          \n            \n               * @return true if prefix is valid (recognized)\n          \n          \n            \n               */\n          \n          \n            \n              public static boolean isValidPropertyPrefix(String prefix) {\n          \n          \n            \n                return validPrefixes.contains(prefix);\n          \n          \n            \n              }",
                        "body": "This method isn't necessary, since this loop can be avoided.\r\n```suggestion\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1247,
                        "originalStartLine": 1235
                    },
                    {
                        "bodyText": "Removed",
                        "body": "Removed",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1247,
                        "originalStartLine": 1235
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1247,
                "originalStartLine": 1235,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzYyMjY2OnYy",
                "comments": [
                    {
                        "bodyText": "This check for valid prefix property can be avoided, by checking the returned object from Property.getPropertyByKey(prefix):\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  if (Property.isValidPropertyPrefix(prefix)) {\n          \n          \n            \n                    Property propertyPrefix = Property.getPropertyByKey(prefix);\n          \n          \n            \n                  Property propertyPrefix = Property.getPropertyByKey(prefix);\n          \n          \n            \n                  if (propertyPrefix != null && propertyPrefix.getType() == PropertyType.PREFIX) {",
                        "body": "This check for valid prefix property can be avoided, by checking the returned object from `Property.getPropertyByKey(prefix)`:\r\n\r\n```suggestion\r\n      Property propertyPrefix = Property.getPropertyByKey(prefix);\r\n      if (propertyPrefix != null && propertyPrefix.getType() == PropertyType.PREFIX) {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 85,
                        "originalStartLine": 84
                    },
                    {
                        "bodyText": "Fixed",
                        "body": "Fixed",
                        "startLine": null,
                        "line": null,
                        "originalLine": 85,
                        "originalStartLine": 84
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 85,
                "originalStartLine": 84,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/ServiceEnvironmentImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzYyNDA0OnYy",
                "comments": [
                    {
                        "bodyText": "This can be more succinctly written with streams:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                    Map<String,String> properties = new HashMap<>();\n          \n          \n            \n                    for (Entry<String,String> prop : acfg) {\n          \n          \n            \n                      if (prop.getKey().startsWith(prefix)) {\n          \n          \n            \n                        properties.put(prop.getKey(), prop.getValue());\n          \n          \n            \n                      }\n          \n          \n            \n                    }\n          \n          \n            \n                    return properties;\n          \n          \n            \n                  }\n          \n          \n            \n                    return StreamSupport.stream(acfg.spliterator(), false)\n          \n          \n            \n                        .filter(prop -> prop.getKey().startsWith(prefix))\n          \n          \n            \n                        .collect(Collectors.toMap(Entry::getKey, Entry::getValue));",
                        "body": "This can be more succinctly written with streams:\r\n```suggestion\r\n        return StreamSupport.stream(acfg.spliterator(), false)\r\n            .filter(prop -> prop.getKey().startsWith(prefix))\r\n            .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": 88
                    },
                    {
                        "bodyText": "Fixed",
                        "body": "Fixed",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": 88
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 95,
                "originalStartLine": 88,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/ServiceEnvironmentImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2ODE0OnYy",
                "comments": [
                    {
                        "bodyText": "The verify method is actually a varargs, so you can pass both in one:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              @After\n          \n          \n            \n              public void verifyMocks() {\n          \n          \n            \n                verify(srvCtx);\n          \n          \n            \n                verify(acfg);\n          \n          \n            \n              }\n          \n          \n            \n              @After\n          \n          \n            \n              public void verifyMocks() {\n          \n          \n            \n                verify(srvCtx, acfg);\n          \n          \n            \n              }",
                        "body": "The verify method is actually a varargs, so you can pass both in one:\r\n\r\n```suggestion\r\n  @After\r\n  public void verifyMocks() {\r\n    verify(srvCtx, acfg);\r\n  }\r\n\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 54,
                        "originalStartLine": 49
                    },
                    {
                        "bodyText": "Fixed",
                        "body": "Fixed",
                        "startLine": null,
                        "line": null,
                        "originalLine": 54,
                        "originalStartLine": 49
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 54,
                "originalStartLine": 49,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/ServiceEnvironmentImplTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "jkosh44",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Closes #1627"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1625,
        "title": {
            "body": "Drop current state of the task on disable instances",
            "bodyHTML": "Drop current state of the task on disable instances"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc3MTIwMDM1MQ==",
                "body": "This PR is ready to be merged.\r\nFinal commit message:\r\n\r\nDrop current state of the task on disabled instances\r\n\r\nIn this commit, if an instance is not enabled, the controller drops\r\nthe current state of the task on the disabled node before assigning \r\nthe task to another instance. Otherwise, once the instance becomes\r\nenabled again the controller will see two running tasks.\r\n",
                "bodyText": "This PR is ready to be merged.\nFinal commit message:\nDrop current state of the task on disabled instances\nIn this commit, if an instance is not enabled, the controller drops\nthe current state of the task on the disabled node before assigning\nthe task to another instance. Otherwise, once the instance becomes\nenabled again the controller will see two running tasks.",
                "createdAt": "2021-02-01T22:21:29Z",
                "author": "alirezazamani"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTY3NzE4OnYy",
                "comments": [
                    {
                        "bodyText": "NIT : Let's not have the variable name same as the function name.",
                        "body": "NIT : Let's not have the variable name same as the function name.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 822,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the review. Fixed.",
                        "body": "Thanks for the review. Fixed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 822,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 822,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "alirezazamani",
            "junkaixue"
        ],
        "tdv": 16.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #1624\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn this PR, if an instance is not enabled, the controller drops the current state of the task on the disabled node first before assigning the task to a new instance. Otherwise, once the instance becomes enable controller will see two running tasks.\n\nTests\n\n\n The following tests are written for this issue:\nTestTaskCurrentStateDrop.testDropCurrentStateDisableInstance\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\nHelix-core:\n\n\n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR] org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack.testLackEnoughInstances(org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack)\n[ERROR]   Run 1: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:281 ¬ª Helix Failed to dr...\n[ERROR]   Run 2: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:273 ¬ª Helix Cluster CLUS...\n[INFO] \n[INFO] \n[ERROR] Tests run: 1258, Failures: 1, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:30 h\n[INFO] Finished at: 2021-02-01T11:11:56-08:00\n[INFO] ------------------------------------------------------------------------\n\nThe failed test passed when I run it individually.\nmvn test -Dtest=\"TestCrushAutoRebalanceNonRack\"\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 28.689 s - in org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  34.777 s\n[INFO] Finished at: 2021-02-01T11:28:43-08:00\n[INFO] ------------------------------------------------------------------------\n\nHelix-rest:\n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 102.54 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:48 min\n[INFO] Finished at: 2021-02-01T11:30:59-08:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2462,
        "title": {
            "body": "Enabling INFO level for helix logs for TestClusterStatusMonitorLifecycle integration test.",
            "bodyHTML": "Enabling INFO level for helix logs for TestClusterStatusMonitorLifecycle integration test."
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5bMM7h",
                "body": "> Please excuse my ignorance, but isn't there resource settings for log4j which we can work with.\r\n\r\nYeah there is a way to configure the log level for particular package/class in `log4j2.properties`. However, there is no way to configure the log level for a particular test as the setting is applicable for all the tests within the module and enabling `INFO` level for `helix-core` tests is expensive as the log size grew to ~2.5GB. So, unfortunately programatically changing the log level is the only way out.",
                "bodyText": "Please excuse my ignorance, but isn't there resource settings for log4j which we can work with.\n\nYeah there is a way to configure the log level for particular package/class in log4j2.properties. However, there is no way to configure the log level for a particular test as the setting is applicable for all the tests within the module and enabling INFO level for helix-core tests is expensive as the log size grew to ~2.5GB. So, unfortunately programatically changing the log level is the only way out.",
                "createdAt": "2023-05-01T16:32:17Z",
                "author": "parakhnr"
            },
            {
                "id": "IC_kwDOAPIHxc5bOXwu",
                "body": "This PR is ready to merge, approved by @desaikomal.\r\n\r\nCommit message:\r\nEnabling INFO level for helix logs for TestClusterStatusMonitorLifecycle integration test.",
                "bodyText": "This PR is ready to merge, approved by @desaikomal.\nCommit message:\nEnabling INFO level for helix logs for TestClusterStatusMonitorLifecycle integration test.",
                "createdAt": "2023-05-01T22:54:36Z",
                "author": "parakhnr"
            }
        ],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4tC2l3",
                "comments": [
                    {
                        "bodyText": "This is not needed for new class creation. Just move the function as a private function in that test class.",
                        "body": "This is not needed for new class creation. Just move the function as a private function in that test class.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 11,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Hmmm I made a new class, just so that in future if anybody needs to enable the logs for the test, they can simply use this class rather than starting from scratch. So, should I make it private or keep the helper class?",
                        "body": "Hmmm I made a new class, just so that in future if anybody needs to enable the logs for the test, they can simply use this class rather than starting from scratch. So, should I make it private or keep the helper class? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 11,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 11,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/LogHelper.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "parakhnr",
            "junkaixue",
            "desaikomal"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nN/A.\n\nNOTE: Since we aren't fixing the actual issue I am marking this as N/A\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nWe need more context to debug the failing TestClusterStatusMonitorLifecyle integration test as we aren't able to reproduce the issue locally. So, we enable INFO level logging for org.apache.helix package.\nNOTE: This change will increase the log size for the tests from ~15 MB to ~50MB. We will revert the logging level back to ERROR once we fix the issue.\nTests\n\n The following tests are written for this issue:\nN/A\n\nChanges that Break Backward Compatibility (Optional)\nN/A\nDocumentation (Optional)\nN/A\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4287,
        "title": {
            "body": "Accumulo 4234",
            "bodyHTML": "Accumulo 4234"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM50qyX-",
                "body": "Is this targeting an incorrect branch?  Should it be elasticity instead of main?",
                "bodyText": "Is this targeting an incorrect branch?  Should it be elasticity instead of main?",
                "createdAt": "2024-02-21T17:19:52Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM50q9tw",
                "body": "No, It should be in elasticity. ",
                "bodyText": "No, It should be in elasticity.",
                "createdAt": "2024-02-21T17:32:39Z",
                "author": "ArbaazKhan1"
            },
            {
                "id": "IC_kwDOACaFSM50rGUx",
                "body": "Did you consider sharing the error counter with the metrics.  With one counter used for the checks and exported as a metric, that may help keep those values in sync as well as protect against future changes where one or the other was used someplace without realizing that they need to be updated together.",
                "bodyText": "Did you consider sharing the error counter with the metrics.  With one counter used for the checks and exported as a metric, that may help keep those values in sync as well as protect against future changes where one or the other was used someplace without realizing that they need to be updated together.",
                "createdAt": "2024-02-21T17:39:52Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM50ritA",
                "body": "I haven't, how would I go about sharing it with the metrics. ",
                "bodyText": "I haven't, how would I go about sharing it with the metrics.",
                "createdAt": "2024-02-21T18:08:21Z",
                "author": "ArbaazKhan1"
            },
            {
                "id": "IC_kwDOACaFSM50sV9O",
                "body": "One way would be like: https://docs.micrometer.io/micrometer/reference/concepts/gauges.html#_manually_incrementing_or_decrementing_a_gauge\r\n\r\nbut not sure that is feasible here.  It may also be possible to \"wrap\" an AtomicIntger / Long with the metrics registration.  That is, create an Atomic and then pass that to the metrics during registration (rather than creating and using the reference as shown in that reference)",
                "bodyText": "One way would be like: https://docs.micrometer.io/micrometer/reference/concepts/gauges.html#_manually_incrementing_or_decrementing_a_gauge\nbut not sure that is feasible here.  It may also be possible to \"wrap\" an AtomicIntger / Long with the metrics registration.  That is, create an Atomic and then pass that to the metrics during registration (rather than creating and using the reference as shown in that reference)",
                "createdAt": "2024-02-21T19:45:47Z",
                "author": "EdColeman"
            }
        ],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM45Fmqu",
                "comments": [
                    {
                        "bodyText": "This line increments the metric that indicates that an error occurred in the TabletGroupWatcher.",
                        "body": "This line increments the metric that indicates that an error occurred in the TabletGroupWatcher.",
                        "startLine": null,
                        "line": 401,
                        "originalLine": 401,
                        "originalStartLine": null
                    }
                ],
                "line": 401,
                "startLine": 401,
                "originalLine": 401,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM45FnmF",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    lookForTabletsNeedingVolReplacement = tabletMgmtStats.totalVolumeReplacements != 0 || tabletMgmtStats.tabletsWithErrors != 0;\n          \n          \n            \n                    // Continue to look for tablets needing volume replacement if there was an error processing\n          \n          \n            \n                    // tablets in the call to manageTablets() or if we are still performing volume replacement. We\n          \n          \n            \n                    // only want to stop looking for tablets that need volume replacement when we have successfully\n          \n          \n            \n                    // processed all tablet metadata and no more volume replacements are being performed.\n          \n          \n            \n                    lookForTabletsNeedingVolReplacement = tabletMgmtStats.totalVolumeReplacements != 0 || tabletMgmtStats.tabletsWithErrors != 0;",
                        "body": "```suggestion\r\n        // Continue to look for tablets needing volume replacement if there was an error processing\r\n        // tablets in the call to manageTablets() or if we are still performing volume replacement. We\r\n        // only want to stop looking for tablets that need volume replacement when we have successfully\r\n        // processed all tablet metadata and no more volume replacements are being performed.\r\n        lookForTabletsNeedingVolReplacement = tabletMgmtStats.totalVolumeReplacements != 0 || tabletMgmtStats.tabletsWithErrors != 0;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 685,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 685,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM45PR7G",
                "comments": [
                    {
                        "bodyText": "If we are not currently looking for volume replacements and there is an error, then we may start looking for them.  Once we have stopped looking for them we do not need to start again even if there is an error.  Could add an if for this.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                    lookForTabletsNeedingVolReplacement = tabletMgmtStats.totalVolumeReplacements != 0 || tabletMgmtStats.tabletsWithErrors != 0;\n          \n          \n            \n                   // If currently looking for volume replacements, determine if the next round needs to look.\n          \n          \n            \n                   if(lookForTabletsNeedingVolReplacement){\n          \n          \n            \n                    // TODO add the suggested comment from @dlmarion here\n          \n          \n            \n                    lookForTabletsNeedingVolReplacement = tabletMgmtStats.totalVolumeReplacements != 0 || tabletMgmtStats.tabletsWithErrors != 0;\n          \n          \n            \n                    }",
                        "body": "If we are not currently looking for volume replacements and there is an error, then we may start looking for them.  Once we have stopped looking for them we do not need to start again even if there is an error.  Could add an if for this.\r\n\r\n```suggestion\r\n       // If currently looking for volume replacements, determine if the next round needs to look.\r\n       if(lookForTabletsNeedingVolReplacement){\r\n        // TODO add the suggested comment from @dlmarion here\r\n        lookForTabletsNeedingVolReplacement = tabletMgmtStats.totalVolumeReplacements != 0 || tabletMgmtStats.tabletsWithErrors != 0;\r\n        }\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 685,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 685,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM45QPyb",
                "comments": [
                    {
                        "bodyText": "The formatter wrapped this oddly.  When it does this I usually do the following to fix it.\n\nCollapse the long comment to a single line\nrun the mvn build to reformat the code\n\nThe above usually produces a much more nicely formatted comment.",
                        "body": "The formatter wrapped this oddly.  When it does this I usually do the following to fix it.\r\n\r\n 1. Collapse the long comment to a single line\r\n 2. run the mvn build to reformat the code\r\n\r\nThe above usually produces a much more nicely formatted comment.",
                        "startLine": null,
                        "line": 688,
                        "originalLine": 688,
                        "originalStartLine": null
                    }
                ],
                "line": 688,
                "startLine": 688,
                "originalLine": 688,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ArbaazKhan1",
            "EdColeman",
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Added a counter in TableMgmtStats to help keep track of tablets that have errors while running a full scan.\nFixes issue#4234"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1614,
        "title": {
            "body": "Create max tablets property in new bulk import",
            "bodyHTML": "Create max tablets property in new bulk import"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzMTQ4MjEyMg==",
                "body": "This PR addresses #1559 for 2.1.  Related to #1560 ",
                "bodyText": "This PR addresses #1559 for 2.1.  Related to #1560",
                "createdAt": "2020-05-20T13:43:26Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzMTQ5NTk0MQ==",
                "body": "Would there be any use for this being able to be overridden on a table basis?  My thought would be that \"normally\" there would be a system limit, but because of some external factor there was a need to allow this to be on a case by case basis.  It could go either way - say, I know this is not optimal, but for this table I want to allow more files, or the other way would be that the system allows X, but for this table I want it to be less because at X bad things happen and I'd rather fail.",
                "bodyText": "Would there be any use for this being able to be overridden on a table basis?  My thought would be that \"normally\" there would be a system limit, but because of some external factor there was a need to allow this to be on a case by case basis.  It could go either way - say, I know this is not optimal, but for this table I want to allow more files, or the other way would be that the system allows X, but for this table I want it to be less because at X bad things happen and I'd rather fail.",
                "createdAt": "2020-05-20T14:07:03Z",
                "author": "EdColeman"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzMTUwOTk4Nw==",
                "body": "> Would there be any use for this being able to be overridden on a table basis? \r\n\r\nThat is a good question.  I hadn't thought about that level of granularity but it would make sense as a next step.  And the bulk import API does operate on a per table basis so that makes sense too.  I will look into it as I am not sure how that would work with the implementation in Master.\r\n\r\n",
                "bodyText": "Would there be any use for this being able to be overridden on a table basis?\n\nThat is a good question.  I hadn't thought about that level of granularity but it would make sense as a next step.  And the bulk import API does operate on a per table basis so that makes sense too.  I will look into it as I am not sure how that would work with the implementation in Master.",
                "createdAt": "2020-05-20T14:29:41Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzMTUxMjEzMA==",
                "body": "I like the suggestion for a table prop, that aligns more closely with the user experience rather than how its implemented.\r\n\r\nThe check on the client side is nice for fail fast, but we may want a check on the server side to ensure correctness.  However the server side check is really hard to test, if there is a client side check.\r\n\r\nAre there any plans to make the old bulk import code respect this property?",
                "bodyText": "I like the suggestion for a table prop, that aligns more closely with the user experience rather than how its implemented.\nThe check on the client side is nice for fail fast, but we may want a check on the server side to ensure correctness.  However the server side check is really hard to test, if there is a client side check.\nAre there any plans to make the old bulk import code respect this property?",
                "createdAt": "2020-05-20T14:33:10Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzMTUzNjAxNA==",
                "body": "> Are there any plans to make the old bulk import code respect this property?\r\n\r\nI made some comments on #1560 about this as I think it would be worth it but should be discussed since it would incur adding a new feature to a deprecated API.  The implementation in 2.1 was a priority first though.",
                "bodyText": "Are there any plans to make the old bulk import code respect this property?\n\nI made some comments on #1560 about this as I think it would be worth it but should be discussed since it would incur adding a new feature to a deprecated API.  The implementation in 2.1 was a priority first though.",
                "createdAt": "2020-05-20T15:09:23Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzMjI4MjY5Ng==",
                "body": "@EdColeman @keith-turner I made some improvements based on your feedback.  I had to move the check inside the computeMapping methods so it would fail fast on a single file.  This also lead me to clean up the exception as it comes out of a future so the user will just get a single IllegalArgumentException.",
                "bodyText": "@EdColeman @keith-turner I made some improvements based on your feedback.  I had to move the check inside the computeMapping methods so it would fail fast on a single file.  This also lead me to clean up the exception as it comes out of a future so the user will just get a single IllegalArgumentException.",
                "createdAt": "2020-05-21T18:56:31Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzYzODA0OA==",
                "body": "@keith-turner I added new data for the max tablet test but now I am getting different tablet counts when using the LoadPlan.  I can't figure out why.  The changes i just pushed up in 3ff589a don't throw an IllegalArgumentException when using the LoadPlan.  Here are the counts I get:\r\n```\r\n2020-06-02T11:35:34,990 [bulk.BulkImport] DEBUG: The file f3.rf mapped to 1 tablets.\r\n2020-06-02T11:35:34,991 [bulk.BulkImport] DEBUG: The file f4.rf mapped to 2 tablets.\r\n2020-06-02T11:35:34,991 [bulk.BulkImport] DEBUG: The file f2.rf mapped to 1 tablets.\r\n2020-06-02T11:35:34,991 [bulk.BulkImport] DEBUG: The file f1.rf mapped to 1 tablets.\r\n```",
                "bodyText": "@keith-turner I added new data for the max tablet test but now I am getting different tablet counts when using the LoadPlan.  I can't figure out why.  The changes i just pushed up in 3ff589a don't throw an IllegalArgumentException when using the LoadPlan.  Here are the counts I get:\n2020-06-02T11:35:34,990 [bulk.BulkImport] DEBUG: The file f3.rf mapped to 1 tablets.\n2020-06-02T11:35:34,991 [bulk.BulkImport] DEBUG: The file f4.rf mapped to 2 tablets.\n2020-06-02T11:35:34,991 [bulk.BulkImport] DEBUG: The file f2.rf mapped to 1 tablets.\n2020-06-02T11:35:34,991 [bulk.BulkImport] DEBUG: The file f1.rf mapped to 1 tablets.",
                "createdAt": "2020-06-02T15:46:45Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzcwNDgyNg==",
                "body": "> @keith-turner I added new data for the max tablet test but now I am getting different tablet counts when using the LoadPlan. I can't figure out why. The changes i just pushed up in 3ff589a don't throw an IllegalArgumentException when using the LoadPlan\r\n\r\nI took a look at the code quickly. I think what is happening is that for the RangeType.TABLE it does nothing for this on the client side and maps the range to tablets on the server side.",
                "bodyText": "@keith-turner I added new data for the max tablet test but now I am getting different tablet counts when using the LoadPlan. I can't figure out why. The changes i just pushed up in 3ff589a don't throw an IllegalArgumentException when using the LoadPlan\n\nI took a look at the code quickly. I think what is happening is that for the RangeType.TABLE it does nothing for this on the client side and maps the range to tablets on the server side.",
                "createdAt": "2020-06-02T17:46:01Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzcwNzgwOA==",
                "body": "@milleruntime this is the code that I think is just serving as a pass through on the client side\r\n\r\nhttps://github.com/apache/accumulo/blob/3ff589ac91ac668b433e78fdb3f6a735d5da7091/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java#L461",
                "bodyText": "@milleruntime this is the code that I think is just serving as a pass through on the client side\n\n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\n    \n    \n         Line 461\n      in\n      3ff589a\n    \n  \n  \n    \n\n        \n          \n           extents.add(new KeyExtent(tableId, toText(dest.getEndRow()), toText(dest.getStartRow())));",
                "createdAt": "2020-06-02T17:52:00Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzcxOTc0MA==",
                "body": "> @milleruntime this is the code that I think is just serving as a pass through on the client side\r\n> \r\n> https://github.com/apache/accumulo/blob/3ff589ac91ac668b433e78fdb3f6a735d5da7091/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java#L461\r\n\r\nOK so it looks like a file can only ever have 1 tablet when using ```RangeType.TABLE```.  Is this as intended?  Is this how Accumulo creates files when splitting?",
                "bodyText": "@milleruntime this is the code that I think is just serving as a pass through on the client side\n\n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\n    \n    \n         Line 461\n      in\n      3ff589a\n    \n  \n  \n    \n\n        \n          \n           extents.add(new KeyExtent(tableId, toText(dest.getEndRow()), toText(dest.getStartRow()))); \n        \n    \n  \n\n\n\nOK so it looks like a file can only ever have 1 tablet when using RangeType.TABLE.  Is this as intended?  Is this how Accumulo creates files when splitting?",
                "createdAt": "2020-06-02T18:15:53Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzcyMjQzMw==",
                "body": "> OK so it looks like a file can only ever have 1 tablet when using RangeType.TABLE. Is this as intended? Is this how Accumulo creates files when splitting?\r\n\r\nIt can correspond to one or more tablets, but must map to existing table split points.\r\n\r\nhttps://github.com/apache/accumulo/blob/3fd5cad92f9b63ac19e4466f3f2d5237b905262c/core/src/main/java/org/apache/accumulo/core/data/LoadPlan.java#L71",
                "bodyText": "OK so it looks like a file can only ever have 1 tablet when using RangeType.TABLE. Is this as intended? Is this how Accumulo creates files when splitting?\n\nIt can correspond to one or more tablets, but must map to existing table split points.\n\n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/data/LoadPlan.java\n    \n    \n         Line 71\n      in\n      3fd5cad\n    \n  \n  \n    \n\n        \n          \n                * Range that corresponds to one or more tablets in a table. For a range of this type, the start",
                "createdAt": "2020-06-02T18:21:10Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzczMjA3MQ==",
                "body": "> It can correspond to one or more tablets, but must map to existing table split points.\r\n\r\nThan how come this line in my last commit only maps to 1 tablet?\r\n```     \r\n.loadFileTo(\"f2.rf\", RangeType.TABLE, row(333), row(1333))\r\n```\r\nSince I used the same splits as the other tests, ```\"0333 0666 0999 1333 1666 null\"``` I thought this would map to 3 tablets 0666-0334, 0999-0667, 1333-1000...\r\n\r\n",
                "bodyText": "It can correspond to one or more tablets, but must map to existing table split points.\n\nThan how come this line in my last commit only maps to 1 tablet?\n.loadFileTo(\"f2.rf\", RangeType.TABLE, row(333), row(1333))\n\nSince I used the same splits as the other tests, \"0333 0666 0999 1333 1666 null\" I thought this would map to 3 tablets 0666-0334, 0999-0667, 1333-1000...",
                "createdAt": "2020-06-02T18:33:51Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzc0NTMwMw==",
                "body": "> I thought this would map to 3 tablets 0666-0334, 0999-0667, 1333-1000...\r\n\r\nI am thinking it will on the server side.  So the client passes that single range and then it gets expanded into one or more tablets on the servers side.  \r\n\r\nhttps://github.com/apache/accumulo/blob/3ff589ac91ac668b433e78fdb3f6a735d5da7091/server/master/src/main/java/org/apache/accumulo/master/tableOps/bulkVer2/LoadFiles.java#L339",
                "bodyText": "I thought this would map to 3 tablets 0666-0334, 0999-0667, 1333-1000...\n\nI am thinking it will on the server side.  So the client passes that single range and then it gets expanded into one or more tablets on the servers side.\n\n  \n    \n      accumulo/server/master/src/main/java/org/apache/accumulo/master/tableOps/bulkVer2/LoadFiles.java\n    \n    \n         Line 339\n      in\n      3ff589a\n    \n  \n  \n    \n\n        \n          \n           List<TabletMetadata> tablets = findOverlappingTablets(loadMapEntry.getKey(), tabletIter);",
                "createdAt": "2020-06-02T19:00:10Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzc1NzUwOQ==",
                "body": "> I am thinking it will on the server side. So the client passes that single range and then it gets expanded into one or more tablets on the servers side.\r\n\r\nAh I see.  If that is the case, I should probably add the check for max tablets on the server side as well.  I could see how 1 tablet could easily get expanded beyond the limit.\r\n",
                "bodyText": "I am thinking it will on the server side. So the client passes that single range and then it gets expanded into one or more tablets on the servers side.\n\nAh I see.  If that is the case, I should probably add the check for max tablets on the server side as well.  I could see how 1 tablet could easily get expanded beyond the limit.",
                "createdAt": "2020-06-02T19:25:14Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzc5Njg1Mg==",
                "body": "> Ah I see. If that is the case, I should probably add the check for max tablets on the server side as well. I could see how 1 tablet could easily get expanded beyond the limit.\r\n\r\nIf its possible, then I think the best place to do it on the servers side would be `PrepBulkImport.checkForMerge()` because this is before any files have been loaded to any tablets.  I am not sure if its possible though, because at that point I think the data is grouped by range like `Map<Range, List<File>>`.  To easily do the check we need `Map<File, List<Range>>`. \r\n\r\nAnother option if that does not work is when Range.TABLE is seen AND maxTablets > 0, then we actually try to resolve the range to tablets.   However this kinda defeats the purpose of Range.TABLE as it is for the case when user has the most knowledge and Accumulo can do the least work in the fastest manner.\r\n\r\nNot sure what is best, just trying to think through the options.  Need to look at the code some more too.",
                "bodyText": "Ah I see. If that is the case, I should probably add the check for max tablets on the server side as well. I could see how 1 tablet could easily get expanded beyond the limit.\n\nIf its possible, then I think the best place to do it on the servers side would be PrepBulkImport.checkForMerge() because this is before any files have been loaded to any tablets.  I am not sure if its possible though, because at that point I think the data is grouped by range like Map<Range, List<File>>.  To easily do the check we need Map<File, List<Range>>.\nAnother option if that does not work is when Range.TABLE is seen AND maxTablets > 0, then we actually try to resolve the range to tablets.   However this kinda defeats the purpose of Range.TABLE as it is for the case when user has the most knowledge and Accumulo can do the least work in the fastest manner.\nNot sure what is best, just trying to think through the options.  Need to look at the code some more too.",
                "createdAt": "2020-06-02T20:47:04Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzNzg5OTk4MQ==",
                "body": "@milleruntime the following branch has a change I was experimenting with for adding a server side check... its the top commit\r\n\r\nhttps://github.com/keith-turner/accumulo/tree/accumulo-1614",
                "bodyText": "@milleruntime the following branch has a change I was experimenting with for adding a server side check... its the top commit\nhttps://github.com/keith-turner/accumulo/tree/accumulo-1614",
                "createdAt": "2020-06-03T01:28:44Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzOTA2NjgxOQ==",
                "body": "> @milleruntime the following branch has a change I was experimenting with for adding a server side check... its the top commit\r\n> \r\n> https://github.com/keith-turner/accumulo/tree/accumulo-1614\r\n\r\nThanks.  It took a bit more work than I expected but I think I got the server side (master FATE) check working.   I also added a note to the property description. ",
                "bodyText": "@milleruntime the following branch has a change I was experimenting with for adding a server side check... its the top commit\nhttps://github.com/keith-turner/accumulo/tree/accumulo-1614\n\nThanks.  It took a bit more work than I expected but I think I got the server side (master FATE) check working.   I also added a note to the property description.",
                "createdAt": "2020-06-04T19:23:26Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzOTQ2OTk0OQ==",
                "body": "@keith-turner want to take a last look at this?  I think it is ready to merge.",
                "bodyText": "@keith-turner want to take a last look at this?  I think it is ready to merge.",
                "createdAt": "2020-06-05T13:09:37Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYzOTkzMzYxNA==",
                "body": "@milleruntime I went ahead and merged this because you said you thought it was ready to merge and I worked up a follow on test in #1623.",
                "bodyText": "@milleruntime I went ahead and merged this because you said you thought it was ready to merge and I worked up a follow on test in #1623.",
                "createdAt": "2020-06-06T01:06:54Z",
                "author": "keith-turner"
            }
        ],
        "total_comments_count": 48,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTgyMTcwOnYy",
                "comments": [
                    {
                        "bodyText": "Maybe just a style comment - but I don't think this needs to be in a finally block.  If exception is not thrown, it will fail - otherwise catch (and ignore the exception) and then just continue.",
                        "body": "Maybe just a style comment - but I don't think this needs to be in a finally block.  If exception is not thrown, it will fail - otherwise catch (and ignore the exception) and then just continue.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 197,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I was thinking of the situation where an exception other than IllegalArgumentException is thrown, the property won't be changed back.  Typically this doesn't matter, but I was under the impression we are still striving towards getting the ITs to work as a standalone cluster (even if its still currently fails).",
                        "body": "I was thinking of the situation where an exception other than IllegalArgumentException is thrown, the property won't be changed back.  Typically this doesn't matter, but I was under the impression we are still striving towards getting the ITs to work as a standalone cluster (even if its still currently fails).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 197,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 197,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTk2ODYzOnYy",
                "comments": [
                    {
                        "bodyText": "This check is different than the one in #1560, which ensured a single file did not go to too many tablets.  This is checking that all files do not go to too many tablets.",
                        "body": "This check is different than the one in #1560, which ensured a single file did not go to too many tablets.  This is checking that all files do not go to too many tablets.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 154,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes that is correct.  I am not sure which is better but based on the original description in #1559, I took it as we want to prevent files from mapping to too many tablets.",
                        "body": "Yes that is correct.  I am not sure which is better but based on the original description in #1559, I took it as we want to prevent files from mapping to too many tablets.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 154,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I guess the danger with this check is stopping ingest due to false positives?  Like if I have 100 tablets and 10 files going to all tablets could be normal. I would rather stop 1 file going to all 100 then 10 going to all 100.",
                        "body": "I guess the danger with this check is stopping ingest due to false positives?  Like if I have 100 tablets and 10 files going to all tablets could be normal. I would rather stop 1 file going to all 100 then 10 going to all 100. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 154,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I just looked at #1559 and saw the following sentence.  I would be in favor of preventing a single file from going to too many tablets.  If someone has a large number of tablets and each file is going to a few tablets, they are probably ok with that like you said.\n\nIt would be nice if we could establish a threshold in the bulk import process to abort when encountering a rfile that maps to more than a specified number of extents.",
                        "body": "I just looked at #1559 and saw the following sentence.  I would be in favor of preventing a single file from going to too many tablets.  If someone has a large number of tablets and each file is going to a few tablets, they are probably ok with that like you said.\r\n\r\n> It would be nice if we could establish a threshold in the bulk import process to abort when encountering a rfile that maps to more than a specified number of extents.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 154,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 154,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjAwNzc3OnYy",
                "comments": [
                    {
                        "bodyText": "I am not completely sure, but these two lines may not work as expected sometimes.  What I think may be able to happen is that the property is set on tserver A by the first line and then the second line reads props from tserver B.  If server B does not clear zoocache, then it could return a stale copy w/o the prop set on the first line.  I am not sure if the client side code to get props forces a prop cache clear.",
                        "body": "I am not completely sure, but these two lines may not work as expected sometimes.  What I think may be able to happen is that the property is set on tserver A by the first line and then the second line reads props from tserver B.  If server B does not clear zoocache, then it could return a stale copy w/o the prop set on the first line.  I am not sure if the client side code to get props forces a prop cache clear.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 193,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If it were a table prop, then table could be created with the prop and would not need to clear in finally.",
                        "body": "If it were a table prop, then table could be created with the prop and would not need to clear in finally.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 193,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 193,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDg1NDE5OnYy",
                "comments": [
                    {
                        "bodyText": "I couldn't find a cleaner way to get a single table property from the client side...",
                        "body": "I couldn't find a cleaner way to get a single table property from the client side...",
                        "startLine": null,
                        "line": 144,
                        "originalLine": 144,
                        "originalStartLine": null
                    }
                ],
                "line": 144,
                "startLine": 144,
                "originalLine": 144,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDg2NDc0OnYy",
                "comments": [
                    {
                        "bodyText": "I thought it was cleaner for the user to just drop the ExecutionException coming out of the future since that is just implementation specific.",
                        "body": "I thought it was cleaner for the user to just drop the ExecutionException coming out of the future since that is just implementation specific.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 595,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This could lead to a loss of information for someone debugging.  Like they see a stack trace from a background thread in Accumulo, but they don't know anything about the calling code in the foreground thread.",
                        "body": "This could lead to a loss of information for someone debugging.  Like they see a stack trace from a background thread in Accumulo, but they don't know anything about the calling code in the foreground thread.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 595,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I am not sure if the ExecutionException provides valuable information, but definitely want to wrap the IllegalArgumentException.  I would err on the side of caution with omiting the excution exception in that even if does not currently provide anything useful, it may in future versions of Java.",
                        "body": "I am not sure if the ExecutionException provides valuable information, but definitely want to wrap the IllegalArgumentException.  I would err on the side of caution with omiting the excution exception in that even if does not currently provide anything useful, it may in future versions of Java. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 595,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good point.  Better to error on the side of too much information.",
                        "body": "Good point.  Better to error on the side of too much information.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 595,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 595,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM3Mjc1OnYy",
                "comments": [
                    {
                        "bodyText": "I would wrap e so that stack traces are not lost and anyone getting the exceptions can trace the full code path from their code to the background thread.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                    Throwable t = e.getCause();\n          \n          \n            \n                    if (t instanceof IllegalArgumentException) {\n          \n          \n            \n                      throw (IllegalArgumentException) t;\n          \n          \n            \n                    } else\n          \n          \n            \n                      throw new RuntimeException(t);\n          \n          \n            \n                  }\n          \n          \n            \n                    Throwable t = e.getCause();\n          \n          \n            \n                    if (t instanceof IllegalArgumentException) {\n          \n          \n            \n                      throw new IllegalArgumentException(e);\n          \n          \n            \n                    } else\n          \n          \n            \n                      throw new RuntimeException(e);\n          \n          \n            \n                  }",
                        "body": "I would wrap `e` so that stack traces are not lost and anyone getting the exceptions can trace the full code path from their code to the background thread.\r\n\r\n```suggestion\r\n        Throwable t = e.getCause();\r\n        if (t instanceof IllegalArgumentException) {\r\n          throw new IllegalArgumentException(e);\r\n        } else\r\n          throw new RuntimeException(e);\r\n      }\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 596,
                        "originalStartLine": 591
                    },
                    {
                        "bodyText": "I am not sure this is better than just the Runtime.  I think this will wrap an IllegalArgument around the whole stack, which already has an IllegalArgument at the bottom.  I will play around.",
                        "body": "I am not sure this is better than just the Runtime.  I think this will wrap an IllegalArgument around the whole stack, which already has an IllegalArgument at the bottom.  I will play around.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 596,
                        "originalStartLine": 591
                    },
                    {
                        "bodyText": "See my other comment.  You OK with me keeping the exception handling as-is?",
                        "body": "See my other comment.  You OK with me keeping the exception handling as-is?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 596,
                        "originalStartLine": 591
                    },
                    {
                        "bodyText": "Sorry for the delay @milleruntime.  This fell off my radar.",
                        "body": "Sorry for the delay @milleruntime.  This fell off my radar.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 596,
                        "originalStartLine": 591
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 596,
                "originalStartLine": 591,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTQwOTExOnYy",
                "comments": [
                    {
                        "bodyText": "I recently learned about this new feature in Junit.  It also returns the expected exception if you want to check the message.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                  testBulkFile(false, true);\n          \n          \n            \n                  fail(\"Expected IllegalArgumentException for \" + Property.TABLE_BULK_MAX_TABLETS);\n          \n          \n            \n                } catch (IllegalArgumentException e) {\n          \n          \n            \n                  // expected\n          \n          \n            \n                }\n          \n          \n            \n               Assert.assertThrows(IllegalArgumentException.class, () -> testBulkFile(false, true));",
                        "body": "I recently learned about this new feature in Junit.  It also returns the expected exception if you want to check the message.\r\n\r\n```suggestion\r\n   Assert.assertThrows(IllegalArgumentException.class, () -> testBulkFile(false, true));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 209,
                        "originalStartLine": 204
                    },
                    {
                        "bodyText": "Cool thanks.  I am not sure what happened but Github isn't letting me apply your suggestion.  I will just change it manually.",
                        "body": "Cool thanks.  I am not sure what happened but Github isn't letting me apply your suggestion.  I will just change it manually.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 209,
                        "originalStartLine": 204
                    },
                    {
                        "bodyText": "I settled with keeping the exception handling the way it is now.  I was able to clean up the IT using assertThrows and just checked the causes manually.  I think this is as clean as it is going to get until we move to Junit5.  I did find this library which I thought was interesting: https://assertj.github.io/doc/",
                        "body": "I settled with keeping the exception handling the way it is now.  I was able to clean up the IT using assertThrows and just checked the causes manually.  I think this is as clean as it is going to get until we move to Junit5.  I did find this library which I thought was interesting: https://assertj.github.io/doc/",
                        "startLine": null,
                        "line": null,
                        "originalLine": 209,
                        "originalStartLine": 204
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 209,
                "originalStartLine": 204,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDM3MDk4OnYy",
                "comments": [
                    {
                        "bodyText": "Could mention that this property is only enforced when using the new bulk import API.",
                        "body": "Could mention that this property is only enforced when using the new bulk import API.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 719,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 719,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDM4NTU1OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  Map<String,String> props = new HashMap<>();\n          \n          \n            \n                  props.put(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n          \n          \n            \n                 var props = Map.of(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");",
                        "body": "```suggestion\r\n     var props = Map.of(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 196,
                        "originalStartLine": 195
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 196,
                "originalStartLine": 195,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDQwMDU5OnYy",
                "comments": [
                    {
                        "bodyText": "Not sure if this is possible, but it would be really nice to confirm that exception message contains the offending file name.  Whenever someone runs into this error message, knowing which file caused the problem will be extremely helpful to them.\nIf the test does not do this, I would also recommend creating multiple files.  One that exceeds the limit and few that do not.  Want to ensure in this case the troublesome file is listed in the message.",
                        "body": "Not sure if this is possible, but it would be really nice to confirm that exception message contains the offending file name.  Whenever someone runs into this error message, knowing which file caused the problem will be extremely helpful to them.\r\n\r\nIf the test does not do this, I would also recommend creating multiple files.  One that exceeds the limit and few that do not.  Want to ensure in this case the troublesome file is listed in the message.",
                        "startLine": null,
                        "line": 207,
                        "originalLine": 206,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I have been looking at BulkNewIT to see how we could test this scenario and I think there is an issue with the test data.  This line doesn't make sense to me and seems wrong: https://github.com/milleruntime/accumulo/blob/f71a2d1ba175dbb74a8f9e26151b778c270eaa2c/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java#L315\nThis also made me wonder about exclusivity when creating the load plan.  We don't mention whether the start and end rows are inclusive/exclusive on the load API here.  I was wondering this myself and eventually found it mentioned in the RangeType enum but think it should also be mentioned on the loadFileTo methods, with the startRow and endRow parameters.",
                        "body": "I have been looking at BulkNewIT to see how we could test this scenario and I think there is an issue with the test data.  This line doesn't make sense to me and seems wrong: https://github.com/milleruntime/accumulo/blob/f71a2d1ba175dbb74a8f9e26151b778c270eaa2c/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java#L315\r\n\r\nThis also made me wonder about exclusivity when creating the load plan.  We don't mention whether the start and end rows are inclusive/exclusive on the load API [here](https://github.com/apache/accumulo/blob/3fd5cad92f9b63ac19e4466f3f2d5237b905262c/core/src/main/java/org/apache/accumulo/core/data/LoadPlan.java#L187).  I was wondering this myself and eventually found it mentioned in the ```RangeType``` enum but think it should also be mentioned on the ```loadFileTo``` methods, with the ```startRow``` and ```endRow``` parameters.",
                        "startLine": null,
                        "line": 207,
                        "originalLine": 206,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I looked at BulkNewIT line 315,  I think what is going is that the file with a hash of h3 overlaps two tablets.  It overlaps a tablet with an end row of 1333 and another tablet with an end row of 1666.  So that file is added as expected for those two tablets.",
                        "body": "I looked at BulkNewIT line 315,  I think what is going is that the file with a hash of h3 overlaps two tablets.  It overlaps a tablet with an end row of 1333 and another tablet with an end row of 1666.  So that file is added as expected for those two tablets.",
                        "startLine": null,
                        "line": 207,
                        "originalLine": 206,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "but think it should also be mentioned on the loadFileTo methods, with the startRow and endRow parameters.\n\nFor the loadFileTo method, its javadoc could say that how the startRow and endRow are interpreted depends on the RangeType (with a javadoc link to RangeType).",
                        "body": "> but think it should also be mentioned on the loadFileTo methods, with the startRow and endRow parameters.\r\n\r\nFor the loadFileTo method, its javadoc could say that how the startRow and endRow are interpreted depends on the RangeType (with a javadoc link to RangeType).",
                        "startLine": null,
                        "line": 207,
                        "originalLine": 206,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Opened up #1619 so we don't forget",
                        "body": "Opened up #1619 so we don't forget",
                        "startLine": null,
                        "line": 207,
                        "originalLine": 206,
                        "originalStartLine": null
                    }
                ],
                "line": 207,
                "startLine": 207,
                "originalLine": 206,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "EdColeman",
            "keith-turner"
        ],
        "tdv": 15.0,
        "description": {
            "bodyText": "Creates the master.bulk.max.tablets property to allow restricting the\nnumber of tablets in a single bulk import"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2102,
        "title": {
            "body": "Reduce helix controller log and minor code improve",
            "bodyHTML": "Reduce helix controller log and minor code improve"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5D4STi",
                "body": "This PR is ready to merge, approved by @desaikomal \r\nCommit message:\r\nReduce helix controller log and minor code improve\r\nTurn down a few log level to DEBUG and reduce duplicated logs",
                "bodyText": "This PR is ready to merge, approved by @desaikomal\nCommit message:\nReduce helix controller log and minor code improve\nTurn down a few log level to DEBUG and reduce duplicated logs",
                "createdAt": "2022-05-26T17:30:29Z",
                "author": "qqu0127"
            },
            {
                "id": "IC_kwDOAPIHxc5D5WkD",
                "body": "Verified the test passed locally, this is ready to merge @NealSun96 thanks for the review\r\nCommit message:\r\nReduce helix controller log and minor code improve\r\nTurn down a few log level to DEBUG and reduce duplicated logs\r\n\r\n[INFO] Tests run: 39, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 229.346 s - in org.apache.helix.rest.server.TestClusterAccessor\r\n[INFO] \r\n[INFO] Results:\r\n[INFO] \r\n[INFO] Tests run: 39, Failures: 0, Errors: 0, Skipped: 0\r\n[INFO] \r\n[INFO] \r\n[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-rest ---\r\n[INFO] Loading execution data file /Users/qqu/workspace/qqu-helix/helix-rest/target/jacoco.exec\r\n[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 91 classes\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD SUCCESS\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time:  03:56 min\r\n[INFO] Finished at: 2022-05-26T15:15:37-07:00\r\n[INFO] ------------------------------------------------------------------------",
                "bodyText": "Verified the test passed locally, this is ready to merge @NealSun96 thanks for the review\nCommit message:\nReduce helix controller log and minor code improve\nTurn down a few log level to DEBUG and reduce duplicated logs\n[INFO] Tests run: 39, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 229.346 s - in org.apache.helix.rest.server.TestClusterAccessor\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 39, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-rest ---\n[INFO] Loading execution data file /Users/qqu/workspace/qqu-helix/helix-rest/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 91 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  03:56 min\n[INFO] Finished at: 2022-05-26T15:15:37-07:00\n[INFO] ------------------------------------------------------------------------",
                "createdAt": "2022-05-26T22:18:55Z",
                "author": "qqu0127"
            }
        ],
        "total_comments_count": 23,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4hXVME",
                "comments": [
                    {
                        "bodyText": "is this intended part of the change?\nAs this doesn't look like log level related change",
                        "body": "is this intended part of the change?\r\nAs this doesn't look like log level related change",
                        "startLine": null,
                        "line": 30,
                        "originalLine": 30,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Not related to log, but it's under the \"code improve\" part, since I'm reading and touching this part of code.",
                        "body": "Not related to log, but it's under the \"code improve\" part, since I'm reading and touching this part of code.",
                        "startLine": null,
                        "line": 30,
                        "originalLine": 30,
                        "originalStartLine": null
                    }
                ],
                "line": 30,
                "startLine": 30,
                "originalLine": 30,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/assigner/ThreadCountBasedTaskAssigner.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4hXVdF",
                "comments": [
                    {
                        "bodyText": "Justification:\nIdeally the message Workflow {} is marked as stopped should only be logged once, same for workflowCtx.setWorkflowState, but it's triggered for each task in the workflow. Verified there are tons of messages saying Workflow ABC is marked as stopped. Workflow state is STOPPED, meaning the workflow has been stopped already.\nThe only other place that set state STOPPED is in JobDispatcher where the rest of the update logic is handled. As a result, early termination (if state == TaskState.STOPPED) makes sense here.",
                        "body": "Justification: \r\nIdeally the message `Workflow {} is marked as stopped` should only be logged once, same for `workflowCtx.setWorkflowState`, but it's triggered for each task in the workflow. Verified there are tons of messages saying `Workflow ABC is marked as stopped. Workflow state is STOPPED`, meaning the workflow has been stopped already.\r\nThe only other place that set state STOPPED is in `JobDispatcher` where the rest of the update logic is handled. As a result, early termination (if state == TaskState.STOPPED) makes sense here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 158,
                        "originalStartLine": 152
                    },
                    {
                        "bodyText": "@qqu0127 I suggest moving this condition into the above IF.",
                        "body": "@qqu0127 I suggest moving this condition into the above IF. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 158,
                        "originalStartLine": 152
                    },
                    {
                        "bodyText": "Chatted offline, @qqu0127 suggested that cases exist where the if statement on line 151 passes but not the one on line 155, resulting in an immediate return; such a case doesn't allow combing the if conditions as I suggested.\nI change my suggestion to\n if (!TaskState.STOPPED.equals(workflowCtx.getWorkflowState()) && isWorkflowStopped(workflowCtx, workflowCfg)) {\n     LOG.debug(...)\n\nThis would also fix the problem of log being misplaced.",
                        "body": "Chatted offline, @qqu0127 suggested that cases exist where the if statement on line 151 passes but not the one on line 155, resulting in an immediate return; such a case doesn't allow combing the if conditions as I suggested. \r\n\r\nI change my suggestion to \r\n```\r\n if (!TaskState.STOPPED.equals(workflowCtx.getWorkflowState()) && isWorkflowStopped(workflowCtx, workflowCfg)) {\r\n     LOG.debug(...)\r\n```\r\nThis would also fix the problem of log being misplaced. \r\n     ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 158,
                        "originalStartLine": 152
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 158,
                "originalStartLine": 152,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/WorkflowDispatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4hZs1B",
                "comments": [
                    {
                        "bodyText": "This is not a good idea to move to debug. This is very important log to determine whether we have state transition in the middle for debugging purpose.",
                        "body": "This is not a good idea to move to debug. This is very important log to determine whether we have state transition in the middle for debugging purpose.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 323,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I see, thanks. Is there other log that you think we should better keep INFO?",
                        "body": "I see, thanks. Is there other log that you think we should better keep INFO?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 323,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 323,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4hZtH6",
                "comments": [
                    {
                        "bodyText": "What if it is null?",
                        "body": "What if it is null?",
                        "startLine": null,
                        "line": 87,
                        "originalLine": 87,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It's never null, see Set<AssignableInstance> assignableInstances = new HashSet<>(); in line 78",
                        "body": "It's never null, see `Set<AssignableInstance> assignableInstances = new HashSet<>();` in line 78",
                        "startLine": null,
                        "line": 87,
                        "originalLine": 87,
                        "originalStartLine": null
                    }
                ],
                "line": 87,
                "startLine": 87,
                "originalLine": 87,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/assigner/ThreadCountBasedTaskAssigner.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4hZtH7",
                "comments": [
                    {
                        "bodyText": "What if it is null?",
                        "body": "What if it is null?",
                        "startLine": null,
                        "line": 87,
                        "originalLine": 87,
                        "originalStartLine": null
                    }
                ],
                "line": 87,
                "startLine": 87,
                "originalLine": 87,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/assigner/ThreadCountBasedTaskAssigner.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4hZtOV",
                "comments": [
                    {
                        "bodyText": "If we remove this, how to determine all quota full or something?",
                        "body": "If we remove this, how to determine all quota full or something?",
                        "startLine": null,
                        "line": 89,
                        "originalLine": 89,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah, that's the dilemma. I'm trying to move the check and log to the build up phase in AssignableInstanceManager. I think we don't have to print this for every task assignment.",
                        "body": "Yeah, that's the dilemma. I'm trying to move the check and log to the build up phase in `AssignableInstanceManager`. I think we don't have to print this for every task assignment.",
                        "startLine": null,
                        "line": 89,
                        "originalLine": 89,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "handleAdditionalTaskAssignment is called once per pipeline, isn't it? Is this log a problem?",
                        "body": "`handleAdditionalTaskAssignment` is called once per pipeline, isn't it? Is this log a problem?",
                        "startLine": null,
                        "line": 89,
                        "originalLine": 89,
                        "originalStartLine": null
                    }
                ],
                "line": 89,
                "startLine": 89,
                "originalLine": 89,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/assigner/ThreadCountBasedTaskAssigner.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4hZtOW",
                "comments": [
                    {
                        "bodyText": "If we remove this, how to determine all quota full or something?",
                        "body": "If we remove this, how to determine all quota full or something?",
                        "startLine": null,
                        "line": 89,
                        "originalLine": 89,
                        "originalStartLine": null
                    }
                ],
                "line": 89,
                "startLine": 89,
                "originalLine": 89,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/assigner/ThreadCountBasedTaskAssigner.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4hi0be",
                "comments": [
                    {
                        "bodyText": "May I suggest let's add more info here? So we could differentiate between the 3 logs here.",
                        "body": "May I suggest let's add more info here? So we could differentiate between the 3 logs here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 182,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the review.\nThe above INFO log should provide enough context to differentiate 3 cases. I think it's fine to keep it this way. Let me know if you are fine with it. Thanks",
                        "body": "Thanks for the review.\r\nThe above INFO log should provide enough context to differentiate 3 cases. I think it's fine to keep it this way. Let me know if you are fine with it. Thanks",
                        "startLine": null,
                        "line": null,
                        "originalLine": 182,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 182,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/AssignableInstanceManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4hqgf0",
                "comments": [
                    {
                        "bodyText": "Looks like the below check of assignableInstances can be moved here - not that it helps with logs, but the logic can be simpliefied.",
                        "body": "Looks like the below check of `assignableInstances` can be moved here - not that it helps with logs, but the logic can be simpliefied. ",
                        "startLine": null,
                        "line": 81,
                        "originalLine": 81,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You mean check on assignableInstances.isEmpty()? The logic will be wrong if move into the forloop. Am I missing anything?",
                        "body": "You mean check on `assignableInstances.isEmpty()`? The logic will be wrong if move into the forloop. Am I missing anything?",
                        "startLine": null,
                        "line": 81,
                        "originalLine": 81,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Synced offline: this is a NIT.",
                        "body": "Synced offline: this is a NIT. ",
                        "startLine": null,
                        "line": 81,
                        "originalLine": 81,
                        "originalStartLine": null
                    }
                ],
                "line": 81,
                "startLine": 81,
                "originalLine": 81,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/assigner/ThreadCountBasedTaskAssigner.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4hq4aA",
                "comments": [
                    {
                        "bodyText": "Synced offline: these can be removed.",
                        "body": "Synced offline: these can be removed. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 429,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 429,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/AssignableInstanceManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "qqu0127",
            "xyuanlu",
            "junkaixue",
            "NealSun96",
            "desaikomal"
        ],
        "tdv": -10.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFix #2080\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nWe are seeing issue in certain product where controller is generating way too many logs that fill up disk space.\nIn this PR, we reduce a few logger level from INFO to DEBUG and update the logic to avoid duplicated messages in WorkflowDispatcher (Step 5: handle workflow that should STOP)\n\nTests\n\n The following tests are written for this issue:\n\n[info] ./zookeeper-api/target/surefire-reports/TestSuite.txt: Tests run: 54, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 123.232 s - in TestSuite\n[info] ./recipes/rsync-replicated-file-system/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.585 s - in TestSuite\n[info] ./recipes/task-execution/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.582 s - in TestSuite\n[info] ./recipes/distributed-lock-manager/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.705 s - in TestSuite\n[info] ./recipes/rabbitmq-consumer-group/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.789 s - in TestSuite\n[info] ./recipes/service-discovery/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.415 s - in TestSuite\n[info] ./metadata-store-directory-common/target/surefire-reports/TestSuite.txt: Tests run: 31, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.745 s - in TestSuite\n[info] ./helix-rest/target/surefire-reports/TestSuite.txt: Tests run: 205, Failures: 1, Errors: 0, Skipped: 35, Time elapsed: 138.881 s <<< FAILURE! - in TestSuite\nError:  Test failed: testGetClusters(org.apache.helix.rest.server.TestClusterAccessor)  Time elapsed: 0.513 s  <<< FAILURE!\n[info] ./metrics-common/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.335 s - in TestSuite\n[info] ./helix-view-aggregator/target/surefire-reports/TestSuite.txt: Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 58.735 s - in TestSuite\n[info] ./helix-common/target/surefire-reports/TestSuite.txt: Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.272 s - in TestSuite\n[info] ./helix-core/target/surefire-reports/TestSuite.txt: Tests run: 1314, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,903.158 s - in TestSuite\n[info] ./helix-lock/target/surefire-reports/TestSuite.txt: Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 53.896 s - in TestSuite\nKnown issue with TestClusterAccessor, verified passed locally.\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2661,
        "title": {
            "body": "Add base objects for Tablet and TabletServer for the upcoming ScanServer feature",
            "bodyHTML": "Add base objects for Tablet and TabletServer for the upcoming ScanServer feature"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5CUBcF",
                "body": "ITs passed at https://github.com/dlmarion/accumulo/actions/runs/2241049345",
                "bodyText": "ITs passed at https://github.com/dlmarion/accumulo/actions/runs/2241049345",
                "createdAt": "2022-04-28T18:47:01Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5CUFPF",
                "body": "Yeah, fixing it now",
                "bodyText": "Yeah, fixing it now",
                "createdAt": "2022-04-28T19:06:33Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 14,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4g1PLm",
                "comments": [
                    {
                        "bodyText": "Please resolve this before merging.",
                        "body": "Please resolve this before merging.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 172,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "resolved in 58b0e73",
                        "body": "resolved in 58b0e73",
                        "startLine": null,
                        "line": null,
                        "originalLine": 172,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 172,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4g1PQy",
                "comments": [
                    {
                        "bodyText": "Please address all TODOs before merging.",
                        "body": " Please address all TODOs before merging.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 76,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "resolved in 58b0e73",
                        "body": "resolved in 58b0e73",
                        "startLine": null,
                        "line": null,
                        "originalLine": 76,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 76,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/TabletBase.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4g1PVY",
                "comments": [
                    {
                        "bodyText": "The body of this base class is just stuff moved from Tablet, right? Is there anything else in here that is new that we should pay particular attention to?",
                        "body": "The body of this base class is just stuff moved from Tablet, right? Is there anything else in here that is new that we should pay particular attention to?",
                        "startLine": null,
                        "line": 67,
                        "originalLine": 67,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I believe that is the case. That should be the case. @keith-turner wrote the original change against the Scan Server feature branch. I pulled out what I could as a separate PR to get the smaller changeset upstream of our feature. Like you said above, smaller incremental changes that can be reviewed easier.",
                        "body": "I believe that is the case. That should be the case. @keith-turner wrote the original change against the Scan Server feature branch. I pulled out what I could as a separate PR to get the smaller changeset upstream of our feature. Like you said above, smaller incremental changes that can be reviewed easier.",
                        "startLine": null,
                        "line": 67,
                        "originalLine": 67,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This change is to isolate the read the read code from the tablet and move it up a level.  In Dave's scan server branch we have a SnapshotTablet that extends TabletBase and offers a readonly view of a snapshot of a tablet.",
                        "body": "This change is to isolate the read the read code from the tablet and move it up a level.  In Dave's scan server branch we have a SnapshotTablet that extends TabletBase and offers a readonly view of a snapshot of a tablet.  ",
                        "startLine": null,
                        "line": 67,
                        "originalLine": 67,
                        "originalStartLine": null
                    }
                ],
                "line": 67,
                "startLine": 67,
                "originalLine": 67,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/TabletBase.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4g1Xhw",
                "comments": [
                    {
                        "bodyText": "In the branch we had the following comment.\n/**\n * This interface exist to support passing a {@link TabletServer} or {@link ScanServer} to a method\n * that can take either.\n */\nit does not make sense here, but we need to remember to add it back.",
                        "body": "In the branch we had the following comment.  \r\n\r\n```java\r\n/**\r\n * This interface exist to support passing a {@link TabletServer} or {@link ScanServer} to a method\r\n * that can take either.\r\n */\r\n```\r\n\r\nit does not make sense here, but we need to remember to add it back.",
                        "startLine": null,
                        "line": 33,
                        "originalLine": 33,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Can you give a description of this class? I like to put javadoc on interfaces.",
                        "body": "Can you give a description of this class? I like to put javadoc on interfaces.",
                        "startLine": null,
                        "line": 33,
                        "originalLine": 33,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Javadoc for this was added in #2665",
                        "body": "Javadoc for this was added in #2665 ",
                        "startLine": null,
                        "line": 33,
                        "originalLine": 33,
                        "originalStartLine": null
                    }
                ],
                "line": 33,
                "startLine": 33,
                "originalLine": 33,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/TabletHostingServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner",
            "ctubbsii",
            "milleruntime"
        ],
        "tdv": -6.0,
        "description": {
            "bodyText": "This commit introduces TabletBase, a base class for Tablets, and TabletHostingServer,\nan interface for server components that host Tablets. These changes will be used by\nthe ScanServer feature that is in the works.\nRelated to #2411"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1627,
        "title": {
            "body": "Fix ZkAddress null case for TaskStateModelFactory",
            "bodyHTML": "Fix ZkAddress null case for TaskStateModelFactory"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc3MjEzNTIyOA==",
                "body": "This PR is ready to be merged, approved by @narendly  \r\nFinal commit message:\r\n## Fix ZkAddress null case for TaskStateModelFactory ##\r\nIf zkAddress is null for the HelixManager passed to TaskStateModelFactory and multizk is not enabled, a NullPointerException will be raised. This PR fixes that by adding a null check.",
                "bodyText": "This PR is ready to be merged, approved by @narendly\nFinal commit message:\nFix ZkAddress null case for TaskStateModelFactory\nIf zkAddress is null for the HelixManager passed to TaskStateModelFactory and multizk is not enabled, a NullPointerException will be raised. This PR fixes that by adding a null check.",
                "createdAt": "2021-02-03T01:22:40Z",
                "author": "NealSun96"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NTMwOTA4OnYy",
                "comments": [
                    {
                        "bodyText": "Another good check to add here is zkClient isinstanceof FederatedZkClient?",
                        "body": "Another good check to add here is `zkClient isinstanceof FederatedZkClient`?",
                        "startLine": 99,
                        "line": 100,
                        "originalLine": 98,
                        "originalStartLine": 97
                    }
                ],
                "line": 100,
                "startLine": 99,
                "originalLine": 98,
                "originalStartLine": 97,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/task/TestTaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "NealSun96",
            "narendly"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFix #1626\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nIf zkAddress is null for the HelixManager passed to TaskStateModelFactory and multizk is not enabled, a NullPointerException will be raised. This PR fixes that by adding a null check.\nWhen #1183 was introduced and null checks were added, this section of code was in a feature branch, and was therefore not covered by the PR 1183.\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "opennlp",
        "pr_number": 473,
        "title": {
            "body": "OPENNLP-1428 - Enhance DownloadUtil to avoid the use of hard-coded model urls",
            "bodyHTML": "OPENNLP-1428 - Enhance DownloadUtil to avoid the use of hard-coded model urls"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACnPtM4oaXUl",
                "comments": [
                    {
                        "bodyText": "Do you have any suggestions on where we should document the structure of the model file names?",
                        "body": "Do you have any suggestions on where we should document the structure of the model file names? ",
                        "startLine": null,
                        "line": 173,
                        "originalLine": 173,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "We are voting on models [1], so perhaps it would make sense to add the structure of the model file names to [2]. I think, that the release process for models is slightly different, so we maybe need a separate page for \"Making a model release\" with instructions for conducting it.\nHowever, the structure itself is indeed defined and described, see [3]. It is a bit hidden though.\nSo maybe:\n\nAdd a separate page to the webpage for \"Doing a model release\"\nAdd the file name structure and some additional instructions to this webpage as well.\n\n[1] https://lists.apache.org/thread/t2v946x3s24yvvfc6hpq41lqnxshx2b0\n[2] https://opennlp.apache.org/release.html\n[3] https://dist.apache.org/repos/dist/dev/opennlp/ud-models-1.0/README",
                        "body": "We are voting on models [1], so perhaps it would make sense to add the structure of the model file names to [2]. I think, that the release process for models is slightly different, so we maybe need a separate page for \"Making a model release\" with instructions for conducting it. \r\n\r\nHowever, the structure itself is indeed defined and described, see [3]. It is a bit hidden though.\r\n\r\nSo maybe:\r\n\r\n- Add a separate page to the webpage for \"Doing a model release\"\r\n- Add the file name structure and some additional instructions to this webpage as well.\r\n\r\n\r\n[1] https://lists.apache.org/thread/t2v946x3s24yvvfc6hpq41lqnxshx2b0\r\n[2] https://opennlp.apache.org/release.html\r\n[3] https://dist.apache.org/repos/dist/dev/opennlp/ud-models-1.0/README",
                        "startLine": null,
                        "line": 173,
                        "originalLine": 173,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That sounds reasonable. I wrote OPENNLP-1433 for it and referenced this conversation.",
                        "body": "That sounds reasonable. I wrote [OPENNLP-1433](https://issues.apache.org/jira/browse/OPENNLP-1433) for it and referenced this conversation.",
                        "startLine": null,
                        "line": 173,
                        "originalLine": 173,
                        "originalStartLine": null
                    }
                ],
                "line": 173,
                "startLine": 173,
                "originalLine": 173,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "opennlp-tools/src/main/java/opennlp/tools/util/DownloadUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "rzo1",
            "kinow",
            "jzonthemtn",
            "mawiesne"
        ],
        "tdv": 10.0,
        "description": {
            "bodyText": "Thank you for contributing to Apache OpenNLP.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically main)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?\n Have you written or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2149,
        "title": {
            "body": "implement util for cloud event",
            "bodyHTML": "implement util for cloud event"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5FQytV",
                "body": "This PR it ready to check in. Approved by @mgao0 @qqu0127 \r\n\r\nFinal commit message:\r\n**Implement util for cloud event.**\r\nThis change add implementation for HelixCloudEventUtil. ",
                "bodyText": "This PR it ready to check in. Approved by @mgao0 @qqu0127\nFinal commit message:\nImplement util for cloud event.\nThis change add implementation for HelixCloudEventUtil.",
                "createdAt": "2022-06-21T17:11:37Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 30,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4iP1_F",
                "comments": [
                    {
                        "bodyText": "A better way might be to wrap message generation in a static method, it's more self-explanative and we won't need to declare the string template",
                        "body": "A better way might be to wrap message generation in a static method, it's more self-explanative and we won't need to declare the string template",
                        "startLine": null,
                        "line": 48,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. I would prefer the current way as if we have another static method to compose message, we still need this 'String message = composeMessage(xxx)'. It did not save much space.",
                        "body": "TFTR. I would prefer the current way as if we have another static method to compose message, we still need this 'String message = composeMessage(xxx)'. It did not save much space.",
                        "startLine": null,
                        "line": 48,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sure, not a big deal so feel free to drop it.\nBut just to clarify my concern, it's not on space save but for future change, e.g. if we add another field in the string template, we need to modify two String.format, which is more prone to error.",
                        "body": "Sure, not a big deal so feel free to drop it. \r\nBut just to clarify my concern, it's not on space save but for future change, e.g. if we add another field in the string template, we need to modify two `String.format`, which is more prone to error.",
                        "startLine": null,
                        "line": 48,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sorry I did not quite follow. If we add a static function to compose message and we want to add a new field, we still need to change two places..?",
                        "body": "Sorry I did not quite follow. If we add a static function to compose message and we want to add a new field, we still need to change two places..?",
                        "startLine": null,
                        "line": 48,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Again, this is nit. Yes, but only one in String.format, the others are method signature change which is compile time checked.\nThink about interface and implementation.",
                        "body": "Again, this is nit. Yes, but only one in `String.format`, the others are method signature change which is compile time checked.\r\nThink about interface and implementation. ",
                        "startLine": null,
                        "line": 48,
                        "originalLine": 52,
                        "originalStartLine": null
                    }
                ],
                "line": 48,
                "startLine": 48,
                "originalLine": 52,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/DefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iP6d_",
                "comments": [
                    {
                        "bodyText": "Do we want to log something in the else part?",
                        "body": "Do we want to log something in the else part?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 125,
                        "originalStartLine": 114
                    },
                    {
                        "bodyText": "TFTR. Updated.",
                        "body": "TFTR. Updated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 125,
                        "originalStartLine": 114
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 125,
                "originalStartLine": 114,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/DefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4iP6o0",
                "comments": [
                    {
                        "bodyText": "Let's simplify the condition, or move it to a method, thanks.",
                        "body": "Let's simplify the condition, or move it to a method, thanks.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 118,
                        "originalStartLine": 114
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 118,
                "originalStartLine": 114,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/DefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVAu5",
                "comments": [
                    {
                        "bodyText": "Why not call constructor? This usage is deprecated in java 9",
                        "body": "Why not call constructor? This usage is deprecated in java 9",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": 33
                    },
                    {
                        "bodyText": "TFTR. Updated.",
                        "body": "TFTR. Updated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": 33
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 34,
                "originalStartLine": 33,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/cloud/event/TestDefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVAu6",
                "comments": [
                    {
                        "bodyText": "Why not call constructor? This usage is deprecated in java 9",
                        "body": "Why not call constructor? This usage is deprecated in java 9",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": 33
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 34,
                "originalStartLine": 33,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/cloud/event/TestDefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVEw6",
                "comments": [
                    {
                        "bodyText": "Let's use constructor for this one",
                        "body": "Let's use constructor for this one",
                        "startLine": null,
                        "line": null,
                        "originalLine": 112,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 112,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/HelixCloudEventListener.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVF6c",
                "comments": [
                    {
                        "bodyText": "Nit: Let's add one more logging here indicating disable complets.",
                        "body": "Nit: Let's add one more logging here indicating disable complets.",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 55,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. I feel like adding another log won't help debug there is already log in ZkHelixManager.enableInstance.",
                        "body": "TFTR. I feel like adding another log won't help debug there is already log in ZkHelixManager.enableInstance. ",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 55,
                        "originalStartLine": null
                    }
                ],
                "line": 55,
                "startLine": 55,
                "originalLine": 55,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/DefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVF_4",
                "comments": [
                    {
                        "bodyText": "Nit: Let's put a TODO here saying that these two steps should be transactional if we ever have the transactional support available",
                        "body": "Nit: Let's put a TODO here saying that these two steps should be transactional if we ever have the transactional support available",
                        "startLine": null,
                        "line": 56,
                        "originalLine": 56,
                        "originalStartLine": null
                    }
                ],
                "line": 56,
                "startLine": 56,
                "originalLine": 56,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/DefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVGMQ",
                "comments": [
                    {
                        "bodyText": "Nit: Could we simplify this method signature to have HelixManager passed, and get info such as clusterName, instanceName, and baseAccessor from the HelixManager?",
                        "body": "Nit: Could we simplify this method signature to have HelixManager passed, and get info such as clusterName, instanceName, and baseAccessor from the HelixManager?",
                        "startLine": null,
                        "line": 68,
                        "originalLine": 64,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Although this method is only used for DefaultCloudEventCallbackImpl for now, I feel that we should keep the util function signature to be more generic.",
                        "body": "Although this method is only used for DefaultCloudEventCallbackImpl for now, I feel that we should keep the util function signature to be more generic. ",
                        "startLine": null,
                        "line": 68,
                        "originalLine": 64,
                        "originalStartLine": null
                    }
                ],
                "line": 68,
                "startLine": 68,
                "originalLine": 64,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/HelixEventHandlingUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVHZS",
                "comments": [
                    {
                        "bodyText": "Nit: Let's add one sentence such as \"CloudEvent recorded in cluster config will always (regardless the instance disable reason) be cleaned up.\"",
                        "body": "Nit: Let's add one sentence such as \"CloudEvent recorded in cluster config will always (regardless the instance disable reason) be cleaned up.\"",
                        "startLine": null,
                        "line": 63,
                        "originalLine": 63,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Updated.",
                        "body": "Updated.\r\n",
                        "startLine": null,
                        "line": 63,
                        "originalLine": 63,
                        "originalStartLine": null
                    }
                ],
                "line": 63,
                "startLine": 63,
                "originalLine": 63,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/DefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVHjK",
                "comments": [
                    {
                        "bodyText": "Nit: \"disabled\" is not appropriate here since the instance is not disabled yet",
                        "body": "Nit: \"disabled\" is not appropriate here since the instance is not disabled yet",
                        "startLine": null,
                        "line": null,
                        "originalLine": 49,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Updated",
                        "body": "Updated",
                        "startLine": null,
                        "line": null,
                        "originalLine": 49,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 49,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/DefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVIOE",
                "comments": [
                    {
                        "bodyText": "Nit: not sure if this will cause too large log size. Let's think about it",
                        "body": "Nit: not sure if this will cause too large log size. Let's think about it",
                        "startLine": null,
                        "line": 115,
                        "originalLine": 115,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Changed to just print the size. The actual disabled instances can be obtained fro ZK.",
                        "body": "Changed to just print the size. The actual disabled instances can be obtained fro ZK.",
                        "startLine": null,
                        "line": 115,
                        "originalLine": 115,
                        "originalStartLine": null
                    }
                ],
                "line": 115,
                "startLine": 115,
                "originalLine": 115,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/DefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVPJC",
                "comments": [
                    {
                        "bodyText": "Should we do a null check for instanceConfig?",
                        "body": "Should we do a null check for instanceConfig?",
                        "startLine": null,
                        "line": 61,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't feel like we need to...If we do not check, it will throw a run time exception. If we check we will also throw a runtime exception (Same as how ZkHelixAdmin do). But I added anyway..",
                        "body": "I don't feel like we need to...If we do not check, it will throw a run time exception. If we check we will also throw a runtime exception (Same as how ZkHelixAdmin do). But I added anyway..",
                        "startLine": null,
                        "line": 61,
                        "originalLine": 57,
                        "originalStartLine": null
                    }
                ],
                "line": 61,
                "startLine": 61,
                "originalLine": 57,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/HelixEventHandlingUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iVPn_",
                "comments": [
                    {
                        "bodyText": "Null check on clusterConfig?",
                        "body": "Null check on clusterConfig?",
                        "startLine": null,
                        "line": 111,
                        "originalLine": 107,
                        "originalStartLine": null
                    }
                ],
                "line": 111,
                "startLine": 111,
                "originalLine": 107,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/HelixEventHandlingUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "qqu0127",
            "mgao0",
            "NealSun96"
        ],
        "tdv": -54.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#2133\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis change add implementation for HelixCloudEventUtil\nTests\n\n The following tests are written for this issue:\n\nTestDefaultCloudEventCallbackImpl.java\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4150,
        "title": {
            "body": "Fix ConcurrentModificationException in QueueMetrics",
            "bodyHTML": "Fix ConcurrentModificationException in QueueMetrics"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM43KNwW",
                "comments": [
                    {
                        "bodyText": "Why does the id need to be cloned?",
                        "body": "Why does the id need to be cloned?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 146,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 146,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/compaction/coordinator/QueueMetrics.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM43KPY1",
                "comments": [
                    {
                        "bodyText": "If you used copyInto would that still require the cloning functionality for CompactorGroupId?",
                        "body": "If you used [copyInto](https://guava.dev/releases/23.0/api/docs/com/google/common/collect/Sets.SetView.html#copyInto-S-) would that still require the cloning functionality for `CompactorGroupId`?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 143,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 143,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/compaction/coordinator/QueueMetrics.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM43KPs8",
                "comments": [
                    {
                        "bodyText": "There is another loop above this that is modifying perQeueMetrics while iterating over a set view that is based on it.  Maybe doing the following at the beginning of the method would avoid the problem for both loops.\nSet<CompactorGroupId> queuesWithMetrics = Set.copyOf(perQueueMetrics.keySet());",
                        "body": "There is another loop above this that is modifying perQeueMetrics while iterating over a set view that is based on it.  Maybe doing the following at the beginning of the method would avoid the problem for both loops.\r\n\r\n```java\r\nSet<CompactorGroupId> queuesWithMetrics = Set.copyOf(perQueueMetrics.keySet());\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 143,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 143,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/compaction/coordinator/QueueMetrics.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner",
            "ddanielr"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "The metricsWithoutQueues variable is a SetView\nwhich is sensitive to changes in the underlying\nsets. The loop was modifying one of the underlying objects. To prevent the CME from being raised I\ncopied the objects into a new set.\nCloses #4144"
        }
    },
    {
        "repo": "commons-io",
        "pr_number": 325,
        "title": {
            "body": "IOCase.isCaseSensitive(IOCase) result is backward",
            "bodyHTML": "IOCase.isCaseSensitive(IOCase) result is backward"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmPM49bb27",
                "body": "Hello @code-ferry \r\nThis PR needs a test that fails when the main side of the changes are not applied. Otherwise, if the main code changes back in the future, no one will know it breaks behavior.  You will need to test all values.",
                "bodyText": "Hello @code-ferry\nThis PR needs a test that fails when the main side of the changes are not applied. Otherwise, if the main code changes back in the future, no one will know it breaks behavior.  You will need to test all values.",
                "createdAt": "2022-02-05T11:09:43Z",
                "author": "garydgregory"
            },
            {
                "id": "IC_kwDOAAMmPM49bc3A",
                "body": "> Hello @code-ferry This PR needs a test that fails when the main side of the changes are not applied. Otherwise, if the main code changes back in the future, no one will know it breaks behavior. You will need to test all values.\r\n\r\n@garydgregory \r\nIMO the test should not be added now, but should be added when the original codes written.\r\nIf the codes is added into the lib with test, I don't think mistake in this level should happened.\r\n(however we cannot change what happened already; adding the tests now is a better choice than doing nothing.)",
                "bodyText": "Hello @code-ferry This PR needs a test that fails when the main side of the changes are not applied. Otherwise, if the main code changes back in the future, no one will know it breaks behavior. You will need to test all values.\n\n@garydgregory\nIMO the test should not be added now, but should be added when the original codes written.\nIf the codes is added into the lib with test, I don't think mistake in this level should happened.\n(however we cannot change what happened already; adding the tests now is a better choice than doing nothing.)",
                "createdAt": "2022-02-05T11:41:40Z",
                "author": "XenoAmess"
            },
            {
                "id": "IC_kwDOAAMmPM49bhdn",
                "body": "> Hello @code-ferry This PR needs a test that fails when the main side of the changes are not applied. Otherwise, if the main code changes back in the future, no one will know it breaks behavior. You will need to test all values.\r\n\r\nThe chanage in method toFlags has the test in class RegexFileFilterTest.\r\nI add a test of static method isCaseSensitive in class IOCaseTest.",
                "bodyText": "Hello @code-ferry This PR needs a test that fails when the main side of the changes are not applied. Otherwise, if the main code changes back in the future, no one will know it breaks behavior. You will need to test all values.\n\nThe chanage in method toFlags has the test in class RegexFileFilterTest.\nI add a test of static method isCaseSensitive in class IOCaseTest.",
                "createdAt": "2022-02-05T13:29:08Z",
                "author": "code-ferry"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmPM4efLJ6",
                "comments": [
                    {
                        "bodyText": "according to minimal change, this import's position change is unnecessary to this issue, suggest revert these 4 lines changes.",
                        "body": "according to minimal change, this import's position change is unnecessary to this issue, suggest revert these 4 lines changes.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 19,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 19,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmPM4efLKE",
                "comments": [
                    {
                        "bodyText": "and this too.",
                        "body": "and this too.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 27,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 27,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "code-ferry",
            "garydgregory",
            "XenoAmess"
        ],
        "tdv": 5.0,
        "description": {
            "bodyText": "When the argument is IOCase.SENSITIVE, I think the static method isCaseSensitive should return true.\nI did the following test with the code.\npublic void testIsCaseSensitive() {\n  // return true. I think it is right.\n  boolean b1 = IOCase.SENSITIVE.isCaseSensitive();\n  System.out.println(b1);\n\n  // but invoke static method and return false.\n  boolean b2 = IOCase.isCaseSensitive(IOCase.SENSITIVE);\n  System.out.println(b2);\n}"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2143,
        "title": {
            "body": "Fix external compaction properties names and keys",
            "bodyHTML": "Fix external compaction properties names and keys"
        },
        "comments": [],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA5MjU0ODQwOnYy",
                "comments": [
                    {
                        "bodyText": "For a long time, I've been thinking about making the keys to these properties derived from the ENUM name, with some simple rules:\nString key = en.replaceAll(\"_\", \".\").toLowerCase();\nThat hasn't been feasible at this time, because there's currently too many properties that break that rule, and I haven't gone in to do the work to rename the enums to match the keys, or worked out the kinks. However, I do like to see consistency between the naming of the enum and the key, so we, as developers, can easily find / recognize the properties and enums as being related, when we are looking at code or config that has one or the other. After all, it would be very confusing if the enum had little to do with the key.\nSo, having said all that, it's a bit weird to see an underscore in the key name, since in my mind, that's a different naming convention. It throws a wrench in the general naming conventions for underscores in enum names that map to dots in keys.\nA dash might make more sense, because this is effectively a compound adjective describing a server (as in \"a compaction-coordinator server\"), but there's not an equivalent enum name. Omitting the underscore would result in COMPACTIONCOORDINATOR_PREFIX(\"compactioncoordinator.\", ..., though.\nWe do have some precedent for mixed case (useJsse, keyStore, permissionHandler, clientAuth, etc.). These should just be for presentation convenience, as actual parsing of the keys should be case-insensitive (I'm not sure if that's actually the case, though... but that would be a separate issue). If you follow that convention, it would be compactionCoordinator., which isn't bad.\nIf you go with dots, then you could go with compaction.coordinator. and compaction.worker., since they come as a set.",
                        "body": "For a long time, I've been thinking about making the keys to these properties derived from the ENUM name, with some simple rules:\r\n\r\n```java\r\nString key = en.replaceAll(\"_\", \".\").toLowerCase();\r\n```\r\n\r\nThat hasn't been feasible at this time, because there's currently too many properties that break that rule, and I haven't gone in to do the work to rename the enums to match the keys, or worked out the kinks. However, I do like to see consistency between the naming of the enum and the key, so we, as developers, can easily find / recognize the properties and enums as being related, when we are looking at code or config that has one or the other. After all, it would be *very* confusing if the enum had little to do with the key.\r\n\r\nSo, having said all that, it's a bit weird to see an underscore in the key name, since in my mind, that's a different naming convention. It throws a wrench in the general naming conventions for underscores in enum names that map to dots in keys.\r\n\r\nA dash might make more sense, because this is effectively a compound adjective describing a server (as in \"a compaction-coordinator server\"), but there's not an equivalent enum name. Omitting the underscore would result in `COMPACTIONCOORDINATOR_PREFIX(\"compactioncoordinator.\", ...`, though.\r\n\r\nWe do have some precedent for mixed case (`useJsse`, `keyStore`, `permissionHandler`, `clientAuth`, etc.). These should just be for presentation convenience, as actual parsing of the keys should be case-insensitive (I'm not sure if that's actually the case, though... but that would be a separate issue). If you follow that convention, it would be `compactionCoordinator.`, which isn't bad.\r\n\r\nIf you go with dots, then you could go with `compaction.coordinator.` and `compaction.worker.`, since they come as a set.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1048,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "My initial inclination was to use a - (dash), but could not find an example of this being done elsewhere. I would rather see compaction-coordinator vs compaction.coordinator.\nI guess another convention that's not mentioned is to use the first letter and second word in a multi-word server name (tablet server -> tserver). I suppose I could use ccoordinator\n(just kidding)",
                        "body": "My initial inclination was to use a `-` (dash), but could not find an example of this being done elsewhere. I would rather see `compaction-coordinator` vs `compaction.coordinator`.\r\n\r\nI guess another convention that's not mentioned is to use the first letter and second word in a multi-word server name (tablet server -> tserver). I suppose I could use `ccoordinator`\r\n(just kidding)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1048,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I like compaction.coordinator with compaction.worker better than I like compaction-coordinator and compactor, and I like that one slightly better than compactionCoordinator and compactor.\nYou're right there's no precedent for use of dash for property keys in our code. Additionally, a quick Google search for dashes in config keys resulted in several discussions about constraints and even some bugs in Spring, ConfigJSR (JSR-382), and other configuration systems. One of the popular issues was that some of these systems try provide ways to use configuration properties as environment variables, and you can't use dashes in environment variables in Linux. Those projects seemed to try workarounds that involved fuzzy matching, but those solutions struggled with internationalization issues. For us, I think it's probably just best to avoid dashes in our keys, to ensure flexibility in future for our configuration keys, and to avoid pitfalls that others have experienced.\nDots seem to be the preferred delimiter for config files. Underscores seem to be borrowing from a different naming convention. I would stick with dots or none.",
                        "body": "I like `compaction.coordinator` with `compaction.worker` better than I like `compaction-coordinator` and `compactor`, and I like that one slightly better than `compactionCoordinator` and `compactor`.\r\n\r\nYou're right there's no precedent for use of dash for property keys in our code. Additionally, a quick Google search for dashes in config keys resulted in several discussions about constraints and even some bugs in Spring, ConfigJSR (JSR-382), and other configuration systems. One of the popular issues was that some of these systems try provide ways to use configuration properties as environment variables, and you can't use dashes in environment variables in Linux. Those projects seemed to try workarounds that involved fuzzy matching, but those solutions struggled with internationalization issues. For us, I think it's probably just best to avoid dashes in our keys, to ensure flexibility in future for our configuration keys, and to avoid pitfalls that others have experienced.\r\n\r\nDots seem to be the preferred delimiter for config files. Underscores seem to be borrowing from a different naming convention. I would stick with dots or none.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1048,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is reminding me of the \"just add the dot\" episode from years ago. I'll modify compaction_coordinator to use the dot in the key instead of the underscore. I'd rather not change compactor to compaction.worker as I am under the impression (maybe mistakenly) that the first part of the property name for processes should be the process name (manager, gc, tserver, monitor, etc).",
                        "body": "This is reminding me of the \"just add the dot\" episode from years ago. I'll modify `compaction_coordinator` to use the dot in the key instead of the underscore. I'd rather not change `compactor` to `compaction.worker` as I am under the impression (maybe mistakenly) that the first part of the property name for processes should be the process name (`manager`, `gc`, `tserver`, `monitor`, etc).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1048,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "(deleted) - I missed one",
                        "body": "(deleted) - I missed one",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1048,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "compaction_coordinator changed to compaction.coordinator in cce4e6c",
                        "body": "`compaction_coordinator` changed to `compaction.coordinator` in cce4e6c",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1048,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I am under the impression (maybe mistakenly) that the first part of the property name for processes should be the process name (manager, gc, tserver, monitor, etc).\n\nRoughly speaking, properties are organized that way, but we also have other prefixes rpc, instance, general, table, and replication. For these, I sort of see the compaction coordinator and the compactors as part of a single external system (prefix compaction) with two sub-components of that externalized system that are servers (performing the roles of coordinatorandworker`).\nThe important part isn't that the first part be a server type, but that properties are organized so they can be scoped to a particular component. In other words, we can exclude all table.*, and gc.* if we're starting a tserver. In theory, configuration could even be spread across different config files (as in bin/accumulo tserver --config /path/to/tserver.conf, where tserver.conf contains some include = instance.props directive and a bunch of tserver.<prop> = <value> lines). So, organization is important to support various configuration management use cases, but having the first element be a server type isn't specifically important.",
                        "body": "> I am under the impression (maybe mistakenly) that the first part of the property name for processes should be the process name (`manager`, `gc`, `tserver`, `monitor`, etc).\r\n\r\nRoughly speaking, properties are organized that way, but we also have other prefixes `rpc`, `instance`, `general`, `table`, and `replication. For these, I sort of see the compaction coordinator and the compactors as part of a single external system (prefix `compaction`) with two sub-components of that externalized system that are servers (performing the roles of `coordinator` and `worker`).\r\n\r\nThe important part isn't that the first part be a server type, but that properties are organized so they can be scoped to a particular component. In other words, we can exclude all `table.*`, and `gc.*` if we're starting a tserver. In theory, configuration could even be spread across different config files (as in `bin/accumulo tserver --config /path/to/tserver.conf`, where `tserver.conf` contains some `include = instance.props` directive and a bunch of `tserver.<prop> = <value>` lines). So, organization is important to support various configuration management use cases, but having the first element be a server type isn't specifically important.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1048,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1048,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Modified the external compaction properties to be in line with other properties\nin the codebase. Specifically, I changed\n\nthe enum names starting with COORDINATOR to COMPACTION_COORDINATOR\nthe keys starting with coordinator to compaction_coordinator\nproperties having to with compaction of files to include the term\ncompaction in the key\n\nCloses #2142"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2507,
        "title": {
            "body": "Simplify thread naming in TaskStateModelFactory\"",
            "bodyHTML": "Simplify thread naming in TaskStateModelFactory\""
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5dF30T",
                "body": "@limbooverlambda - please help review this. thanks",
                "bodyText": "@limbooverlambda - please help review this. thanks",
                "createdAt": "2023-05-24T19:34:35Z",
                "author": "desaikomal"
            },
            {
                "id": "IC_kwDOAPIHxc5dF75g",
                "body": "Thanks @parakhnr and @limbooverlambda for reviewing and approving the change.\r\nCommit message: Simplify thread naming in TaskStateModelFactory. ",
                "bodyText": "Thanks @parakhnr and @limbooverlambda for reviewing and approving the change.\nCommit message: Simplify thread naming in TaskStateModelFactory.",
                "createdAt": "2023-05-24T19:47:07Z",
                "author": "desaikomal"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4t6dHH",
                "comments": [
                    {
                        "bodyText": "Any reason, we didn't use guava's ThreadFactoryBuilder? https://guava.dev/releases/snapshot/api/docs/com/google/common/util/concurrent/ThreadFactoryBuilder.html#setNameFormat%28java.lang.String%29",
                        "body": "Any reason, we didn't use guava's ThreadFactoryBuilder? https://guava.dev/releases/snapshot/api/docs/com/google/common/util/concurrent/ThreadFactoryBuilder.html#setNameFormat%28java.lang.String%29",
                        "startLine": null,
                        "line": 193,
                        "originalLine": 195,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "No particular reason, either does the job.",
                        "body": "No particular reason, either does the job. ",
                        "startLine": null,
                        "line": 193,
                        "originalLine": 195,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "There is a bit of a push towards using guava instead of apache-commons (https://code.google.com/archive/p/google-collections/wikis/Faq.wiki).\nHere's some more justification on why guava is preferred over commons:\nhttps://stackoverflow.com/questions/1444437/google-guava-vs-apache-commons",
                        "body": "There is a bit of a push towards using guava instead of apache-commons (https://code.google.com/archive/p/google-collections/wikis/Faq.wiki). \r\n\r\nHere's some more justification on why guava is preferred over commons:\r\n\r\nhttps://stackoverflow.com/questions/1444437/google-guava-vs-apache-commons",
                        "startLine": null,
                        "line": 193,
                        "originalLine": 195,
                        "originalStartLine": null
                    }
                ],
                "line": 193,
                "startLine": 193,
                "originalLine": 195,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "desaikomal",
            "limbooverlambda",
            "parakhnr",
            "xyuanlu"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #325\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn TaskStateModelFactory class, we want to name our thread with a sequence number to uniquely identify threads. The mechanics can be simplified by using the BasicThreadPoolFactory which has way for explicitly naming the thread.\n\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\nmvn -q test run is in progress, will update it as soon as I get the results.\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3927,
        "title": {
            "body": "Add json property type with simple validation",
            "bodyHTML": "Add json property type with simple validation"
        },
        "comments": [],
        "total_comments_count": 23,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM40naYY",
                "comments": [
                    {
                        "bodyText": "This comment can be removed\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                // JsonParser.parseString(\"not json\");",
                        "body": "This comment can be removed\r\n```suggestion\r\n```\r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Removed in 7fa8aca",
                        "body": "Removed in 7fa8acabb7",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 111,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/conf/PropertyTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM40neRQ",
                "comments": [
                    {
                        "bodyText": "This test should probably follow the other property test patterns and test all properties with the JSON property type.\nSomething like:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                var p1 = TSERV_COMPACTION_SERVICE_META_EXECUTORS;\n          \n          \n            \n                assertFalse(TSERV_COMPACTION_SERVICE_META_EXECUTORS.getType().isValidFormat(\"notJson\"));\n          \n          \n            \n            \n          \n          \n            \n                String json =\n          \n          \n            \n                    \"[{'name':'small','type':'internal','maxSize':'32M','numThreads':2},{'name':'huge','type':'internal','numThreads':2}]\"\n          \n          \n            \n                        .replaceAll(\"'\", \"\\\"\");\n          \n          \n            \n                assertTrue(Property.isValidProperty(p1.getKey(), json));\n          \n          \n            \n            \n          \n          \n            \n              }\n          \n          \n            \n               for (Property prop : Property.values()) {\n          \n          \n            \n                  if (prop.getType().equals(PropertyType.JSON)) {\n          \n          \n            \n                    assertFalse(prop.getType().isValidFormat(\"notJson\"));\n          \n          \n            \n                    String json =\n          \n          \n            \n                        \"[{'foo':'bar','type':'test','fooBar':'32'},{'foo':'bar','type':'test','fooBar':32}]\".replaceAll(\n          \n          \n            \n                            \"'\", \"\\\"\");\n          \n          \n            \n                    assertTrue(Property.isValidProperty(prop.getKey(), json));\n          \n          \n            \n                  }\n          \n          \n            \n                }",
                        "body": "This test should probably follow the other property test patterns and test all properties with the JSON property type. \r\nSomething like:\r\n```suggestion\r\n   for (Property prop : Property.values()) {\r\n      if (prop.getType().equals(PropertyType.JSON)) {\r\n        assertFalse(prop.getType().isValidFormat(\"notJson\"));\r\n        String json =\r\n            \"[{'foo':'bar','type':'test','fooBar':'32'},{'foo':'bar','type':'test','fooBar':32}]\".replaceAll(\r\n                \"'\", \"\\\"\");\r\n        assertTrue(Property.isValidProperty(prop.getKey(), json));\r\n      }\r\n    }\r\n```\r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 122,
                        "originalStartLine": 112
                    },
                    {
                        "bodyText": "I took this suggestion and modified it further in 7fa8aca",
                        "body": "I took this suggestion and modified it further in 7fa8acabb7",
                        "startLine": null,
                        "line": null,
                        "originalLine": 122,
                        "originalStartLine": 112
                    },
                    {
                        "bodyText": "Changes look good. There's two separate follow up comments on your changes.",
                        "body": "Changes look good. There's two separate follow up comments on your changes. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 122,
                        "originalStartLine": 112
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 122,
                "originalStartLine": 112,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/conf/PropertyTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM40ngwy",
                "comments": [
                    {
                        "bodyText": "This question is probably out of scope of the \"simple validation\" of this PR.\nIs there a way to test setting a custom, user-defined property (created under the general.custom prefix that's of type JSON with the shell?",
                        "body": "This question is probably out of scope of the \"simple validation\" of this PR.\r\n \r\nIs there a way to test setting a custom, user-defined property (created under the `general.custom` prefix that's of type JSON with the shell?",
                        "startLine": null,
                        "line": 52,
                        "originalLine": 54,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "As it is now, general.custom is a prefix and does not specify a type.\nI think it would take something like a new PREFIX type, maybe something like general.custom.json that could then be used to trigger validation.  There may be issues with precedence with general.custom that would short circuit general.custom.json.\nCertainly something to discuss as a follow-on.",
                        "body": "As it is now, `general.custom` is a prefix and does not specify a type.\r\n\r\nI think it would take something like a new PREFIX type, maybe something like `general.custom.json` that could then be used to trigger validation.  There may be issues with precedence with `general.custom` that would short circuit `general.custom.json`.  \r\n\r\nCertainly something to discuss as a follow-on.",
                        "startLine": null,
                        "line": 52,
                        "originalLine": 54,
                        "originalStartLine": null
                    }
                ],
                "line": 52,
                "startLine": 52,
                "originalLine": 54,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/shell/ConfigSetIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM40rEnG",
                "comments": [
                    {
                        "bodyText": "Would this create a new ValidJson object each time this is used? If so, is there a way to create a single instance for reuse?",
                        "body": "Would this create a new `ValidJson` object each time this is used? If so, is there a way to create a single instance for reuse?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 144,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The test is fairly light weight, so I don't know how we could evaluate if it made a difference.  With 37112e7, the ObjectMapper is shared, so there should be even less impact on object creation.",
                        "body": "The test is fairly light weight, so I don't know how we could evaluate if it made a difference.  With 37112e7e0e, the ObjectMapper is shared, so there should be even less impact on object creation.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 144,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It doesn't make sense to make the object mapper static, and instantiate the ValidJson object each time in order to call it's test method. It's already a Predicate, so you don't need the x -> ... .test(x) stuff, you can just do:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              JSON(\"json\", x -> new ValidJson().test(x),\n          \n          \n            \n              JSON(\"json\", new ValidJson(),\n          \n      \n    \n    \n  \n\nThen, you don't have to worry about making the object mapper a static singleton... the PropertyType.JSON enum will just re-use the singleton new ValidJson() instance passed in for its predicate every time.",
                        "body": "It doesn't make sense to make the object mapper static, and instantiate the ValidJson object each time in order to call it's test method. It's already a Predicate, so you don't need the `x -> ... .test(x)` stuff, you can just do:\r\n\r\n```suggestion\r\n  JSON(\"json\", new ValidJson(),\r\n```\r\n\r\nThen, you don't have to worry about making the object mapper a static singleton... the PropertyType.JSON enum will just re-use the singleton `new ValidJson()` instance passed in for its predicate every time.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 144,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It should be just new ValidJson(), my mistake.",
                        "body": "It should be just `new ValidJson()`, my mistake.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 144,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "fixed in 33bc47d",
                        "body": "fixed in 33bc47d2a1",
                        "startLine": null,
                        "line": null,
                        "originalLine": 144,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 144,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/PropertyType.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM40rFGz",
                "comments": [
                    {
                        "bodyText": "Similar comment here. Not sure how expensive this object is to create but maybe a private static final ObjectMapper could be created within this class for reuse.",
                        "body": "Similar comment here. Not sure how expensive this object is to create but maybe a `private static final ObjectMapper` could be created within this class for reuse.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 221,
                        "originalStartLine": 219
                    },
                    {
                        "bodyText": "Made static in 37112e7.  Also, left documentation that we could consider using ThreadLocal.  The ObjectMapper is thread safe, but apparently uses synchronization, so if we see contention then there are alternatives.",
                        "body": "Made static in 37112e7e0e.  Also, left documentation that we could consider using ThreadLocal.  The ObjectMapper is thread safe, but apparently uses synchronization, so if we see contention then there are alternatives.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 221,
                        "originalStartLine": 219
                    },
                    {
                        "bodyText": "Unnecessary. Just throw it inside the ValidJson class as a private instance field inside that. See my previous comment about passing ValidJson::new as the predicate.",
                        "body": "Unnecessary. Just throw it inside the ValidJson class as a private instance field inside that. See my previous comment about passing `ValidJson::new` as the predicate.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 221,
                        "originalStartLine": 219
                    },
                    {
                        "bodyText": "Changed in 33bc47d",
                        "body": "Changed in 33bc47d2a1",
                        "startLine": null,
                        "line": null,
                        "originalLine": 221,
                        "originalStartLine": 219
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 221,
                "originalStartLine": 219,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/PropertyType.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM40zGeb",
                "comments": [
                    {
                        "bodyText": "If you want to have two separate json test values, we might want to remove the top level list brackets on one of these so the test values are different forms of valid json.",
                        "body": "If you want to have two separate json test values, we might want to remove the top level list brackets on one of these so the test values are different forms of valid json.",
                        "startLine": null,
                        "line": 116,
                        "originalLine": 119,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added another sample in 37112e7 - the test requires a single json object, so removing the brackets allow fails.",
                        "body": "Added another sample in 37112e7e0e - the test requires a single json object, so removing the brackets allow fails.",
                        "startLine": null,
                        "line": 116,
                        "originalLine": 119,
                        "originalStartLine": null
                    }
                ],
                "line": 116,
                "startLine": 116,
                "originalLine": 119,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/conf/PropertyTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM40zHI6",
                "comments": [
                    {
                        "bodyText": "Do we still need this test for this specific property since this is tested on line 134?\ninvalids.forEach(j -> assertFalse(prop.getType().isValidFormat(j)));",
                        "body": "Do we still need this test for this specific property since this is tested on line 134?\r\n`invalids.forEach(j -> assertFalse(prop.getType().isValidFormat(j))); `",
                        "startLine": null,
                        "line": null,
                        "originalLine": 112,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed with 37112e7 (and some additional cases added)",
                        "body": "removed with 37112e7e0e (and some additional cases added)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 112,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 112,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/conf/PropertyTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM40_BjH",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            @Tag(SUNNY_DAY)\n          \n      \n    \n    \n  \n\nI'm against making this a new sunny test.",
                        "body": "```suggestion\r\n```\r\n\r\nI'm against making this a new sunny test.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 39,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed sunny tag in 33bc47d",
                        "body": "removed sunny tag in 33bc47d2a1",
                        "startLine": null,
                        "line": null,
                        "originalLine": 39,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 39,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/shell/ConfigSetIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "ctubbsii",
            "ddanielr",
            "DomGarguilo"
        ],
        "tdv": 10.0,
        "description": {
            "bodyText": "Adds a JSON PropertyType and minimal validation that verifies the property value can be parsed into a JSON object.\nThis was inspired by issue #3909, but does not directly address it.\n\nSome current properties defer validation until use and this PR does not address that. (That could be done in a follow-on PR)\nSome configurations require multiple, independent properties be set for a valid configuration, This PR does not  attempt to perform that validation - that responsibility is deferred to the implementations that use those properties.\n\nThis implementation was to provide a minimal check, that follow on PRs could extend / leverage to introduce additional property validation."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1891,
        "title": {
            "body": "Add TabletBalancer to SPI package",
            "bodyHTML": "Add TabletBalancer to SPI package"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc3MTEyODM0OQ==",
                "body": "> This is a big PR, I feel like I can only review it in chunks. Here's a few comments from stuff I noticed today.\r\n\r\nYeah, and I even tried to keep it as small as I could. One thing to keep in mind that could help... The balancers and tests are all just copies of those in the org.apache.accumulo.server.master.balancer package, but updated with the new interface and types added to the SPI package. If you check this branch out, then you can diff each balancer new file with its deprecated equivalent.\r\n\r\nI figured any improvements to the balancers themselves could be addressed as we want with a follow-on issue/pull request.",
                "bodyText": "This is a big PR, I feel like I can only review it in chunks. Here's a few comments from stuff I noticed today.\n\nYeah, and I even tried to keep it as small as I could. One thing to keep in mind that could help... The balancers and tests are all just copies of those in the org.apache.accumulo.server.master.balancer package, but updated with the new interface and types added to the SPI package. If you check this branch out, then you can diff each balancer new file with its deprecated equivalent.\nI figured any improvements to the balancers themselves could be addressed as we want with a follow-on issue/pull request.",
                "createdAt": "2021-02-01T20:15:06Z",
                "author": "brianloss"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc3Mjg3NDcyOQ==",
                "body": "> My only request for a change in this PR before it is merged is to rename the newly introduced SPI \"DefaultLoadBalancer\" to something like \"BasicLoadBalancer\" or \"SimpleLoadBalancer\" (unless there's a better, more descriptive name based on how it actually works), and with a brief class-level javadoc to describe the basic strategy.\r\n> \r\n> While the rename and addition of a javadoc could occur in a subsequent task, I think it makes more sense to have the better name (and basic description) in its initial introduction, since it is a wholly new class.\r\n\r\n@ctubbsii this is done in the latest commit. Let me know if you see anything else that needs addressed. Thanks!",
                "bodyText": "My only request for a change in this PR before it is merged is to rename the newly introduced SPI \"DefaultLoadBalancer\" to something like \"BasicLoadBalancer\" or \"SimpleLoadBalancer\" (unless there's a better, more descriptive name based on how it actually works), and with a brief class-level javadoc to describe the basic strategy.\nWhile the rename and addition of a javadoc could occur in a subsequent task, I think it makes more sense to have the better name (and basic description) in its initial introduction, since it is a wholly new class.\n\n@ctubbsii this is done in the latest commit. Let me know if you see anything else that needs addressed. Thanks!",
                "createdAt": "2021-02-03T22:37:47Z",
                "author": "brianloss"
            }
        ],
        "total_comments_count": 53,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MjI1NjkxOnYy",
                "comments": [
                    {
                        "bodyText": "Should preserve the since tag, since it's an inner-interface, and has its own apidoc page as a separate type.",
                        "body": "Should preserve the since tag, since it's an inner-interface, and has its own apidoc page as a separate type.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 38,
                        "originalStartLine": 36
                    },
                    {
                        "bodyText": "Thanks, updated for the next commit.",
                        "body": "Thanks, updated for the next commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 38,
                        "originalStartLine": 36
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 38,
                "originalStartLine": 36,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/PluginEnvironment.java",
                "diffSide": "LEFT",
                "startDiffSide": "LEFT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MjI2MDI4OnYy",
                "comments": [
                    {
                        "bodyText": "This actually doesn't need the since tag, since the entire class is new in 2.1.",
                        "body": "This actually doesn't need the since tag, since the entire class is new in 2.1.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 131,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks, updated for the next commit.",
                        "body": "Thanks, updated for the next commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 131,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 131,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/PluginEnvironment.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MjI3MDM2OnYy",
                "comments": [
                    {
                        "bodyText": "What's the use case for this being in the public API?\nNote: we're transitioning how we do class loading, and phasing out some internal class loading stuffs. We should avoid exposing stuff like this to the public API. The user should be able to just load the class themselves, using their own object's classloader, if they need to.",
                        "body": "What's the use case for this being in the public API?\r\nNote: we're transitioning how we do class loading, and phasing out some internal class loading stuffs. We should avoid exposing stuff like this to the public API. The user should be able to just load the class themselves, using their own object's classloader, if they need to.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 180,
                        "originalStartLine": 170
                    },
                    {
                        "bodyText": "Fair enough. I really just needed the context-loading variant for TableLoadBalancer. But that really just needs a method to get the context name for the table configuration, so I added that method to BalancerEnvironment and removed the loadClass methods from here.",
                        "body": "Fair enough. I really just needed the context-loading variant for TableLoadBalancer. But that really just needs a method to get the context name for the table configuration, so I added that method to BalancerEnvironment and removed the loadClass methods from here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 180,
                        "originalStartLine": 170
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 180,
                "originalStartLine": 170,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/PluginEnvironment.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MjI4MjY0OnYy",
                "comments": [
                    {
                        "bodyText": "This is cleanest with a static import of requireNonNull:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                Objects.requireNonNull(thriftStatus);\n          \n          \n            \n            \n          \n          \n            \n                this.thriftStatus = thriftStatus;\n          \n          \n            \n                this.thriftStatus = requireNonNull(thriftStatus);\n          \n      \n    \n    \n  \n\nBut, even without a static import, you can still one-line this:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                Objects.requireNonNull(thriftStatus);\n          \n          \n            \n            \n          \n          \n            \n                this.thriftStatus = thriftStatus;\n          \n          \n            \n                this.thriftStatus = Objects.requireNonNull(thriftStatus);",
                        "body": "This is cleanest with a static import of `requireNonNull`:\r\n```suggestion\r\n    this.thriftStatus = requireNonNull(thriftStatus);\r\n```\r\nBut, even without a static import, you can still one-line this:\r\n```suggestion\r\n    this.thriftStatus = Objects.requireNonNull(thriftStatus);\r\n```\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": 38
                    },
                    {
                        "bodyText": "Thanks, updated for the next commit.",
                        "body": "Thanks, updated for the next commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": 38
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 40,
                "originalStartLine": 38,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/manager/balancer/TServerStatusImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MjMwMTY4OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                requireNonNull(tabletId);\n          \n          \n            \n                requireNonNull(oldTabletServer);\n          \n          \n            \n                requireNonNull(newTabletServer);\n          \n          \n            \n            \n          \n          \n            \n                this.tabletId = tabletId;\n          \n          \n            \n                this.oldTabletServer = oldTabletServer;\n          \n          \n            \n                this.newTabletServer = newTabletServer;\n          \n          \n            \n                this.tabletId = requireNonNull(tabletId);\n          \n          \n            \n                this.oldTabletServer = requireNonNull(oldTabletServer);\n          \n          \n            \n                this.newTabletServer = requireNonNull(newTabletServer);",
                        "body": "```suggestion\r\n    this.tabletId = requireNonNull(tabletId);\r\n    this.oldTabletServer = requireNonNull(oldTabletServer);\r\n    this.newTabletServer = requireNonNull(newTabletServer);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 43,
                        "originalStartLine": 37
                    },
                    {
                        "bodyText": "Thanks, updated for the next commit.",
                        "body": "Thanks, updated for the next commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 43,
                        "originalStartLine": 37
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 43,
                "originalStartLine": 37,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/balancer/data/TabletMigration.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MjMxODYxOnYy",
                "comments": [
                    {
                        "bodyText": "Is there any way we can make this implement or extend the SPI version, so we automatically support compatibility with any implementations of the old interface, without two code paths in the manager?",
                        "body": "Is there any way we can make this implement or extend the SPI version, so we automatically support compatibility with any implementations of the old interface, without two code paths in the manager?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": 59
                    },
                    {
                        "bodyText": "I think that could be done. The main downside I can think of is that, when using the deprecated balancer, the params to getAssignments and balance would get converted to the new types in the master and then converted back to the thrift types in the implementation of the SPI TabletBalancer methods that then delegate to the deprecated TabletBalancer methods. I don't think the balancer methods are called often enough that we really need to worry about the performance hit, though.",
                        "body": "I think that could be done. The main downside I can think of is that, when using the deprecated balancer, the params to getAssignments and balance would get converted to the new types in the master and then converted back to the thrift types in the implementation of the SPI TabletBalancer methods that then delegate to the deprecated TabletBalancer methods. I don't think the balancer methods are called often enough that we really need to worry about the performance hit, though.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": 59
                    },
                    {
                        "bodyText": "Done in latest commit.",
                        "body": "Done in latest commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": 59
                    },
                    {
                        "bodyText": "The main downside I can think of is that, when using the deprecated balancer, the params to getAssignments and balance would get converted to the new types in the master and then converted back to the thrift types\n\n@brianloss  I was thinking that AssignmentParamsImpl could be created w/ refs to the new and old types and have methods to get the old types.  The could avoid the conversion from new to old.  I am not sure but it seems like the method that creates AssignmentParamsImpl has refs to the old types.",
                        "body": "> The main downside I can think of is that, when using the deprecated balancer, the params to getAssignments and balance would get converted to the new types in the master and then converted back to the thrift types\r\n\r\n@brianloss  I was thinking that AssignmentParamsImpl could be created w/ refs to the new and old types and have methods to get the old types.  The could avoid the conversion from new to old.  I am not sure but it seems like the method that creates AssignmentParamsImpl has refs to the old types.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": 59
                    },
                    {
                        "bodyText": "@brianloss I was thinking that AssignmentParamsImpl could be created w/ refs to the new and old types and have methods to get the old types. The could avoid the conversion from new to old. I am not sure but it seems like the method that creates AssignmentParamsImpl has refs to the old types.\n\n@keith-turner I pushed some changes that I think take care of this.",
                        "body": "> @brianloss I was thinking that AssignmentParamsImpl could be created w/ refs to the new and old types and have methods to get the old types. The could avoid the conversion from new to old. I am not sure but it seems like the method that creates AssignmentParamsImpl has refs to the old types.\r\n\r\n@keith-turner I pushed some changes that I think take care of this.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": 59
                    },
                    {
                        "bodyText": "@brianloss  I just took a quick look at, I like how you pulled code out of Master,TabletBalancer and moved it into AssignmentParamsImpl and BalancerParamsImpl.  Making those classes own the responsibility for converting from the SPI types to the internal thrift types is nice.",
                        "body": "@brianloss  I just took a quick look at, I like how you pulled code out of Master,TabletBalancer and moved it into AssignmentParamsImpl and BalancerParamsImpl.  Making those classes own the responsibility for converting from the SPI types to the internal thrift types is nice.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": 59
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 64,
                "originalStartLine": 59,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/master/balancer/TabletBalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MjMyNTE5OnYy",
                "comments": [
                    {
                        "bodyText": "If the old were made to implement or extend the new SPI, then we wouldn't need to have two code paths here.",
                        "body": "If the old were made to implement or extend the new SPI, then we wouldn't need to have two code paths here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1759,
                        "originalStartLine": 1751
                    },
                    {
                        "bodyText": "I was curious about this and tried experimenting with it locally with the following approach.  Assuming we can make assumptions about the concrete types within Accumulo code and add needed methods to the concrete types.\n@Deprecated(since = \"2.1.0\")\npublic abstract class TabletBalancer implements org.apache.accumulo.core.spi.balancer.TabletBalancer {\n\n  @Override\n  public void init(BalancerEnvironment balancerEnvironment) {\n    var bei = (BalancerEnvironmentImpl)balancerEnvironment;\n    init(bei.getContext());\n  }\n\n  @Override\n  public void getAssignments(AssignmentParameters params) {\n    var api = (AssignmentParamsImpl)params; \n    Map<KeyExtent,TServerInstance> assignments = new HashMap<>();\n    getAssignments(api.currentStatusOld(), api.unassignedTabletsOld(), assignments);\n    assignments.forEach((ke, tsi) -> {\n      params.assignmentsOut().put(new TabletIdImpl(ke), TabletServerIdImpl.fromThrift(tsi));\n    });\n  }\n\n  @Override\n  public long balance(BalanceParameters params) {\n    var bpi = (BalanceParamsImpl) params;\n    List<TabletMigration> migrationsOut = new ArrayList<>();\n    balance(bpi.currentStatusOld(), bpi.currentMigrationsOld(), migrationsOut);\n    migrationsOut.forEach(mo -> {\n      params.migrationsOut()\n          .add(new org.apache.accumulo.core.spi.balancer.data.TabletMigration(\n              new TabletIdImpl(mo.tablet), TabletServerIdImpl.fromThrift(mo.oldServer),\n              TabletServerIdImpl.fromThrift(mo.newServer)));\n    });\n  }",
                        "body": "I was curious about this and tried experimenting with it locally with the following approach.  Assuming we can make assumptions about the concrete types within Accumulo code and add needed methods to the concrete types.\r\n\r\n```java\r\n@Deprecated(since = \"2.1.0\")\r\npublic abstract class TabletBalancer implements org.apache.accumulo.core.spi.balancer.TabletBalancer {\r\n\r\n  @Override\r\n  public void init(BalancerEnvironment balancerEnvironment) {\r\n    var bei = (BalancerEnvironmentImpl)balancerEnvironment;\r\n    init(bei.getContext());\r\n  }\r\n\r\n  @Override\r\n  public void getAssignments(AssignmentParameters params) {\r\n    var api = (AssignmentParamsImpl)params; \r\n    Map<KeyExtent,TServerInstance> assignments = new HashMap<>();\r\n    getAssignments(api.currentStatusOld(), api.unassignedTabletsOld(), assignments);\r\n    assignments.forEach((ke, tsi) -> {\r\n      params.assignmentsOut().put(new TabletIdImpl(ke), TabletServerIdImpl.fromThrift(tsi));\r\n    });\r\n  }\r\n\r\n  @Override\r\n  public long balance(BalanceParameters params) {\r\n    var bpi = (BalanceParamsImpl) params;\r\n    List<TabletMigration> migrationsOut = new ArrayList<>();\r\n    balance(bpi.currentStatusOld(), bpi.currentMigrationsOld(), migrationsOut);\r\n    migrationsOut.forEach(mo -> {\r\n      params.migrationsOut()\r\n          .add(new org.apache.accumulo.core.spi.balancer.data.TabletMigration(\r\n              new TabletIdImpl(mo.tablet), TabletServerIdImpl.fromThrift(mo.oldServer),\r\n              TabletServerIdImpl.fromThrift(mo.newServer)));\r\n    });\r\n  }\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1759,
                        "originalStartLine": 1751
                    },
                    {
                        "bodyText": "I was just about to start working on this, but looks like you beat me to it. :) Thanks. I'll add this code change in.",
                        "body": "I was just about to start working on this, but looks like you beat me to it. :) Thanks. I'll add this code change in.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1759,
                        "originalStartLine": 1751
                    },
                    {
                        "bodyText": "This is done in the latest commit.",
                        "body": "This is done in the latest commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1759,
                        "originalStartLine": 1751
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1759,
                "originalStartLine": 1751,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3Mzg4OTkwOnYy",
                "comments": [
                    {
                        "bodyText": "Although this method is public in the old Balancer, I don't think it was intended for user use.  I think it was just meant to be an internal sanity check code.  So maybe it does not need to exists in the new SPI interfaces.  It could be placed somewhere outside SPI for internal use.",
                        "body": "Although this method is public in the old Balancer, I don't think it was intended for user use.  I think it was just meant to be an internal sanity check code.  So maybe it does not need to exists in the new SPI interfaces.  It could be placed somewhere outside SPI for internal use.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 112,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah, that makes sense. I'll look into it.",
                        "body": "Yeah, that makes sense. I'll look into it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 112,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is done in the latest commit.",
                        "body": "This is done in the latest commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 112,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 112,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/manager/balancer/BalancerEnvironmentImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3Mzg5MTg3OnYy",
                "comments": [
                    {
                        "bodyText": "It would be nice to log the exception, maybe at debug.  Could help a user figure out a problem.",
                        "body": "It would be nice to log the exception, maybe at debug.  Could help a user figure out a problem.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1755,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The try/catch will go away when I finish changing the old TabletBalancer to implement the new SPI balancer interface.",
                        "body": "The try/catch will go away when I finish changing the old TabletBalancer to implement the new SPI balancer interface.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1755,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1755,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MzkxODM5OnYy",
                "comments": [
                    {
                        "bodyText": "Could possibly do the following instead. Maybe its better to just make the new SPI interfaces follow the patterns of the old ones for this PR and then have a second PR that focuses on improving the new balancer SPI.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                List<TabletMigration> migrationsOut();\n          \n          \n            \n                addMigration(TabletMigration);",
                        "body": "Could possibly do the following instead. Maybe its better to just make the new SPI interfaces follow the patterns of the old ones for this PR and then have a second PR that focuses on improving the new balancer SPI.\r\n\r\n```suggestion\r\n    addMigration(TabletMigration);\r\n```",
                        "startLine": null,
                        "line": 95,
                        "originalLine": 95,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is done in the latest commit.",
                        "body": "This is done in the latest commit.",
                        "startLine": null,
                        "line": 95,
                        "originalLine": 95,
                        "originalStartLine": null
                    }
                ],
                "line": 95,
                "startLine": 95,
                "originalLine": 95,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/balancer/TabletBalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODY2MzU5OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              public String getHost() {\n          \n          \n            \n              @Override\n          \n          \n            \n              public String getHost() {",
                        "body": "```suggestion\r\n  @Override\r\n  public String getHost() {\r\n```",
                        "startLine": null,
                        "line": 47,
                        "originalLine": 46,
                        "originalStartLine": null
                    }
                ],
                "line": 47,
                "startLine": 47,
                "originalLine": 46,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/manager/balancer/TabletServerIdImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODY2NDY0OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              public int getPort() {\n          \n          \n            \n              @Override\n          \n          \n            \n              public int getPort() {",
                        "body": "```suggestion\r\n  @Override\r\n  public int getPort() {\r\n```",
                        "startLine": null,
                        "line": 52,
                        "originalLine": 50,
                        "originalStartLine": null
                    }
                ],
                "line": 52,
                "startLine": 52,
                "originalLine": 50,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/manager/balancer/TabletServerIdImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODY2NjE2OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              public String getSession() {\n          \n          \n            \n              @Override\n          \n          \n            \n              public String getSession() {",
                        "body": "```suggestion\r\n  @Override\r\n  public String getSession() {\r\n```",
                        "startLine": null,
                        "line": 57,
                        "originalLine": 54,
                        "originalStartLine": null
                    }
                ],
                "line": 57,
                "startLine": 57,
                "originalLine": 54,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/manager/balancer/TabletServerIdImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODY5NjQ4OnYy",
                "comments": [
                    {
                        "bodyText": "Would be nice to document what the behavior is for tablets w/o a location.",
                        "body": "Would be nice to document what the behavior is for tablets w/o a location.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sure, makes sense. Updating along with the other suggested changes.",
                        "body": "Sure, makes sense. Updating along with the other suggested changes.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 57,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/balancer/BalancerEnvironment.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODcwNjgxOnYy",
                "comments": [
                    {
                        "bodyText": "This may return null if a tablet has no location.",
                        "body": "This may return null if a tablet has no location.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 78,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Ah, good catch. I'll update to guard for that.",
                        "body": "Ah, good catch. I'll update to guard for that.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 78,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 78,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/manager/balancer/BalancerEnvironmentImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODc0NzIxOnYy",
                "comments": [
                    {
                        "bodyText": "Wondering if there is a threading problem and the balancer should only be set on the instance var after init().  Also if init throws an exception, may not want it set.  Wondering if tabletBalancer should be volatile.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                tabletBalancer = Property.createInstanceFromPropertyName(getConfiguration(),\n          \n          \n            \n                    Property.MANAGER_TABLET_BALANCER, TabletBalancer.class, new DefaultLoadBalancer());\n          \n          \n            \n                tabletBalancer.init(balancerEnvironment);\n          \n          \n            \n                var localTabletBalancer = Property.createInstanceFromPropertyName(getConfiguration(),\n          \n          \n            \n                    Property.MANAGER_TABLET_BALANCER, TabletBalancer.class, new DefaultLoadBalancer());\n          \n          \n            \n                localTabletBalancer.init(balancerEnvironment);\n          \n          \n            \n                tabletBalancer = localTabletBalancer;",
                        "body": "Wondering if there is a threading problem and the balancer should only be set on the instance var after init().  Also if init throws an exception, may not want it set.  Wondering if tabletBalancer should be volatile.\r\n\r\n```suggestion\r\n    var localTabletBalancer = Property.createInstanceFromPropertyName(getConfiguration(),\r\n        Property.MANAGER_TABLET_BALANCER, TabletBalancer.class, new DefaultLoadBalancer());\r\n    localTabletBalancer.init(balancerEnvironment);\r\n    tabletBalancer = localTabletBalancer;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1731,
                        "originalStartLine": 1729
                    },
                    {
                        "bodyText": "Yeah, good catch. The code in MasterClientServiceHandler previously did it the way you suggest. I'll update.",
                        "body": "Yeah, good catch. The code in MasterClientServiceHandler previously did it the way you suggest. I'll update.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1731,
                        "originalStartLine": 1729
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1731,
                "originalStartLine": 1729,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTIwMzUwOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              private TabletBalancer tabletBalancer;\n          \n          \n            \n              private volatile TabletBalancer tabletBalancer;",
                        "body": "```suggestion\r\n  private volatile TabletBalancer tabletBalancer;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 206,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 206,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTI4NTE5OnYy",
                "comments": [
                    {
                        "bodyText": "Could replace this with a new static factory method in KeyExtent instead of putting it here, especially if TabletId is a public type, to be consistent with the other static factory methods there (which are more expressive than what we get with constructors).",
                        "body": "Could replace this with a new static factory method in KeyExtent instead of putting it here, especially if TabletId is a public type, to be consistent with the other static factory methods there (which are more expressive than what we get with constructors).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 94,
                        "originalStartLine": 88
                    },
                    {
                        "bodyText": "Ok, I'll push that in the next commit.",
                        "body": "Ok, I'll push that in the next commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 94,
                        "originalStartLine": 88
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 94,
                "originalStartLine": 88,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/dataImpl/TabletIdImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTQ1MzU1OnYy",
                "comments": [
                    {
                        "bodyText": "I wonder if the interface should be called TabletLoadBalancer instead of TabletBalancer. I think it might make things more clear.\nFor the default implementation, it might be nice to name it something based on what it does, rather than it having been set in the default config. That way, if the default changes in future, we don't have a class called DefaultLoadBalancer that is not actually configured as the default implementation. (Consider, for example, the \"default Java GC\" implementations, which have specific names and the selected default has changed over time.)",
                        "body": "I wonder if the interface should be called `TabletLoadBalancer` instead of `TabletBalancer`. I think it might make things more clear.\r\n\r\nFor the default implementation, it might be nice to name it something based on what it does, rather than it having been set in the default config. That way, if the default changes in future, we don't have a class called `DefaultLoadBalancer` that is not actually configured as the default implementation. (Consider, for example, the \"default Java GC\" implementations, which have specific names and the selected default has changed over time.)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ctubbsii I agree that these changes make sense. I wasn't really trying to improve the interface in order to limit the scope of the work and the review for people. I can certainly make these changes now if you prefer, though. Or, I can add a ticket and submit changes like this (and others, such as: Keith and I also talked about moving the output parameters in the getAssignments and balance calls to return objects instead) in a follow-in PR. The only gotcha there is we need to be sure it's done before 2.1 or else we'll end up having to deprecate code we just added, which is clearly not a good idea.",
                        "body": "@ctubbsii I agree that these changes make sense. I wasn't really trying to improve the interface in order to limit the scope of the work and the review for people. I can certainly make these changes now if you prefer, though. Or, I can add a ticket and submit changes like this (and others, such as: Keith and I also talked about moving the output parameters in the getAssignments and balance calls to return objects instead) in a follow-in PR. The only gotcha there is we need to be sure it's done before 2.1 or else we'll end up having to deprecate code we just added, which is clearly not a good idea.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "From the perspective of someone reviewing, I like the idea of improving the new SPI in follow on PRs/issues.  Will be easier to review.\n\nThe only gotcha there is we need to be sure it's done before 2.1 or else we'll end up having to deprecate code we just added, which is clearly not a good idea.\n\nCan use blocker label on issues to make sure they are not forgotten for 2.1.   There is still the risk that its never done.  Even if its never improved, I think these new SPIs are a big improvement over the current state.",
                        "body": " From the perspective of someone reviewing, I like the idea of improving the new SPI in follow on PRs/issues.  Will be easier to review.\r\n\r\n> The only gotcha there is we need to be sure it's done before 2.1 or else we'll end up having to deprecate code we just added, which is clearly not a good idea.\r\n\r\nCan use blocker label on issues to make sure they are not forgotten for 2.1.   There is still the risk that its never done.  Even if its never improved, I think these new SPIs are a big improvement over the current state.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 52,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 52,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/balancer/DefaultLoadBalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTQ3NjAxOnYy",
                "comments": [
                    {
                        "bodyText": "Most of these seem like they should be errors instead of warnings, as they are incorrectly behaving balancers. I think the \"wants to move... not current\" are probably okay as warnings, though, because they seem like they could happen as the result of things changing on the cluster since the balancer made a choice.",
                        "body": "Most of these seem like they should be errors instead of warnings, as they are incorrectly behaving balancers. I think the \"wants to move... not current\" are probably okay as warnings, though, because they seem like they could happen as the result of things changing on the cluster since the balancer made a choice.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 908,
                        "originalStartLine": 899
                    },
                    {
                        "bodyText": "This is just a copy of the checkMigrationSanity method from the now deprecated TabletBalancer class. I added it here since this was the only place it was used.\nI think it makes sense to change the level to error, though. I can certainly do that.",
                        "body": "This is just a copy of the checkMigrationSanity method from the now deprecated [TabletBalancer class](https://github.com/apache/accumulo/blob/main/server/base/src/main/java/org/apache/accumulo/server/master/balancer/TabletBalancer.java#L252). I added it here since this was the only place it was used.\r\n\r\nI think it makes sense to change the level to error, though. I can certainly do that.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 908,
                        "originalStartLine": 899
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 908,
                "originalStartLine": 899,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDg1MjQ5OnYy",
                "comments": [
                    {
                        "bodyText": "I assume this was just copied from DefaultLoadBalancer? It would be nice to mention this in the javadoc since it is difficult to track a file that was moved and renamed.",
                        "body": "I assume this was just copied from `DefaultLoadBalancer`? It would be nice to mention this in the javadoc since it is difficult to track a file that was moved and renamed.",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 60,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Would it be better to have a reference in the docs for the deprecated DefaultLoadBalancer so that someone who is looking to upgrade will know that this is the replacement? It looks like the deprecation on there points to the TabletBalancer interface.",
                        "body": "Would it be better to have a reference in the docs for the deprecated DefaultLoadBalancer so that someone who is looking to upgrade will know that this is the replacement? It looks like the deprecation on there points to the TabletBalancer interface.",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 60,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "On #1905 I made the old plugin impls log a warning mentioning the new impl class to configure instead. Maybe could do that here and if someone configures the  deprecated DefaultLoadBalancer it will log a warning encouraging use of the SimpleLoadBalancer (fully qualified) instead.",
                        "body": "On #1905 I made the old plugin impls log a warning mentioning the new impl class to configure instead. Maybe could do that here and if someone configures the  deprecated DefaultLoadBalancer it will log a warning encouraging use of the SimpleLoadBalancer (fully qualified) instead.",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 60,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Just some reference in both is fine. I was just thinking of a developer who has to make a change to one and needs to find the other one to either backport it or migrate it forward.",
                        "body": "Just some reference in both is fine. I was just thinking of a developer who has to make a change to one and needs to find the other one to either backport it or migrate it forward.",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 60,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I added warnings to constructors for the deprecated balancers, and updated javadoc to DefaultLoadBalancer and SimpleLoadBalancer referencing each other.",
                        "body": "I added warnings to constructors for the deprecated balancers, and updated javadoc to DefaultLoadBalancer and SimpleLoadBalancer referencing each other.",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 60,
                        "originalStartLine": null
                    }
                ],
                "line": 60,
                "startLine": 60,
                "originalLine": 60,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/balancer/SimpleLoadBalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "brianloss",
            "keith-turner",
            "ctubbsii",
            "milleruntime"
        ],
        "tdv": 1286.0,
        "description": {
            "bodyText": "This change deprecates existing balancers and introduces copies of each\nunder the SPI package. The main balancer interface, TabletBalancer, has\nbeen converted from an abstract class to an interface and its method\nsignatures use only public API types, and some other data types in SPI\nsub-packages. The new types used expose the same functionality as the\nprevious types, and the implementations generally simply wrap the old\nthrift objects and delegate, but will allow for easier evolution of the\nAPI in the future.\n\nDeprecated TabletId.getTableId(), which created a new Text object\nevery time, in favor of new TabletId.getTable() which returns a\nTableId. All existing usages of the getTableId() method would\nimmediately call toString() on the returned Text object, or construct\na TableId from the Text object. Therefore, the new method avoids\nobject creation and usages read cleaner in many cases.\nAdd functionality to PluginEnvironment.Configuration for loadClass\n(vs just instantiating a class) and also expose derived property\ncalculation (AccumuloConfiguration.Deriver) as a Supplier.\nDeprecated all balancers in org.apache.accumulo.server.master.balancer\nexcept for ChaoticLoadBalancer, which was moved to accumulo-test since\nits purpose is only for testing.\nIntroduce types in org.apache.accumulo.core.spi.balancer.data for\nwrapping thrift types needed by the balancers.\nAdd a BalancerEnvironment to the SPI to support balancer-specific\nsystem operations (table online status check, listing online tablets,\netc) in an API-stable manner.\nConvert TabletBalancer from abstract class to interface with init,\ngetAssignments, and balance methods. The methods take parameters\nobjects which will make it easier in the future if the balancer API\nneeds to evolve.\nImplement existing balancers (DefaultLoadBalancer, TableLoadBalancer,\nGroupBalancer, RegexGroupBalancer, HostRegexTableLoadBalancer) in the\nSPI package by copying existing code and converting usages of thrift\ntypes to new stable types, and adjusting method signatures such that\nthe new TabletBalancer API is implemented.\nChanged default balancer and table load balancer properties to use the\nnew SPI-packaged versions.\nWired support in Master to call either the deprecated or new balancer\ndepending on which type is specified by the accumulo configuration.\n\nfixes #1880"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1580,
        "title": {
            "body": "Update the internal fields of the Data Providr when overriding the data through set methods.",
            "bodyHTML": "Update the internal fields of the Data Providr when overriding the data through set methods."
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0Mjc1MTg3OA==",
                "body": "One general comment, shall we add a simple test to make sure this is working as expected?",
                "bodyText": "One general comment, shall we add a simple test to make sure this is working as expected?",
                "createdAt": "2020-12-10T19:42:39Z",
                "author": "kaisun2000"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0Mjg2MzU4Mw==",
                "body": "One bigger picture question:\r\n\r\nThink from controller caching layer (of zk)  point of view. The write of data is normally from tools or participant or even controller. But they do not use (should not use) these setClusterConfig etc methods of BaseControllerDataProvider.\r\n\r\nThen who should use these set method? Note, these set method does not really persist the data to ZK. BaseControllerDataProvider is read only cache, right? \r\n\r\nIn fact, we should mark these set method test only? Otherwise, when people use them, they would be surprised:\r\n\r\n-  The data is not going to persist to next controller running cycle.\r\n\r\n\r\n",
                "bodyText": "One bigger picture question:\nThink from controller caching layer (of zk)  point of view. The write of data is normally from tools or participant or even controller. But they do not use (should not use) these setClusterConfig etc methods of BaseControllerDataProvider.\nThen who should use these set method? Note, these set method does not really persist the data to ZK. BaseControllerDataProvider is read only cache, right?\nIn fact, we should mark these set method test only? Otherwise, when people use them, they would be surprised:\n\nThe data is not going to persist to next controller running cycle.",
                "createdAt": "2020-12-10T23:22:22Z",
                "author": "kaisun2000"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0Mjk2NjE4OQ==",
                "body": "> Change looks fine to me. Can you elaborate more we do this from external input? Why we cannot set cluster config and call these functions\r\n\r\nThat's also a possible way. But the target refresh method is a private one. And I don't think we want to break the OO design here.\r\nSo as a result you cannot set and then trigger a partial refresh from outside. So either you set to override one list, but the corresponding derived fields have old values. Or you call full refresh but your set data will be covered by the ZK data source.",
                "bodyText": "Change looks fine to me. Can you elaborate more we do this from external input? Why we cannot set cluster config and call these functions\n\nThat's also a possible way. But the target refresh method is a private one. And I don't think we want to break the OO design here.\nSo as a result you cannot set and then trigger a partial refresh from outside. So either you set to override one list, but the corresponding derived fields have old values. Or you call full refresh but your set data will be covered by the ZK data source.",
                "createdAt": "2020-12-11T04:47:35Z",
                "author": "jiajunwang"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0Mjk2ODEyMQ==",
                "body": "> One bigger picture question:\r\n> \r\n> Think from controller caching layer (of zk) point of view. The write of data is normally from tools or participant or even controller. But they do not use (should not use) these setClusterConfig etc methods of BaseControllerDataProvider.\r\n> \r\n> Then who should use these set method? Note, these set method does not really persist the data to ZK. BaseControllerDataProvider is read only cache, right?\r\n> \r\n> In fact, we should mark these set method test only? Otherwise, when people use them, they would be surprised:\r\n> \r\n> * The data is not going to persist to next controller running cycle.\r\n\r\nI don't agree with you. The rebalancer tool is not test code. They are really used in production.\r\nThe best we can do is create a child class based on the basic cache class. But that is out of the scope of this PR. And it is not an essential change.\r\n\r\nI suggest focusing on the issue fixing here. For the other topic, feel free to create other issues to track : )",
                "bodyText": "One bigger picture question:\nThink from controller caching layer (of zk) point of view. The write of data is normally from tools or participant or even controller. But they do not use (should not use) these setClusterConfig etc methods of BaseControllerDataProvider.\nThen who should use these set method? Note, these set method does not really persist the data to ZK. BaseControllerDataProvider is read only cache, right?\nIn fact, we should mark these set method test only? Otherwise, when people use them, they would be surprised:\n\nThe data is not going to persist to next controller running cycle.\n\n\nI don't agree with you. The rebalancer tool is not test code. They are really used in production.\nThe best we can do is create a child class based on the basic cache class. But that is out of the scope of this PR. And it is not an essential change.\nI suggest focusing on the issue fixing here. For the other topic, feel free to create other issues to track : )",
                "createdAt": "2020-12-11T04:54:27Z",
                "author": "jiajunwang"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0NDc0MTQxNw==",
                "body": "> > One bigger picture question:\r\n> > Think from controller caching layer (of zk) point of view. The write of data is normally from tools or participant or even controller. But they do not use (should not use) these setClusterConfig etc methods of BaseControllerDataProvider.\r\n> > Then who should use these set method? Note, these set method does not really persist the data to ZK. BaseControllerDataProvider is read only cache, right?\r\n> > In fact, we should mark these set method test only? Otherwise, when people use them, they would be surprised:\r\n> > \r\n> > * The data is not going to persist to next controller running cycle.\r\n> \r\n> I don't agree with you. The rebalancer tool is not test code. They are really used in production.\r\n> The best we can do is create a child class based on the basic cache class. But that is out of the scope of this PR. And it is not an essential change.\r\n> \r\n> I suggest focusing on the issue fixing here. For the other topic, feel free to create other issues to track : )\r\n\r\nThe the question is this:\r\n\r\nCalling setClusterConfig method of BaseControllerDataProvider by tools would only change data in the cache. However, it is not going to change data in Zookeeper. Next controller run cycle, the data refreshed from BaseController would be old again.\r\n\r\n Is this something expected? I doubt.\r\n",
                "bodyText": "One bigger picture question:\nThink from controller caching layer (of zk) point of view. The write of data is normally from tools or participant or even controller. But they do not use (should not use) these setClusterConfig etc methods of BaseControllerDataProvider.\nThen who should use these set method? Note, these set method does not really persist the data to ZK. BaseControllerDataProvider is read only cache, right?\nIn fact, we should mark these set method test only? Otherwise, when people use them, they would be surprised:\n\nThe data is not going to persist to next controller running cycle.\n\n\nI don't agree with you. The rebalancer tool is not test code. They are really used in production.\nThe best we can do is create a child class based on the basic cache class. But that is out of the scope of this PR. And it is not an essential change.\nI suggest focusing on the issue fixing here. For the other topic, feel free to create other issues to track : )\n\nThe the question is this:\nCalling setClusterConfig method of BaseControllerDataProvider by tools would only change data in the cache. However, it is not going to change data in Zookeeper. Next controller run cycle, the data refreshed from BaseController would be old again.\nIs this something expected? I doubt.",
                "createdAt": "2020-12-14T22:08:54Z",
                "author": "kaisun2000"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0NTY0Mjk4Mw==",
                "body": "> > > One bigger picture question:\r\n> > > Think from controller caching layer (of zk) point of view. The write of data is normally from tools or participant or even controller. But they do not use (should not use) these setClusterConfig etc methods of BaseControllerDataProvider.\r\n> > > Then who should use these set method? Note, these set method does not really persist the data to ZK. BaseControllerDataProvider is read only cache, right?\r\n> > > In fact, we should mark these set method test only? Otherwise, when people use them, they would be surprised:\r\n> > > \r\n> > > * The data is not going to persist to next controller running cycle.\r\n> > \r\n> > \r\n> > I don't agree with you. The rebalancer tool is not test code. They are really used in production.\r\n> > The best we can do is create a child class based on the basic cache class. But that is out of the scope of this PR. And it is not an essential change.\r\n> > I suggest focusing on the issue fixing here. For the other topic, feel free to create other issues to track : )\r\n> \r\n> The the question is this:\r\n> \r\n> Calling setClusterConfig method of BaseControllerDataProvider by tools would only change data in the cache. However, it is not going to change data in Zookeeper. Next controller run cycle, the data refreshed from BaseController would be old again.\r\n> \r\n> Is this something expected? I doubt.\r\n\r\nAs I mentioned this is out of the scope of this PR. And I already proposed a solution in the previous discussion. Do you have any other comments about the change itself? Or I suggest that we discuss future enhancement in another thread.\r\nI think what you said is valid. But I'm not convinced that this is very important so we need to address in the near future. But if you don't agree, please feel free to create an issue for your concern. ",
                "bodyText": "One bigger picture question:\nThink from controller caching layer (of zk) point of view. The write of data is normally from tools or participant or even controller. But they do not use (should not use) these setClusterConfig etc methods of BaseControllerDataProvider.\nThen who should use these set method? Note, these set method does not really persist the data to ZK. BaseControllerDataProvider is read only cache, right?\nIn fact, we should mark these set method test only? Otherwise, when people use them, they would be surprised:\n\nThe data is not going to persist to next controller running cycle.\n\n\nI don't agree with you. The rebalancer tool is not test code. They are really used in production.\nThe best we can do is create a child class based on the basic cache class. But that is out of the scope of this PR. And it is not an essential change.\nI suggest focusing on the issue fixing here. For the other topic, feel free to create other issues to track : )\n\nThe the question is this:\nCalling setClusterConfig method of BaseControllerDataProvider by tools would only change data in the cache. However, it is not going to change data in Zookeeper. Next controller run cycle, the data refreshed from BaseController would be old again.\nIs this something expected? I doubt.\n\nAs I mentioned this is out of the scope of this PR. And I already proposed a solution in the previous discussion. Do you have any other comments about the change itself? Or I suggest that we discuss future enhancement in another thread.\nI think what you said is valid. But I'm not convinced that this is very important so we need to address in the near future. But if you don't agree, please feel free to create an issue for your concern.",
                "createdAt": "2020-12-16T00:01:54Z",
                "author": "jiajunwang"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0Njc5NDgzMA==",
                "body": "Approved by @dasahcc, I will merge the change soon.",
                "bodyText": "Approved by @dasahcc, I will merge the change soon.",
                "createdAt": "2020-12-16T18:36:19Z",
                "author": "jiajunwang"
            }
        ],
        "total_comments_count": 19,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODY3ODgwOnYy",
                "comments": [
                    {
                        "bodyText": "why here we use getClusterConfig() while later in setClusterConfig we use _clusterConfig?\nIn fact,\n  public ClusterConfig getClusterConfig() {\n    return _clusterConfig;\n  }\n\nany specific reason?",
                        "body": "why here we use getClusterConfig() while later in `setClusterConfig` we use _clusterConfig?\r\n\r\nIn fact, \r\n\r\n```\r\n  public ClusterConfig getClusterConfig() {\r\n    return _clusterConfig;\r\n  }\r\n```\r\n\r\nany specific reason?",
                        "startLine": null,
                        "line": 387,
                        "originalLine": 387,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This seems to be a non-essential change?",
                        "body": "This seems to be a non-essential change? ",
                        "startLine": null,
                        "line": 387,
                        "originalLine": 387,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Because setClusterConfig() is where you update _clusterConfig. And here, it is using it as an input.\nIt is a good practice that we don't refer to a private field directly in a private method. Note that the main reason no one calls this method to update for now is that we hide it too deep, so no one remembers. If the parameters are explicitly passed, meaning input and output are clearly divided, then we avoid potential bugs.\nSo, IMO this is tightly related to this change.",
                        "body": "Because setClusterConfig() is where you update _clusterConfig. And here, it is using it as an input.\r\nIt is a good practice that we don't refer to a private field directly in a private method. Note that the main reason no one calls this method to update for now is that we hide it too deep, so no one remembers. If the parameters are explicitly passed, meaning input and output are clearly divided, then we avoid potential bugs.\r\nSo, IMO this is tightly related to this change.",
                        "startLine": null,
                        "line": 387,
                        "originalLine": 387,
                        "originalStartLine": null
                    }
                ],
                "line": 387,
                "startLine": 387,
                "originalLine": 387,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODczMzk0OnYy",
                "comments": [
                    {
                        "bodyText": "again, is clusterConfig passed in would always to the same as _clusterConfig?",
                        "body": "again, is `clusterConfig` passed in would always to the same as `_clusterConfig`?",
                        "startLine": null,
                        "line": 773,
                        "originalLine": 773,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Please refer to the previous comment.",
                        "body": "Please refer to the previous comment.",
                        "startLine": null,
                        "line": 773,
                        "originalLine": 773,
                        "originalStartLine": null
                    }
                ],
                "line": 773,
                "startLine": 773,
                "originalLine": 773,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODc1NTY3OnYy",
                "comments": [
                    {
                        "bodyText": "This seems to be non-essential too, right? The problem is in the setClusterConfig and setInstanceConfig",
                        "body": "This seems to be non-essential too, right? The problem is in the` setClusterConfig` and `setInstanceConfig`",
                        "startLine": null,
                        "line": 388,
                        "originalLine": 388,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is to improve the style so we lower the chance of making such a mistake again.",
                        "body": "This is to improve the style so we lower the chance of making such a mistake again.",
                        "startLine": null,
                        "line": 388,
                        "originalLine": 388,
                        "originalStartLine": null
                    }
                ],
                "line": 388,
                "startLine": 388,
                "originalLine": 388,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzcyMDkxOnYy",
                "comments": [
                    {
                        "bodyText": "Then why this place we don't use getClusterConfig().\nEither way it is find to me. But please do use one approach.",
                        "body": "Then why this place we don't use `getClusterConfig()`. \r\n\r\nEither way it is find to me. But please do use one approach. ",
                        "startLine": null,
                        "line": 422,
                        "originalLine": 422,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I can change to \"clusterConfig\" instead of \"_clusterConfig\". But it makes very little difference.\ngetClusterConfig() is a different story. It is in set method, we should not call get method in a set method. It is just confusing.\nLet's don't make it too complicated. My target is just to remove all the unnecessary private field references. And this specific method is a set method. It is necessary.",
                        "body": "I can change to \"clusterConfig\" instead of \"_clusterConfig\". But it makes very little difference.\r\n\r\ngetClusterConfig() is a different story. It is in set method, we should not call get method in a set method. It is just confusing.\r\n\r\nLet's don't make it too complicated. My target is just to remove all the unnecessary private field references. And this specific method is a set method. It is necessary.",
                        "startLine": null,
                        "line": 422,
                        "originalLine": 422,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think I might need to clarify it a little bit more. Since you seem to be confused by the style things...\nI'm not sure what is the \"approach\" that you refer to... Calling the method or referring to the private fields are both OK. They are actually the same thing, right? Unless the method has some concurrent control or so.\nI don't see any reason why we have to use getClusterConfig() or _clusterConfig or clusterConfig in this context. They make a minor difference. If I have to compare getClusterConfig() is the worst, since it triggers one more method call.\nThe difference is whether you pass the INPUT as the method parameters or directly refer to the private fields. This makes a difference. The latter introduces hidden dependencies between different private things. So this style is not good.\nThis is the small improvement that I'm trying to do here.\nAnd obviously, this rule is not applicable in the set methods. Because they have to refer to the private fields, right?",
                        "body": "I think I might need to clarify it a little bit more. Since you seem to be confused by the style things...\r\n\r\nI'm not sure what is the \"approach\" that you refer to... Calling the method or referring to the private fields are both OK. They are actually the same thing, right? Unless the method has some concurrent control or so.\r\n\r\nI don't see any reason why we have to use getClusterConfig() or _clusterConfig or clusterConfig in this context. They make a minor difference. If I have to compare getClusterConfig() is the worst, since it triggers one more method call.\r\n\r\nThe difference is whether you pass the **INPUT** as the method parameters or directly refer to the private fields. This makes a difference. The latter introduces hidden dependencies between different private things. So this style is not good.\r\nThis is the small improvement that I'm trying to do here.\r\n\r\nAnd obviously, this rule is not applicable in the set methods. Because they have to refer to the private fields, right?",
                        "startLine": null,
                        "line": 422,
                        "originalLine": 422,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Feel free to resolve this comment thread. The reason I ask is not for styling. It is that initially I not sure about the intention. I thought getInstanceConfigMap() had some tricks inside and that was why we did not use _configMap. If it is styling, no such intention, then either way is fine to me. Making them same style would also be good, but up to you.",
                        "body": "Feel free to resolve this comment thread. The reason I ask is not for styling. It is that initially I not sure about the intention. I thought `getInstanceConfigMap()` had some tricks inside and that was why we did not use `_configMap`. If it is styling, no such intention, then either way is fine to me. Making them same style would also be good, but up to you.",
                        "startLine": null,
                        "line": 422,
                        "originalLine": 422,
                        "originalStartLine": null
                    }
                ],
                "line": 422,
                "startLine": 422,
                "originalLine": 422,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jiajunwang",
            "kaisun2000",
            "junkaixue"
        ],
        "tdv": -2.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1578\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nIt was observed that the set methods in the Helix Data Provider classes, which are used but the Helix tools or tests, are not updating the derived fields.\nThis makes the override incomplete and it causes some potential issues when the tools are used.\nThis PR ensures that the set methods are modifying important derived fields.\nTests\n\n The following tests are written for this issue:\n\nThe main changed logic has been covered by the existing tests.\nIt is hard, and maybe not a good idea to cover all the possible util tool usages.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Failures:\n[ERROR]   TestDisableCustomCodeRunner.test:236 expected: but was:\n[INFO]\n[ERROR] Tests run: 1252, Failures: 1, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:32 h\n[INFO] Finished at: 2020-12-08T16:37:00-08:00\n[INFO] ------------------------------------------------------------------------\nRerun the failed test:\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.117 s - in org.apache.helix.integration.TestDisableCustomCodeRunner\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 18.469 s\n[INFO] Finished at: 2020-12-08T17:36:03-08:00\n[INFO] ------------------------------------------------------------------------\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4296,
        "title": {
            "body": "Added unit test for CompactionJobPriorityQueue",
            "bodyHTML": "Added unit test for CompactionJobPriorityQueue"
        },
        "comments": [],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM45HsJx",
                "comments": [
                    {
                        "bodyText": "would be good to poll the rest of the jobs until empty",
                        "body": "would be good to poll the rest of the jobs until empty",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 83,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Implemented in b68ab6a",
                        "body": "Implemented in b68ab6a",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 83,
                        "originalStartLine": null
                    }
                ],
                "line": 143,
                "startLine": 143,
                "originalLine": 83,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/test/java/org/apache/accumulo/manager/compaction/queue/CompactionJobPriorityQueueTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM45HsOA",
                "comments": [
                    {
                        "bodyText": "Would be good to poll till empty here too.",
                        "body": "Would be good to poll till empty here too.",
                        "startLine": null,
                        "line": 201,
                        "originalLine": 131,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Implemented in b68ab6a",
                        "body": "Implemented in b68ab6a",
                        "startLine": null,
                        "line": 201,
                        "originalLine": 131,
                        "originalStartLine": null
                    }
                ],
                "line": 201,
                "startLine": 201,
                "originalLine": 131,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/test/java/org/apache/accumulo/manager/compaction/queue/CompactionJobPriorityQueueTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM45JDOG",
                "comments": [
                    {
                        "bodyText": "@keith-turner  - I was curious about your thoughts on this comment. Do we still want to return true if nothing is added? Do we still want to return true if only a subset of the jobs are added? If we are only returning a different value when the queue is closed, maybe we should return this to return nothing (void) and throw an IllegalStateException?",
                        "body": "@keith-turner  - I was curious about your thoughts on this comment. Do we still want to return true if nothing is added? Do we still want to return true if only a subset of the jobs are added? If we are only returning a different value when the queue is closed, maybe we should return this to return nothing (`void`) and throw an IllegalStateException?",
                        "startLine": null,
                        "line": 135,
                        "originalLine": 137,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I was curious about your thoughts on this comment. Do we still want to return true if nothing is added? Do we still want to return true if only a subset of the jobs are added? If we are only returning a different value when the queue is closed, maybe we should return this to return nothing (void) and throw an IllegalStateException?\n\nThe code that calls that add method only cares if the queue was closed or not as it trying to deal with an expected race condition.  Since the race condition is an expected situation would be nice to avoid using an exception for flow control.  The boolean return type is super confusing, so it would be good to improve it somehow.  The following is one possible way to make the code more clear.\n\nChange CompactionJobPriorityQueue return type from boolean to int, where it returns the number of things added.\nAdd boolean isClosed() method to CompactionJobPriorityQueue\n\nChange this code in CompactionJobQueues to the following.\nwhile(pq.add(tabletMetadata, jobs) == 0 && pq.isClosed()){\nThe above makes it more explicit in the code that it cares about the closed status of the queue.",
                        "body": "> I was curious about your thoughts on this comment. Do we still want to return true if nothing is added? Do we still want to return true if only a subset of the jobs are added? If we are only returning a different value when the queue is closed, maybe we should return this to return nothing (void) and throw an IllegalStateException?\r\n\r\nThe code that calls that add method only cares if the queue was closed or not as it trying to deal with an expected race condition.  Since the race condition is an expected situation would be nice to avoid using an exception for flow control.  The boolean return type is super confusing, so it would be good to improve it somehow.  The following is one possible way to make the code more clear.\r\n\r\n * Change CompactionJobPriorityQueue return type from boolean to int, where it returns the number of things added.\r\n * Add `boolean isClosed()` method to CompactionJobPriorityQueue\r\n\r\nChange [this code in CompactionJobQueues](https://github.com/apache/accumulo/blob/401237dba1198000ddbc7a2296edd0a683b3f5e4/server/manager/src/main/java/org/apache/accumulo/manager/compaction/queue/CompactionJobQueues.java#L157) to the following.\r\n\r\n```java\r\nwhile(pq.add(tabletMetadata, jobs) == 0 && pq.isClosed()){\r\n```\r\n\r\nThe above makes it more explicit in the code that it cares about the closed status of the queue.",
                        "startLine": null,
                        "line": 135,
                        "originalLine": 137,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Omitted an important word in following comment\n\nChange CompactionJobPriorityQueue return type from boolean to int, where it returns the number of things added.\n\nShould be\n\nChange CompactionJobPriorityQueue add() return type from boolean to int, where it returns the number of things added.",
                        "body": "Omitted an important word in following comment\r\n\r\n> Change CompactionJobPriorityQueue return type from boolean to int, where it returns the number of things added.\r\n\r\nShould be \r\n\r\n * Change CompactionJobPriorityQueue **add()** return type from boolean to int, where it returns the number of things added.",
                        "startLine": null,
                        "line": 135,
                        "originalLine": 137,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Implemented this in fa54445",
                        "body": "Implemented this in fa54445",
                        "startLine": null,
                        "line": 135,
                        "originalLine": 137,
                        "originalStartLine": null
                    }
                ],
                "line": 135,
                "startLine": 135,
                "originalLine": 137,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/compaction/queue/CompactionJobPriorityQueue.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner",
            "ddanielr"
        ],
        "tdv": 20.0,
        "description": {
            "bodyText": "Fixes #3466"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2055,
        "title": {
            "body": "support common input for operational input on Maintenance Management API ",
            "bodyHTML": "support common input for operational input on Maintenance Management API "
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5CQMEP",
                "body": "This PR is ready to be merged, approved by @desaikomal //Thanks!\r\nCommit message:\r\nsupport common input for operational input on Maintenance Management API",
                "bodyText": "This PR is ready to be merged, approved by @desaikomal //Thanks!\nCommit message:\nsupport common input for operational input on Maintenance Management API",
                "createdAt": "2022-04-27T22:25:38Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4glTzl",
                "comments": [
                    {
                        "bodyText": "It seems we always keep the value in singleOperationConfig?\nIf so, could we use commonOperationConfig.forEach(singleOperationConfig::putIfAbsent)? Let's also add a comment here to clarify the combining logic.",
                        "body": "It seems we always keep the value in `singleOperationConfig`? \r\nIf so, could we use `commonOperationConfig.forEach(singleOperationConfig::putIfAbsent)`? Let's also add a comment here to clarify the combining logic.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 380,
                        "originalStartLine": 379
                    },
                    {
                        "bodyText": "TFTR. Good point. Updated.",
                        "body": "TFTR. Good point. Updated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 380,
                        "originalStartLine": 379
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 380,
                "originalStartLine": 379,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementService.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "xyuanlu",
            "qqu0127",
            "desaikomal",
            "junkaixue"
        ],
        "tdv": 36.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#2034\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis change adds a common input field for operational check input on Maintenance Management API.\nTests\n\n The following tests are written for this issue:\n\ntestTakeInstanceOperationCheckFailureCommonInput\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1546,
        "title": {
            "body": "Replace try/finally with try-with-resources.",
            "bodyHTML": "Replace try/finally with try-with-resources."
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDU5NTMxNzc2Ng==",
                "body": "@jmark99 I went ahead and merged what you had, since it was fine. Any `var` improvements can be done as follow-on... if you even want to (it's not really necessary).",
                "bodyText": "@jmark99 I went ahead and merged what you had, since it was fine. Any var improvements can be done as follow-on... if you even want to (it's not really necessary).",
                "createdAt": "2020-03-05T16:23:39Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzQxODU1OnYy",
                "comments": [
                    {
                        "bodyText": "This is a good opportunity to use var:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                      try (Scanner scanner = new Scanner(new File(value), UTF_8)) {\n          \n          \n            \n                      try (var scanner = new Scanner(new File(value), UTF_8)) {",
                        "body": "This is a good opportunity to use `var`:\r\n\r\n```suggestion\r\n          try (var scanner = new Scanner(new File(value), UTF_8)) {\r\n```",
                        "startLine": null,
                        "line": 88,
                        "originalLine": 88,
                        "originalStartLine": null
                    }
                ],
                "line": 88,
                "startLine": 88,
                "originalLine": 88,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/cli/ClientOpts.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzQxOTczOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                try (\n          \n          \n            \n                    TTransport transport = createTransport(AddressUtil.parseAddress(tserver, false), context)) {\n          \n          \n            \n                try (var transport = createTransport(AddressUtil.parseAddress(tserver, false), context)) {",
                        "body": "```suggestion\r\n    try (var transport = createTransport(AddressUtil.parseAddress(tserver, false), context)) {\r\n```",
                        "startLine": 190,
                        "line": 191,
                        "originalLine": 191,
                        "originalStartLine": 190
                    }
                ],
                "line": 191,
                "startLine": 190,
                "originalLine": 191,
                "originalStartLine": 190,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/InstanceOperationsImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzQyMzEyOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                try (BCFile.Reader bcfr = new BCFile.Reader(fsin, fs.getFileStatus(path).getLen(), conf,\n          \n          \n            \n                try (var bcfr = new BCFile.Reader(fsin, fs.getFileStatus(path).getLen(), conf,",
                        "body": "```suggestion\r\n    try (var bcfr = new BCFile.Reader(fsin, fs.getFileStatus(path).getLen(), conf,\r\n```",
                        "startLine": null,
                        "line": 42,
                        "originalLine": 42,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ctubbsii thanks for the info. I'm not that familiar with the use of var at the moment so I will read up on it a bit and then see if I can apply it where appropriate. You can take another look once I push another update.",
                        "body": "@ctubbsii thanks for the info. I'm not that familiar with the use of var at the moment so I will read up on it a bit and then see if I can apply it where appropriate. You can take another look once I push another update.",
                        "startLine": null,
                        "line": 42,
                        "originalLine": 42,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That's fine. We can merge this without those suggestions. They aren't necessary.",
                        "body": "That's fine. We can merge this without those suggestions. They aren't necessary.",
                        "startLine": null,
                        "line": 42,
                        "originalLine": 42,
                        "originalStartLine": null
                    }
                ],
                "line": 42,
                "startLine": 42,
                "originalLine": 42,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/bcfile/PrintInfo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jmark99",
            "ctubbsii"
        ],
        "tdv": -117.0,
        "description": {
            "bodyText": "Implement the try-with-resources construct available in Java 7+ where applicable."
        }
    },
    {
        "repo": "struts",
        "pr_number": 657,
        "title": {
            "body": "WW-5279 Improve readability of XmlConfigurationProvider class",
            "bodyHTML": "WW-5279 Improve readability of XmlConfigurationProvider class"
        },
        "comments": [],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs4pm7Z2",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    XmlConfigurationProvider xmlConfigurationProvider = (XmlConfigurationProvider) o;\n          \n          \n            \n                    final XmlConfigurationProvider xmlConfigurationProvider = (XmlConfigurationProvider) o;\n          \n      \n    \n    \n  \n\nthis could remain final",
                        "body": "```suggestion\r\n        final XmlConfigurationProvider xmlConfigurationProvider = (XmlConfigurationProvider) o;\r\n```\r\n\r\nthis could remain final",
                        "startLine": null,
                        "line": 180,
                        "originalLine": 180,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I find it clutters the code and goes against present common practice - but I can revert these changes if that is the preferred code style.",
                        "body": "I find it clutters the code and goes against [present common practice](https://stackoverflow.com/questions/154314/when-should-one-use-final-for-method-parameters-and-local-variables) - but I can revert these changes if that is the preferred code style.",
                        "startLine": null,
                        "line": 180,
                        "originalLine": 180,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "https://stackoverflow.com/questions/154314/when-should-one-use-final-for-method-parameters-and-local-variables/154510#154510 LGTM, but for this existing line \"If I'm in someone else's code, I'm not going to pull them out but if I'm writing new code I won't put them in.\" would fit.\nWith your explanation, both styles would be ok for me. Maybe @lukaszlenart has some recommendation according to the Struts coding style?",
                        "body": "https://stackoverflow.com/questions/154314/when-should-one-use-final-for-method-parameters-and-local-variables/154510#154510 LGTM, but for this existing line \"If I'm in someone else's code, I'm not going to pull them out but if I'm writing new code I won't put them in.\" would fit.\r\n\r\nWith your explanation, both styles would be ok for me. Maybe @lukaszlenart has some recommendation according to the Struts coding style?",
                        "startLine": null,
                        "line": 180,
                        "originalLine": 180,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'm fine with dropping final in this context, I like using finals for fields and function arguments, where it makes sense :)",
                        "body": "I'm fine with dropping `final` in this context, I like using `final`s for fields and function arguments, where it makes sense :)",
                        "startLine": null,
                        "line": 180,
                        "originalLine": 180,
                        "originalStartLine": null
                    }
                ],
                "line": 180,
                "startLine": 180,
                "originalLine": 180,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/config/providers/XmlConfigurationProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4pm8qu",
                "comments": [
                    {
                        "bodyText": "Maybe we can remove the unused param name from verifyAction L:490\nSonar says: Parameter 'name' is never used",
                        "body": "Maybe we can remove the unused param `name` from verifyAction L:490\r\n\r\nSonar says: Parameter 'name' is never used",
                        "startLine": null,
                        "line": 455,
                        "originalLine": 455,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "There's multiple methods in this class with unused params - I've kept them to maintain compatibility with potential subclasses. Perhaps something to revisit when releasing the next major version.",
                        "body": "There's multiple methods in this class with unused params - I've kept them to maintain compatibility with potential subclasses. Perhaps something to revisit when releasing the next major version.",
                        "startLine": null,
                        "line": 455,
                        "originalLine": 455,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@sepe81 I'm right now creating a task to mark a given code @Deprecated and then another task (targeting major/minor release) to remove the code. I found such approach more useful and more informative for the users :)",
                        "body": "@sepe81 I'm right now creating a task to mark a given code `@Deprecated` and then another task (targeting major/minor release) to remove the code. I found such approach more useful and more informative for the users :)",
                        "startLine": null,
                        "line": 455,
                        "originalLine": 455,
                        "originalStartLine": null
                    }
                ],
                "line": 455,
                "startLine": 455,
                "originalLine": 455,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/config/providers/XmlConfigurationProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kusalk",
            "sepe81",
            "lukaszlenart"
        ],
        "tdv": -247.0,
        "description": {
            "bodyText": "WW-5279"
        }
    },
    {
        "repo": "httpcomponents-client",
        "pr_number": 235,
        "title": {
            "body": "HTTPCLIENT-2097: Fix PoolingAsyncClientConnectionManager boxed primitive reference equality",
            "bodyHTML": "HTTPCLIENT-2097: Fix PoolingAsyncClientConnectionManager boxed primitive reference equality"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDc2NDg1OnYy",
                "comments": [
                    {
                        "bodyText": "Can this actually lead to an NPE?",
                        "body": "Can this actually lead to an NPE?",
                        "startLine": null,
                        "line": 255,
                        "originalLine": 255,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I had initially written it this way to retain identical semantics:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                                                    if (!result) {\n          \n          \n            \n                                                    if (result != null && !result) {\n          \n      \n    \n    \n  \n\nBut it's unclear what null would mean if it's possible, and further analysis indicated that nothing passed null values.",
                        "body": "I had initially written it this way to retain identical semantics:\r\n\r\n```suggestion\r\n                                        if (result != null && !result) {\r\n```\r\n\r\nBut it's unclear what null would mean if it's possible, and further analysis indicated that nothing passed null values.",
                        "startLine": null,
                        "line": 255,
                        "originalLine": 255,
                        "originalStartLine": null
                    }
                ],
                "line": 255,
                "startLine": 255,
                "originalLine": 255,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "httpclient5/src/main/java/org/apache/hc/client5/http/impl/nio/PoolingAsyncClientConnectionManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "carterkozak",
            "michael-o",
            "ok2c"
        ],
        "tdv": 5.0,
        "description": {
            "bodyText": "https://issues.apache.org/jira/browse/HTTPCLIENT-2097"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1774,
        "title": {
            "body": "Refactor Tablet state classes",
            "bodyHTML": "Refactor Tablet state classes"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyNjE3NTU5Ng==",
                "body": "> Aside from a few String-based concerns, my main concern with these changes is that \"location\" means too many different things. In some contexts, it means \"a specific tserver instance\", but in other contexts the same word \"location\" means \"host address and port\". It gets more complicated when we pass a location containing a location, or assign a location variable named loc to some tserver's location's location.\r\n> \r\n> In some places, it's very clear, we just mean \"host address and port (as a String)\". It might be nice to have that kind of clarity everywhere, instead of trying to figure out which \"location\" we mean every time we see it. This might just be a matter of choosing better variable and method names where these types are used, to accompany your effort to simplify the types/classes.\r\n\r\nI agree.  Your concerns with location terminology is prevalent everywhere across our code.  These changes were just a first pass, moving the master classes to core and combining the inner classes.  I can improve the methods in TServerInstance as well in this PR but I didn't want to make too many changes at once.",
                "bodyText": "Aside from a few String-based concerns, my main concern with these changes is that \"location\" means too many different things. In some contexts, it means \"a specific tserver instance\", but in other contexts the same word \"location\" means \"host address and port\". It gets more complicated when we pass a location containing a location, or assign a location variable named loc to some tserver's location's location.\nIn some places, it's very clear, we just mean \"host address and port (as a String)\". It might be nice to have that kind of clarity everywhere, instead of trying to figure out which \"location\" we mean every time we see it. This might just be a matter of choosing better variable and method names where these types are used, to accompany your effort to simplify the types/classes.\n\nI agree.  Your concerns with location terminology is prevalent everywhere across our code.  These changes were just a first pass, moving the master classes to core and combining the inner classes.  I can improve the methods in TServerInstance as well in this PR but I didn't want to make too many changes at once.",
                "createdAt": "2020-11-12T16:10:05Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyNjE5OTY1Mw==",
                "body": "I also realized that moving `TServerInstance` will most likely break serialization so we may have to do something in the upgrade code to prevent issues upgrading.  This class is weird though... there are `writeObject(out)` and `readObject(in)` methods which look similar to Thrift classes and the class starting with \"T\" make me think that maybe this was based on a thrift class at one point.  I had thought the \"T\" was for Tablet Server.  ",
                "bodyText": "I also realized that moving TServerInstance will most likely break serialization so we may have to do something in the upgrade code to prevent issues upgrading.  This class is weird though... there are writeObject(out) and readObject(in) methods which look similar to Thrift classes and the class starting with \"T\" make me think that maybe this was based on a thrift class at one point.  I had thought the \"T\" was for Tablet Server.",
                "createdAt": "2020-11-12T16:49:13Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyNjI4ODMyMA==",
                "body": "@ctubbsii I renamed most of the methods in 6893e01 so the changes in this PR will be OK to stand on their own.  I definitely want to do more with these classes and continue to improve their uses, similar to the work I did with TabletFile.",
                "bodyText": "@ctubbsii I renamed most of the methods in 6893e01 so the changes in this PR will be OK to stand on their own.  I definitely want to do more with these classes and continue to improve their uses, similar to the work I did with TabletFile.",
                "createdAt": "2020-11-12T19:24:32Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyNjQwMzM2MQ==",
                "body": "> there are `writeObject(out)` and `readObject(in)` methods \r\n\r\nSo I think these were added because of the `transient` field.  When I removed these, this caused spotbugs to fail. I will fix this.",
                "bodyText": "there are writeObject(out) and readObject(in) methods\n\nSo I think these were added because of the transient field.  When I removed these, this caused spotbugs to fail. I will fix this.",
                "createdAt": "2020-11-12T23:26:35Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyNjQxNjU2OQ==",
                "body": "@ctubbsii @keith-turner Do you think the class TServerInstance needs to be serializable?  We have a transient field declared and are overriding the java serilazation methods but I can't find where we are serializing the object. https://github.com/apache/accumulo/blob/bfe173ec140f07086b0ff8940fc08d640b9539a7/server/base/src/main/java/org/apache/accumulo/server/master/state/TServerInstance.java#L45-L46\r\nI am wondering if this was done because the old Guava object that HostAndPort was taken from at some point was not serializable.\r\nhttps://github.com/apache/accumulo/blob/bfe173ec140f07086b0ff8940fc08d640b9539a7/server/base/src/main/java/org/apache/accumulo/server/master/state/TServerInstance.java#L125-L133",
                "bodyText": "@ctubbsii @keith-turner Do you think the class TServerInstance needs to be serializable?  We have a transient field declared and are overriding the java serilazation methods but I can't find where we are serializing the object. \n  \n    \n      accumulo/server/base/src/main/java/org/apache/accumulo/server/master/state/TServerInstance.java\n    \n    \n        Lines 45 to 46\n      in\n      bfe173e\n    \n  \n  \n    \n\n        \n          \n           // HostAndPort is not Serializable \n        \n\n        \n          \n           private transient HostAndPort location; \n        \n    \n  \n\n\nI am wondering if this was done because the old Guava object that HostAndPort was taken from at some point was not serializable.\n\n  \n    \n      accumulo/server/base/src/main/java/org/apache/accumulo/server/master/state/TServerInstance.java\n    \n    \n        Lines 125 to 133\n      in\n      bfe173e\n    \n  \n  \n    \n\n        \n          \n           private void writeObject(ObjectOutputStream out) throws IOException { \n        \n\n        \n          \n             out.defaultWriteObject(); \n        \n\n        \n          \n             out.writeObject(location.toString()); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { \n        \n\n        \n          \n             in.defaultReadObject(); \n        \n\n        \n          \n             location = HostAndPort.fromString(in.readObject().toString()); \n        \n\n        \n          \n           }",
                "createdAt": "2020-11-13T00:01:26Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyODE1ODA0OQ==",
                "body": "> @ctubbsii @keith-turner Do you think the class TServerInstance needs to be serializable? We have a transient field declared and are overriding the java serilazation methods but I can't find where we are serializing the object.\r\n\r\nI found one place where it is serialized as part of a FaTE RepO: `ShutdownTServer` has a member field called `server` of type `TServerInstance`. \r\n\r\nHowever, I did notice that it the customizations we've done to serialize and deserialize the `HostAndPort` transient member is because of the comment that says that type isn't serializable. However, the type we're using (the one copied into our code base from Guava) actually *is* serializable. So, we can probably just remove those customization methods, bump the `serialVersionUid` to `2L` (unless you're relocating it, then it doesn't matter if it stays the same, since it's a new object anyway), and make the `HostAndPort location` field `final` and remove the `transient` keyword.\r\n\r\nChanging the serialization would affect previous FaTE operations, but the only one I could find was the `ShutdownTServer` one, and I don't think that would matter across upgrades anyway.",
                "bodyText": "@ctubbsii @keith-turner Do you think the class TServerInstance needs to be serializable? We have a transient field declared and are overriding the java serilazation methods but I can't find where we are serializing the object.\n\nI found one place where it is serialized as part of a FaTE RepO: ShutdownTServer has a member field called server of type TServerInstance.\nHowever, I did notice that it the customizations we've done to serialize and deserialize the HostAndPort transient member is because of the comment that says that type isn't serializable. However, the type we're using (the one copied into our code base from Guava) actually is serializable. So, we can probably just remove those customization methods, bump the serialVersionUid to 2L (unless you're relocating it, then it doesn't matter if it stays the same, since it's a new object anyway), and make the HostAndPort location field final and remove the transient keyword.\nChanging the serialization would affect previous FaTE operations, but the only one I could find was the ShutdownTServer one, and I don't think that would matter across upgrades anyway.",
                "createdAt": "2020-11-16T16:05:57Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyODE2NTE3NQ==",
                "body": "Actually, since `ShutdownTServer` looks like it's the only place where it is ever serialized, I'd probably prefer to drop `Serializable` altogether (still make the HostAndPort field final), and change `ShutdownTServer`'s serialization to use Strings instead. There's no reason we need to maintain serialization compatibility for `TServerLocation` when it's only ever serialized once, out of over 500 references in the code base.",
                "bodyText": "Actually, since ShutdownTServer looks like it's the only place where it is ever serialized, I'd probably prefer to drop Serializable altogether (still make the HostAndPort field final), and change ShutdownTServer's serialization to use Strings instead. There's no reason we need to maintain serialization compatibility for TServerLocation when it's only ever serialized once, out of over 500 references in the code base.",
                "createdAt": "2020-11-16T16:17:23Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyODM0NzM3OA==",
                "body": "> Actually, since `ShutdownTServer` looks like it's the only place where it is ever serialized, I'd probably prefer to drop `Serializable` altogether (still make the HostAndPort field final), and change `ShutdownTServer`'s serialization to use Strings instead. There's no reason we need to maintain serialization compatibility for `TServerLocation` when it's only ever serialized once, out of over 500 references in the code base.\r\n\r\nIn b735d2291bc59c416c I dropped the serialization of TServerInstance and made `ShutdownTServer` serialize HostAndPort and String instead.  I thought this was better since HostAndPort is actually serializable but is not using custom code.  Using the HostAndPort in `ShutdownTServer` made it easier to reconstruct `TServerInstance` in the FATE Operation. ",
                "bodyText": "Actually, since ShutdownTServer looks like it's the only place where it is ever serialized, I'd probably prefer to drop Serializable altogether (still make the HostAndPort field final), and change ShutdownTServer's serialization to use Strings instead. There's no reason we need to maintain serialization compatibility for TServerLocation when it's only ever serialized once, out of over 500 references in the code base.\n\nIn b735d22 I dropped the serialization of TServerInstance and made ShutdownTServer serialize HostAndPort and String instead.  I thought this was better since HostAndPort is actually serializable but is not using custom code.  Using the HostAndPort in ShutdownTServer made it easier to reconstruct TServerInstance in the FATE Operation.",
                "createdAt": "2020-11-16T21:44:42Z",
                "author": "milleruntime"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyODY5MTc1NA==",
                "body": "> @ctubbsii @keith-turner Do you think the class TServerInstance needs to be serializable?\r\n\r\nI would guess some FATE ops use it.  Seems like @ctubbsii  found one.  Hopefully that is the only one and it can be removed.",
                "bodyText": "@ctubbsii @keith-turner Do you think the class TServerInstance needs to be serializable?\n\nI would guess some FATE ops use it.  Seems like @ctubbsii  found one.  Hopefully that is the only one and it can be removed.",
                "createdAt": "2020-11-17T05:16:50Z",
                "author": "keith-turner"
            }
        ],
        "total_comments_count": 18,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjU5MTc5OnYy",
                "comments": [
                    {
                        "bodyText": "This seems like a regression. In general, unless you're printing something, it's better to use a more specific type than a String type, and a more specific method name than toString(), since toString() should not be relied upon to not change over time.",
                        "body": "This seems like a regression. In general, unless you're printing something, it's better to use a more specific type than a String type, and a more specific method name than `toString()`, since `toString()` should not be relied upon to not change over time.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1304,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "They should be returning the same thing, but I don't think either method name is appropriate.  Looking at the impl, they both ultimately return hostPort() + \"[\" + session + \"]\".\nMaybe something very explicit like getHostPortSession() would be better.  Then it will be clear what parts of the code we need to change if we drop/change the session.",
                        "body": "They should be returning the same thing, but I don't think either method name is appropriate.  Looking at the impl, they both ultimately return `hostPort() + \"[\" + session + \"]\"`.  \r\n\r\nMaybe something very explicit like `getHostPortSession()` would be better.  Then it will be clear what parts of the code we need to change if we drop/change the session.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1304,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Maybe something very explicit like getHostPortSession() would be better. Then it will be clear what parts of the code we need to change if we drop/change the session.\n\nüëç",
                        "body": "> Maybe something very explicit like `getHostPortSession()` would be better. Then it will be clear what parts of the code we need to change if we drop/change the session.\r\n\r\n:+1: ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1304,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1304,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjYwNjkwOnYy",
                "comments": [
                    {
                        "bodyText": "getLocation().getLocation() seems funny here. Too many types known as 'location'.",
                        "body": "`getLocation().getLocation()` seems funny here. Too many types known as 'location'.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 148,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes.  This is holdover from the temp interface in Ample.  I thought I had dropped this but I got side tracked.  I will drop this interface in the next commit.",
                        "body": "Yes.  This is holdover from the temp interface in Ample.  I thought I had dropped this but I got side tracked.  I will drop this interface in the next commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 148,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 148,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletMetadataTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTU0NDEwOnYy",
                "comments": [
                    {
                        "bodyText": "The constructor can still use this type, since that won't affect serialization. The fields can be derived from the constructor parameter, rather than passed in as separate parameters.",
                        "body": "The constructor can still use this type, since that won't affect serialization. The fields can be derived from the constructor parameter, rather than passed in as separate parameters.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 282,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Oh yeah, good idea.",
                        "body": "Oh yeah, good idea.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 282,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 282,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/MasterClientServiceHandler.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzcxNzA1OnYy",
                "comments": [
                    {
                        "bodyText": "Nice cleanup here.",
                        "body": "Nice cleanup here.",
                        "startLine": 82,
                        "line": 88,
                        "originalLine": 88,
                        "originalStartLine": 82
                    }
                ],
                "line": 88,
                "startLine": 82,
                "originalLine": 88,
                "originalStartLine": 82,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/master/balancer/GroupBalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "milleruntime",
            "ctubbsii",
            "keith-turner"
        ],
        "tdv": 13.0,
        "description": {
            "bodyText": "Move TabletState, TabletLocationState, TServerInstance and\nSuspendingTServer from master to core.metadata package to allow\npackages outside of master to use them\nMake ample TabletMetadata.Location extend TServerInstance to\neliminate a temporary interface and some redundant object creation\nRewrite GroupBalancer getLocationProvider() method to eliminate\nLocation inner class\nModify GroupBalancerTest to override new method"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1970,
        "title": {
            "body": "Deprecate the shell script command",
            "bodyHTML": "Deprecate the shell script command"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc5ODg0MzAyMg==",
                "body": "@harjitdotsingh Thank you for your contribution. I left a comment and suggestion in my code review. I also took the liberty of changing the title and description in this PR, so it stands on its own, and describes what changes are included in this PR. When this is ready to be merged, we will edit the commit message to ensure it is presented similarly to how I've changed it.",
                "bodyText": "@harjitdotsingh Thank you for your contribution. I left a comment and suggestion in my code review. I also took the liberty of changing the title and description in this PR, so it stands on its own, and describes what changes are included in this PR. When this is ready to be merged, we will edit the commit message to ensure it is presented similarly to how I've changed it.",
                "createdAt": "2021-03-14T06:30:31Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc5ODkxMTEyNQ==",
                "body": "Thanks for all the comments. I will try to fix them tonight. IMHO all these strings should be part of a property file so that we can change them easily rather than embedding them in code. Also is there an IRC/Gitter channel?",
                "bodyText": "Thanks for all the comments. I will try to fix them tonight. IMHO all these strings should be part of a property file so that we can change them easily rather than embedding them in code. Also is there an IRC/Gitter channel?",
                "createdAt": "2021-03-14T13:48:42Z",
                "author": "harjitdotsingh"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc5OTA0ODk0MA==",
                "body": "> IMHO all these strings should be part of a property file so that we can change them easily rather than embedding them in code.\r\n\r\nThese ones are part of code, so that way the documentation and code are adjacent, and each command is modular and stands on its own. If we were to change that it would be a big undertaking, and its own separate task. I'm not sure it's worth it, though.\r\n\r\n> Also is there an IRC/Gitter channel?\r\n\r\nWe used to have an IRC channel, but it didn't get used much. The main mode of communication, like all Apache projects is our developer mailing list, but we also now have a Slack channel. See [our contact page](https://accumulo.apache.org/contact-us/) for details.",
                "bodyText": "IMHO all these strings should be part of a property file so that we can change them easily rather than embedding them in code.\n\nThese ones are part of code, so that way the documentation and code are adjacent, and each command is modular and stands on its own. If we were to change that it would be a big undertaking, and its own separate task. I'm not sure it's worth it, though.\n\nAlso is there an IRC/Gitter channel?\n\nWe used to have an IRC channel, but it didn't get used much. The main mode of communication, like all Apache projects is our developer mailing list, but we also now have a Slack channel. See our contact page for details.",
                "createdAt": "2021-03-15T02:32:34Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc1MDE0MDM0OnYy",
                "comments": [
                    {
                        "bodyText": "If I remember correctly, these command descriptions are used by the Shell to generate it's built-in help documentation. Therefore, the description style should flow well in that context. Have you tried running the bin/accumulo shell to test this description in the help context?",
                        "body": "If I remember correctly, these command descriptions are used by the Shell to generate it's built-in `help` documentation. Therefore, the description style should flow well in that context. Have you tried running the `bin/accumulo shell` to test this description in the help context?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 209,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I have reverted the comment to as before, We have deprecated the class and eventually they will be removed when we move to Jshell, I didn't see any value adding it to the description.",
                        "body": "I have reverted the comment to as before, We have deprecated the class and eventually they will be removed when we move to Jshell, I didn't see any value adding it to the description. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 209,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 209,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/commands/ScriptCommand.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc1MDE0MjM1OnYy",
                "comments": [
                    {
                        "bodyText": "This wording, and the wording of the above javadoc, is a big ambiguous/uncertain. That probably reflects the original ticket's uncertainty. However, if the original ticket has been thoroughly investigated and is ready for a code change, then we should have some certainty in the final wording. I recommend:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                Shell.log.warn(\n          \n          \n            \n                    \"Deprecated -- much of the use case for having this script command is likely able to be replaced by Java 11's JShell feature\");\n          \n          \n            \n                Shell.log.warn(\"The script command is deprecated; use jshell for scripting instead\");",
                        "body": "This wording, and the wording of the above javadoc, is a big ambiguous/uncertain. That probably reflects the original ticket's uncertainty. However, if the original ticket has been thoroughly investigated and is ready for a code change, then we should have some certainty in the final wording. I recommend:\r\n\r\n```suggestion\r\n    Shell.log.warn(\"The script command is deprecated; use jshell for scripting instead\");\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 79,
                        "originalStartLine": 77
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 79,
                "originalStartLine": 77,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/commands/ScriptCommand.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "harjitdotsingh",
            "ctubbsii"
        ],
        "tdv": 10.0,
        "description": {
            "bodyText": "Mark the shell's ScriptCommand as deprecated and log a warning when used.\nThis fixes #1949"
        }
    },
    {
        "repo": "struts",
        "pr_number": 659,
        "title": {
            "body": "WW-5284 Refactor ActionValidatorManager implementations",
            "bodyHTML": "WW-5284 Refactor ActionValidatorManager implementations"
        },
        "comments": [],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs4qK2g1",
                "comments": [
                    {
                        "bodyText": "Given that both AnnotationActionValidatorManager and DefaultActionValidatorManager use the same caching logic I presume both should be synchronised on this method. Previously AnnotationActionValidatorManager was not. Regardless, I don't think it will hurt to add it here for the purpose of simplifying the code.",
                        "body": "Given that both `AnnotationActionValidatorManager` and `DefaultActionValidatorManager` use the same caching logic I presume both should be synchronised on this method. Previously `AnnotationActionValidatorManager` was not. Regardless, I don't think it will hurt to add it here for the purpose of simplifying the code. ",
                        "startLine": null,
                        "line": 140,
                        "originalLine": 140,
                        "originalStartLine": null
                    }
                ],
                "line": 140,
                "startLine": 140,
                "originalLine": 140,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4qK2oU",
                "comments": [
                    {
                        "bodyText": "Same logic, just reduced nesting",
                        "body": "Same logic, just reduced nesting",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 143,
                        "originalStartLine": null
                    }
                ],
                "line": 143,
                "startLine": 143,
                "originalLine": 143,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4qK20E",
                "comments": [
                    {
                        "bodyText": "Changed this to an instance method for consistency between the 2 implementations and ability to override",
                        "body": "Changed this to an instance method for consistency between the 2 implementations and ability to override",
                        "startLine": null,
                        "line": 90,
                        "originalLine": 90,
                        "originalStartLine": null
                    }
                ],
                "line": 90,
                "startLine": 90,
                "originalLine": 90,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManagerTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4qK3An",
                "comments": [
                    {
                        "bodyText": "Is this override necessary? I'm not completely clear on what it's achieving. Would be nice to delete it if it doesn't do anything.",
                        "body": "Is this override necessary? I'm not completely clear on what it's achieving. Would be nice to delete it if it doesn't do anything.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 76,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Looks like it does nothing right now, you can try to remove it.",
                        "body": "Looks like it does nothing right now, you can try to remove it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 76,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done :)",
                        "body": "Done :)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 76,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 76,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/validator/AnnotationActionValidatorManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4qK3Wk",
                "comments": [
                    {
                        "bodyText": "As far as I can tell this doesn't do anything. Probably a remnant from when we used to cache the Validators instead of the ValidatorConfigs.",
                        "body": "As far as I can tell this doesn't do anything. Probably a remnant from when we used to cache the Validators instead of the ValidatorConfigs.",
                        "startLine": null,
                        "line": 176,
                        "originalLine": 176,
                        "originalStartLine": null
                    }
                ],
                "line": 176,
                "startLine": 176,
                "originalLine": 176,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/validator/AbstractActionValidatorManager.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4qK334",
                "comments": [
                    {
                        "bodyText": "It's now much clearer how this class differs from the default one.",
                        "body": "It's now much clearer how this class differs from the default one.",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 40,
                        "originalStartLine": null
                    }
                ],
                "line": 37,
                "startLine": 37,
                "originalLine": 40,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/validator/AnnotationActionValidatorManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kusalk",
            "lukaszlenart"
        ],
        "tdv": -22.0,
        "description": {
            "bodyText": "WW-5284\nFollowing on from #656 I realised the implementation could be simplified further. I've merged AbstractActionValidationManager into DefaultActionValidationManager and made AnnotationActionValidationManager an extension of that. Other than that I've only made a handful of functional changes which I'll comment below."
        }
    },
    {
        "repo": "httpcomponents-client",
        "pr_number": 484,
        "title": {
            "body": "HTTPCLIENT-2277:  deprecation of obsolete config parameters and removal of oudated or meaningless tests",
            "bodyHTML": "HTTPCLIENT-2277:  deprecation of obsolete config parameters and removal of oudated or meaningless tests"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmQs4yrRgI",
                "comments": [
                    {
                        "bodyText": "@ok2c  Should the return value of the deprecated is303CachingEnabled() method be set to false to align with all the changes?",
                        "body": "@ok2c  Should the return value of the deprecated is303CachingEnabled() method be set to false to align with all the changes?",
                        "startLine": null,
                        "line": 239,
                        "originalLine": 239,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@arturobernalg The cache protocol layer will now be treating 303 responses as potentially cacheable by default. This is why I thought the deprecated method should also return true. Does that make sense?",
                        "body": "@arturobernalg The cache protocol layer will now be treating 303 responses as potentially cacheable by default. This is why I thought the deprecated method should also return `true`. Does that make sense?",
                        "startLine": null,
                        "line": 239,
                        "originalLine": 239,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ok2c  that its correct. my bad.",
                        "body": "@ok2c  that its correct. my bad. ",
                        "startLine": null,
                        "line": 239,
                        "originalLine": 239,
                        "originalStartLine": null
                    }
                ],
                "line": 239,
                "startLine": 239,
                "originalLine": 239,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "httpclient5-cache/src/main/java/org/apache/hc/client5/http/impl/cache/CacheConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ok2c",
            "arturobernalg"
        ],
        "tdv": -884.0,
        "description": {
            "bodyText": "@arturobernalg Please kindly have a look. No functional changes. Mostly deprecation and removal of outdated / unused code and some javadoc updates. Also removed verbatim RFC 2616 quotes from the cache test cases."
        }
    },
    {
        "repo": "struts",
        "pr_number": 741,
        "title": {
            "body": "WW-5341 Ensure exclusion list applies to objects from all ClassLoaders",
            "bodyHTML": "WW-5341 Ensure exclusion list applies to objects from all ClassLoaders"
        },
        "comments": [
            {
                "id": "IC_kwDOAPMNSs5lO99w",
                "body": "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=apache_struts&pullRequest=741)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=741&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=741&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=741&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=741&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=741&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=741&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=apache_struts&pullRequest=741&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=apache_struts&pullRequest=741&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=apache_struts&pullRequest=741&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=741&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=741&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=741&resolved=false&types=CODE_SMELL)\n\n[![85.7%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/60-16px.png '85.7%')](https://sonarcloud.io/component_measures?id=apache_struts&pullRequest=741&metric=new_coverage&view=list) [85.7% Coverage](https://sonarcloud.io/component_measures?id=apache_struts&pullRequest=741&metric=new_coverage&view=list)  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=apache_struts&pullRequest=741&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=apache_struts&pullRequest=741&metric=new_duplicated_lines_density&view=list)\n\n",
                "bodyText": "Kudos, SonarCloud Quality Gate passed!¬† ¬† \n  0 Bugs\n  0 Vulnerabilities\n  0 Security Hotspots\n  0 Code Smells\n 85.7% Coverage\n 0.0% Duplication",
                "createdAt": "2023-08-30T03:11:32Z",
                "author": "sonarcloud"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs4x4Fec",
                "comments": [
                    {
                        "bodyText": "Not sure what this comment meant but don't think my refactor has broken anything",
                        "body": "Not sure what this comment meant but don't think my refactor has broken anything",
                        "startLine": null,
                        "line": 89,
                        "originalLine": 89,
                        "originalStartLine": null
                    }
                ],
                "line": 89,
                "startLine": 89,
                "originalLine": 89,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kusalk",
            "lukaszlenart"
        ],
        "tdv": -10.0,
        "description": {
            "bodyText": "WW-5341\nIn applications where there are multiple classloaders, it may be possible for SecurityMemberAccess to obtain a false negative if the classloader used to load the target object was different to the one used to load the exclusion list.\nTo rectify this, we use String comparison of the class name instead. We still use the default classloader to validate the exclusion list on application start. A future enhancement might be to make the validating classloader configurable."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1875,
        "title": {
            "body": "Fix adding a task to a job after deleting old tasks",
            "bodyHTML": "Fix adding a task to a job after deleting old tasks"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc429Grz",
                "body": "This PR is ready to be merged.\r\n\r\nFinal commit message:\r\nFix adding a task to a job after deleting old tasks\r\n\r\nIn this commit, the issue of dynamically adding a task to a job\r\nin which some of its tasks have been deleted before is being\r\naddressed.\r\n",
                "bodyText": "This PR is ready to be merged.\nFinal commit message:\nFix adding a task to a job after deleting old tasks\nIn this commit, the issue of dynamically adding a task to a job\nin which some of its tasks have been deleted before is being\naddressed.",
                "createdAt": "2021-09-17T18:11:48Z",
                "author": "alirezazamani"
            }
        ],
        "total_comments_count": 11,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4a_W8u",
                "comments": [
                    {
                        "bodyText": "Is this function exactly the same as the previous one? Is there a way we can combine them and not repeat?",
                        "body": "Is this function exactly the same as the previous one? Is there a way we can combine them and not repeat? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 91,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I thought about it actually. It was already duplicated. I think we keep a generic one for backward compatibility.",
                        "body": "I thought about it actually. It was already duplicated. I think we keep a generic one for backward compatibility.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 91,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 91,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/ThreadCountBasedTaskAssignmentCalculator.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4a_XVN",
                "comments": [
                    {
                        "bodyText": "Is it better to instead start with \"the largest partitionID in jobCtx\", and simply +1 every iteration? The fill-the-gaps approach seems unnecessarily complicated, if I'm not missing anything.",
                        "body": "Is it better to instead start with \"the largest partitionID in jobCtx\", and simply +1 every iteration? The fill-the-gaps approach seems unnecessarily complicated, if I'm not missing anything. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "So the issue here is:\nLet's assume we have these tasks [0,1,2,3,4]\nNow the user deletes task 3 and we will have [0,1,2,4]\nNow if the new task is being added, the size is 4 and the new pId will be 4 instead of 3. Hence the task would be be on context as we have a collision.\nThat is why we need to find the missing tasks.",
                        "body": "So the issue here is:\r\nLet's assume we have these tasks [0,1,2,3,4]\r\nNow the user deletes task 3 and we will have [0,1,2,4]\r\nNow if the new task is being added, the size is 4 and the new pId will be 4 instead of 3. Hence the task would be be on context as we have a collision.\r\nThat is why we need to find the missing tasks.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I have concerns for you are using missing partitions. Let's say user removed 3 as you mentioned, the job is not fully cancelled and still in running stage. If they add another task and you reuse missing partition 3 as the job id. Will that maps to existing non-cancelled task and make the system in a wired state?",
                        "body": "I have concerns for you are using missing partitions. Let's say user removed 3 as you mentioned, the job is not fully cancelled and still in running stage. If they add another task and you reuse missing partition 3 as the job id. Will that maps to existing non-cancelled task and make the system in a wired state?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That would not be the case. The design of the delete is to remove the task from context after it has been dropped completely and the current state is gone. It means after the cancellation we will remove context. In this case, it is safe to add a new tass with ID=3.",
                        "body": "That would not be the case. The design of the delete is to remove the task from context after it has been dropped completely and the current state is gone. It means after the cancellation we will remove context. In this case, it is safe to add a new tass with ID=3.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 86,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/ThreadCountBasedTaskAssignmentCalculator.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4a_1H1",
                "comments": [
                    {
                        "bodyText": "The function is exactly same as what we have in GenericTaskTaskAssignmentCalculator. Can we have two function wrapped in TaskAssignmentCalculator. So these two calculator just call it?",
                        "body": "The function is exactly same as what we have in GenericTaskTaskAssignmentCalculator. Can we have two function wrapped in TaskAssignmentCalculator. So these two calculator just call it?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done.",
                        "body": "Done.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 69,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/ThreadCountBasedTaskAssignmentCalculator.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4bB5h9",
                "comments": [
                    {
                        "bodyText": "This might cause problems if we want to debug for what happened to a removed task from the log. Ideally, we should avoid any overlap even with the removed task Id. However, I also understand that even we pick up the current max Id, there is no guarantee the next number has not been used before.\nLet's keep the design.\nOne question, though, can we just use the task Id to replace task Partition Id completely? That will resolve all the problems, right?",
                        "body": "This might cause problems if we want to debug for what happened to a removed task from the log. Ideally, we should avoid any overlap even with the removed task Id. However, I also understand that even we pick up the current max Id, there is no guarantee the next number has not been used before.\r\nLet's keep the design.\r\n\r\nOne question, though, can we just use the task Id to replace task Partition Id completely? That will resolve all the problems, right?",
                        "startLine": null,
                        "line": 136,
                        "originalLine": 136,
                        "originalStartLine": null
                    }
                ],
                "line": 136,
                "startLine": 136,
                "originalLine": 136,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/TaskAssignmentCalculator.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "alirezazamani",
            "jiajunwang",
            "junkaixue",
            "NealSun96"
        ],
        "tdv": 9.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #1874\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nIn this PR, the issue of dynamically adding a task to a job which some of its tasks has been deleted before is being addressed.\nTests\n\n\n The following tests are written for this issue:\nTestAddDeleteTask.testDeleteMiddleTaskAndAdd\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\nHelix-core:\n\n\n[INFO] Tests run: 1284, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,522.236 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1284, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-core ---\n[INFO] Loading execution data file /home/anajari/my_repos/helix/helix-core/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Core' with 909 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:32 h\n[INFO] Finished at: 2021-09-16T08:47:28-07:00\n[INFO] ------------------------------------------------------------------------\n\nHelix-rest:\n[INFO] Tests run: 179, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 126.955 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 179, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-rest ---\n[INFO] Loading execution data file /home/anajari/my_repos/helix/helix-rest/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 79 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  02:14 min\n[INFO] Finished at: 2021-09-16T09:38:30-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4185,
        "title": {
            "body": "clean up AddressUtil.parseAddress usage",
            "bodyHTML": "clean up AddressUtil.parseAddress usage"
        },
        "comments": [],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM43wMZ7",
                "comments": [
                    {
                        "bodyText": "This changes behavior of this parse method to no longer replace + with : before calling HostAndPort.fromString(). That could be a problem, depending on where the address came from.\nFor example, let's say there's a WAL with a filename like /path/to/tserver+port/UUID. If we extract the tserver part, tserverPart=tserver+port, then call AddressUtil.parseAddress(tserverPart, defaultPort), then we will get a resulting address that looks like: tserver+port:defaultPort, which is incorrect. This is a hypothetical, but possible outcome of this change. I haven't scoured the code to see what might be impacted, but it seems likely that it might be an error somewhere, since the point of AddressUtil is to help us handle these kinds of things that HostAndPort wouldn't necessarily do automatically.",
                        "body": "This changes behavior of this parse method to no longer replace `+` with `:` before calling `HostAndPort.fromString()`. That could be a problem, depending on where the address came from.\r\n\r\nFor example, let's say there's a WAL with a filename like `/path/to/tserver+port/UUID`. If we extract the tserver part, `tserverPart=tserver+port`, then call `AddressUtil.parseAddress(tserverPart, defaultPort)`, then we will get a resulting address that looks like: `tserver+port:defaultPort`, which is incorrect. This is a hypothetical, but possible outcome of this change. I haven't scoured the code to see what might be impacted, but it seems likely that it might be an error somewhere, since the point of AddressUtil is to help us handle these kinds of things that HostAndPort wouldn't necessarily do automatically.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'll fix that",
                        "body": "I'll fix that",
                        "startLine": null,
                        "line": null,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 267c365",
                        "body": "Addressed in 267c365130",
                        "startLine": null,
                        "line": null,
                        "originalLine": 46,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 46,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/util/AddressUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "ctubbsii"
        ],
        "tdv": 14.0,
        "description": {
            "bodyText": "The utility AddressUtil,parseAddress() had a boolean parameter to allowed addresses to be created without a port. Other than another utility method that allows setting the default port the value was always false (required port)  This PR removes the boolean from the method signature.\nDiscovered this while trying to use HostAndPort in favor of strings where possible.  Submitting this a separate PR because it is stand-alone change that is easier to review."
        }
    },
    {
        "repo": "commons-lang",
        "pr_number": 1148,
        "title": {
            "body": "Address minor redundancies after code inspection",
            "bodyHTML": "Address minor redundancies after code inspection"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmKs5wWqW8",
                "body": "I think we should close this PR unless it gets updated. CC @elharo ",
                "bodyText": "I think we should close this PR unless it gets updated. CC @elharo",
                "createdAt": "2024-01-10T14:47:09Z",
                "author": "garydgregory"
            },
            {
                "id": "IC_kwDOAAMmKs5wXlqT",
                "body": "Hi @garydgregory / @elharo,\r\n\r\nMy apologies for being slow on this thread for a while. I keep my eyes open for any feedback from you on this particular cleanup task, as well as others like it to come. Before I rush to change the code on the above points, I need to get a little more clarity. I'll add my doubts and intentions later today.\r\n\r\nThank you",
                "bodyText": "Hi @garydgregory / @elharo,\nMy apologies for being slow on this thread for a while. I keep my eyes open for any feedback from you on this particular cleanup task, as well as others like it to come. Before I rush to change the code on the above points, I need to get a little more clarity. I'll add my doubts and intentions later today.\nThank you",
                "createdAt": "2024-01-10T16:54:02Z",
                "author": "ParanoidUser"
            },
            {
                "id": "IC_kwDOAAMmKs5xxxJD",
                "body": "Is there anything else we need to discuss/address in this PR?",
                "bodyText": "Is there anything else we need to discuss/address in this PR?",
                "createdAt": "2024-01-24T20:34:02Z",
                "author": "ParanoidUser"
            },
            {
                "id": "IC_kwDOAAMmKs5xx6yZ",
                "body": "I'm good with this but I'm not a committer so I can't approve the workflow run or merge the pR. @garydgregory ",
                "bodyText": "I'm good with this but I'm not a committer so I can't approve the workflow run or merge the pR. @garydgregory",
                "createdAt": "2024-01-24T21:04:14Z",
                "author": "elharo"
            },
            {
                "id": "IC_kwDOAAMmKs5xyE0s",
                "body": "Building...",
                "bodyText": "Building...",
                "createdAt": "2024-01-24T21:33:47Z",
                "author": "garydgregory"
            }
        ],
        "total_comments_count": 31,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmKs42qKw0",
                "comments": [
                    {
                        "bodyText": "This one should be declared in the for loop",
                        "body": "This one should be declared in the for loop",
                        "startLine": null,
                        "line": null,
                        "originalLine": 54,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 54,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs42qK0O",
                "comments": [
                    {
                        "bodyText": "Again, if you're doing this move the declaration into the fior loop; don't leave variables undeclared as it's bug prone",
                        "body": "Again, if you're doing this move the declaration into the fior loop; don't leave variables undeclared as it's bug prone",
                        "startLine": null,
                        "line": null,
                        "originalLine": 514,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 514,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs42qK6H",
                "comments": [
                    {
                        "bodyText": "This looks OK but I'm not sure what was intended here, but tests code can be weird about things like this. Any chance this was testing that the two initializations in sequence were potentially problematic? I do wish whoever wrote this had left a comment behind explaining their reasoning.",
                        "body": "This looks OK but I'm not sure what was intended here, but tests code can be weird about things like this. Any chance this was testing that the two initializations in sequence were potentially problematic? I do wish whoever wrote this had left a comment behind explaining their reasoning. ",
                        "startLine": null,
                        "line": 120,
                        "originalLine": 120,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Here is the initial commit (e6eba6e) for reference. It feels like the intent was to check generic derivatives passed to the method. Sequential initialization is not a problem, but having an extra assertion for 2-arg methods result might be a better way to test this.",
                        "body": "Here is the initial commit (https://github.com/apache/commons-lang/commit/e6eba6e9acbd646e9a28546b14ae1d663dc6751a) for reference. It feels like the intent was to check generic derivatives passed to the method. Sequential initialization is not a problem, but having an extra assertion for 2-arg methods result might be a better way to test this.",
                        "startLine": null,
                        "line": 120,
                        "originalLine": 120,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "For the assertion part, we could use TypeUtils to check the range type. Let me know if you have a better idea.",
                        "body": "For the assertion part, we could use [TypeUtils](https://github.com/apache/commons-lang/blob/master/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java) to check the range type. Let me know if you have a better idea.",
                        "startLine": null,
                        "line": 120,
                        "originalLine": 120,
                        "originalStartLine": null
                    }
                ],
                "line": 120,
                "startLine": 120,
                "originalLine": 120,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs42qLBY",
                "comments": [
                    {
                        "bodyText": "I don't think this method is needed at all. Whoever wrote it probably had a common misunderstanding about how JUNit works. Every test method gets a completely new object. There's no need to reset fields",
                        "body": "I don't think this method is needed at all. Whoever wrote it probably had a common misunderstanding about how JUNit works. Every test method gets a completely new object. There's no need to reset fields",
                        "startLine": null,
                        "line": null,
                        "originalLine": 125,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 125,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/function/MethodFixtures.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs42qLFa",
                "comments": [
                    {
                        "bodyText": "I don't understand at all what rhe original author was doing here. This is weird.",
                        "body": "I don't understand at all what rhe original author was doing here. This is weird.",
                        "startLine": null,
                        "line": 546,
                        "originalLine": 546,
                        "originalStartLine": null
                    }
                ],
                "line": 546,
                "startLine": 546,
                "originalLine": 546,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs42qLHx",
                "comments": [
                    {
                        "bodyText": "OK, I might see what's going on, in which case these assignments are exactly what's being tested. I'm not sure, but if so they should not be removed",
                        "body": "OK, I might see what's going on, in which case these assignments are exactly what's being tested. I'm not sure, but if so they should not be removed",
                        "startLine": null,
                        "line": 567,
                        "originalLine": 567,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Personally, I don't see how assigning a bunch of unused variables here and there could affect the generic types declared on the dummy method/fields in the test. But since removing these local variables doesn't cause any assertion failures, it feels like (A) they're redundant, and/or (B) we have a broken test that doesn't verify what was intended. Should we try to run it on different JVMs (Oracle/Eclise/etc.)?",
                        "body": "Personally, I don't see how assigning a bunch of unused variables here and there could affect the generic types declared on the dummy method/fields in the test. But since removing these local variables doesn't cause any assertion failures, it feels like (A) they're redundant, and/or (B) we have a broken test that doesn't verify what was intended. Should we try to run it on different JVMs (Oracle/Eclise/etc.)?",
                        "startLine": null,
                        "line": 567,
                        "originalLine": 567,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't really follow the original code here either. To some extent Chesterton's fence is in play. Since I don't understand why somebody built this fence (or code) I'm much more cautious than usual about removing it. :-)",
                        "body": "I don't really follow the original code here either. To some extent Chesterton's fence is in play. Since I don't understand why somebody built this fence (or code) I'm much more cautious than usual about removing it. :-)",
                        "startLine": null,
                        "line": 567,
                        "originalLine": 567,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This code was originally written very poorly. It's possible it never tested what i was meant to test, though I am curious why certain lines were commented out as if the test would break if they were uncommented.\nThe delegateBooleanAssertion method should have been inlined, and the entire method should have been broken up into many test methods with one assert per test.\nPossibly doing that now might help us understand it better. It might also help if we could figure out how changing the code here by removing one of the assignments causes the test to break. But maybe it doesn't?\nIt does seem true that all these assignments you've removed seem like they should have no effect.",
                        "body": "This code was originally written very poorly. It's possible it never tested what i was meant to test, though I am curious why certain lines were commented out as if the test would break if they were uncommented.\r\n\r\nThe delegateBooleanAssertion method should have been inlined, and the entire method should have been broken up into many test methods with one assert per test.\r\n\r\nPossibly doing that now might help us understand it better. It might also help if we could figure out how changing the code here by removing one of the assignments causes the test to break. But maybe it doesn't?\r\n\r\nIt does seem true that all these assignments you've removed seem like they should have no effect. \r\n\r\n",
                        "startLine": null,
                        "line": 567,
                        "originalLine": 567,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Aha! I see what these assignments do. They're pseudo-comments, indicating what the next line is testing. They're bad comments, since they're not actually comments and since they're more confusing than not, but they should be safe to remove.\nBut wow, is this method bad. The types array is equally confusing. There should be an individual named variable for each type being compared.\nIf you don't want to go that far, I suggest not deleting these assignments but instead making them comments and maybe expand the comment to something like\n// test the generic type of list 1 is assignable to the generic type of list 2",
                        "body": "Aha! I see what these assignments do. They're pseudo-comments, indicating what the next line is testing. They're bad comments, since they're not actually comments and since they're more confusing than not, but they should be safe to remove. \r\n\r\nBut wow, is this method bad. The types array is equally confusing. There should be an individual named variable for each type being compared.\r\n\r\nIf you don't want to go that far, I suggest not deleting these assignments but instead making them comments and maybe expand the comment to something like \r\n\r\n// test the generic type of list 1 is assignable to the generic type of list 2\r\n",
                        "startLine": null,
                        "line": 567,
                        "originalLine": 567,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Wow! Thanks for taking the time to crack this puzzle. Using variable assignments as pseudo-comments is a profoundly original way to confuse people üôÇ\nHere are a few things I did to make this test a little easier to digest:\n\nBroke it down into 6 test groups. Let me know if you think we should go with smaller groups;\nInlined delegateBooleanAssertion method;\nRemoved the unused private testIsAssignable method;",
                        "body": "Wow! Thanks for taking the time to crack this puzzle. Using variable assignments as pseudo-comments is a profoundly original way to confuse people üôÇ\r\n\r\nHere are a few things I did to make this test a little easier to digest:\r\n- Broke it down into 6 test groups. Let me know if you think we should go with smaller groups;\r\n- Inlined `delegateBooleanAssertion` method;\r\n- Removed the unused private `testIsAssignable` method;",
                        "startLine": null,
                        "line": 567,
                        "originalLine": 567,
                        "originalStartLine": null
                    }
                ],
                "line": 567,
                "startLine": 567,
                "originalLine": 567,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs423b7c",
                "comments": [
                    {
                        "bodyText": "-1: In this code, a unit test, it is better (IMO) to have a consistent usage pattern that make it obvious we are always working with String objects from the get-go, as opposed to an expression that evaluates to a String. This is because we are testing an API that takes a String as its input.",
                        "body": "-1: In this code, a unit test, it is better (IMO) to have a consistent usage pattern that make it obvious we are always working with String objects from the get-go, as opposed to an expression that evaluates to a String. This is because we are testing an API that takes a String as its input.",
                        "startLine": null,
                        "line": 1436,
                        "originalLine": 1436,
                        "originalStartLine": null
                    }
                ],
                "line": 1436,
                "startLine": 1436,
                "originalLine": 1436,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs43NJe-",
                "comments": [
                    {
                        "bodyText": "Is Integer.valueOf needed here? I think an int might work",
                        "body": "Is Integer.valueOf needed here? I think an int might work",
                        "startLine": null,
                        "line": 136,
                        "originalLine": 136,
                        "originalStartLine": null
                    }
                ],
                "line": 136,
                "startLine": 136,
                "originalLine": 136,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/lang3/concurrent/ConstantInitializer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs43NJx0",
                "comments": [
                    {
                        "bodyText": "locale really shouldn't be null here. If it is, that should be a separate test method.",
                        "body": "locale really shouldn't be null here. If it is, that should be a separate test method.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 421,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The testLocales we're looping through contains the null locale scenario (last value added). So I split this test into the default locale scenario and the available locales group.",
                        "body": "The `testLocales` we're looping through contains the null locale scenario (last value added). So I split this test into the *default locale* scenario and the *available locales* group.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 421,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 421,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs43TIsG",
                "comments": [
                    {
                        "bodyText": "It would be even more readable to pull each of these out into an appropriately named local variable and test the variables below.\ne.g.\nList list = types[0];\nList list_object = types[1]\nList<?> list_question_mark = types[2];\netc.\nUp to you.",
                        "body": "It would be even more readable to pull each of these out into an appropriately named local variable and test the variables below.\r\n\r\ne.g.\r\n\r\nList list = types[0];\r\nList<Object> list_object = types[1]\r\nList<?> list_question_mark = types[2];\r\n\r\netc.\r\n\r\nUp to you.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 569,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Except use camel case for variable names, no underscores.",
                        "body": "Except use camel case for variable names, no underscores.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 569,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I share your sympathy for having clearer type variables. It feels like the GenericTypeHolder class might be a better place to store generic types instead of using the dummyMethod field.",
                        "body": "I share your sympathy for having clearer type variables. It feels like the `GenericTypeHolder` class might be a better place to store generic types instead of using the `dummyMethod` field.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 569,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 569,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs43TUNt",
                "comments": [
                    {
                        "bodyText": "The boxing happens no matter what so it's not unnecessary, it's required, implicitly or explicitly. Using boxing and unboxing in a library like this one makes it obvious where to look for possible NPE and possibly unnecessary conversions. IOW, please don't change this code, it's more clear IMO. Also note that you can setup your IDE compiler (like Eclipse) to show you warnings where implicit boxing and unboxing takes place.",
                        "body": "The boxing happens no matter what so it's not unnecessary, it's required, implicitly or explicitly. Using boxing and unboxing in a library like this one makes it obvious where to look for possible NPE and possibly unnecessary conversions. IOW, please don't change this code, it's more clear IMO. Also note that you can setup your IDE compiler (like Eclipse) to show you warnings where implicit boxing and unboxing takes place.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 136,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think it was @elharo's suggestion (quote) to remove the explicit integer boxing since it will be automatically boxed either way, so I am not sure which side to take üôÇ .\nSince the System.identityHashCode(this) method returns a primitive int (which is not subject to NPE), I don't see how explicit boxing can help here. Also, by default, IntelliJ IDEA highlights this code with an \"unnecessary boxing\" warning, which can be annoying and motivate other developers to remove the code. If we decide to leave explicit boxing as is, I'd prefer a comment describing its purpose.",
                        "body": "I think it was @elharo's suggestion ([quote](https://github.com/apache/commons-lang/pull/1148/commits/1f17f592279d3d9b63ea2fd02be26b62f0656dab#r1449249499)) to remove the explicit integer boxing since it will be automatically boxed either way, so I am not sure which side to take üôÇ .\r\n\r\nSince the `System.identityHashCode(this)` method returns a primitive `int` (which is not subject to NPE), I don't see how explicit boxing can help here. Also, by default, IntelliJ IDEA highlights this code with an \"unnecessary boxing\" warning, which can be annoying and motivate other developers to remove the code. If we decide to leave explicit boxing as is, I'd prefer a comment describing its purpose.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 136,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "RE boxing we are only going to go in circles because you can also configure an IDE to generate warnings when implicit boxing sites are found (like in Eclipse). Adding comments everywhere this happens is unreasonable IMO.",
                        "body": "RE boxing we are only going to go in circles because you can also configure an IDE to generate warnings when implicit boxing sites are found (like in Eclipse). Adding comments everywhere this happens is unreasonable IMO.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 136,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Agreed. Do you think this rule works for implicit string concatenation as well? Also, should it be project scoped or apply mostly to the code in the main folder?\nString string = \"The answer to the universe \";\nint number = 42;\n\nreturn string + number; // implicit\nreturn string + String.valueOf(number); // explicit",
                        "body": "Agreed. Do you think this rule works for implicit string concatenation as well? Also, should it be project scoped or apply mostly to the code in the `main` folder?\r\n```\r\nString string = \"The answer to the universe \";\r\nint number = 42;\r\n\r\nreturn string + number; // implicit\r\nreturn string + String.valueOf(number); // explicit\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 136,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "IDEs can be configured various ways, but what is it out of the box? I can't say I've ever seen a warning for implicit boxing in a case like the one in this PR.\nAt the end of the day, implicit boxing is an implementation detail. I prefer the simpler and shorter implicit boxing to making the code longer and harder to read. Implicit boxing is in no way unclear in this method.\nThere are other improvements that could be make here like inlining FMT_TO_STRING so you don't have to scroll or expand when reading the code. E.g. right now on Github in this PR I can't see what FMT_TO_STRING actually is since Github hides those lines. I have to take extra steps to understand it.\nEven better would be to eliminate the format string completely and go back to simple, obvious string concatenation that puts the parts together in the order they're meant to appear instead of mixing all up them. :-)",
                        "body": "IDEs can be configured various ways, but what is it out of the box? I can't say I've ever seen a warning for implicit boxing in a case like the one in this PR. \r\n\r\nAt the end of the day, implicit boxing is an implementation detail. I prefer the simpler and shorter implicit boxing to making the code longer and harder to read. Implicit boxing is in no way unclear in this method.\r\n\r\nThere are other improvements that could be make here like inlining FMT_TO_STRING so you don't have to scroll or expand when reading the code. E.g. right now on Github in this PR I can't see what FMT_TO_STRING actually is since Github hides those lines. I have to take extra steps to understand it. \r\n\r\nEven better would be to eliminate the format string completely and go back to simple, obvious string concatenation that puts the parts together in the order they're meant to appear instead of mixing all up them. :-)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 136,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 136,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/lang3/concurrent/ConstantInitializer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmKs43ZpsM",
                "comments": [
                    {
                        "bodyText": "@garydgregory, it seems that the GClass class and field are never used in the tests. Do you think this is a unique case that needs to be covered, or can this class be safely removed?\n    public class GClass<T extends BClass<? extends T> & AInterface<AInterface<? super T>>> {\n        // empty\n    }\n    \n    ...\n    \n    public GClass gClass;",
                        "body": "@garydgregory, it seems that the `GClass` class and field are never used in the tests. Do you think this is a unique case that needs to be covered, or can this class be safely removed?\r\n\r\n```\r\n    public class GClass<T extends BClass<? extends T> & AInterface<AInterface<? super T>>> {\r\n        // empty\r\n    }\r\n    \r\n    ...\r\n    \r\n    public GClass gClass;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": null,
                        "originalStartLine": null
                    }
                ],
                "line": 1,
                "startLine": null,
                "originalLine": 1,
                "originalStartLine": null,
                "subjectType": "FILE",
                "path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ParanoidUser",
            "garydgregory",
            "elharo"
        ],
        "tdv": -335.0,
        "description": {
            "bodyText": "This time the focus is on unnecessary string concatenation and redundant local assignments."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2126,
        "title": {
            "body": "Unit test converting client props to BatchWriterConfig",
            "bodyHTML": "Unit test converting client props to BatchWriterConfig"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg1MjI5OTc0NQ==",
                "body": "This may be better handled in a separate PR but, it looks like we could add very similar tests for ConditionalWriterConfig.",
                "bodyText": "This may be better handled in a separate PR but, it looks like we could add very similar tests for ConditionalWriterConfig.",
                "createdAt": "2021-06-01T17:17:49Z",
                "author": "DomGarguilo"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg1MzAyMTMwMQ==",
                "body": "I created #2131 after looking into this.",
                "bodyText": "I created #2131 after looking into this.",
                "createdAt": "2021-06-02T13:19:51Z",
                "author": "DomGarguilo"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg1MzAyNTE1MQ==",
                "body": "Thanks @DomGarguilo ",
                "bodyText": "Thanks @DomGarguilo",
                "createdAt": "2021-06-02T13:24:50Z",
                "author": "jmark99"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4MTUxOTk4OnYy",
                "comments": [
                    {
                        "bodyText": "Synchronized should go with the instance method and not the static method.",
                        "body": "Synchronized should go with the instance method and not the static method.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 287,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Updated",
                        "body": "Updated",
                        "startLine": null,
                        "line": null,
                        "originalLine": 287,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 287,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/ClientContext.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4MjM4NDE1OnYy",
                "comments": [
                    {
                        "bodyText": "This shouldn't need to be public in order to be unit tested.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              public static BatchWriterConfig getBatchWriterConfig(Properties props) {\n          \n          \n            \n              static BatchWriterConfig getBatchWriterConfig(Properties props) {",
                        "body": "This shouldn't need to be public in order to be unit tested.\r\n\r\n```suggestion\r\n  static BatchWriterConfig getBatchWriterConfig(Properties props) {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 287,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 287,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/ClientContext.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4MjYzNzI2OnYy",
                "comments": [
                    {
                        "bodyText": "Seems like since we know what the prop was set to the we can just check for that.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                // If the value of BATCH_WRITE_LATENCY_MAX or BATCH_WRITER_TIMEOUT_MAX, is set to zero,\n          \n          \n            \n                // Long.MAX_VALUE is returned. Effectively, this will cause data to be held in memory\n          \n          \n            \n                // indefinitely for BATCH_WRITE_LATENCY_MAX and for no timeout, for BATCH_WRITER_TIMEOUT_MAX.\n          \n          \n            \n                // Due to this behavior, the test compares the return values differently. If a value of\n          \n          \n            \n                // 0 is used, compare the return value using TimeUnit.MILLISECONDS, otherwise the value\n          \n          \n            \n                // should be converted to seconds in order to match the value set in ClientProperty.\n          \n          \n            \n                long expectedLatency = ClientProperty.BATCH_WRITER_LATENCY_MAX.getTimeInMillis(props);\n          \n          \n            \n                if (expectedLatency == 0) {\n          \n          \n            \n                  expectedLatency = Long.MAX_VALUE;\n          \n          \n            \n                  assertEquals(expectedLatency, batchWriterConfig.getMaxLatency(TimeUnit.MILLISECONDS));\n          \n          \n            \n                } else {\n          \n          \n            \n                  assertEquals(expectedLatency, batchWriterConfig.getMaxLatency(TimeUnit.SECONDS));\n          \n          \n            \n                }\n          \n          \n            \n                assertEquals(Long.MAX_VALUE, batchWriterConfig.getMaxLatency(TimeUnit.MILLISECONDS));",
                        "body": "Seems like since we know what the prop was set to the we can just check for that.\r\n\r\n```suggestion\r\n    assertEquals(Long.MAX_VALUE, batchWriterConfig.getMaxLatency(TimeUnit.MILLISECONDS));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 172,
                        "originalStartLine": 160
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 172,
                "originalStartLine": 160,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ClientContextTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4MjY0MDAxOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                long expectedTimeout = ClientProperty.BATCH_WRITER_TIMEOUT_MAX.getTimeInMillis(props);\n          \n          \n            \n                if (expectedTimeout == 0) {\n          \n          \n            \n                  expectedTimeout = Long.MAX_VALUE;\n          \n          \n            \n                  assertEquals(expectedTimeout, batchWriterConfig.getTimeout(TimeUnit.MILLISECONDS));\n          \n          \n            \n                } else {\n          \n          \n            \n                  assertEquals(expectedTimeout, batchWriterConfig.getTimeout(TimeUnit.SECONDS));\n          \n          \n            \n                }\n          \n          \n            \n                assertEquals(15, batchWriterConfig.getTimeout(TimeUnit.SECONDS));",
                        "body": "```suggestion\r\n    assertEquals(15, batchWriterConfig.getTimeout(TimeUnit.SECONDS));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 180,
                        "originalStartLine": 174
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 180,
                "originalStartLine": 174,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ClientContextTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "jmark99",
            "DomGarguilo",
            "keith-turner",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Created two unit tests for the conversion of client properties to BatchWriterConfig. One using default values and another using modified values.\nRefactored getBatchWriterConfig as suggested in initial ticket.\nAdded code in getBatchWriterConfig to allow for updating BATCH_WRTIER_THREADS_MAX as it was missing in the method as it existed."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4272,
        "title": {
            "body": "Ensured that TabletMgmtStats are incremented in TabletGroupWatcher",
            "bodyHTML": "Ensured that TabletMgmtStats are incremented in TabletGroupWatcher"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM45CADh",
                "comments": [
                    {
                        "bodyText": "Could this be moved to right after the computation of state?",
                        "body": "Could this be moved to right after the computation of `state`?",
                        "startLine": null,
                        "line": 449,
                        "originalLine": 449,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You are saying to move to right after line 421? Are you saying we don't need to capture the possible state change on line 446?",
                        "body": "You are saying to move to right after line 421? Are you saying we don't need to capture the possible state change on line 446?",
                        "startLine": null,
                        "line": 449,
                        "originalLine": 449,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "nevermind, I missed that... do want to capture that.",
                        "body": "nevermind, I missed that... do want to capture that.",
                        "startLine": null,
                        "line": 449,
                        "originalLine": 449,
                        "originalStartLine": null
                    }
                ],
                "line": 449,
                "startLine": 449,
                "originalLine": 449,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Fixes #4233"
        }
    },
    {
        "repo": "struts",
        "pr_number": 531,
        "title": {
            "body": "[WW-5168] Support submit unchecked in Javatemplates and fixes logic for FTL template",
            "bodyHTML": "[WW-5168] Support submit unchecked in Javatemplates and fixes logic for FTL template"
        },
        "comments": [
            {
                "id": "IC_kwDOAPMNSs49ogsJ",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/46490812/badge)](https://coveralls.io/builds/46490812)\n\nCoverage increased (+0.007%) to 50.569% when pulling **fe7959e5d879fdefb1eeea4794d1bbddb7b6b5ef on WW-5168-submit-unchecked** into **f0b24d17da4751666f12bc498c73c20d91e29558 on master**.\n",
                "bodyText": "Coverage increased (+0.007%) to 50.569% when pulling fe7959e on WW-5168-submit-unchecked into f0b24d1 on master.",
                "createdAt": "2022-02-09T17:45:02Z",
                "author": "coveralls"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs4erwO_",
                "comments": [
                    {
                        "bodyText": "Hi @lukaszlenart .  In a recent JIRA update, @gregh3269 has indicated that they think the check/flag is inverted here, based on their testing.\nSo, their recommendation is this line should be: if (submitUnchecked) { instead.",
                        "body": "Hi @lukaszlenart .  In a recent JIRA update, @gregh3269 has indicated that they think the check/flag is inverted here, based on their testing.  \r\nSo, their recommendation is this line should be: `if (submitUnchecked) {` instead.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Ah... right ü§¶  I've misleadingly read FTL template <#if parameters.submitUnchecked!false>",
                        "body": "Ah... right ü§¶  I've misleadingly read FTL template ```<#if parameters.submitUnchecked!false>```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "..this could be a breaking change (if you use javatemplates), will now need to add submitUnchecked=\"true\" to your tags if you need the unchecked value (npe in your code).",
                        "body": "..this could be a breaking change (if you use javatemplates), will now need to add submitUnchecked=\"true\" to your tags if you need the unchecked value (npe in your code).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "So submitUnchecked should be true by default?",
                        "body": "So `submitUnchecked` should be `true` by default?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "<#if parameters.submitUnchecked!false> was added in 2018 (without complaints), so I guess we should match templates and put an upgrade note.  Remember it won't send unchecked checkboxes (without the hidden field), so if you are checking for a false you could get a npe (I found this as I have been switching between ftl for testing).",
                        "body": "<#if parameters.submitUnchecked!false> was added in 2018 (without complaints), so I guess we should match templates and put an upgrade note.  Remember it won't send unchecked checkboxes (without the hidden field), so if you are checking for a false you could get a npe (I found this as I have been switching between ftl for testing).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I assume you will get NPE in your action when using Boolean type instead of boolean, right?",
                        "body": "I assume you will get NPE in your action when using `Boolean` type instead of `boolean`, right?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes, most likely with a Boolean (mainly use Boolean or String).  If you copy the variable straight into your bean without checking first, can also get a not null on the DB.",
                        "body": "Yes, most likely with a Boolean (mainly use Boolean or String).  If you copy the variable straight into your bean without checking first, can also get a not null on the DB.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 55,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/CheckboxHandler.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "lukaszlenart",
            "coveralls",
            "gregh3269",
            "JCgH4164838Gh792C124B5"
        ],
        "tdv": -6.0,
        "description": {
            "bodyText": "Fixes WW-5168\nCloses #530"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3664,
        "title": {
            "body": "change exit error code for ZooPropEditor",
            "bodyHTML": "change exit error code for ZooPropEditor"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4wroDr",
                "comments": [
                    {
                        "bodyText": "Although the non-negative exit code is better, I don't see much value in intercepting the failure, logging it, and then exiting the process, when letting the exception fall through would basically do the same thing by default.",
                        "body": "Although the non-negative exit code is better, I don't see much value in intercepting the failure, logging it, and then exiting the process, when letting the exception fall through would basically do the same thing by default.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 117,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 15478a8",
                        "body": "Addressed in 15478a88e5",
                        "startLine": null,
                        "line": null,
                        "originalLine": 117,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 117,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/util/ZooPropEditor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Changed exit status ( From comment in PR #3620 )"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4085,
        "title": {
            "body": "Use LogEntry concrete type in more places",
            "bodyHTML": "Use LogEntry concrete type in more places"
        },
        "comments": [],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM42fWAu",
                "comments": [
                    {
                        "bodyText": "Protip: this diff looks bigger than it is in GitHub. Best to ignore whitespace / indentation while comparing for a more friendly view.",
                        "body": "Protip: this diff looks bigger than it is in GitHub. Best to ignore whitespace / indentation while comparing for a more friendly view.",
                        "startLine": null,
                        "line": 159,
                        "originalLine": 159,
                        "originalStartLine": null
                    }
                ],
                "line": 159,
                "startLine": 159,
                "originalLine": 159,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/recovery/RecoveryManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM42kb4-",
                "comments": [
                    {
                        "bodyText": "Can you verify the contents of parts[0] here?  Not sure if that is possible when considering possible old code.",
                        "body": "Can you verify the contents of `parts[0]` here?  Not sure if that is possible when considering possible old code.",
                        "startLine": null,
                        "line": 117,
                        "originalLine": 117,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "As far as I can tell, the parts[0] could contain - (current code) or tserver:port (previous version). I can't be sure about prior to that, but I believe there was an upgrade step that removed relative paths from WAL entries that would have rewritten anything that would be older than these two most recent versions.\nMy concern about adding strict validation on the ignored part is that we could cause an unnecessary recovery failure. Accommodating variance in the part that doesn't matter by not validating its content avoids that.\nI just have a lot of uncertainty about the history of the various formats of these columns. I would prefer not to strictly validate the ignored part, and we just make sure we go through upgrade code for any future metadata schema changes.",
                        "body": "As far as I can tell, the `parts[0]` could contain `-` (current code) or `tserver:port` (previous version). I can't be sure about prior to that, but I believe there was an upgrade step that removed relative paths from WAL entries that would have rewritten anything that would be older than these two most recent versions.\r\n\r\nMy concern about adding strict validation on the ignored part is that we could cause an unnecessary recovery failure. Accommodating variance in the part that doesn't matter by not validating its content avoids that.\r\n\r\nI just have a lot of uncertainty about the history of the various formats of these columns. I would prefer not to strictly validate the ignored part, and we just make sure we go through upgrade code for any future metadata schema changes.",
                        "startLine": null,
                        "line": 117,
                        "originalLine": 117,
                        "originalStartLine": null
                    }
                ],
                "line": 117,
                "startLine": 117,
                "originalLine": 117,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/tabletserver/log/LogEntry.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM42kcOr",
                "comments": [
                    {
                        "bodyText": "Nice that this code is no longer parsing here.",
                        "body": "Nice that this code is no longer parsing here.",
                        "startLine": null,
                        "line": 174,
                        "originalLine": 174,
                        "originalStartLine": null
                    }
                ],
                "line": 174,
                "startLine": 174,
                "originalLine": 174,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/recovery/RecoveryManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM42kcYG",
                "comments": [
                    {
                        "bodyText": "Do you know if this removed the need for  FileType.WAL?  Nice that this could use types instead of the enum.",
                        "body": "Do you know if this removed the need for  FileType.WAL?  Nice that this could use types instead of the enum.",
                        "startLine": null,
                        "line": 166,
                        "originalLine": 166,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It didn't. There just happened to already be an overloaded version of this method that was for logs, so I called that to reduce the boilerplate. FileType.WAL is still used inside the overloaded method. The only other thing inside the overloaded method is some extra trace logging, which I didn't mind picking up if I could reduce some boilerplate.",
                        "body": "It didn't. There just happened to already be an overloaded version of this method that was for logs, so I called that to reduce the boilerplate. FileType.WAL is still used inside the overloaded method. The only other thing inside the overloaded method is some extra trace logging, which I didn't mind picking up if I could reduce some boilerplate.",
                        "startLine": null,
                        "line": 166,
                        "originalLine": 166,
                        "originalStartLine": null
                    }
                ],
                "line": 166,
                "startLine": 166,
                "originalLine": 166,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/recovery/RecoveryManager.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM42kcgA",
                "comments": [
                    {
                        "bodyText": "Nice to remove this and use centralized code.",
                        "body": "Nice to remove this and use centralized code.",
                        "startLine": null,
                        "line": 259,
                        "originalLine": 259,
                        "originalStartLine": null
                    }
                ],
                "line": 259,
                "startLine": 259,
                "originalLine": 259,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectWriteAheadLogs.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "keith-turner",
            "EdColeman"
        ],
        "tdv": -12.0,
        "description": {
            "bodyText": "Track the actual column qualifier read from the metadata table, so when it is deleted, it can delete the actual entry, rather than try to delete the existing entry with the new format (requires no longer strictly requiring that log entries start with a -/). This fixes #4061 for the main branch for 3.1; a similar issue may still exist for 2.1, but will require a different fix.\nRemove use of Collection<Collection<String>> and use Collection<LogEntry> where possible, since the former was for a previous WAL storage format that we do not support, and the latter preserves the strongly-typed LogEntry in more places"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2178,
        "title": {
            "body": "Catch NoNodeException in CompactRange",
            "bodyHTML": "Catch NoNodeException in CompactRange"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NDA0ODk0OnYy",
                "comments": [
                    {
                        "bodyText": "I'm not sure how it's possible for this to run after a table is deleted, unless the lock reservations are relying on ZooCache to check table existence and it's somehow out-of-date. See a related comment about compaction IDs in #2175 (comment)\nIn any case, elsewhere in that same class, we throw new AcceptableThriftTableOperationException, in response to NoNodeException. Should we do that here as well? I'm not sure who is even catching and handling that exception type. But, it's probably worth tracking down to see if they should be made consistent, or at least adding a comment what's different here that warrants a different reaction to the same exception.",
                        "body": "I'm not sure how it's possible for this to run after a table is deleted, unless the lock reservations are relying on ZooCache to check table existence and it's somehow out-of-date. See a related comment about compaction IDs in https://github.com/apache/accumulo/pull/2175#discussion_r657292064\r\n\r\nIn any case, elsewhere in that same class, we `throw new AcceptableThriftTableOperationException`, in response to `NoNodeException`. Should we do that here as well? I'm not sure who is even catching and handling that exception type. But, it's probably worth tracking down to see if they should be made consistent, or at least adding a comment what's different here that warrants a different reaction to the same exception.",
                        "startLine": 170,
                        "line": 172,
                        "originalLine": 172,
                        "originalStartLine": 170
                    },
                    {
                        "bodyText": "I think it is just a timing thing. If you look at the stacktrace in #1919 you can see it was waiting for the table read lock. It is odd that CompactRange doesn't need a write lock but DeleteTable does.",
                        "body": "I think it is just a timing thing. If you look at the stacktrace in #1919 you can see it was waiting for the table read lock. It is odd that `CompactRange` doesn't need a write lock but DeleteTable does.",
                        "startLine": 170,
                        "line": 172,
                        "originalLine": 172,
                        "originalStartLine": 170
                    },
                    {
                        "bodyText": "In any case, elsewhere in that same class, we throw new AcceptableThriftTableOperationException, in response to NoNodeException. Should we do that here as well?\n\nI don't think that is necessary. The undo() will only be called when the operation failed, which usually is when an Exception occurs. Throwing another exception on a failure in the undo() seems excessive. I think this is where it prints the original Exception which set the REPO to FAILED_IN_PROGRESS. \n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/fate/Fate.java\n    \n    \n        Lines 162 to 174\n      in\n      16a3cec\n    \n  \n  \n    \n\n        \n          \n           private void transitionToFailed(long tid, Exception e) { \n        \n\n        \n          \n             String tidStr = FateTxId.formatTid(tid); \n        \n\n        \n          \n             final String msg = \"Failed to execute Repo, \" + tidStr; \n        \n\n        \n          \n             // Certain FATE ops that throw exceptions don't need to be propagated up to the Monitor \n        \n\n        \n          \n             // as a warning. They're a normal, handled failure condition. \n        \n\n        \n          \n             if (e instanceof AcceptableException) { \n        \n\n        \n          \n               log.debug(msg, e.getCause()); \n        \n\n        \n          \n             } else { \n        \n\n        \n          \n               log.warn(msg, e); \n        \n\n        \n          \n             } \n        \n\n        \n          \n             store.setProperty(tid, EXCEPTION_PROP, e); \n        \n\n        \n          \n             store.setStatus(tid, TStatus.FAILED_IN_PROGRESS); \n        \n\n        \n          \n             log.info(\"Updated status for Repo with {} to FAILED_IN_PROGRESS\", tidStr); \n        \n    \n  \n\n\nI assume in this case the exception was acceptable so wasn't printed.",
                        "body": "> In any case, elsewhere in that same class, we `throw new AcceptableThriftTableOperationException`, in response to `NoNodeException`. Should we do that here as well? \r\n\r\nI don't think that is necessary. The `undo()` will only be called when the operation failed, which usually is when an Exception occurs. Throwing another exception on a failure in the `undo()` seems excessive. I think this is where it prints the original Exception which set the REPO to `FAILED_IN_PROGRESS`. https://github.com/apache/accumulo/blob/16a3cec36981a694ecdfbefb839ecf9ddd70a535/core/src/main/java/org/apache/accumulo/fate/Fate.java#L162-L174\r\nI assume in this case the exception was acceptable so wasn't printed.",
                        "startLine": 170,
                        "line": 172,
                        "originalLine": 172,
                        "originalStartLine": 170
                    },
                    {
                        "bodyText": "I checked where we throw new AcceptableThriftTableOperationException, and it seems we mostly do it in isReady and call, but in CompactRange, we do it in the constructor. There are no other places where we do it anywhere else (except in helper methods that get called by one of these). There are no places where we throw it in undo, so I'm fine with the code as you have it.",
                        "body": "I checked where we `throw new AcceptableThriftTableOperationException`, and it seems we mostly do it in `isReady` and `call`, but in `CompactRange`, we do it in the constructor. There are no other places where we do it anywhere else (except in helper methods that get called by one of these). There are no places where we throw it in `undo`, so I'm fine with the code as you have it.",
                        "startLine": 170,
                        "line": 172,
                        "originalLine": 172,
                        "originalStartLine": 170
                    }
                ],
                "line": 172,
                "startLine": 170,
                "originalLine": 172,
                "originalStartLine": 170,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/tableOps/compact/CompactRange.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "milleruntime",
            "ctubbsii"
        ],
        "tdv": -20.0,
        "description": {
            "bodyText": "Fixes #1919\nIt is possible for a compaction to run after a table is deleted so\ncatch the exception and print to debug, avoiding the FATE warning"
        }
    },
    {
        "repo": "zookeeper",
        "pr_number": 1915,
        "title": {
            "body": "ZOOKEEPER-4607 : Fix decode problem when sub tnx type is error.",
            "bodyHTML": "ZOOKEEPER-4607 : Fix decode problem when sub tnx type is error."
        },
        "comments": [
            {
                "id": "IC_kwDOAAJ0585MJQcc",
                "body": "@maoling PTAL.",
                "bodyText": "@maoling PTAL.",
                "createdAt": "2022-10-13T11:57:10Z",
                "author": "horizonzy"
            },
            {
                "id": "IC_kwDOAAJ0585Vg01K",
                "body": "@eolivelli PTAL.",
                "bodyText": "@eolivelli PTAL.",
                "createdAt": "2023-02-17T13:43:04Z",
                "author": "horizonzy"
            }
        ],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAJ0584qqcuE",
                "comments": [
                    {
                        "bodyText": "Good catch\n\nGive this long expression a field, don't duplicate twice?\nThe Transaction is special/strange, When executed successfully, it still have something marshalling like this(setData:ÔøΩÔøΩÔøΩ/Txn/1677482572006ÔøΩÔøΩÔøΩv2-1677482572006ÔøΩÔøΩÔøΩ). Maybe removing non-printable non-ascii characters is a way to work(https://howtodoinjava.com/java/regex/java-clean-ascii-text-non-printable-chars/) (I'm not sure, You can ignore this)\nI did a comprehensive test for this tool for the following cases:\n\nLanguage (English, Chinese, Japanese, Arabic)\nSmall/large Transaction(suceessful or failed)\nCRUD for all kind node type (Normal, TTL, container)",
                        "body": "Good catch\r\n\r\n- Give this long expression a field, don't duplicate twice?   \r\n- The Transaction is special/strange, When executed successfully, it still have something marshalling like this(`setData:ÔøΩÔøΩÔøΩ/Txn/1677482572006ÔøΩÔøΩÔøΩv2-1677482572006ÔøΩÔøΩÔøΩ`). Maybe removing non-printable non-ascii characters is a way to work(https://howtodoinjava.com/java/regex/java-clean-ascii-text-non-printable-chars/) (I'm not sure, You can ignore this)\r\n-  I did a comprehensive test for this tool for the following cases: \r\n    - Language (English, Chinese, Japanese, Arabic)\r\n    - Small/large Transaction(suceessful or failed)\r\n    - CRUD for all kind node type (Normal, TTL, container)\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 348,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 348,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "horizonzy",
            "eolivelli",
            "maoling",
            "tisonkun"
        ],
        "tdv": -11.0,
        "description": {
            "bodyText": "If there is a -101 error in the multi txn, the error byte array is {-1, -1, -1, -101}.\nIn the TxnLogToolkit, it uses toString to decode, it will decode it to the unknown character.\nBefore:\nsession 0x1000017f0b701dc cxid 0x1 zxid 0x3208 multi error:ÔøΩÔøΩÔøΩÔøΩ;error:ÔøΩÔøΩÔøΩÔøΩ;error:ÔøΩÔøΩÔøΩÔøΩ\n\nAfter:\nsession 0x1000017f0b701dc cxid 0x1 zxid 0x3208 multi error:-101;error:-2;error:-2"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4104,
        "title": {
            "body": "Fix HTML headings in javadoc, change from h3 to h4",
            "bodyHTML": "Fix HTML headings in javadoc, change from h3 to h4"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM42nmM2",
                "comments": [
                    {
                        "bodyText": "I think it's better not to use headers in javadocs. Can just start a new paragraph and have the <ul> immediately follow. Javadoc is really strict about the use of headers because it uses them itself. I don't think we really need to use them most of the time.",
                        "body": "I think it's better not to use headers in javadocs. Can just start a new paragraph and have the `<ul>` immediately follow. Javadoc is really strict about the use of headers because it uses them itself. I don't think we really need to use them most of the time.",
                        "startLine": null,
                        "line": 560,
                        "originalLine": 560,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That's fair, but I was just trying to fix the build. I used the PR mechanism to test that all checks passed successfully. The commit to include the headings was done long ago, I think a recent change in the build caused it to fail. Update to JDK 17 maybe? If we want to remove all HTML headings from all javadoc, then it might be useful to create a separate ticket as I'm assuming we would want to add a check to prevent them from being reintroduced.",
                        "body": "That's fair, but I was just trying to fix the build. I used the PR mechanism to test that all checks passed successfully. The commit to include the headings was done long ago, I think a recent change in the build caused it to fail. Update to JDK 17 maybe? If we want to remove all HTML headings from all javadoc, then it might be useful to create a separate ticket as I'm assuming we would want to add a check to prevent them from being reintroduced.",
                        "startLine": null,
                        "line": 560,
                        "originalLine": 560,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't think we need to ban them. Your fix is fine. The build checks should be sufficient to catch the errors. I was just trying to extract a general principle from the situation. I think people can still use them if they need to.",
                        "body": "I don't think we need to ban them. Your fix is fine. The build checks should be sufficient to catch the errors. I was just trying to extract a general principle from the situation. I think people can still use them if they need to.",
                        "startLine": null,
                        "line": 560,
                        "originalLine": 560,
                        "originalStartLine": null
                    }
                ],
                "line": 560,
                "startLine": 560,
                "originalLine": 560,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/Ample.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "ctubbsii"
        ],
        "tdv": null,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2335,
        "title": {
            "body": "Deprecate replication classes, properties, etc.",
            "bodyHTML": "Deprecate replication classes, properties, etc."
        },
        "comments": [],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4cJIty",
                "comments": [
                    {
                        "bodyText": "I think we can add a since = \"2.1.0\" here. (new optional parameter in Java 9)\nThis could be done for any public API and property deprecations. I wouldn't bother doing this with internal deprecations.",
                        "body": "I think we can add a `since = \"2.1.0\"` here. (new optional parameter in Java 9)\r\nThis could be done for any public API and property deprecations. I wouldn't bother doing this with internal deprecations.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 326,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Fixed in ef1b169",
                        "body": "Fixed in ef1b169",
                        "startLine": null,
                        "line": null,
                        "originalLine": 326,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "There's a few more places that could benefit from this. The properties, in particular, but also any interfaces that users might implement that are configurable in the properties.",
                        "body": "There's a few more places that could benefit from this. The properties, in particular, but also any interfaces that users might implement that are configurable in the properties.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 326,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think I got them all.",
                        "body": "I think I got them all.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 326,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 326,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/AccumuloClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4cJJOg",
                "comments": [
                    {
                        "bodyText": "I think if you deprecate this test class, you don't need to suppress deprecations or deprecate individual methods.",
                        "body": "I think if you deprecate this test class, you don't need to suppress deprecations or deprecate individual methods.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 63,
                        "originalStartLine": 62
                    },
                    {
                        "bodyText": "Fixed in ef1b169",
                        "body": "Fixed in ef1b169",
                        "startLine": null,
                        "line": null,
                        "originalLine": 63,
                        "originalStartLine": 62
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 63,
                "originalStartLine": 62,
                "subjectType": "LINE",
                "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/replication/AccumuloReplicaSystemTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "dlmarion",
            "ctubbsii"
        ],
        "tdv": 1492.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1833,
        "title": {
            "body": "Fixes #1760 - `listcompactions` command error is not helpful",
            "bodyHTML": "Fixes #1760 - <code>listcompactions</code> command error is not helpful"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQ3MjcyOnYy",
                "comments": [
                    {
                        "bodyText": "Just a minor wording suggestion:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                checkState(hasPort(), \"The given address does not include a port\");\n          \n          \n            \n                checkState(hasPort(), \"the address does not include a port\");\n          \n      \n    \n    \n  \n\nThe reason for this is that the exception could also occur when the user has not \"given\" any address. For example, if it's our own internal code. In that case, the word \"given\" might be confusing.",
                        "body": "Just a minor wording suggestion:\r\n\r\n```suggestion\r\n    checkState(hasPort(), \"the address does not include a port\");\r\n```\r\n\r\nThe reason for this is that the exception could also occur when the user has not \"given\" any address. For example, if it's our own internal code. In that case, the word \"given\" might be confusing.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 108,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 108,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/util/HostAndPort.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODE0MDkwOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  log.debug(\"Exception thrown while attempting to list active compactions\", e);\n          \n          \n            \n                  log.debug(\"Failed to list active compactions for server {}\", tserver, e);",
                        "body": "```suggestion\r\n      log.debug(\"Failed to list active compactions for server {}\", tserver, e);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 93,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/commands/ActiveCompactionHelper.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "DomGarguilo",
            "ctubbsii",
            "Manno15"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Fixing issue #1760. Adding more helpful error messages for the listcompactions command when a tserver address is passed."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1846,
        "title": {
            "body": "Fix management mode history duplicate recording",
            "bodyHTML": "Fix management mode history duplicate recording"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc42RL1h",
                "body": "This PR is ready to be merged, approved by @junkaixue \r\n\r\nThe management mode history has duplicate entries. It does not impact the normal function, but it's good to get it fixed to avoid confusion. This commit fixes the issue by adding a check for the status in metadata store and the calculated status.",
                "bodyText": "This PR is ready to be merged, approved by @junkaixue\nThe management mode history has duplicate entries. It does not impact the normal function, but it's good to get it fixed to avoid confusion. This commit fixes the issue by adding a check for the status in metadata store and the calculated status.",
                "createdAt": "2021-09-01T16:59:48Z",
                "author": "huizhilu"
            }
        ],
        "total_comments_count": 11,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQyMTk0NjQwOnYy",
                "comments": [
                    {
                        "bodyText": "If it is a new state record (different type or status), but it is fully frozen, we don't record the history? I guess this is not what we want.",
                        "body": "If it is a new state record (different type or status), but it is fully frozen, we don't record the history? I guess this is not what we want.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 163,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "+1. I guess what we should do is:\nif the current status is equal the status passed in, we skip it. Otherwise, we move forward to update it.",
                        "body": "+1. I guess what we should do is:\r\n\r\nif the current status is equal the status passed in, we skip it. Otherwise, we move forward to update it. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 163,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@huizhilu pinged me and explained. This logic is to prevent misleading records if a certain participant gets any message after FROZEN. In such a case, without this block, we will record additional cluster freeze records.\nI agree that we don't need a history record in this case. So the logic is good.\nCould you please add an example the the comment so others won't be confused like me in the future? Thanks.",
                        "body": "@huizhilu pinged me and explained. This logic is to prevent misleading records if a certain participant gets any message after FROZEN. In such a case, without this block, we will record additional cluster freeze records.\r\n\r\nI agree that we don't need a history record in this case. So the logic is good.\r\n\r\nCould you please add an example the the comment so others won't be confused like me in the future? Thanks.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 163,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think this is still some room to improve. If it is \"FROZEN\" and get any message, the status is still \"FROZEN\" and we should not record any history. This will not cause duplicated record.\nThis should be fixed at logic level.",
                        "body": "I think this is still some room to improve. If it is \"FROZEN\" and get any message, the status is still \"FROZEN\" and we should not record any history. This will not cause duplicated record.\r\n\r\nThis should be fixed at logic level.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 163,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Do you mean to pull the check logic outside to make the recording logic clean?\nSounds like a good plan to me.",
                        "body": "Do you mean to pull the check logic outside to make the recording logic clean?\r\nSounds like a good plan to me.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 163,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the review, Guys.\nThis part is not a logic issue. Controller does not know the status has recorded completed freeze mode, until it reads the status znode. And the read logic is needed for updating the status. So the dedup logic can be and should be put in the record function. I treat them as a whole part of updating the status, including dedup.\nTo make the logic a bit cleaner, I've pulled the check logic out to another private method shouldSkipRecording(), which makes it easier to read and maintain.\nLet me know if you have any questions or suggestions.",
                        "body": "Thanks for the review, Guys.\r\n\r\nThis part is not a logic issue. Controller does not know the status has recorded **completed freeze mode**, until it reads the status znode. And the read logic is needed for updating the status. So the dedup logic can be and should be put in the record function. I treat them as a whole part of updating the status, including dedup.\r\n\r\nTo make the logic a bit cleaner, I've pulled the check logic out to another private method `shouldSkipRecording()`, which makes it easier to read and maintain.\r\n\r\nLet me know if you have any questions or suggestions.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 163,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "We had a quick sync offline and agreed on: also recording status change to /cluster/status znode for FREEZE COMPETED to FREEZE IN_PROGRESS. Cluster should reflect the real changes.",
                        "body": "We had a quick sync offline and agreed on: also recording status change to `/cluster/status` znode for `FREEZE COMPETED` to `FREEZE IN_PROGRESS`. Cluster should reflect the real changes.\r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 163,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 163,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ManagementModeStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQyMjE4NDE2OnYy",
                "comments": [
                    {
                        "bodyText": "This is more like a patch for history. If there are duplicates, it suppose to be something in logic error.",
                        "body": "This is more like a patch for history. If there are duplicates, it suppose to be something in logic error.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 148,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "No. It's because of the timing. Ex: 2 live instance change events A and B. For A, the cache refresh already gets all the changes and calculates that the status is fully frozen. And event B, the result is the same.\nSo I would say, the duplicate status result is expected. But we don't want to write it again to reduce the writes.",
                        "body": "No. It's because of the timing. Ex: 2 live instance change events A and B. For A, the cache refresh already gets all the changes and calculates that the status is fully frozen. And event B, the result is the same.\r\nSo I would say, the duplicate status result is expected. But we don't want to write it again to reduce the writes.  ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 148,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If you already refreshed and get the status, then you already know what status is. So the history recording is idempotent.  There should not be any duplication. I would suggest to have an offline sync.",
                        "body": "If you already refreshed and get the status, then you already know what status is. So the history recording is idempotent.  There should not be any duplication. I would suggest to have an offline sync.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 148,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 148,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ManagementModeStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "huizhilu",
            "jiajunwang",
            "junkaixue"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixed #1845\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThe management mode history has duplicate entries. It does not impact the normal function, but it's good to get it fixed to avoid confusion.\nEnable cluster freeze mode in a staging cluster. Because of multiple events(live instance change events), the management mode pipeline could be run multiple times. Then the same mode history is recorded multiple times.\n \"MANAGEMENT_MODE_HISTORY\": [\n      \"{STATUS=COMPLETED, CONTROLLER=host1, MODE=CLUSTER_FREEZE, FROM_HOST=host2, TIME=2021-08-18T20:58:51.659Z}\",\n      \"{STATUS=COMPLETED, CONTROLLER=host1, MODE=CLUSTER_FREEZE, FROM_HOST=host2, TIME=2021-08-18T21:02:08.893Z}\",\n      \"{STATUS=COMPLETED, CONTROLLER=host1, MODE=CLUSTER_FREEZE, FROM_HOST=host2, TIME=2021-08-18T21:09:03.659Z}\",\n      \"{STATUS=COMPLETED, CONTROLLER=host1, MODE=CLUSTER_FREEZE, FROM_HOST=host2 TIME=2021-08-18T21:13:03.660Z}\n\nTests\n\n The following tests are written for this issue:\n\nTestManagementModeStage\nTestClusterFreezeMode\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n12:45:13,985 [INFO] Results:\n12:45:13,985 [INFO]\n12:45:13,985 [ERROR] Failures:\n12:45:13,985 [ERROR]   TestZeroReplicaAvoidance.testWagedRebalancer:182 expected:<true> but was:<false>\n12:45:13,985 [INFO]\n12:45:13,985 [ERROR] Tests run: 1282, Failures: 1, Errors: 0, Skipped: 0\n12:45:13,986 [INFO]\n12:45:13,991 [INFO] ------------------------------------------------------------------------\n12:45:13,992 [INFO] BUILD FAILURE\n12:45:13,992 [INFO] ------------------------------------------------------------------------\n12:45:13,993 [INFO] Total time:  01:21 h\n12:45:13,993 [INFO] Finished at: 2021-08-23T12:45:13-07:00\n12:45:13,993 [INFO] ------------------------------------------------------------------------\n\n\n13:50:28,577 [INFO] Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 31.701 s - in TestSuite\n13:50:28,962 [INFO]\n13:50:28,962 [INFO] Results:\n13:50:28,963 [INFO]\n13:50:28,963 [INFO] Tests run: 20, Failures: 0, Errors: 0, Skipped: 0\n13:50:28,963 [INFO]\n13:50:28,967 [INFO]\n13:50:28,968 [INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-core ---\n13:50:29,003 [INFO] Loading execution data file /home/hulu/Projects/helix/helix-core/target/jacoco.exec\n13:50:29,473 [INFO] Analyzed bundle 'Apache Helix :: Core' with 909 classes\n13:50:30,936 [INFO] ------------------------------------------------------------------------\n13:50:30,936 [INFO] BUILD SUCCESS\n13:50:30,937 [INFO] ------------------------------------------------------------------------\n13:50:30,938 [INFO] Total time:  37.736 s\n13:50:30,938 [INFO] Finished at: 2021-08-23T13:50:30-07:00\n13:50:30,939 [INFO] ------------------------------------------------------------------------\n\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "httpcomponents-client",
        "pr_number": 351,
        "title": {
            "body": "Async HttpClient builders to support custom IOSessionListener ",
            "bodyHTML": "Async HttpClient builders to support custom IOSessionListener "
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmQs4-Prv2",
                "body": "ÈÇÆ‰ª∂Â∑≤Êî∂Âà∞ÔºÅÊàë‰ºöÂ∞ΩÂø´ÈòÖËØªÔºÅË∞¢Ë∞¢ÔºÅ",
                "bodyText": "ÈÇÆ‰ª∂Â∑≤Êî∂Âà∞ÔºÅÊàë‰ºöÂ∞ΩÂø´ÈòÖËØªÔºÅË∞¢Ë∞¢ÔºÅ",
                "createdAt": "2022-02-18T10:34:18Z",
                "author": "SmallerCoder"
            },
            {
                "id": "IC_kwDOAAMmQs4-RitX",
                "body": "@cda007 Looks good to me. Please fix the check-style violations (trailing blanks) and I will merge your changes.",
                "bodyText": "@cda007 Looks good to me. Please fix the check-style violations (trailing blanks) and I will merge your changes.",
                "createdAt": "2022-02-18T16:23:37Z",
                "author": "ok2c"
            },
            {
                "id": "IC_kwDOAAMmQs4-R3yQ",
                "body": "@cda007 The build still fails. There are still trailing blanks left.",
                "bodyText": "@cda007 The build still fails. There are still trailing blanks left.",
                "createdAt": "2022-02-18T17:21:29Z",
                "author": "ok2c"
            },
            {
                "id": "IC_kwDOAAMmQs4-SCE3",
                "body": "Hi Oleg,\n\nSorry for this. As I told you I am not familiar with this process and with git. Is there any specific pre-commit hook that would avoid to commit code not respecting rules ?\n\nRegards,\nChristophe\n\n> On 18 Feb 2022, at 18:21, Oleg Kalnichevski ***@***.***> wrote:\n> \n> \n> @cda007 <https://github.com/cda007> The build still fails. There are still trailing blanks left.\n> \n> ‚Äî\n> Reply to this email directly, view it on GitHub <https://github.com/apache/httpcomponents-client/pull/351#issuecomment-1044872336>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AIQJ5BYPBGP6P73SUL3L4NDU3Z52JANCNFSM5OXPCTSA>.\n> Triage notifications on the go with GitHub Mobile for iOS <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>. \n> You are receiving this because you were mentioned.\n> \n\n",
                "bodyText": "Hi Oleg,\n\nSorry for this. As I told you I am not familiar with this process and with git. Is there any specific pre-commit hook that would avoid to commit code not respecting rules ?\n\nRegards,\nChristophe\n‚Ä¶\n On 18 Feb 2022, at 18:21, Oleg Kalnichevski ***@***.***> wrote:\n\n\n @cda007 <https://github.com/cda007> The build still fails. There are still trailing blanks left.\n\n ‚Äî\n Reply to this email directly, view it on GitHub <#351 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AIQJ5BYPBGP6P73SUL3L4NDU3Z52JANCNFSM5OXPCTSA>.\n Triage notifications on the go with GitHub Mobile for iOS <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n You are receiving this because you were mentioned.",
                "createdAt": "2022-02-18T17:50:38Z",
                "author": "cda007"
            },
            {
                "id": "IC_kwDOAAMmQs4-SJq2",
                "body": "@cda007 This has nothing to do with git. This is straight Maven. `mvn clean verify` has got to pass for you locally with your changes. Style rules like no trailing blanks are enforced by the Maven style-check plugin.",
                "bodyText": "@cda007 This has nothing to do with git. This is straight Maven. mvn clean verify has got to pass for you locally with your changes. Style rules like no trailing blanks are enforced by the Maven style-check plugin.",
                "createdAt": "2022-02-18T18:09:28Z",
                "author": "ok2c"
            },
            {
                "id": "IC_kwDOAAMmQs4-Y7GE",
                "body": "Fixed. I use now to maven verification tool, should not occur anymore",
                "bodyText": "Fixed. I use now to maven verification tool, should not occur anymore",
                "createdAt": "2022-02-21T10:29:05Z",
                "author": "cda007"
            }
        ],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmQs4e3Fyp",
                "comments": [
                    {
                        "bodyText": "@cda007 Could you please add @since 5.2 tag?",
                        "body": "@cda007 Could you please add `@since 5.2` tag?",
                        "startLine": null,
                        "line": 321,
                        "originalLine": 321,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "done",
                        "body": "done",
                        "startLine": null,
                        "line": 321,
                        "originalLine": 321,
                        "originalStartLine": null
                    }
                ],
                "line": 321,
                "startLine": null,
                "originalLine": 321,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "httpclient5/src/main/java/org/apache/hc/client5/http/impl/async/HttpAsyncClientBuilder.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmQs4e5CRW",
                "comments": [
                    {
                        "bodyText": "Redundant space",
                        "body": "Redundant space",
                        "startLine": null,
                        "line": null,
                        "originalLine": 42,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 42,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "httpclient5/src/main/java/org/apache/hc/client5/http/CircularRedirectException.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "cda007",
            "SmallerCoder",
            "ok2c",
            "michael-o"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Add the option to set an IOSessionListener on HttpAsyncClientBuilder"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2236,
        "title": {
            "body": "Add new property to configure rfile sorted recovery",
            "bodyHTML": "Add new property to configure rfile sorted recovery"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM41zjm2",
                "body": "Tested the most useful option, setting the compression on the recovery file in Uno. It worked well but I noticed that the sort recovery options are named differently. I think it would be good to name them all the same. I can do that as a follow on.\r\n`tserver.wal.sort.file.compress.type=snappy`\r\n<pre>\r\n09:35:49 {main} ~/workspace/uno/install/logs/accumulo$ hdfs dfs -ls -R /accumulo/recovery\r\ndrwx------   - mike supergroup          0 2021-08-20 09:35 /accumulo/recovery/5f821693-2a9e-4b1f-ab35-9b4542764ff0\r\n-rw-r--r--   3 mike supergroup          0 2021-08-20 09:35 /accumulo/recovery/5f821693-2a9e-4b1f-ab35-9b4542764ff0/finished\r\n-rw-r--r--   3 mike supergroup        334 2021-08-20 09:35 /accumulo/recovery/5f821693-2a9e-4b1f-ab35-9b4542764ff0/part-r-00000.rf\r\ndrwx------   - mike supergroup          0 2021-08-20 09:35 /accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed\r\n-rw-r--r--   3 mike supergroup          0 2021-08-20 09:35 /accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed/finished\r\n-rw-r--r--   3 mike supergroup      20182 2021-08-20 09:35 /accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed/part-r-00000.rf\r\n09:36:16 {main} ~/workspace/uno/install/logs/accumulo$ accumulo rfile-info /accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed/part-r-00000.rf\r\nReading file: hdfs://localhost:8020/accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed/part-r-00000.rf\r\nNo on disk encryption detected.\r\nRFile Version            : 8\r\nLocality group           : <DEFAULT>\r\n\tNum   blocks           : 1\r\n\tIndex level 0          : 56 bytes  1 blocks\r\n\tFirst key              : %00;%80;%00;%00;%00;%00;%00;%00;%00;%00;%00;%00;%00; OPEN:cdbf6848-11c4-4864-b149-da02fd4543ed [] 9223372036854775807 false\r\n\tLast key               : %03;%80;%00;%00;%0f;%00;%00;%00;%00;%00;%00;%00;%03; MANY_MUTATIONS: [] 9223372036854775807 false\r\n\tNum entries            : 54\r\n\tColumn families        : [MANY_MUTATIONS, COMPACTION_FINISH, DEFINE_TABLET, COMPACTION_START, OPEN, MUTATION]\r\n\r\nMeta block     : BCFile.index\r\n      Raw size             : 8 bytes\r\n      Compressed size      : 18 bytes\r\n      Compression type     : snappy\r\n\r\nMeta block     : RFile.index\r\n      Raw size             : 307 bytes\r\n      Compressed size      : 236 bytes\r\n      Compression type     : snappy\r\n</pre>",
                "bodyText": "Tested the most useful option, setting the compression on the recovery file in Uno. It worked well but I noticed that the sort recovery options are named differently. I think it would be good to name them all the same. I can do that as a follow on.\ntserver.wal.sort.file.compress.type=snappy\n09:35:49 {main} ~/workspace/uno/install/logs/accumulo$ hdfs dfs -ls -R /accumulo/recovery\ndrwx------   - mike supergroup          0 2021-08-20 09:35 /accumulo/recovery/5f821693-2a9e-4b1f-ab35-9b4542764ff0\n-rw-r--r--   3 mike supergroup          0 2021-08-20 09:35 /accumulo/recovery/5f821693-2a9e-4b1f-ab35-9b4542764ff0/finished\n-rw-r--r--   3 mike supergroup        334 2021-08-20 09:35 /accumulo/recovery/5f821693-2a9e-4b1f-ab35-9b4542764ff0/part-r-00000.rf\ndrwx------   - mike supergroup          0 2021-08-20 09:35 /accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed\n-rw-r--r--   3 mike supergroup          0 2021-08-20 09:35 /accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed/finished\n-rw-r--r--   3 mike supergroup      20182 2021-08-20 09:35 /accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed/part-r-00000.rf\n09:36:16 {main} ~/workspace/uno/install/logs/accumulo$ accumulo rfile-info /accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed/part-r-00000.rf\nReading file: hdfs://localhost:8020/accumulo/recovery/cdbf6848-11c4-4864-b149-da02fd4543ed/part-r-00000.rf\nNo on disk encryption detected.\nRFile Version            : 8\nLocality group           : \n\tNum   blocks           : 1\n\tIndex level 0          : 56 bytes  1 blocks\n\tFirst key              : %00;%80;%00;%00;%00;%00;%00;%00;%00;%00;%00;%00;%00; OPEN:cdbf6848-11c4-4864-b149-da02fd4543ed [] 9223372036854775807 false\n\tLast key               : %03;%80;%00;%00;%0f;%00;%00;%00;%00;%00;%00;%00;%03; MANY_MUTATIONS: [] 9223372036854775807 false\n\tNum entries            : 54\n\tColumn families        : [MANY_MUTATIONS, COMPACTION_FINISH, DEFINE_TABLET, COMPACTION_START, OPEN, MUTATION]\n\nMeta block     : BCFile.index\n      Raw size             : 8 bytes\n      Compressed size      : 18 bytes\n      Compression type     : snappy\n\nMeta block     : RFile.index\n      Raw size             : 307 bytes\n      Compressed size      : 236 bytes\n      Compression type     : snappy",
                "createdAt": "2021-08-20T13:51:45Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQwODQwODA0OnYy",
                "comments": [
                    {
                        "bodyText": "Do you know of 'table.file' props that can't be used here?",
                        "body": "Do you know of 'table.file' props that can't be used here? ",
                        "startLine": 679,
                        "line": 680,
                        "originalLine": 680,
                        "originalStartLine": 679
                    },
                    {
                        "bodyText": "Yeah but I think they will just get ignored. Properties like \"table.file.max\" or \"table.file.summary.maxSize\" that don't apply to these files.",
                        "body": "Yeah but I think they will just get ignored. Properties like \"table.file.max\" or \"table.file.summary.maxSize\" that don't apply to these files.",
                        "startLine": 679,
                        "line": 680,
                        "originalLine": 680,
                        "originalStartLine": 679
                    }
                ],
                "line": 680,
                "startLine": 679,
                "originalLine": 680,
                "originalStartLine": 679,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQwODc3ODkyOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                          createKeyValue(MUTATION, 3, 1, ignored), createKeyValue(MUTATION, 5, 1, m),};\n          \n          \n            \n                          createKeyValue(MUTATION, 3, 1, ignored), createKeyValue(MUTATION, 5, 1, m)};\n          \n      \n    \n    \n  \n\nNot sure if the extra comma was intentional",
                        "body": "```suggestion\r\n              createKeyValue(MUTATION, 3, 1, ignored), createKeyValue(MUTATION, 5, 1, m)};\r\n```\r\nNot sure if the extra comma was intentional",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1121,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Copy and paste error. Thanks!",
                        "body": "Copy and paste error. Thanks!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1121,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yea it looks like most if not all of the KeyValue[] have it as well for some reason üòï",
                        "body": "Yea it looks like most if not all of the `KeyValue[]` have it as well for some reason :confused:",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1121,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1121,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/log/SortedLogRecoveryTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "dlmarion",
            "Manno15",
            "DomGarguilo"
        ],
        "tdv": 9.0,
        "description": {
            "bodyText": "Closes #2187\nCreate new property prefix \"tserver.wal.sort.file.\" to configure the\nrfiles written during sorted recovery\nAdd method to LogSorter to convert the sort file properties to table\nfiles properties\nCreate new tests in SortedLogRecoveryTest\nMake method public in Compression to use in test\nAdd property to MultiTableRecoveryIT to allow testing in an IT"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3195,
        "title": {
            "body": "Use Collections.unmodifiableList for static ACL declarations",
            "bodyHTML": "Use Collections.unmodifiableList for static ACL declarations"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5VWtRg",
                "body": "Co-authored-by: @ctubbsii ",
                "bodyText": "Co-authored-by: @ctubbsii",
                "createdAt": "2023-02-15T20:52:10Z",
                "author": "EdColeman"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4qmZlS",
                "comments": [
                    {
                        "bodyText": "You know, we don't actually need the comments to be javadoc comments for tests. We're not generating javadocs for test code, so you're only going to see these comments looking at the source code. And, in that case, it's easier to omit the HTML and javadoc tags. Also, this method can be private, even if the original wasn't.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Copied from ZooKeeper 3.8.1,(ZooKeeper.validateACL())[] for stand-alone testing,\n          \n          \n            \n               *\n          \n          \n            \n               * @see <a\n          \n          \n            \n               *      href=\"https://github.com/apache/zookeeper/blob/2e9c3f3ceda90aeb9380acc87b253bf7661b7794/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java#L3075/>\n          \n          \n            \n               */\n          \n          \n            \n              boolean validateACL(List<ACL> acl) throws KeeperException.InvalidACLException {\n          \n          \n            \n               // Copied from ZooKeeper 3.8.1 for stand-alone testing here\n          \n          \n            \n               // https://github.com/apache/zookeeper/blob/2e9c3f3ceda90aeb9380acc87b253bf7661b7794/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java#L3075/\n          \n          \n            \n              private boolean validateACL(List<ACL> acl) throws KeeperException.InvalidACLException {\n          \n      \n    \n    \n  \n\nAlso, the HTML was malformed in yours anyway... you forgot the closing double quote around the URL.",
                        "body": "You know, we don't actually need the comments to be javadoc comments for tests. We're not generating javadocs for test code, so you're only going to see these comments looking at the source code. And, in that case, it's easier to omit the HTML and javadoc tags. Also, this method can be private, even if the original wasn't.\r\n\r\n```suggestion\r\n   // Copied from ZooKeeper 3.8.1 for stand-alone testing here\r\n   // https://github.com/apache/zookeeper/blob/2e9c3f3ceda90aeb9380acc87b253bf7661b7794/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java#L3075/\r\n  private boolean validateACL(List<ACL> acl) throws KeeperException.InvalidACLException {\r\n```\r\n\r\nAlso, the HTML was malformed in yours anyway... you forgot the closing double quote around the URL.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 71,
                        "originalStartLine": 65
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 71,
                "originalStartLine": 65,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/fate/zookeeper/ZooUtilTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4qmZ9g",
                "comments": [
                    {
                        "bodyText": "Here also, this doesn't need to be a javadoc comment, especially since the classes mentioned in the body of this comment don't even use links, so this is just a freeform comment. It's easier to avoid breaking javadoc rules/conventions/expectations if we don't bother making it a javadoc when we don't need to in the first place, and we don't need to here.",
                        "body": "Here also, this doesn't need to be a javadoc comment, especially since the classes mentioned in the body of this comment don't even use links, so this is just a freeform comment. It's easier to avoid breaking javadoc rules/conventions/expectations if we don't bother making it a javadoc when we don't need to in the first place, and we don't need to here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 44,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in c50465c",
                        "body": "Addressed in c50465c65df",
                        "startLine": null,
                        "line": null,
                        "originalLine": 44,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 44,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/fate/zookeeper/ZooUtilTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "dlmarion",
            "ctubbsii",
            "Manno15"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Uses Collections.unmodifiableList to limit the exposure of the PRIVATE and PUBLIC collections.\nAdds tests that replicate the current ZooKeeper check (in ZooKeeper, the method is private)\n\nSpotbugs warns (MS_MUTABLE_COLLECTION) for the the public, static definitions in ZooUtil for PRIVATE and PUBLIC ZooKeeper ACLs that expose a mutable collection (ArrayList).  This was discovered when refactoring ServiceLock from fate to another package in core.  Verified, that with this change, spotbugs does not flag the issue.\nUsing an immutable collection like List.of() or List.copyOf() result in an NPE from ZooKeeper.  ZooKeeper that performs a ACL check on operations like create,... The ZooKeeper check calls acl.contains((Object) null) which throws an NPE in Java (JDK-8265905)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2045,
        "title": {
            "body": "Move ignoreEmptyDir opt to ImportOptions interface",
            "bodyHTML": "Move ignoreEmptyDir opt to ImportOptions interface"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0NTQ4ODUyOnYy",
                "comments": [
                    {
                        "bodyText": "Should include @since 2.1.0 java doc tag since this will be new.",
                        "body": "Should include `@since 2.1.0` java doc tag since this will be new.",
                        "startLine": null,
                        "line": 724,
                        "originalLine": 722,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Tag was added.",
                        "body": "Tag was added.",
                        "startLine": null,
                        "line": 724,
                        "originalLine": 722,
                        "originalStartLine": null
                    }
                ],
                "line": 724,
                "startLine": 724,
                "originalLine": 722,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jmark99",
            "milleruntime"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Update the importdirectory ignoreEmptyDir option to use the bulk import fluent API. The ignoreEmptyDir option is moved into the ImportOptions interface and can be set during the call to the load method."
        }
    },
    {
        "repo": "opennlp",
        "pr_number": 461,
        "title": {
            "body": "OPENNLP-1416 Enhance JavaDoc in opennlp.tools.formats.ad package",
            "bodyHTML": "OPENNLP-1416 Enhance JavaDoc in opennlp.tools.formats.ad package"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACnPtM4oJiS3",
                "comments": [
                    {
                        "bodyText": "üëç",
                        "body": ":+1: ",
                        "startLine": null,
                        "line": 40,
                        "originalLine": 40,
                        "originalStartLine": null
                    }
                ],
                "line": 40,
                "startLine": 40,
                "originalLine": 40,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStreamFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACnPtM4oKTW6",
                "comments": [
                    {
                        "bodyText": "That looks like the while was a bug previously (emptying the whole underlying stream...) - good catch!",
                        "body": "That looks like the `while` was a bug previously (emptying the whole underlying stream...) - good catch!",
                        "startLine": null,
                        "line": 198,
                        "originalLine": 198,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The first element read is being directly returned. Therefore while made no sense here.",
                        "body": "The first element read is being directly returned. Therefore `while` made no sense here.",
                        "startLine": null,
                        "line": 198,
                        "originalLine": 198,
                        "originalStartLine": null
                    }
                ],
                "line": 198,
                "startLine": 198,
                "originalLine": 198,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACnPtM4oKTah",
                "comments": [
                    {
                        "bodyText": ":-)",
                        "body": ":-)",
                        "startLine": null,
                        "line": 81,
                        "originalLine": 81,
                        "originalStartLine": null
                    }
                ],
                "line": 81,
                "startLine": 81,
                "originalLine": 81,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADPOSSampleStream.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "mawiesne",
            "kinow",
            "jzonthemtn",
            "rzo1"
        ],
        "tdv": -25.0,
        "description": {
            "bodyText": "Change\n\nadds missing JavaDoc\nimproves existing documentation for clarity\nremoves superfluous text\nadds 'final' modifier where useful and applicable\nadds 'Override' annotation where useful and applicable\nsimplifies several constructors, removing duplicate code\nfixes non-JNC compliant naming of constants\nfixes several typos\n\nTasks\nThank you for contributing to Apache OpenNLP.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?\n Have you written or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible."
        }
    },
    {
        "repo": "struts",
        "pr_number": 666,
        "title": {
            "body": "WW-5290 Refactor ConfigurationManager",
            "bodyHTML": "WW-5290 Refactor ConfigurationManager"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs4q3dlA",
                "comments": [
                    {
                        "bodyText": "We no longer expect a 2nd reload in these tests as it was unnecessary.",
                        "body": "We no longer expect a 2nd reload in these tests as it was unnecessary.",
                        "startLine": null,
                        "line": 291,
                        "originalLine": 291,
                        "originalStartLine": null
                    }
                ],
                "line": 291,
                "startLine": 291,
                "originalLine": 291,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/struts2/dispatcher/DispatcherTest.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kusalk",
            "lukaszlenart"
        ],
        "tdv": -37.0,
        "description": {
            "bodyText": "WW-5290\nApart from improving the readability and maintainability of this class, this refactor fixes some logic issues and prevents improper use. It enforces thread safety and also improves performance, specifically on initialisation. We no longer do 2 reloads unnecessarily in certain scenarios.\nI've additionally ran these changes through the Confluence DC test suite and everything is passing. :)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4101,
        "title": {
            "body": "Fix 4100 - move header length check to test",
            "bodyHTML": "Fix 4100 - move header length check to test"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM42llEa",
                "comments": [
                    {
                        "bodyText": "The @link is a javadoc tag. It doesn't do anything in regular comments. This wasn't a valid javadoc in the first place, inside the method, so that change was fine, but it highlights that this javadoc tag can go away too.",
                        "body": "The `@link` is a javadoc tag. It doesn't do anything in regular comments. This wasn't a valid javadoc in the first place, inside the method, so that change was fine, but it highlights that this javadoc tag can go away too.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 432,
                        "originalStartLine": 430
                    },
                    {
                        "bodyText": "updated comment in c543b2e",
                        "body": "updated comment in c543b2e50f",
                        "startLine": null,
                        "line": null,
                        "originalLine": 432,
                        "originalStartLine": 430
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 432,
                "originalStartLine": 430,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/log/DfsLogger.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "EdColeman",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Move the assert check to a unit test and deletes redundant check\nsimple IDE suggested QA checks.\n\nFixes #4100"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2804,
        "title": {
            "body": "Modify CompactionCheck logic to run expensive checks less often",
            "bodyHTML": "Modify CompactionCheck logic to run expensive checks less often"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4jLE-n",
                "comments": [
                    {
                        "bodyText": "How was it determined this check was expensive?",
                        "body": "How was it determined this check was expensive?",
                        "startLine": null,
                        "line": 1113,
                        "originalLine": 1113,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "maybe expensive was the wrong term, the more expensive check in this case is more complex than comparing enums and longs. The more expensive check evaluates whether the service parameter is equal to the configured service, meaning, has the configuration changed. The path to getting there is more complex.",
                        "body": "maybe `expensive` was the wrong term, the more expensive check in this case is more complex than comparing enums and longs. The more expensive check evaluates whether the service parameter is equal to the configured service, meaning, has the configuration changed. The path to getting there is more complex.",
                        "startLine": null,
                        "line": 1113,
                        "originalLine": 1113,
                        "originalStartLine": null
                    }
                ],
                "line": 1113,
                "startLine": 1113,
                "originalLine": 1113,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/CompactableImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4jLGDX",
                "comments": [
                    {
                        "bodyText": "Was there a specific reason to adjust this time from 100 to 50?  The initial 100ms time was arbitrarily chosen, so not in any way opposed to changing it.  Just curious if you saw something that prompted this.",
                        "body": "Was there a specific reason to adjust this time from 100 to 50?  The initial 100ms time was arbitrarily chosen, so not in any way opposed to changing it.  Just curious if you saw something that prompted this. ",
                        "startLine": null,
                        "line": 1120,
                        "originalLine": 1120,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "No reason. I figured that since the less and more complex checks were separated, that they could run at different intervals. I figured it made sense to lower the less complex check interval so that compactions could be cancelled a little faster if needed. This too was arbitrary, I could have left it at 100",
                        "body": "No reason. I figured that since the less and more complex checks were separated, that they could run at different intervals. I figured it made sense to lower the less complex check interval so that compactions could be cancelled a little faster if needed. This too was arbitrary, I could have left it at 100",
                        "startLine": null,
                        "line": 1120,
                        "originalLine": 1120,
                        "originalStartLine": null
                    }
                ],
                "line": 1120,
                "startLine": 1120,
                "originalLine": 1120,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/CompactableImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 5.0,
        "description": {
            "bodyText": "This change splits the prior memoized check into two, one that\nis less expensive and is checked more often and one that is more\nexpensive, likely to change less often and is checked less often\nCloses #1610"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1579,
        "title": {
            "body": "Task Current State Migration: helix-rest, utils, tests changes",
            "bodyHTML": "Task Current State Migration: helix-rest, utils, tests changes"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0MjAzNjQ2NQ==",
                "body": "Please don't apply the webapp changes as we discussed offline.",
                "bodyText": "Please don't apply the webapp changes as we discussed offline.",
                "createdAt": "2020-12-09T20:41:33Z",
                "author": "jiajunwang"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0MzMzMzI1MA==",
                "body": "This PR is ready to be merged, approved by @alirezazamani \r\nFinal commit message:\r\n## Task Current State Migration: helix-rest, utils, tests changes ##\r\nFirst part of task current state migration. All changes made in this PR are on the controller side and are non-pipeline related. ",
                "bodyText": "This PR is ready to be merged, approved by @alirezazamani\nFinal commit message:\nTask Current State Migration: helix-rest, utils, tests changes\nFirst part of task current state migration. All changes made in this PR are on the controller side and are non-pipeline related.",
                "createdAt": "2020-12-11T17:45:26Z",
                "author": "NealSun96"
            }
        ],
        "total_comments_count": 14,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDM5ODAxOnYy",
                "comments": [
                    {
                        "bodyText": "This is fine, I guess you can just deprecate the older one.",
                        "body": "This is fine, I guess you can just deprecate the older one.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 70,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You mean deprecate getInstancePropertyNameListAsString? Technically it does different things from this new method, so is it better to keep it?",
                        "body": "You mean deprecate `getInstancePropertyNameListAsString`? Technically it does different things from this new method, so is it better to keep it? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 70,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 70,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/CurrentStatesResource.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDQwMTkwOnYy",
                "comments": [
                    {
                        "bodyText": "A new controller supports the older participants. So this should not be a required path, no?",
                        "body": "A new controller supports the older participants. So this should not be a required path, no?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 156,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You're right.",
                        "body": "You're right. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 156,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "+1",
                        "body": "+1",
                        "startLine": null,
                        "line": null,
                        "originalLine": 156,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 156,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDQwNzg2OnYy",
                "comments": [
                    {
                        "bodyText": "Can we change to use the multi remove method that is also supported by the accessor?",
                        "body": "Can we change to use the multi remove method that is also supported by the accessor?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 141,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sure, factoring out the remove to be done after filtering.",
                        "body": "Sure, factoring out the remove to be done after filtering. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 141,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 141,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/tools/commandtools/CurrentStateCleanUp.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDQxNDAyOnYy",
                "comments": [
                    {
                        "bodyText": "nit, could you also update the method comment?\n\"at least 1 resource\" -> \"at least 1 resource or task\", something like this.",
                        "body": "nit, could you also update the method comment?\r\n\r\n\"at least 1 resource\" -> \"at least 1 resource or task\", something like this.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 107,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 107,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDM5Mjc5OnYy",
                "comments": [
                    {
                        "bodyText": "This is not necessary to instance validation util. Because this management API is used for check real data resource. Our split could even better to filter out the TASK current state.",
                        "body": "This is not necessary to instance validation util. Because this management API is used for check real data resource. Our split could even better to filter out the TASK current state.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 190,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@dasahcc removed",
                        "body": "@dasahcc removed",
                        "startLine": null,
                        "line": null,
                        "originalLine": 190,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 190,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDM5Njg3OnYy",
                "comments": [
                    {
                        "bodyText": "Same here. We dont care about tasks for management API.",
                        "body": "Same here. We dont care about tasks for management API.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 123,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 123,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "NealSun96",
            "jiajunwang",
            "junkaixue",
            "alirezazamani"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1549 (Partially)\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nTo address excessive ZooKeeper reads caused by task framework CurrentState updates, it is proposed to move task framework CurrentStates to their separate path.\nThe change is divided to multiple phases. This is a part of the first phase where non-essential changes are included. For the first part, see #1550.\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 1251, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,127.55 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1251, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:25 h\n[INFO] Finished at: 2020-12-09T20:09:32-08:00\n[INFO] ------------------------------------------------------------------------\n\n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 90.526 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:35 min\n[INFO] Finished at: 2020-12-10T09:38:47-08:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4284,
        "title": {
            "body": "Create accumulo.fate table during upgrade",
            "bodyHTML": "Create accumulo.fate table during upgrade"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM44_H2d",
                "comments": [
                    {
                        "bodyText": "Should this allow for the table to exist?  If the upgrade were to get past this step, but fail later on.  On a  rerun of the upgrade, then this may fail if the table was created?\nI think we need to allow the upgrade to be attempted multiple times, but I don't think we require that the upgrade undo / rewind steps that it may have taken.\nThis is assuming that the presence of the fate table would not impact running the earlier versions - it would just be ignored and FATEs would be processed with the original code until the upgrade was successful.",
                        "body": "Should this allow for the table to exist?  If the upgrade were to get past this step, but fail later on.  On a  rerun of the upgrade, then this may fail if the table was created?\r\n\r\nI think we need to allow the upgrade to be attempted multiple times, but I don't think we require that the upgrade undo / rewind steps that it may have taken.\r\n\r\nThis is assuming that the presence of the fate table would not impact running the earlier versions - it would just be ignored and FATEs would be processed with the original code until the upgrade was successful.  \r\n",
                        "startLine": null,
                        "line": 108,
                        "originalLine": 108,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Should this allow for the table to exist? If the upgrade were to get past this step, but fail later on. On a rerun of the upgrade, then this may fail if the table was created?\n\nI think it does, right? I set the exists policy to SKIP. Did I miss something else?",
                        "body": ">Should this allow for the table to exist? If the upgrade were to get past this step, but fail later on. On a rerun of the upgrade, then this may fail if the table was created?\r\n\r\nI think it does, right? I set the exists policy to `SKIP`. Did I miss something else?",
                        "startLine": null,
                        "line": 108,
                        "originalLine": 108,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Actually that looks okay then.",
                        "body": "Actually that looks okay then.",
                        "startLine": null,
                        "line": 108,
                        "originalLine": 108,
                        "originalStartLine": null
                    }
                ],
                "line": 108,
                "startLine": 108,
                "originalLine": 108,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/Upgrader12to13.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "EdColeman"
        ],
        "tdv": 15.0,
        "description": {
            "bodyText": "Use the same code as ZooKeeperInitializer to create the new accumulo.fate table\nFixes #4167"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2289,
        "title": {
            "body": "Adds unit test for compaction file tracking",
            "bodyHTML": "Adds unit test for compaction file tracking"
        },
        "comments": [],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4bM7T2",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                            // TODO diff log level?\n          \n      \n    \n    \n  \n\nDoes changing this to trace satisfy this \"TODO\"?",
                        "body": "```suggestion\r\n```\r\nDoes changing this to trace satisfy this \"TODO\"?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 503,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 503,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/CompactableImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bM76E",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  // TODO Auto-generated constructor stub",
                        "body": "```suggestion\r\n\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 422,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 422,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/tablet/CompactableImplFileManagerTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bNBfB",
                "comments": [
                    {
                        "bodyText": "This method is spelled wrong. Also, in order to avoid timing bugs with system clock changes, which can occur at any time in the system for many reasons (NTP adjustments, daylight savings adjustments, user switching the time zone or setting the clock manually, etc.), this should really be based on nanoTime if all the times are retrieved from the same running process.",
                        "body": "This method is spelled wrong. Also, in order to avoid timing bugs with system clock changes, which can occur at any time in the system for many reasons (NTP adjustments, daylight savings adjustments, user switching the time zone or setting the clock manually, etc.), this should really be based on nanoTime if all the times are retrieved from the same running process.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 271,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It would be better to use nano time.  Use of currentTimeMillis was present before this change.  I may update it in this change (if its simple to do), if not we can open an issue.",
                        "body": "It would be better to use nano time.  Use of currentTimeMillis was present before this change.  I may update it in this change (if its simple to do), if not we can open an issue.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 271,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ctubbsii I updated to use nanoTime in 255ba37.  Do those changes look correct?  The unit test does not actually call the nanoTime system call so if I botched something w/ the update this test I am adding would not catch it.",
                        "body": "@ctubbsii I updated to use nanoTime in 255ba3754d4686ebc903b1ef2e135b4ef8904598.  Do those changes look correct?  The unit test does not actually call the nanoTime system call so if I botched something w/ the update this test I am adding would not catch it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 271,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It looks right to me.",
                        "body": "It looks right to me.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 271,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It looks right to me.\n\nThanks.  The main thing I was concerned about was the conversion of the duration from accumuo config in millis to nanos (this is done in the deriver).  I looked at that code multiple times and was 99% sure it was correct, but still felt it would be nice to have another set of eyes on it.",
                        "body": "> It looks right to me.\r\n\r\nThanks.  The main thing I was concerned about was the conversion of the duration from accumuo config in millis to nanos (this is done in the deriver).  I looked at that code multiple times and was 99% sure it was correct, but still felt it would be nice to have another set of eyes on it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 271,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ctubbsii  I updated the code to use the Duration type.  I think this is cleaner and a bit less error prone.  I also looked into using the Instant type in the code, but its not a good fit for nanoTime.\nThinking it may be nice to add a Duration getDuration(Property) method to AccumuloConfiguration, but not sure.",
                        "body": "@ctubbsii  I updated the code to use the Duration type.  I think this is cleaner and a bit less error prone.  I also looked into using the Instant type in the code, but its not a good fit for nanoTime.\r\n\r\nThinking it may be nice to add a `Duration getDuration(Property)` method to AccumuloConfiguration, but not sure.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 271,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 271,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/CompactableImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "ctubbsii",
            "EdColeman",
            "DomGarguilo"
        ],
        "tdv": 344.0,
        "description": {
            "bodyText": "While writing these unit test one bug was found and fixed.\nThis adds unit test for the changes made in #2199 plus unit test for code that existed before that."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1650,
        "title": {
            "body": "Batching Strategy for SimpleGarbageCollector Fix #1543",
            "bodyHTML": "Batching Strategy for SimpleGarbageCollector Fix #1543"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY1NTQ3Njg4NQ==",
                "body": "@keith-turner Made your requested changes.",
                "bodyText": "@keith-turner Made your requested changes.",
                "createdAt": "2020-07-08T12:04:58Z",
                "author": "Manno15"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY2NTM5Nzk3NA==",
                "body": "@keith-turner Please don't forget to set the project version before the issue or PR is closed, so it shows up on the appropriate project planning board.",
                "bodyText": "@keith-turner Please don't forget to set the project version before the issue or PR is closed, so it shows up on the appropriate project planning board.",
                "createdAt": "2020-07-29T02:43:54Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY2NTgyNjg3Mw==",
                "body": "@Manno15 BTW, thanks for this! I didn't have a chance to look at the substance of this change before now. This is a nice improvement, in terms of having consistent memory utilization in accumulo-gc and ensuring it always makes progress.",
                "bodyText": "@Manno15 BTW, thanks for this! I didn't have a chance to look at the substance of this change before now. This is a nice improvement, in terms of having consistent memory utilization in accumulo-gc and ensuring it always makes progress.",
                "createdAt": "2020-07-29T18:25:20Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTQ5NjcwOnYy",
                "comments": [
                    {
                        "bodyText": "I don't think the method comment is true anymore.  Perhaps this method name and comments should be changed altogether.",
                        "body": "I don't think the method comment is true anymore.  Perhaps this method name and comments should be changed altogether.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 673,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That's fair, I wasn't quite sure on that either. Do you have any suggestions?",
                        "body": "That's fair, I wasn't quite sure on that either. Do you have any suggestions? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 673,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The method is so simple now, I would inline it and remove the associated test.",
                        "body": "The method is so simple now, I would inline it and remove the associated test.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 673,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That is what I originally had but was unsure on if removing the test was a good idea.",
                        "body": "That is what I originally had but was unsure on if removing the test was a good idea.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 673,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 673,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzI2Mjk1OnYy",
                "comments": [
                    {
                        "bodyText": "May be useful to include the batch size.  This probably needs to be reformatted.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                      log.info(\"List of delete candidates has exceeded the batch size\"\n          \n          \n            \n                          + \" threshold. Attempting to delete what has been gathered so far.\");\n          \n          \n            \n                      log.info(\"Candidate batch of size {} has exceeded the\"\n          \n          \n            \n                          + \" threshold. Attempting to delete what has been gathered so far.\", candidateLength);",
                        "body": "May be useful to include the batch size.  This probably needs to be reformatted.\r\n\r\n```suggestion\r\n          log.info(\"Candidate batch of size {} has exceeded the\"\r\n              + \" threshold. Attempting to delete what has been gathered so far.\", candidateLength);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 218,
                        "originalStartLine": 217
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 218,
                "originalStartLine": 217,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "Manno15",
            "ctubbsii",
            "ivakegg",
            "keith-turner"
        ],
        "tdv": -10.0,
        "description": {
            "bodyText": "Solution for #1543. Takes @ctubbsii  batching changes on #1441 and applying it to the SimpleGarbageCollector. I am not fully confident on my test for this feature so feadback on that will be much appreciated."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3568,
        "title": {
            "body": "Change Wait.waitFor to throw IllegalStateException",
            "bodyHTML": "Change Wait.waitFor to throw IllegalStateException"
        },
        "comments": [],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4vwxIs",
                "comments": [
                    {
                        "bodyText": "This seems like a step backwards in terms of usage. The original issue commented on making it easier to use the Wait api but having to now use a try/catch makes this pretty ugly. Maybe instead of replacing the behavior that returns false we could have an additional method (or flag) that supports throwing the exception so we support both ways depending on what the unit test writer wants to do.",
                        "body": "This seems like a step backwards in terms of usage. The original issue commented on making it easier to use the Wait api but having to now use a try/catch makes this pretty ugly. Maybe instead of replacing the behavior that returns false we could have an additional method (or flag) that supports throwing the exception so we support both ways depending on what the unit test writer wants to do.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 523,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This one place had an exception message that I thought would be nice to keep - all other occurrences where just failing when they used assertTrue and there were some that did not test the return condition.\nKeeping the exception message in this single case can be removed if its not adding much.",
                        "body": "This one place had an exception message that I thought would be nice to keep - all other occurrences where just failing when they used assertTrue and there were some that did not test the return condition.\r\n\r\nKeeping the exception message in this single case can be removed if its not adding much.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 523,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Maybe we could provide an option to provide an error message for the IllegalStateException then? I feel like this is going to come up again where we want to have a custom error message that is thrown. So we should just allow providing the message for the IllegalStateException as an option with an overloaded method.",
                        "body": "Maybe we could provide an option to provide an error message for the IllegalStateException then? I feel like this is going to come up again where we want to have a custom error message that is thrown. So we should just allow providing the message for the IllegalStateException as an option with an overloaded method.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 523,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Could just add a method that is something like the following and the existing method can just have a default.\npublic static void waitFor(final Condition condition, final long duration, final long sleepMillis, String errorMsg)\n      throws Exception {\n//pass error message to new IllegalStateException()\n}",
                        "body": "Could just add a method that is something like the following and the existing method can just have a default.\r\n\r\n```Java\r\npublic static void waitFor(final Condition condition, final long duration, final long sleepMillis, String errorMsg)\r\n      throws Exception {\r\n//pass error message to new IllegalStateException()\r\n}\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 523,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added in 0031099",
                        "body": "Added in 0031099059",
                        "startLine": null,
                        "line": null,
                        "originalLine": 523,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 523,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/shell/ShellServerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4vwyCc",
                "comments": [
                    {
                        "bodyText": "Also I think you should be able to get rid of the throws Exception here if just throwing a runtime exception only",
                        "body": "Also I think you should be able to get rid of the throws Exception here if just throwing a runtime exception only",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The exception from condition.isSatisfied() needs to be declared, or turned into a Runtime exception - otherwise it is bubbling up through the waitFor calls - and the InterruptedException is not being specifically handled.",
                        "body": "The exception from `condition.isSatisfied()` needs to be declared, or turned into a Runtime exception - otherwise it is bubbling up through the waitFor calls - and the InterruptedException is not being specifically handled.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 0031099",
                        "body": "Addressed in 0031099059",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 53,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/util/Wait.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "cshannon",
            "keith-turner"
        ],
        "tdv": 25.0,
        "description": {
            "bodyText": "Instead of returning a boolean with the condition status, throw an IllegalStateException if the condition\nis not satisfied after the wait period expires.\n\n\nFixes #3564"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1705,
        "title": {
            "body": "Clean up a few forEach loops",
            "bodyHTML": "Clean up a few forEach loops"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY5Mjk5MjYxOQ==",
                "body": "These are trivial changes, but I had them leftover from a previous working branch I had for unrelated changes, and figured I could get rid of that branch by just merging these in.",
                "bodyText": "These are trivial changes, but I had them leftover from a previous working branch I had for unrelated changes, and figured I could get rid of that branch by just merging these in.",
                "createdAt": "2020-09-15T21:35:53Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY5MzA5NDEwOQ==",
                "body": "> I did not see any issues with a quick first pass - however, with some of the lambda conversions the variable names are changed and I'd need to look at more than the diffs provided to convince myself that the behavior is the same. If these were IDE generated, then they are more likely to not have an error. If this is still open tomorrow I'll try to make time for additional review.\r\n\r\n@EdColeman Most of the changes here were automated IDE refactors, but a few were manual. I've examined them all very carefully, and most are trivial anyway. This change didn't break any tests, so I'm just going to merge and move on. Feel free to add additional review if you wish, but I'm content with the tests not being broken and my manual review. I did add the one comment you suggested, though. The other was... well... I replied to your suggestion above :smiley_cat:",
                "bodyText": "I did not see any issues with a quick first pass - however, with some of the lambda conversions the variable names are changed and I'd need to look at more than the diffs provided to convince myself that the behavior is the same. If these were IDE generated, then they are more likely to not have an error. If this is still open tomorrow I'll try to make time for additional review.\n\n@EdColeman Most of the changes here were automated IDE refactors, but a few were manual. I've examined them all very carefully, and most are trivial anyway. This change didn't break any tests, so I'm just going to merge and move on. Feel free to add additional review if you wish, but I'm content with the tests not being broken and my manual review. I did add the one comment you suggested, though. The other was... well... I replied to your suggestion above üò∫",
                "createdAt": "2020-09-16T00:08:53Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTgzNDU3OnYy",
                "comments": [
                    {
                        "bodyText": "Would a comment be appropriate?  The method name explains what is happening, when merged it looks harder to reason why this is being done.",
                        "body": "Would a comment be appropriate?  The method name explains what is happening, when merged it looks harder to reason why this is being done.",
                        "startLine": null,
                        "line": 512,
                        "originalLine": 512,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sure, I can add that.",
                        "body": "Sure, I can add that.",
                        "startLine": null,
                        "line": 512,
                        "originalLine": 512,
                        "originalStartLine": null
                    }
                ],
                "line": 512,
                "startLine": 512,
                "originalLine": 512,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TabletServerBatchWriter.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTg1NjYwOnYy",
                "comments": [
                    {
                        "bodyText": "Possibly add a comment to document the method reason?",
                        "body": "Possibly add a comment to document the method reason?",
                        "startLine": null,
                        "line": 375,
                        "originalLine": 375,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "For this one, the previous method was an undocumented private one-liner with an unhelpful name that was used only once. I inline'd it automatically with the IDE and verified that the automated inline was performed correctly.\nI have no idea what any of this code in this entire class is trying to do, without possibly hours of investigation, as none of it has helpful comments at all. At this point, I don't think I could come up with anything other than the existing mediocre put files in openFiles comment at the top of the method. I'm disinclined to spend the time it would require to investigate enough to be capable of adding a more useful comment, so I would prefer to defer to the next meaningful refactor of this code. üò∫",
                        "body": "For this one, the previous method was an undocumented private one-liner with an unhelpful name that was used only once. I inline'd it automatically with the IDE and verified that the automated inline was performed correctly.\r\n\r\nI have no idea what any of this code in this entire class is trying to do, without possibly hours of investigation, as none of it has helpful comments at all. At this point, I don't think I could come up with anything other than the existing mediocre `put files in openFiles` comment at the top of the method. I'm disinclined to spend the time it would require to investigate enough to be capable of adding a more useful comment, so I would prefer to defer to the next meaningful refactor of this code. :smiley_cat:",
                        "startLine": null,
                        "line": 375,
                        "originalLine": 375,
                        "originalStartLine": null
                    }
                ],
                "line": 375,
                "startLine": 375,
                "originalLine": 375,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/FileManager.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": -35.0,
        "description": {
            "bodyText": "Miscellaneous minor clean up found while working on unrelated code,\nincluding:\n\nUsing forEach loops on collections to streamline loops\nInline one-time-use simple private methods\nRemove braces in some simple one-statement lambdas"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1381,
        "title": {
            "body": "Update gc metrics reporting to use hadoop metrics2",
            "bodyHTML": "Update gc metrics reporting to use hadoop metrics2"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDUzOTE3MTc5Mw==",
                "body": "Update incorporates (hopefully) all of the suggestions from @ctubbsii ",
                "bodyText": "Update incorporates (hopefully) all of the suggestions from @ctubbsii",
                "createdAt": "2019-10-07T19:41:07Z",
                "author": "EdColeman"
            }
        ],
        "total_comments_count": 16,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjAzODI2NjEyOnYy",
                "comments": [
                    {
                        "bodyText": "Rather than a package-info.java file, some of this info might be more useful as a class-level javadoc on server/base/src/main/java/org/apache/accumulo/server/metrics/Metrics.java, and the remaining would probably be useful on either GcMetrics or GcMetricsFactory.",
                        "body": "Rather than a `package-info.java` file, some of this info might be more useful as a class-level javadoc on `server/base/src/main/java/org/apache/accumulo/server/metrics/Metrics.java`, and the remaining would probably be useful on either `GcMetrics` or `GcMetricsFactory`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 34,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/metrics2/package-info.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjAzODUyOTc4OnYy",
                "comments": [
                    {
                        "bodyText": "I think the following name change would make the property more consistent with similar props:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              GC_ENABLE_METRICS2(\"gc.enable.metrics2\", \"true\", PropertyType.BOOLEAN,\n          \n          \n            \n              GC_METRICS_ENABLED(\"gc.metrics.enabled\", \"true\", PropertyType.BOOLEAN,",
                        "body": "I think the following name change would make the property more consistent with similar props:\r\n\r\n```suggestion\r\n  GC_METRICS_ENABLED(\"gc.metrics.enabled\", \"true\", PropertyType.BOOLEAN,\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 533,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 533,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjAzODUzMjE5OnYy",
                "comments": [
                    {
                        "bodyText": "I think the package name could be more consistent with metrics packages in other components:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            package org.apache.accumulo.gc.metrics2;\n          \n          \n            \n            package org.apache.accumulo.gc.metrics;",
                        "body": "I think the package name could be more consistent with metrics packages in other components:\r\n\r\n```suggestion\r\npackage org.apache.accumulo.gc.metrics;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 17,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 17,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/metrics2/GcCycleMetrics.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjAzODUzNjIzOnYy",
                "comments": [
                    {
                        "bodyText": "Copy/paste error. This javadoc is wrong.",
                        "body": "Copy/paste error. This javadoc is wrong.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 101,
                        "originalStartLine": 96
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 101,
                "originalStartLine": 96,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/metrics2/GcCycleMetrics.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjAzODUzNjg2OnYy",
                "comments": [
                    {
                        "bodyText": "Copy/paste error. This javadoc is half-wrong.",
                        "body": "Copy/paste error. This javadoc is half-wrong.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": 105
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 111,
                "originalStartLine": 105,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/metrics2/GcCycleMetrics.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjAzODUzODkwOnYy",
                "comments": [
                    {
                        "bodyText": "This separate class looks like a holdover from when the legacy metrics and the Hadoop Metrics2 implementations were split. Since we dropped the legacy metrics, there is only the Metrics2, so this can be merged into the GcMetrics class, following the same pattern as all the other metrics implementations.",
                        "body": "This separate class looks like a holdover from when the legacy metrics and the Hadoop Metrics2 implementations were split. Since we dropped the legacy metrics, there is only the Metrics2, so this can be merged into the GcMetrics class, following the same pattern as all the other metrics implementations.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 30,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 30,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/metrics2/GcHadoopMetrics2.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjAzODU0NTE4OnYy",
                "comments": [
                    {
                        "bodyText": "I wonder if it would be easier if we wrote our own metrics sink to use for testing, rather than use the FileSink with something like this. Could be something for future.",
                        "body": "I wonder if it would be easier if we wrote our own metrics sink to use for testing, rather than use the FileSink with something like this. Could be something for future.",
                        "startLine": null,
                        "line": 73,
                        "originalLine": 73,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The first attempt did have a custom sink that used http / REST, but in minimizing adding external dependencies, it made porting from 1.9 to 2.x more difficult.  There were also conflicts with hadoop metrics2 and the hadoop shaded jars that I did not resolve.\nThe approach may still be valid and will be revisited going forward, but the file sync does provide some basic functionality that was useful to testing during development.",
                        "body": "The first attempt did have a custom sink that used http / REST, but in minimizing adding external dependencies, it made porting from 1.9 to 2.x more difficult.  There were also conflicts with hadoop metrics2 and the hadoop shaded jars that I did not resolve.\r\n\r\nThe approach may still be valid and will be revisited going forward, but the file sync does provide some basic functionality that was useful to testing during development.",
                        "startLine": null,
                        "line": 73,
                        "originalLine": 73,
                        "originalStartLine": null
                    }
                ],
                "line": 73,
                "startLine": 73,
                "originalLine": 73,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/metrics/MetricsFileTailer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjA0NDgxOTc1OnYy",
                "comments": [
                    {
                        "bodyText": "For consistency, with other configs, I suggest:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              GC_METRICS_ENABLED(\"gc.enable.metrics\", \"true\", PropertyType.BOOLEAN,\n          \n          \n            \n              GC_METRICS_ENABLED(\"gc.metrics.enabled\", \"true\", PropertyType.BOOLEAN,",
                        "body": "For consistency, with other configs, I suggest:\r\n\r\n```suggestion\r\n  GC_METRICS_ENABLED(\"gc.metrics.enabled\", \"true\", PropertyType.BOOLEAN,\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 533,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 533,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjA0NDgyOTUwOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * Set the counter for number of completed gc collection cycles p the provided value. The value is\n          \n          \n            \n               * Set the counter for number of completed gc collection cycles to the provided value. The value is",
                        "body": "```suggestion\r\n   * Set the counter for number of completed gc collection cycles to the provided value. The value is\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 110,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 110,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/metrics/GcCycleMetrics.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjA0NDgzMjQ1OnYy",
                "comments": [
                    {
                        "bodyText": "I don't see the method setting this to zero as described. The code should reflect the description.\n(Also, another option to setting it to zero would be to leave it as is, and not set it at all.)",
                        "body": "I don't see the method setting this to zero as described. The code should reflect the description.\r\n(Also, another option to setting it to zero would be to leave it as is, and not set it at all.)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 112,
                        "originalStartLine": 111
                    },
                    {
                        "bodyText": "This method was unused - so I opted to remove it - the not setting to zero was an error on my part.",
                        "body": "This method was unused - so I opted to remove it - the not setting to zero was an error on my part.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 112,
                        "originalStartLine": 111
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 112,
                "originalStartLine": 111,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/metrics/GcCycleMetrics.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "EdColeman",
            "ctubbsii"
        ],
        "tdv": 77.0,
        "description": {
            "bodyText": "Publish current gc metrics to hadoop 2 metrics reporting system.\nAdd gc run counter that increments on each gc cycle run\nAdd metric to track time required for gc post op (compact, flush, none)\nImproved testing using a metrics2 file sink for it tests."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2135,
        "title": {
            "body": "Test converting client props to ConditionalWriterConfig",
            "bodyHTML": "Test converting client props to ConditionalWriterConfig"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg1MzQzOTQyNA==",
                "body": "@DomGarguilo thanks for the catch on the comment!",
                "bodyText": "@DomGarguilo thanks for the catch on the comment!",
                "createdAt": "2021-06-02T23:07:34Z",
                "author": "jmark99"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4NzczMTQ0OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                // If the value of BATCH_WRITER_TIMEOUT_MAX is set to zero, Long.MAX_VALUE is returned.\n          \n          \n            \n                // If the value of CONDITIONAL_WRITER_TIMEOUT_MAX is set to zero, Long.MAX_VALUE is returned.",
                        "body": "```suggestion\r\n    // If the value of CONDITIONAL_WRITER_TIMEOUT_MAX is set to zero, Long.MAX_VALUE is returned.\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 181,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "There is a second occurrence in this comment that needs to be changed as well but there isn't a good way to suggest a multi-line change here because the extra length pushes words onto the next line.",
                        "body": "There is a second occurrence in this comment that needs to be changed as well but there isn't a good way to suggest a multi-line change here because the extra length pushes words onto the next line.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 181,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 181,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ClientContextTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jmark99",
            "EdColeman",
            "DomGarguilo"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Created two unit tests for the conversion of client properties to ConditionalWriterConfig. One using default values and another using modified values.\nRefactored getConditionalWriterConfig into two methods to facilitate unit testing.\nCloses #2131"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4121,
        "title": {
            "body": "Small improvements to new AccumuloStore related code",
            "bodyHTML": "Small improvements to new AccumuloStore related code"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5vzCH0",
                "body": "Does this set up a merge conflict with #4126 ?  Not necessarily a problem more of something to watch out for depending on the merge order.",
                "bodyText": "Does this set up a merge conflict with #4126 ?  Not necessarily a problem more of something to watch out for depending on the merge order.",
                "createdAt": "2024-01-03T16:34:29Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5vzC7L",
                "body": "> Does this set up a merge conflict with #4126 ? Not necessarily a problem more of something to watch out for depending on the merge order.\r\n\r\nYea looks like there is some overlap but shouldn't be too much of a process to resolve.",
                "bodyText": "Does this set up a merge conflict with #4126 ? Not necessarily a problem more of something to watch out for depending on the merge order.\n\nYea looks like there is some overlap but shouldn't be too much of a process to resolve.",
                "createdAt": "2024-01-03T16:36:57Z",
                "author": "DomGarguilo"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4247kw",
                "comments": [
                    {
                        "bodyText": "This is refactored from the ZooStore and is actually misspelled in 2.1 and main as well so we should fix it there too. \n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/fate/ZooStore.java\n    \n    \n         Line 64\n      in\n      d973179\n    \n  \n  \n    \n\n        \n          \n           private Map<Long,Long> defered;",
                        "body": "This is refactored from the ZooStore and is actually misspelled in 2.1 and main as well so we should fix it there too. https://github.com/apache/accumulo/blob/d97317945290fcd4e3a4eb8b3cf7e427fcc322bd/core/src/main/java/org/apache/accumulo/core/fate/ZooStore.java#L64",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 55,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Looks like the same thing was fixed in #4126 which is waiting to be merged into 2.1 so I think we can just let it be handled there if it ends up being merged.",
                        "body": "Looks like the same thing was fixed in #4126 which is waiting to be merged into 2.1 so I think we can just let it be handled there if it ends up being merged.",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 55,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added #4128 to fix the things mentioned in 2.1",
                        "body": "Added #4128 to fix the things mentioned in 2.1",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 55,
                        "originalStartLine": null
                    }
                ],
                "line": 55,
                "startLine": 55,
                "originalLine": 55,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/fate/AbstractFateStore.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4247lK",
                "comments": [
                    {
                        "bodyText": "Same comment, this is also an issue in 2.1 \n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/fate/ZooStore.java\n    \n    \n         Line 69\n      in\n      d973179\n    \n  \n  \n    \n\n        \n          \n           private byte[] serialize(Object o) {",
                        "body": "Same comment, this is also an issue in 2.1 https://github.com/apache/accumulo/blob/d97317945290fcd4e3a4eb8b3cf7e427fcc322bd/core/src/main/java/org/apache/accumulo/core/fate/ZooStore.java#L69",
                        "startLine": null,
                        "line": 69,
                        "originalLine": 69,
                        "originalStartLine": null
                    }
                ],
                "line": 69,
                "startLine": 69,
                "originalLine": 69,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/fate/AbstractFateStore.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4247wG",
                "comments": [
                    {
                        "bodyText": "Nice catch, for some reason I missed the stream() method on the scanner",
                        "body": "Nice catch, for some reason I missed the stream() method on the scanner",
                        "startLine": null,
                        "line": 77,
                        "originalLine": 77,
                        "originalStartLine": null
                    }
                ],
                "line": 77,
                "startLine": 77,
                "originalLine": 77,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/fate/accumulo/AccumuloStore.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4248S4",
                "comments": [
                    {
                        "bodyText": "Another nice catch as it makes no sense to catch and immediately re-throw here",
                        "body": "Another nice catch as it makes no sense to catch and immediately re-throw here",
                        "startLine": null,
                        "line": 209,
                        "originalLine": 209,
                        "originalStartLine": null
                    }
                ],
                "line": 209,
                "startLine": 209,
                "originalLine": 209,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/fate/accumulo/AccumuloStore.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "DomGarguilo",
            "EdColeman",
            "cshannon"
        ],
        "tdv": -7.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "commons-collections",
        "pr_number": 300,
        "title": {
            "body": "[COLLECTIONS-802] Fix remove failed by removing set null to currentKe‚Ä¶",
            "bodyHTML": "[COLLECTIONS-802] Fix remove failed by removing set null to currentKe‚Ä¶"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmGs5CCYuv",
                "body": "# [Codecov](https://codecov.io/gh/apache/commons-collections/pull/300?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) Report\n> Merging [#300](https://codecov.io/gh/apache/commons-collections/pull/300?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (43e23dd) into [master](https://codecov.io/gh/apache/commons-collections/commit/9df6f64b7ea729fff5d11fce6407cba249baafaa?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (9df6f64) will **increase** coverage by `0.05%`.\n> The diff coverage is `88.88%`.\n\n```diff\n@@             Coverage Diff              @@\n##             master     #300      +/-   ##\n============================================\n+ Coverage     85.82%   85.88%   +0.05%     \n- Complexity     4674     4676       +2     \n============================================\n  Files           292      292              \n  Lines         13471    13469       -2     \n  Branches       1955     1955              \n============================================\n+ Hits          11562    11568       +6     \n+ Misses         1330     1324       -6     \n+ Partials        579      577       -2     \n```\n\n\n| [Impacted Files](https://codecov.io/gh/apache/commons-collections/pull/300?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) | Coverage Œî | |\n|---|---|---|\n| [...commons/collections4/map/AbstractReferenceMap.java](https://codecov.io/gh/apache/commons-collections/pull/300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L21hcC9BYnN0cmFjdFJlZmVyZW5jZU1hcC5qYXZh) | `90.37% <88.88%> (+2.13%)` | :arrow_up: |\n| [.../apache/commons/collections4/map/ReferenceMap.java](https://codecov.io/gh/apache/commons-collections/pull/300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L21hcC9SZWZlcmVuY2VNYXAuamF2YQ==) | `75.00% <0.00%> (+12.50%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/apache/commons-collections/pull/300?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation)\n> `Œî = absolute <relative> (impact)`, `√∏ = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/apache/commons-collections/pull/300?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation). Last update [9df6f64...43e23dd](https://codecov.io/gh/apache/commons-collections/pull/300?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation).\n",
                "bodyText": "Codecov Report\n\nMerging #300 (43e23dd) into master (9df6f64) will increase coverage by 0.05%.\nThe diff coverage is 88.88%.\n\n@@             Coverage Diff              @@\n##             master     #300      +/-   ##\n============================================\n+ Coverage     85.82%   85.88%   +0.05%     \n- Complexity     4674     4676       +2     \n============================================\n  Files           292      292              \n  Lines         13471    13469       -2     \n  Branches       1955     1955              \n============================================\n+ Hits          11562    11568       +6     \n+ Misses         1330     1324       -6     \n+ Partials        579      577       -2     \n\n\n\nImpacted Files\nCoverage Œî\n\n\n\n\n\n...commons/collections4/map/AbstractReferenceMap.java\n90.37% <88.88%> (+2.13%)\n‚¨ÜÔ∏è\n\n\n.../apache/commons/collections4/map/ReferenceMap.java\n75.00% <0.00%> (+12.50%)\n‚¨ÜÔ∏è\n\n\n\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\nŒî = absolute <relative> (impact), √∏ = not affected, ? = missing data\nPowered by Codecov. Last update 9df6f64...43e23dd. Read the comment docs.",
                "createdAt": "2022-04-24T21:27:49Z",
                "author": "codecov-commenter"
            },
            {
                "id": "IC_kwDOAAMmGs5CCbIE",
                "body": "Ah, I think I may have spoken too fast. I executed the `ApacheMapTest` against `master`, and got this:\r\n\r\n```\r\n[ERROR] Tests run: 25662, Failures: 8, Errors: 139, Skipped: 4\r\n```\r\n\r\nAnd then against this branch:\r\n\r\n```\r\n[ERROR] Tests run: 25664, Failures: 2, Errors: 139, Skipped: 4\r\n```\r\n\r\nSo looks like this PR is actually reducing the failures :tada: ",
                "bodyText": "Ah, I think I may have spoken too fast. I executed the ApacheMapTest against master, and got this:\n[ERROR] Tests run: 25662, Failures: 8, Errors: 139, Skipped: 4\n\nAnd then against this branch:\n[ERROR] Tests run: 25664, Failures: 2, Errors: 139, Skipped: 4\n\nSo looks like this PR is actually reducing the failures üéâ",
                "createdAt": "2022-04-24T22:37:15Z",
                "author": "kinow"
            },
            {
                "id": "IC_kwDOAAMmGs5CCbV1",
                "body": "oops. I must have forgotten, not realized, or master has new failures. I very much like Guava‚Äôs collection tests as reusable and catch these minor mistakes. I‚Äôd recommend using it elsewhere as another sanity check over your own great testing.",
                "bodyText": "oops. I must have forgotten, not realized, or master has new failures. I very much like Guava‚Äôs collection tests as reusable and catch these minor mistakes. I‚Äôd recommend using it elsewhere as another sanity check over your own great testing.",
                "createdAt": "2022-04-24T22:44:04Z",
                "author": "ben-manes"
            },
            {
                "id": "IC_kwDOAAMmGs5CCbZk",
                "body": "> oops. I must have forgotten, not realized, or master has new failures. I very much like Guava‚Äôs collection tests as reusable and catch these minor mistakes. I‚Äôd recommend using it elsewhere as another sanity check over your own great testing.\r\n\r\nI hadn't heard about that before, but looks super useful. But from the amount of errors, that would probably be an epic task, maybe even worth of GSoC, I think.\r\n\r\nThanks @ben-manes !",
                "bodyText": "oops. I must have forgotten, not realized, or master has new failures. I very much like Guava‚Äôs collection tests as reusable and catch these minor mistakes. I‚Äôd recommend using it elsewhere as another sanity check over your own great testing.\n\nI hadn't heard about that before, but looks super useful. But from the amount of errors, that would probably be an epic task, maybe even worth of GSoC, I think.\nThanks @ben-manes !",
                "createdAt": "2022-04-24T22:45:51Z",
                "author": "kinow"
            },
            {
                "id": "IC_kwDOAAMmGs5CCcDj",
                "body": "Checking and I accidentally attached the wrong version of `ApacheMapTest`. üò¶ \r\n\r\nThe flag `allowNulls` should have been false for `ReferenceMap`, and was there just because every collection author does this differently so I had to experiment to find Apache's setting. The corrected test case is below.\r\n\r\n```java\r\nimport java.util.Map;\r\nimport java.util.function.Supplier;\r\n\r\nimport org.apache.commons.collections4.map.HashedMap;\r\nimport org.apache.commons.collections4.map.LRUMap;\r\nimport org.apache.commons.collections4.map.LinkedMap;\r\nimport org.apache.commons.collections4.map.ReferenceMap;\r\n\r\nimport com.google.common.collect.testing.MapTestSuiteBuilder;\r\nimport com.google.common.collect.testing.TestStringMapGenerator;\r\nimport com.google.common.collect.testing.features.CollectionFeature;\r\nimport com.google.common.collect.testing.features.CollectionSize;\r\nimport com.google.common.collect.testing.features.MapFeature;\r\n\r\nimport junit.framework.Test;\r\nimport junit.framework.TestCase;\r\nimport junit.framework.TestSuite;\r\n\r\npublic final class ApacheMapTest extends TestCase {\r\n\r\n  public static Test suite() {\r\n    var test = new TestSuite();\r\n    test.addTest(suite(\"HashedMap\", HashedMap::new));\r\n    test.addTest(suite(\"LinkedMap\", LinkedMap::new));\r\n    test.addTest(suite(\"LRUMap\", LRUMap::new));\r\n    test.addTest(suite(\"ReferenceMap\", ReferenceMap::new));\r\n    return test;\r\n  }\r\n\r\n  public static Test suite(String name, Supplier<Map<String, String>> factory) {\r\n    return MapTestSuiteBuilder\r\n        .using(new TestStringMapGenerator() {\r\n          @Override protected Map<String, String> create(Map.Entry<String, String>[] entries) {\r\n            var map = factory.get();\r\n            for (var entry : entries) {\r\n              map.put(entry.getKey(), entry.getValue());\r\n            }\r\n            return map;\r\n          }\r\n        })\r\n        .named(name)\r\n        .withFeatures(\r\n            CollectionSize.ANY,\r\n            MapFeature.GENERAL_PURPOSE,\r\n            MapFeature.ALLOWS_ANY_NULL_QUERIES,\r\n            CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\r\n        .createTestSuite();\r\n  }\r\n}\r\n```\r\n<img width=\"1792\" alt=\"Screen Shot 2022-04-24 at 4 04 37 PM\" src=\"https://user-images.githubusercontent.com/378614/165000396-a85c13ea-9b0e-4206-88f7-8c115cf66985.png\">\r\n",
                "bodyText": "Checking and I accidentally attached the wrong version of ApacheMapTest. üò¶\nThe flag allowNulls should have been false for ReferenceMap, and was there just because every collection author does this differently so I had to experiment to find Apache's setting. The corrected test case is below.\nimport java.util.Map;\nimport java.util.function.Supplier;\n\nimport org.apache.commons.collections4.map.HashedMap;\nimport org.apache.commons.collections4.map.LRUMap;\nimport org.apache.commons.collections4.map.LinkedMap;\nimport org.apache.commons.collections4.map.ReferenceMap;\n\nimport com.google.common.collect.testing.MapTestSuiteBuilder;\nimport com.google.common.collect.testing.TestStringMapGenerator;\nimport com.google.common.collect.testing.features.CollectionFeature;\nimport com.google.common.collect.testing.features.CollectionSize;\nimport com.google.common.collect.testing.features.MapFeature;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\npublic final class ApacheMapTest extends TestCase {\n\n  public static Test suite() {\n    var test = new TestSuite();\n    test.addTest(suite(\"HashedMap\", HashedMap::new));\n    test.addTest(suite(\"LinkedMap\", LinkedMap::new));\n    test.addTest(suite(\"LRUMap\", LRUMap::new));\n    test.addTest(suite(\"ReferenceMap\", ReferenceMap::new));\n    return test;\n  }\n\n  public static Test suite(String name, Supplier<Map<String, String>> factory) {\n    return MapTestSuiteBuilder\n        .using(new TestStringMapGenerator() {\n          @Override protected Map<String, String> create(Map.Entry<String, String>[] entries) {\n            var map = factory.get();\n            for (var entry : entries) {\n              map.put(entry.getKey(), entry.getValue());\n            }\n            return map;\n          }\n        })\n        .named(name)\n        .withFeatures(\n            CollectionSize.ANY,\n            MapFeature.GENERAL_PURPOSE,\n            MapFeature.ALLOWS_ANY_NULL_QUERIES,\n            CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n        .createTestSuite();\n  }\n}",
                "createdAt": "2022-04-24T23:05:01Z",
                "author": "ben-manes"
            },
            {
                "id": "IC_kwDOAAMmGs5CCtmi",
                "body": "Thanks @ben-manes, much easier now to run the tests and compare the results with your updated test.\r\n\r\nFor `master`:\r\n\r\n```bash\r\n[ERROR] Failures: \r\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [hasNext, hasNext, next, hasNext, remove]\r\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [hasNext, hasNext, next, hasNext, remove]\r\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [hasNext, hasNext, next, hasNext, remove]\r\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [next, next, next, hasNext, remove]\r\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [next, next, next, hasNext, remove]\r\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [next, next, next, hasNext, remove]\r\n[INFO] \r\n[ERROR] Tests run: 25518, Failures: 6, Errors: 0, Skipped: 4\r\n[INFO] \r\n```\r\n\r\nThen for this branch:\r\n\r\n```bash\r\n[INFO] Results:\r\n[INFO] \r\n[WARNING] Tests run: 25520, Failures: 0, Errors: 0, Skipped: 4\r\n```\r\nSo no regressions in our CI, nor in the `ApacheMapTest` after this change :clap: \r\n",
                "bodyText": "Thanks @ben-manes, much easier now to run the tests and compare the results with your updated test.\nFor master:\n[ERROR] Failures: \n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [hasNext, hasNext, next, hasNext, remove]\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [hasNext, hasNext, next, hasNext, remove]\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [hasNext, hasNext, next, hasNext, remove]\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [next, next, next, hasNext, remove]\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [next, next, next, hasNext, remove]\n[ERROR]   CollectionIteratorTester.testIterator_unknownOrderRemoveSupported:111->runIteratorTest:133 failed with stimuli [next, next, next, hasNext, remove]\n[INFO] \n[ERROR] Tests run: 25518, Failures: 6, Errors: 0, Skipped: 4\n[INFO] \nThen for this branch:\n[INFO] Results:\n[INFO] \n[WARNING] Tests run: 25520, Failures: 0, Errors: 0, Skipped: 4\nSo no regressions in our CI, nor in the ApacheMapTest after this change üëè",
                "createdAt": "2022-04-25T02:43:32Z",
                "author": "kinow"
            },
            {
                "id": "IC_kwDOAAMmGs5CCuAP",
                "body": "Also created a follow-up issue, https://issues.apache.org/jira/browse/COLLECTIONS-811, to consider adding Guava's testlib or similar solution to our tests/CI.",
                "bodyText": "Also created a follow-up issue, https://issues.apache.org/jira/browse/COLLECTIONS-811, to consider adding Guava's testlib or similar solution to our tests/CI.",
                "createdAt": "2022-04-25T02:47:35Z",
                "author": "kinow"
            }
        ],
        "total_comments_count": 12,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmGs4griRS",
                "comments": [
                    {
                        "bodyText": "Fix looks OK, and the test is failing on master, passing on this branch. We could also modify the test to be more similar to the one reported in the issue.\ndiff --git a/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java b/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java\nindex 509ac514..c6625909 100644\n--- a/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java\n@@ -327,7 +327,8 @@ public class ReferenceMapTest<K, V> extends AbstractIterableMapTest<K, V> {\n         map.put(1, 2);\n         Iterator<Map.Entry<Integer, Integer>> iter = map.entrySet().iterator();\n         assertTrue(iter.hasNext());\n-        iter.next();\n+        assertTrue(iter.hasNext());\n+        assertEquals(Integer.valueOf(1), iter.next().getKey());\n         // below line should not affect remove\n         assertFalse(iter.hasNext());\n         iter.remove();\nBut not really important, the last assertTrue is where the test fails on master.",
                        "body": "Fix looks OK, and the test is failing on `master`, passing on this branch. We could also modify the test to be more similar to the one reported in the issue.\r\n\r\n```diff\r\ndiff --git a/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java b/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java\r\nindex 509ac514..c6625909 100644\r\n--- a/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java\r\n+++ b/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java\r\n@@ -327,7 +327,8 @@ public class ReferenceMapTest<K, V> extends AbstractIterableMapTest<K, V> {\r\n         map.put(1, 2);\r\n         Iterator<Map.Entry<Integer, Integer>> iter = map.entrySet().iterator();\r\n         assertTrue(iter.hasNext());\r\n-        iter.next();\r\n+        assertTrue(iter.hasNext());\r\n+        assertEquals(Integer.valueOf(1), iter.next().getKey());\r\n         // below line should not affect remove\r\n         assertFalse(iter.hasNext());\r\n         iter.remove();\r\n```\r\nBut not really important, the last `assertTrue` is where the test fails on `master`.",
                        "startLine": null,
                        "line": 335,
                        "originalLine": 335,
                        "originalStartLine": null
                    }
                ],
                "line": 335,
                "startLine": 335,
                "originalLine": 335,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmGs4g0L3k",
                "comments": [
                    {
                        "bodyText": "Fix is here ‚òùÔ∏è , the rest is renaming variables.",
                        "body": "Fix is here :point_up: , the rest is renaming variables.",
                        "startLine": null,
                        "line": 807,
                        "originalLine": 807,
                        "originalStartLine": null
                    }
                ],
                "line": 807,
                "startLine": 807,
                "originalLine": 807,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "samabcde",
            "codecov-commenter",
            "kinow",
            "ben-manes"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "‚Ä¶y and currentValue.\n\nThe problem occur when the iterator called hasNext and return false, which set null to currentKey. Hence remove method calling parent.remove(currentKey); will not remove the current entry.\nPropose to fix by removing lines setting null, other than releasing the reference earlier, can't think of other reason to set them to null.\nRename variable to be more understandable."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4212,
        "title": {
            "body": "Better error when compaction executors are not set",
            "bodyHTML": "Better error when compaction executors are not set"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM44JZ1z",
                "comments": [
                    {
                        "bodyText": "What happens in the next statement if params.getOptions() does not contain executors?",
                        "body": "What happens in the next statement if `params.getOptions()` does not contain `executors`?",
                        "startLine": null,
                        "line": 173,
                        "originalLine": 175,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added a test case for that behavior and found that an NPE would still be thrown.\nModified the logic to handle that case as well.",
                        "body": "Added a test case for that behavior and found that an NPE would still be thrown. \r\nModified the logic to handle that case as well.",
                        "startLine": null,
                        "line": 173,
                        "originalLine": 175,
                        "originalStartLine": null
                    }
                ],
                "line": 173,
                "startLine": null,
                "originalLine": 175,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM44JlD1",
                "comments": [
                    {
                        "bodyText": "In addition to having a test where the executors option is defined but blank, could have another test where the option is not defined/set at all.",
                        "body": "In addition to having a test where the executors option is defined but blank, could have another test where the option is not defined/set at all.",
                        "startLine": null,
                        "line": 479,
                        "originalLine": 479,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added that test case.",
                        "body": "Added that test case. ",
                        "startLine": null,
                        "line": 479,
                        "originalLine": 479,
                        "originalStartLine": null
                    }
                ],
                "line": 479,
                "startLine": 479,
                "originalLine": 479,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlannerTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ddanielr",
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 13.0,
        "description": {
            "bodyText": "Gson returns a null array when executors either isn't defined, or is an empty string.\nThe code then throws an NPE when attempting to iterate through the array.\n    ExecutorConfig[] execConfigs =\n        new Gson().fromJson(params.getOptions().get(\"executors\"), ExecutorConfig[].class);\n\n    List<Executor> tmpExec = new ArrayList<>();\n    for (ExecutorConfig executorConfig : execConfigs) {\n\nThis change throws an IllegalStateException before the NPE would occur and adds an actionable exception message.\nThis change is only targeted to 2.1 as this situation is already handled in main."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2410,
        "title": {
            "body": "use reconnect timeout for crud retry timeout",
            "bodyHTML": "use reconnect timeout for crud retry timeout"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5X5pr2",
                "body": "> The change LGTM but I have one basic question, so previously we used to have two knobs for \"reconnect\" and \"retry\" now we are combining both knobs. Now what if user doesn't want to retry the op if reconnect happens after suppose 5 mins? (previously user can set operationRetryTimeout lesser than 5 mins and op won't be retried right?)\r\n\r\nThanks for the comments. OperationRetry depends on auto reconnect. As of now there is no use case of having 2 separate config. So I would prefer let keep the config \"simple and stupid\". Easier for user to use. :D",
                "bodyText": "The change LGTM but I have one basic question, so previously we used to have two knobs for \"reconnect\" and \"retry\" now we are combining both knobs. Now what if user doesn't want to retry the op if reconnect happens after suppose 5 mins? (previously user can set operationRetryTimeout lesser than 5 mins and op won't be retried right?)\n\nThanks for the comments. OperationRetry depends on auto reconnect. As of now there is no use case of having 2 separate config. So I would prefer let keep the config \"simple and stupid\". Easier for user to use. :D",
                "createdAt": "2023-03-18T05:41:53Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4rdi4b",
                "comments": [
                    {
                        "bodyText": "nit: you can remove above TODO now.",
                        "body": "nit: you can remove above TODO now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 40,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/policy/MetaClientReconnectPolicy.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "rahulrane50"
        ],
        "tdv": 1.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#2237\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nHad an offline discussion with other committers.\nSince operation retry waits for connect state change event, it will retry when reconnect succeeded and retry will be canceled when reconnect errored or timed out. There is no need to have 2 configurable timeout for CRUD operation retry and reconnect retry.\nThis change remove crud operation retry timeout.\nTests\n\n The following tests are written for this issue:\n\nNA\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1632,
        "title": {
            "body": "Fix #1609 dynamically reinitialize compaction services when config ch‚Ä¶",
            "bodyHTML": "Fix #1609 dynamically reinitialize compaction services when config ch‚Ä¶"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDcxNzgwOnYy",
                "comments": [
                    {
                        "bodyText": "Did you consider using a ConcurrentHashMap here?  I see you made the map volatile, but was wondering if it would help prevent concurrency issues to have a ConcurrentHashMap as well.",
                        "body": "Did you consider using a ConcurrentHashMap here?  I see you made the map volatile, but was wondering if it would help prevent concurrency issues to have a ConcurrentHashMap as well. ",
                        "startLine": null,
                        "line": 47,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I am using Map.copyOf() for the maps, so its a volatile pointer to an immutable map.   Whenever its updated the entire map is replaced with another immutable map.  This pattern is good for maps that are concurrently read a lot and updated infrequently.  The internal pointers in concurrent hash map are volatile, making all operations on the map slower.  The internal pointers in an immutable map are probably not volatile, just our pointer to the entire map is.",
                        "body": "I am using Map.copyOf() for the maps, so its a volatile pointer to an immutable map.   Whenever its updated the entire map is replaced with another immutable map.  This pattern is good for maps that are concurrently read a lot and updated infrequently.  The internal pointers in concurrent hash map are volatile, making all operations on the map slower.  The internal pointers in an immutable map are probably not volatile, just our pointer to the entire map is.",
                        "startLine": null,
                        "line": 47,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the explanation.  I think what you have is fine.  I was just wondering what is the best way to guard against future changes which could introduce concurrency issues.  For example, you used a coding pattern which may not be obvious to a new developer, versus using a concrete type that is less likely to change.  Your code is definitely more efficient but it was not initially clear to me why.  Perhaps just some comments with your explanation or creating a method to specifically update the map would help.",
                        "body": "Thanks for the explanation.  I think what you have is fine.  I was just wondering what is the best way to guard against future changes which could introduce concurrency issues.  For example, you used a coding pattern which may not be obvious to a new developer, versus using a concrete type that is less likely to change.  Your code is definitely more efficient but it was not initially clear to me why.  Perhaps just some comments with your explanation or creating a method to specifically update the map would help.",
                        "startLine": null,
                        "line": 47,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I will add a comment.",
                        "body": "I will add a comment.",
                        "startLine": null,
                        "line": 47,
                        "originalLine": 47,
                        "originalStartLine": null
                    }
                ],
                "line": 47,
                "startLine": 47,
                "originalLine": 47,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "milleruntime"
        ],
        "tdv": 55.0,
        "description": {
            "bodyText": "‚Ä¶anges"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1680,
        "title": {
            "body": "Use specific message for stoppable API partitions in initial state",
            "bodyHTML": "Use specific message for stoppable API partitions in initial state"
        },
        "comments": [],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NTUwNDIwOnYy",
                "comments": [
                    {
                        "bodyText": "So you do the concatenate with comma, if I understand it correctly. Then it could be problematic since the stoppable checks will be concatenated with comma as well, you will see it like this:\n\"instance 1: [failed reason1, CUSTOM_PARTITION:partition1, PARTITION_INITIAL_FAIL]xxxxx\nThen it will be confused for user to understand which partition it fails, especially when json format read it into different order.",
                        "body": "So you do the concatenate with comma, if I understand it correctly. Then it could be problematic since the stoppable checks will be concatenated with comma as well, you will see it like this:\r\n\r\n\"instance 1: [failed reason1, CUSTOM_PARTITION:partition1, PARTITION_INITIAL_FAIL]xxxxx\r\n\r\nThen it will be confused for user to understand which partition it fails, especially when json format read it into different order.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 286,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks. As discussed offline, I changed the format. Please have a look",
                        "body": "Thanks. As discussed offline, I changed the format. Please have a look ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 286,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 286,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NTUxMTA1OnYy",
                "comments": [
                    {
                        "bodyText": "NIT: we can combine it to:\nunhealthyPartitions.computeIfAbsent(partition, list -> new ArrayList<>()).add(PARTITION_INITIAL_STATE_FAIL);\nSame logic can apply to following piece.",
                        "body": "NIT: we can combine it to:\r\n\r\nunhealthyPartitions.computeIfAbsent(partition, list -> new ArrayList<>()).add(PARTITION_INITIAL_STATE_FAIL);\r\n\r\nSame logic can apply to following piece.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 256,
                        "originalStartLine": 253
                    },
                    {
                        "bodyText": "Done.",
                        "body": "Done.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 256,
                        "originalStartLine": 253
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 256,
                "originalStartLine": 253,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NjgwMjkzOnYy",
                "comments": [
                    {
                        "bodyText": "Coding convention may say that you need the brace brackets here. :)",
                        "body": "Coding convention may say that you need the brace brackets here. :) ",
                        "startLine": null,
                        "line": 285,
                        "originalLine": 285,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done.",
                        "body": "Done.",
                        "startLine": null,
                        "line": 285,
                        "originalLine": 285,
                        "originalStartLine": null
                    }
                ],
                "line": 285,
                "startLine": 285,
                "originalLine": 285,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NjgwNzcyOnYy",
                "comments": [
                    {
                        "bodyText": "NIT: could we have comments here explaining the definitions and contexts. For example: why is it a \"fail\" for partitions in initial states?",
                        "body": "NIT: could we have comments here explaining the definitions and contexts. For example: why is it a \"fail\" for partitions in initial states?",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 58,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done.",
                        "body": "Done.",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 58,
                        "originalStartLine": null
                    }
                ],
                "line": 60,
                "startLine": 60,
                "originalLine": 58,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "alirezazamani",
            "junkaixue",
            "NealSun96"
        ],
        "tdv": 15.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #1679\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn this PR, when stoppable rest API is called and a partition on sibling node is in initial\nstate of the statemodel, we skip the healthcheck for that partition/instance\nand put an appropriate message regarding this failure.\n\nTests\n\n\n The following tests are written for this issue:\nTestInstanceValidationUtilInRest.testPartitionLevelCheckInitState\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\nHelix-core:\n\n\n[INFO] Tests run: 1264, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4,911.786 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1264, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:21 h\n[INFO] Finished at: 2021-03-23T19:24:15-07:00\n[INFO] ------------------------------------------------------------------------\n\nHelix-rest:\n[INFO] Tests run: 172, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 92.044 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 172, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:39 min\n[INFO] Finished at: 2021-03-24T09:59:10-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2032,
        "title": {
            "body": "Code refactor and cleanup on instance validation",
            "bodyHTML": "Code refactor and cleanup on instance validation"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5BYkBn",
                "body": "The change should be backward compatible, except for https://github.com/apache/helix/pull/2032/files#diff-ef5352bf131875871d12d83626aa897b49458df3eff2fd81638bc66e54deaea1, where previously didn't consider instance disabled in cluster config (batch disable). ",
                "bodyText": "The change should be backward compatible, except for https://github.com/apache/helix/pull/2032/files#diff-ef5352bf131875871d12d83626aa897b49458df3eff2fd81638bc66e54deaea1, where previously didn't consider instance disabled in cluster config (batch disable).",
                "createdAt": "2022-04-12T16:44:03Z",
                "author": "qqu0127"
            },
            {
                "id": "IC_kwDOAPIHxc5BlEIs",
                "body": "This PR is ready to merge, approved by @junkaixue \r\nCommit message:\r\n\r\nCode refactor and cleanup on instance validation\r\nUnify the usage of checking instance enable/disable using InstanceValidationUtil",
                "bodyText": "This PR is ready to merge, approved by @junkaixue\nCommit message:\nCode refactor and cleanup on instance validation\nUnify the usage of checking instance enable/disable using InstanceValidationUtil",
                "createdAt": "2022-04-15T17:08:39Z",
                "author": "qqu0127"
            }
        ],
        "total_comments_count": 16,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4gWwaE",
                "comments": [
                    {
                        "bodyText": "Since this is a public method, can we consider deprecating it and re-creating the version without clusterId as an argument?\nAlso, I suggest fixing up the method name to hasResourceBeenAssigned() or isResourceAssigned()?",
                        "body": "Since this is a public method, can we consider deprecating it and re-creating the version without `clusterId` as an argument?\r\n\r\nAlso, I suggest fixing up the method name to `hasResourceBeenAssigned()` or `isResourceAssigned()`?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 155,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good point, updated. Thanks.",
                        "body": "Good point, updated. Thanks.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 155,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 155,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4gWyLP",
                "comments": [
                    {
                        "bodyText": "Is this no longer needed?",
                        "body": "Is this no longer needed?",
                        "startLine": 817,
                        "line": 819,
                        "originalLine": 819,
                        "originalStartLine": 817
                    },
                    {
                        "bodyText": "No longer needed. Everything related to instance disable is integrated into InstanceValidationUtil.isInstanceEnabled. It's done in a few lines above.",
                        "body": "No longer needed. Everything related to instance disable is integrated into `InstanceValidationUtil.isInstanceEnabled`. It's done in a few lines above.",
                        "startLine": 817,
                        "line": 819,
                        "originalLine": 819,
                        "originalStartLine": 817
                    }
                ],
                "line": 819,
                "startLine": 817,
                "originalLine": 819,
                "originalStartLine": 817,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java",
                "diffSide": "LEFT",
                "startDiffSide": "LEFT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4gXGkT",
                "comments": [
                    {
                        "bodyText": "Why we need to move the logic to the Util?",
                        "body": "Why we need to move the logic to the Util?",
                        "startLine": null,
                        "line": 802,
                        "originalLine": 802,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think it's cleaner to have a unified way to do such check.",
                        "body": "I think it's cleaner to have a unified way to do such check.",
                        "startLine": null,
                        "line": 802,
                        "originalLine": 802,
                        "originalStartLine": null
                    }
                ],
                "line": 802,
                "startLine": 802,
                "originalLine": 802,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4gXGqV",
                "comments": [
                    {
                        "bodyText": "If we remove this logic, we may lose the meaning of using updater.",
                        "body": "If we remove this logic, we may lose the meaning of using updater.",
                        "startLine": 1932,
                        "line": 1934,
                        "originalLine": 1934,
                        "originalStartLine": 1932
                    },
                    {
                        "bodyText": "Could you clarify? I don't think any logic is removed from here.",
                        "body": "Could you clarify? I don't think any logic is removed from here.",
                        "startLine": 1932,
                        "line": 1934,
                        "originalLine": 1934,
                        "originalStartLine": 1932
                    },
                    {
                        "bodyText": "Sorry. I think I looked at wrong line. But what if getDisabledInstances() is null. Will this cause any exception for that?",
                        "body": "Sorry. I think I looked at wrong line. But what if getDisabledInstances() is null. Will this cause any exception for that?",
                        "startLine": 1932,
                        "line": 1934,
                        "originalLine": 1934,
                        "originalStartLine": 1932
                    },
                    {
                        "bodyText": "It's properly handled, see https://github.com/apache/helix/pull/2032/files#diff-8af2a416d09c30beedc9f110edd51472c0331df5c3c46225fdd3901b3cdf6f5e, it's changed to non-null.",
                        "body": "It's properly handled, see https://github.com/apache/helix/pull/2032/files#diff-8af2a416d09c30beedc9f110edd51472c0331df5c3c46225fdd3901b3cdf6f5e, it's changed to non-null.",
                        "startLine": 1932,
                        "line": 1934,
                        "originalLine": 1934,
                        "originalStartLine": 1932
                    }
                ],
                "line": 1934,
                "startLine": 1932,
                "originalLine": 1934,
                "originalStartLine": 1932,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java",
                "diffSide": "LEFT",
                "startDiffSide": "LEFT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4gXOVy",
                "comments": [
                    {
                        "bodyText": "We could use clusterConfig.getInstanceHelixDisabledTimeStamp() ?",
                        "body": "We could use clusterConfig.getInstanceHelixDisabledTimeStamp() ?",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 144,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Could you please elaborate? What specifically are you proposing to change?",
                        "body": "Could you please elaborate? What specifically are you proposing to change?",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 144,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Here we read from clusterConfig to get getDisabledInstances and parse target instance's disabled info to get timestamp.\nThere is a getter in clusterConfig to get disabled time (getInstanceHelixDisabledTimeStamp). We could use that directly.",
                        "body": "Here we read from clusterConfig to get getDisabledInstances and parse target instance's disabled info to get timestamp. \r\nThere is a getter in clusterConfig to get disabled time (getInstanceHelixDisabledTimeStamp). We could use that directly. ",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 144,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks, updated",
                        "body": "Thanks, updated",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 144,
                        "originalStartLine": null
                    }
                ],
                "line": 143,
                "startLine": 143,
                "originalLine": 144,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/util/DelayedRebalanceUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "qqu0127",
            "xyuanlu",
            "junkaixue",
            "narendly"
        ],
        "tdv": -15.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n#2022\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nCleanup the usage in checking instance enable/disable using InstanceValidationUtil\n\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 59.725 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-view-aggregator ---\n[INFO] Loading execution data file /home/qqu/workspace/qqu-helix/helix-view-aggregator/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: View Aggregator' with 15 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for Apache Helix 1.0.3-SNAPSHOT:\n[INFO]\n[INFO] Apache Helix ....................................... SUCCESS [  1.235 s]\n[INFO] Apache Helix :: Metrics Common ..................... SUCCESS [  4.014 s]\n[INFO] Apache Helix :: Metadata Store Directory Common .... SUCCESS [ 14.624 s]\n[INFO] Apache Helix :: ZooKeeper API ...................... SUCCESS [02:28 min]\n[INFO] Apache Helix :: Helix Common ....................... SUCCESS [  2.168 s]\n[INFO] Apache Helix :: Core ............................... SUCCESS [  01:47 h]\n[INFO] Apache Helix :: Admin Webapp ....................... SUCCESS [  0.932 s]\n[INFO] Apache Helix :: Restful Interface .................. SUCCESS [02:49 min]\n[INFO] Apache Helix :: Distributed Lock ................... SUCCESS [ 56.694 s]\n[INFO] Apache Helix :: HelixAgent ......................... SUCCESS [  0.556 s]\n[INFO] Apache Helix :: Recipes ............................ SUCCESS [  0.015 s]\n[INFO] Apache Helix :: Recipes :: Rabbitmq Consumer Group . SUCCESS [  1.859 s]\n[INFO] Apache Helix :: Recipes :: Rsync Replicated File Store SUCCESS [  2.003 s]\n[INFO] Apache Helix :: Recipes :: distributed lock manager  SUCCESS [  1.975 s]\n[INFO] Apache Helix :: Recipes :: distributed task execution SUCCESS [  1.756 s]\n[INFO] Apache Helix :: Recipes :: service discovery ....... SUCCESS [  1.842 s]\n[INFO] Apache Helix :: View Aggregator .................... SUCCESS [01:01 min]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:55 h\n[INFO] Finished at: 2022-04-11T17:25:03-07:00\n[INFO] ------------------------------------------------------------------------\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3479,
        "title": {
            "body": "TabletGroupWatcher update to handle servers being shutdown",
            "bodyHTML": "TabletGroupWatcher update to handle servers being shutdown"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5efCj0",
                "body": "> The change updates TabletGroupWatcher to remove servers being shutdown from being sent as candidates for assignment. There was previous logic (e.g. v1.10) that filtered the servers being shutdown from being included in the candidate list.\r\n\r\n@dtspence Can you please point out where that filtering was occurring? I'm trying to find where the change occurred, to evaluate if there was any intention behind that change, or if it was an accident. Because it's weird that the other current tservers list would now be completely unused and unneeded... it seems like it would have been put there for a reason. Do you know if the change occured in TabletGroupWatcher, or some calling code? Was it broken by #1761?",
                "bodyText": "The change updates TabletGroupWatcher to remove servers being shutdown from being sent as candidates for assignment. There was previous logic (e.g. v1.10) that filtered the servers being shutdown from being included in the candidate list.\n\n@dtspence Can you please point out where that filtering was occurring? I'm trying to find where the change occurred, to evaluate if there was any intention behind that change, or if it was an accident. Because it's weird that the other current tservers list would now be completely unused and unneeded... it seems like it would have been put there for a reason. Do you know if the change occured in TabletGroupWatcher, or some calling code? Was it broken by #1761?",
                "createdAt": "2023-06-09T22:31:15Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5efH6d",
                "body": "\r\n> @dtspence Can you please point out where that filtering was occurring? I'm trying to find where the change occurred, to evaluate if there was any intention behind that change, or if it was an accident. Because it's weird that the other current tservers list would now be completely unused and unneeded... it seems like it would have been put there for a reason. Do you know if the change occured in TabletGroupWatcher, or some calling code? Was it broken by #1761?\r\n\r\n@ctubbsii - the relevant information is in links in this comment: https://github.com/apache/accumulo/issues/3368#issuecomment-1571292545. It looks like in 1.10 there were separate sets being used, and then they were consolidated into TabletLists (likely in #1761). It's kind of hard to tell from the diff if that was the cause. It was easier for me to track it down using the links to the code in the referenced comment.",
                "bodyText": "@dtspence Can you please point out where that filtering was occurring? I'm trying to find where the change occurred, to evaluate if there was any intention behind that change, or if it was an accident. Because it's weird that the other current tservers list would now be completely unused and unneeded... it seems like it would have been put there for a reason. Do you know if the change occured in TabletGroupWatcher, or some calling code? Was it broken by #1761?\n\n@ctubbsii - the relevant information is in links in this comment: #3368 (comment). It looks like in 1.10 there were separate sets being used, and then they were consolidated into TabletLists (likely in #1761). It's kind of hard to tell from the diff if that was the cause. It was easier for me to track it down using the links to the code in the referenced comment.",
                "createdAt": "2023-06-09T22:53:11Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5efIf1",
                "body": "@ctubbsii - Specifically `destinations` is passed to `flushChanges` at https://github.com/apache/accumulo/blob/1.10/server/master/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java#LL214C26-L214C38, not the current set of tservers.",
                "bodyText": "@ctubbsii - Specifically destinations is passed to flushChanges at https://github.com/apache/accumulo/blob/1.10/server/master/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java#LL214C26-L214C38, not the current set of tservers.",
                "createdAt": "2023-06-09T22:56:44Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5efJuX",
                "body": "> @ctubbsii - Specifically `destinations` is passed to `flushChanges` at https://github.com/apache/accumulo/blob/1.10/server/master/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java#LL214C26-L214C38, not the current set of tservers.\r\n\r\nOkay, I got it now. It looks like the mistake was in the change to `flushChanges` in #1761. The parameter name was `currentTServers`, but it was passed `destinations`. But, outside that method, there was a `currentTServers` in the `run` method. It looks like the parameter name for `flushChanges` got misunderstood to be the same as the `currentTServers` variable, when it never actually was... it was always `destinations` by the wrong name.\r\n\r\nOkay, after reviewing the details, I'm confident this fixes the issue in 2.1.0. However, I'd like to keep the original `destinations` name, rather than rename the variable. It just makes the already complicated code history easier to follow when we're not arbitrarily changing variable names alongside the substantive changes. And, in this case, I don't think adding \"valid\" to the variable name makes it more clear.",
                "bodyText": "@ctubbsii - Specifically destinations is passed to flushChanges at https://github.com/apache/accumulo/blob/1.10/server/master/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java#LL214C26-L214C38, not the current set of tservers.\n\nOkay, I got it now. It looks like the mistake was in the change to flushChanges in #1761. The parameter name was currentTServers, but it was passed destinations. But, outside that method, there was a currentTServers in the run method. It looks like the parameter name for flushChanges got misunderstood to be the same as the currentTServers variable, when it never actually was... it was always destinations by the wrong name.\nOkay, after reviewing the details, I'm confident this fixes the issue in 2.1.0. However, I'd like to keep the original destinations name, rather than rename the variable. It just makes the already complicated code history easier to follow when we're not arbitrarily changing variable names alongside the substantive changes. And, in this case, I don't think adding \"valid\" to the variable name makes it more clear.",
                "createdAt": "2023-06-09T23:04:20Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5efKNN",
                "body": "I'm fine with that. However, I'm about to log off until at least Sunday. Not sure if @dtspence will get to it over the weekend. You may have to make the change yourself and merge if you not done before you start an RC.",
                "bodyText": "I'm fine with that. However, I'm about to log off until at least Sunday. Not sure if @dtspence will get to it over the weekend. You may have to make the change yourself and merge if you not done before you start an RC.",
                "createdAt": "2023-06-09T23:06:45Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5efPAR",
                "body": "Will merge as-is. There's an outstanding question above about logging. If people care about that and want to add the message back in, it can be done as a follow-up PR.",
                "bodyText": "Will merge as-is. There's an outstanding question above about logging. If people care about that and want to add the message back in, it can be done as a follow-up PR.",
                "createdAt": "2023-06-09T23:27:10Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5efTsL",
                "body": "Oops, this was targeting the main branch, instead of 2.1. I'll cherry-pick back to 2.1.",
                "bodyText": "Oops, this was targeting the main branch, instead of 2.1. I'll cherry-pick back to 2.1.",
                "createdAt": "2023-06-09T23:32:24Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5efX_U",
                "body": "Cherry-picked back in 8cb090ab88022af883c3b656f92295bf93da55c1",
                "bodyText": "Cherry-picked back in 8cb090a",
                "createdAt": "2023-06-09T23:42:20Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 11,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4urH9o",
                "comments": [
                    {
                        "bodyText": "@ivakegg @cshannon - you both recently added/touched the code block above that is being removed. It prints a warning in the log if the tablet is not assigned to it's last location. In the cases where the TabletServer is down, or maybe even in a rebalance, then this will spam the log for every tablet that was assigned to it. Is that desired?",
                        "body": "@ivakegg @cshannon - you both recently added/touched the code block above that is being removed. It prints a warning in the log if the tablet is not assigned to it's last location. In the cases where the TabletServer is down, or maybe even in a rebalance, then this will spam the log for every tablet that was assigned to it. Is that desired?",
                        "startLine": null,
                        "line": 931,
                        "originalLine": 931,
                        "originalStartLine": null
                    }
                ],
                "line": 931,
                "startLine": 931,
                "originalLine": 931,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4urf-m",
                "comments": [
                    {
                        "bodyText": "This is a pre-existing problem, not something introduced in this PR.  It could be fixed in this PR, but does not have to be.  I noticed that serversToShutdown is a syncronized set and the removeAll method may iterator over it.  The following is how the Collections javadoc recommend iterating over synchronized sets.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  destinationsMod.keySet().removeAll(m.serversToShutdown);\n          \n          \n            \n                  synchronized(m.serversToShutdown) {\n          \n          \n            \n                    destinationsMod.keySet().removeAll(m.serversToShutdown);\n          \n          \n            \n                  }\n          \n      \n    \n    \n  \n\nEDIT from @ctubbsii to fix formatting, so this won't break formatting if merged.",
                        "body": "This is a pre-existing problem, not something introduced in this PR.  It could be fixed in this PR, but does not have to be.  I noticed that serversToShutdown is a syncronized set and the removeAll method may iterator over it.  The following is how the Collections javadoc recommend iterating over synchronized sets.\r\n\r\n```suggestion\r\n      synchronized(m.serversToShutdown) {\r\n        destinationsMod.keySet().removeAll(m.serversToShutdown);\r\n      }\r\n```\r\nEDIT from @ctubbsii to fix formatting, so this won't break formatting if merged.",
                        "startLine": null,
                        "line": 157,
                        "originalLine": 157,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This isn't necessary. Only calls to .iterator(), .spliterator(), .stream(), and .parallelStream() methods need to be manually synchronized, because these operations are not closed over the operation (not sure I'm using the terminology correctly, but hopefully you know what I'm getting at). .removeAll() is explicitly synchronized on the internal mutex in the synchronized set, while it waits for .removeAll() to complete on the wrapped HashSet. Additionally, this wouldn't even work, because the collection is not synchronized on this, but on a private this.mutex instead inside SynchronizedCollection.",
                        "body": "This isn't necessary. Only calls to `.iterator()`, `.spliterator()`, `.stream()`, and `.parallelStream()` methods need to be manually synchronized, because these operations are not closed over the operation (not sure I'm using the terminology correctly, but hopefully you know what I'm getting at). `.removeAll()` is explicitly synchronized on the internal mutex in the synchronized set, while it waits for `.removeAll()` to complete on the wrapped `HashSet`. Additionally, this wouldn't even work, because the collection is not synchronized on `this`, but on a private `this.mutex` instead inside `SynchronizedCollection`.",
                        "startLine": null,
                        "line": 157,
                        "originalLine": 157,
                        "originalStartLine": null
                    }
                ],
                "line": 157,
                "startLine": 157,
                "originalLine": 157,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dtspence",
            "ctubbsii",
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "The change updates TabletGroupWatcher to remove servers being shutdown from being sent as candidates for assignment. There was previous logic (e.g. v1.10) that filtered the servers being shutdown from being included in the candidate list.\nVerified that on t-server shutdown the tablets are unloaded and assigned to a different host (with HostRegexTableLoadBalancer).\n# Configured system with sample tablets; and 5 t-servers:\n# Shutdown one t-server:\n$> bin/accumulo admin stop localhost:9997\n\n# Manager logs report unload and t-server being shutdown is not in candidate list:\n...\n[manager.EventCoordinator] INFO : tablet 1;20230601_1728;20230601_1727 was unloaded from localhost:9997\n...\n[balancer.HostRegexTableLoadBalancer] DEBUG: Sending 40 tablets to balancer for table test_1 for assignment \n  within tservers [localhost:10000[10001cc843d0007], localhost:10003[10001cc843d000a],\n  localhost:10004[10001cc843d000b], localhost:10005[10001cc843d000c]]\n\nCloses #3368"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2896,
        "title": {
            "body": "ScanServerSelector - Break nested interfaces into their own files",
            "bodyHTML": "ScanServerSelector - Break nested interfaces into their own files"
        },
        "comments": [],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4khgdF",
                "comments": [
                    {
                        "bodyText": "I think its nice to keep InitParameters as a nested interface for the following reasons.\n\nIts nice to have the method parameters in the file right above the only method that it goes with.  There is a 1:1 relationship between the method and the parameter interface, will not use the same interface for multiple methods.\nThe interface name can be shorter when its nested (ScanServerSelectorInitParameters vs InitParameters)\nThe pattern is consistent with other SPI interfaces that have parameter interfaces.",
                        "body": "I think its nice to keep InitParameters as a nested interface for the following reasons.\r\n\r\n * Its nice to have the method parameters in the file right above the only method that it goes with.  There is a 1:1 relationship between the method and the parameter interface, will not use the same interface for multiple methods.\r\n * The interface name can be shorter when its nested (`ScanServerSelectorInitParameters` vs `InitParameters`)\r\n * The pattern is consistent with other SPI interfaces that have parameter interfaces.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Moved the parameters back to nested interfaces in 3d850ae",
                        "body": "Moved the parameters back to nested interfaces in 3d850ae",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 45,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/scan/ScanServerSelector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4khoDk",
                "comments": [
                    {
                        "bodyText": "In addition to the init parameters, I think it would a be nice to keep the parameters interface for this method nested.\nUnrelated to the PR, but looking at this after not having looked at it for a while I think this method needs a different name.  Maybe something like selectServers instead of determineActions and the return type could be named ScanServerSelections.",
                        "body": "In addition to the init parameters, I think it would a be nice to keep the parameters interface for this method nested.\r\n\r\nUnrelated to the PR, but looking at this after not having looked at it for a while I think this method needs a different name.  Maybe something like `selectServers` instead of `determineActions` and the return type could be named `ScanServerSelections`.\r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'll put the init parameters and other parameters back into a nested interface. Do you think that your rename suggestion could be done in this PR as well or should that be done in its own PR?",
                        "body": "I'll put the init parameters and other parameters back into a nested interface. Do you think that your rename suggestion could be done in this PR as well or should that be done in its own PR?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Do you think that your rename suggestion could be done in this PR as well or should that be done in its own PR?\n\nSeems fine as long as it does not slow down achieving the original intent.",
                        "body": "> Do you think that your rename suggestion could be done in this PR as well or should that be done in its own PR?\r\n\r\nSeems fine as long as it does not slow down achieving the original intent.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Moved the parameters back to nested interfaces in 3d850ae",
                        "body": "Moved the parameters back to nested interfaces in 3d850ae",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think this method needs a different name. Maybe something like selectServers instead of determineActions and the return type could be named ScanServerSelections.\n\nAddressed in e187cd5",
                        "body": "> I think this method needs a different name. Maybe something like `selectServers` instead of `determineActions` and the return type could be named `ScanServerSelections`.\r\n\r\nAddressed in e187cd5",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 57,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/scan/ScanServerSelector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4kkkwZ",
                "comments": [
                    {
                        "bodyText": "This could be shortened a bit w/o losing much.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            public interface ScanServerScanAttempt {\n          \n          \n            \n            public interface ScanServerAttempt {",
                        "body": "This could be shortened a bit w/o losing much.\r\n\r\n```suggestion\r\npublic interface ScanServerAttempt {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 27,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "addressed in aaab660",
                        "body": "addressed in aaab660",
                        "startLine": null,
                        "line": null,
                        "originalLine": 27,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 27,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/scan/ScanServerScanAttempt.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "DomGarguilo",
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 20.0,
        "description": {
            "bodyText": "Fixes #2855\nThis PR follows the suggestion outlined in #2855 to break the nested interfaces in ScanServerSelector into their own files."
        }
    },
    {
        "repo": "httpcomponents-client",
        "pr_number": 372,
        "title": {
            "body": "ResponseEntityProxy.writeTo(null) leaves connections in the correct state",
            "bodyHTML": "ResponseEntityProxy.writeTo(null) leaves connections in the correct state"
        },
        "comments": [],
        "total_comments_count": 1,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmQs4iKZY3",
                "comments": [
                    {
                        "bodyText": "The simpler alternative here is to always delegate to the wrapped entity via super.writeTo(outStream). The abstract implementation will throw a NPE on a null outStream value, which is reasonable, however it would be a behavior change. I'm happy to commit either approach, but opted for the least invasive for users initially.",
                        "body": "The simpler alternative here is to always delegate to the wrapped entity via `super.writeTo(outStream)`. The abstract implementation will throw a NPE on a null outStream value, which is reasonable, however it would be a behavior change. I'm happy to commit either approach, but opted for the least invasive for users initially.",
                        "startLine": null,
                        "line": 97,
                        "originalLine": 97,
                        "originalStartLine": null
                    }
                ],
                "line": 97,
                "startLine": 97,
                "originalLine": 97,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "httpclient5/src/main/java/org/apache/hc/client5/http/impl/classic/ResponseEntityProxy.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "carterkozak",
            "ok2c"
        ],
        "tdv": 5.0,
        "description": {
            "bodyText": "Previously writeTo would conditionally delegate to the wrapped\nentity if the provided outputstream was non-null, however in the\nnull case the entity would not be drained and the connection would\nbe released potentially with bytes remaining. If this occurs in\npractice, it may result in timeouts as the server expects to write\ndata to the response while the client is attempting to send a\nrequest.\nI haven't seen this create issues in practice, but I noticed the\noddity while working on #371."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4282,
        "title": {
            "body": "FateIT Repo Error Test",
            "bodyHTML": "FateIT Repo Error Test"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM50sQYd",
                "body": "- Removed `SUBMITTED` check in the new test `testRepoFails` (not needed - \r\n  tested elsewhere)\r\n- Changed tests `testTransactionStatus` and `testCancelWhileInCall` to start\r\n  the transaction runners after the `SUBMITTED` check (the race condition\r\nexisted in these tests too)\r\n- Resolved race condition on checking the `FAILED` state of the\r\n  transaction in `testRepoFails`",
                "bodyText": "Removed SUBMITTED check in the new test testRepoFails (not needed -\ntested elsewhere)\nChanged tests testTransactionStatus and testCancelWhileInCall to start\nthe transaction runners after the SUBMITTED check (the race condition\nexisted in these tests too)\nResolved race condition on checking the FAILED state of the\ntransaction in testRepoFails",
                "createdAt": "2024-02-21T19:31:06Z",
                "author": "kevinrr888"
            }
        ],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM45B82g",
                "comments": [
                    {
                        "bodyText": "There is a race condition with this check, if a sleep is added and the test run will probably see it.  The status could change from SUBMITTED at any time as background fate threads start working on the seeded transaction.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  assertEquals(SUBMITTED, getTxStatus(zk, txid));\n          \n          \n            \n                 Thread.sleep(1000);\n          \n          \n            \n                  assertEquals(SUBMITTED, getTxStatus(zk, txid));",
                        "body": "There is a race condition with this check, if a sleep is added and the test run will probably see it.  The status could change from SUBMITTED at any time as background fate threads start working on the seeded transaction.\r\n\r\n```suggestion\r\n     Thread.sleep(1000);\r\n      assertEquals(SUBMITTED, getTxStatus(zk, txid));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 485,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 485,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/fate/zookeeper/FateIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM45B9aH",
                "comments": [
                    {
                        "bodyText": "There is a race condition with this check, could do the following which should not have a race condition and utilizes and verifies more of the Fate API.  To do the following would need to disable auto cleanup, will make another comment about that.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  assertEquals(FAILED_IN_PROGRESS, getTxStatus(zk, txid));\n          \n          \n            \n                  assertEquals(FAILED, fate.waitForCompletion(txid));\n          \n          \n            \n                  assertTrue(fate.getException(txid).getMessage().contains(\"isReady() failed\"));",
                        "body": "There is a race condition with this check, could do the following which should not have a race condition and utilizes and verifies more of the Fate API.  To do the following would need to disable auto cleanup, will make another comment about that.\r\n\r\n```suggestion\r\n      assertEquals(FAILED, fate.waitForCompletion(txid));\r\n      assertTrue(fate.getException(txid).getMessage().contains(\"isReady() failed\"));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 489,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 489,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/fate/zookeeper/FateIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM45B9yv",
                "comments": [
                    {
                        "bodyText": "Disabling auto cleanup makes waitForCompletion suggestion in another comment work.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                      new TestOperationFails(1, ExceptionLocation.IS_READY), true, \"Test Op Fails\");\n          \n          \n            \n                      new TestOperationFails(1, ExceptionLocation.IS_READY), false, \"Test Op Fails\");",
                        "body": "Disabling auto cleanup makes waitForCompletion suggestion in another comment work.\r\n\r\n```suggestion\r\n          new TestOperationFails(1, ExceptionLocation.IS_READY), false, \"Test Op Fails\");\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 484,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 484,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/fate/zookeeper/FateIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM45B96s",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  assertEquals(FAILED_IN_PROGRESS, getTxStatus(zk, txid));\n          \n          \n            \n                  assertEquals(FAILED, fate.waitForCompletion(txid));\n          \n          \n            \n                  assertTrue(fate.getException(txid).getMessage().contains(\"call() failed\"));",
                        "body": "```suggestion\r\n      assertEquals(FAILED, fate.waitForCompletion(txid));\r\n      assertTrue(fate.getException(txid).getMessage().contains(\"call() failed\"));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 475,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 475,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/fate/zookeeper/FateIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kevinrr888",
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 105.0,
        "description": {
            "bodyText": "Closes #4266\nThis adds a test testRepoFails() to FateIT in 2.1 which ensures undo() is called and in the expected order when an error occurs in a Repo's call() or isReady() methods."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3141,
        "title": {
            "body": "Add id info to config check utility",
            "bodyHTML": "Add id info to config check utility"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5RueJ6",
                "body": "A question before merging - When passing the ID, if it is not namespace or table, then I pass null and assume that means system config for the log statement.  General question is that correct or would something other than system be better displayed in the log statement. ",
                "bodyText": "A question before merging - When passing the ID, if it is not namespace or table, then I pass null and assume that means system config for the log statement.  General question is that correct or would something other than system be better displayed in the log statement.",
                "createdAt": "2023-01-04T16:19:17Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5RvVp0",
                "body": "So, given the levels of configuration (default, system, site, namespace, table), the default configuration can't be invalid. Is there a way to differentiate between the system and site configs?\r\n\r\nEdit: Looking at the code, you might need to call ConfigCheckUtil.validate in the SystemConfiguration constructor passing in `getSnapshot()`.",
                "bodyText": "So, given the levels of configuration (default, system, site, namespace, table), the default configuration can't be invalid. Is there a way to differentiate between the system and site configs?\nEdit: Looking at the code, you might need to call ConfigCheckUtil.validate in the SystemConfiguration constructor passing in getSnapshot().",
                "createdAt": "2023-01-04T20:04:58Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5RvYYr",
                "body": "`So, given the levels of configuration (default, system, site, namespace, table)`\r\n\r\nI don't think so without major changes (and maybe not then) - but in this context I think that site, namespace and table are the only ones that matter - that is, they are the only ones users can control.  Default and system are our responsibility and need to be correct in the code - this change is to log the id's so that users can see where BAD CONFIG errors are occurring.",
                "bodyText": "So, given the levels of configuration (default, system, site, namespace, table)\nI don't think so without major changes (and maybe not then) - but in this context I think that site, namespace and table are the only ones that matter - that is, they are the only ones users can control.  Default and system are our responsibility and need to be correct in the code - this change is to log the id's so that users can see where BAD CONFIG errors are occurring.",
                "createdAt": "2023-01-04T20:16:30Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5RvZP2",
                "body": "The code could be modified to pass a string instead of Id to allow more flexibility,",
                "bodyText": "The code could be modified to pass a string instead of Id to allow more flexibility,",
                "createdAt": "2023-01-04T20:20:15Z",
                "author": "EdColeman"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4olg8d",
                "comments": [
                    {
                        "bodyText": "Since these are strings, I think I would have preferred something like:\nConfigCheckUtil.validate(conf, \"Namespace id: \" + namespaceId);\nSo we know it's a namespace and not a table ID. Same with the table IDs.",
                        "body": "Since these are strings, I think I would have preferred something like:\r\n\r\n```java\r\nConfigCheckUtil.validate(conf, \"Namespace id: \" + namespaceId);\r\n```\r\n\r\nSo we know it's a namespace and not a table ID. Same with the table IDs.",
                        "startLine": null,
                        "line": 132,
                        "originalLine": 132,
                        "originalStartLine": null
                    }
                ],
                "line": 132,
                "startLine": 132,
                "originalLine": 132,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/ServerConfigurationFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "dlmarion",
            "ctubbsii",
            "Manno15"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "The ConfigCheckUtil.validate function logs  issues with properties, but does not include an id to help  find where the issue is occurring.  This PR adds the namespace or table id - or if an id is not provided, it assumes the property is from the site configuration.\nThis was noticed after upgrading a 2.1 instance with replication configured. PR #3137 is independent of these changes, but this PR does provide additional information once upgrades are possible with PR #3137\nBefore the changes, the logs looks like:\n2022-12-27T17:55:57,477 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name)\n2022-12-27T17:55:57,477 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.password.peer1)\n2022-12-27T17:55:57,477 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.peer1)\n2022-12-27T17:55:57,477 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.user.peer1)\n2022-12-27T17:55:57,485 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name)\n2022-12-27T17:55:57,485 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.password.peer1)\n2022-12-27T17:55:57,485 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.peer1)\n2022-12-27T17:55:57,485 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.user.peer1)\n\n\nWith these changes:\n2022-12-27T22:15:30,945 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name) for site\n\n2022-12-27T18:49:40,286 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name) for +accumulo\n2022-12-27T18:49:40,286 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.password.peer1) for +accumulo\n2022-12-27T18:49:40,286 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.peer1) for +accumulo\n2022-12-27T18:49:40,286 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.user.peer1) for +accumulo\n2022-12-27T18:49:40,293 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.name) for +r\n2022-12-27T18:49:40,293 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.password.peer1) for +r\n2022-12-27T18:49:40,293 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.peer1) for +r\n2022-12-27T18:49:40,293 [conf.ConfigCheckUtil] WARN : BAD CONFIG unrecognized property key (replication.peer.user.peer1) for +r\n2022-12-27T18:49:40,299 [balancer.TableLoadBalancer] INFO : Loaded class org.apache.accumulo.core.spi.balancer.SimpleLoadBalancer for table +r"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2549,
        "title": {
            "body": "Migrate Minicluster module to JUnit5",
            "bodyHTML": "Migrate Minicluster module to JUnit5"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM4_Xrra",
                "body": "LGTM. I have verified all tests pass.",
                "bodyText": "LGTM. I have verified all tests pass.",
                "createdAt": "2022-03-09T17:24:48Z",
                "author": "DomGarguilo"
            }
        ],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4fUP89",
                "comments": [
                    {
                        "bodyText": "versions should be managed in the pom.xml at the root in the dependencyManagement section",
                        "body": "versions should be managed in the pom.xml at the root in the dependencyManagement section",
                        "startLine": null,
                        "line": null,
                        "originalLine": 129,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 129,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/pom.xml",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4fUQUk",
                "comments": [
                    {
                        "bodyText": "For less confusion, this should be in a package corresponding to the module it is contained in.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            package org.apache.accumulo;\n          \n          \n            \n            package org.apache.accumulo.minicluster;",
                        "body": "For less confusion, this should be in a package corresponding to the module it is contained in.\r\n\r\n```suggestion\r\npackage org.apache.accumulo.minicluster;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 19,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 19,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/test/java/org/apache/accumulo/WithTestNames.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4fUQfu",
                "comments": [
                    {
                        "bodyText": "This comment applies throughout this module. We only used millis because we had to. They should all be seconds now that we don't need to use millis.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              @Timeout(value = 30000, unit = TimeUnit.MILLISECONDS)\n          \n          \n            \n              @Timeout(value = 30, unit = TimeUnit.SECONDS)",
                        "body": "This comment applies throughout this module. We only used millis because we had to. They should all be seconds now that we don't need to use millis.\r\n\r\n```suggestion\r\n  @Timeout(value = 30, unit = TimeUnit.SECONDS)\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 104,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 104,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/test/java/org/apache/accumulo/minicluster/MiniAccumuloClusterTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4fUQ5F",
                "comments": [
                    {
                        "bodyText": "Could static import requireNonNull and drop this. to make this one line and more readable.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                FileUtils.copyURLToFile(Objects.requireNonNull(this.getClass().getResource(\"/FooFilter.jar\")),\n          \n          \n            \n                    jarFile);\n          \n          \n            \n                FileUtils.copyURLToFile(requireNonNull(getClass().getResource(\"/FooFilter.jar\")), jarFile);",
                        "body": "Could static import `requireNonNull` and drop `this.` to make this one line and more readable.\r\n```suggestion\r\n    FileUtils.copyURLToFile(requireNonNull(getClass().getResource(\"/FooFilter.jar\")), jarFile);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 189,
                        "originalStartLine": 188
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 189,
                "originalStartLine": 188,
                "subjectType": "LINE",
                "path": "minicluster/src/test/java/org/apache/accumulo/minicluster/MiniAccumuloClusterTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4fUQ5V",
                "comments": [
                    {
                        "bodyText": "Vintage engine should be able to be removed once all tests are converted to JUnit5.",
                        "body": "Vintage engine should be able to be removed once all tests are converted to JUnit5.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 153,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Looks like the vintage engine dependency was commented out instead of removed, possibly by accident.",
                        "body": "Looks like the vintage engine dependency was commented out instead of removed, possibly by accident.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 153,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 153,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/pom.xml",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4fURQA",
                "comments": [
                    {
                        "bodyText": "Can remove commented out code.\nInstead of \"folder1\", can use testName()",
                        "body": "Can remove commented out code.\r\n\r\nInstead of \"folder1\", can use `testName()`",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": 44
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 45,
                "originalStartLine": 44,
                "subjectType": "LINE",
                "path": "minicluster/src/test/java/org/apache/accumulo/miniclusterImpl/CleanShutdownMacTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4fURjH",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                <dependency>\n          \n          \n            \n                  <groupId>org.apache.curator</groupId>\n          \n          \n            \n                  <artifactId>curator-test</artifactId>\n          \n          \n            \n                  <version>5.1.0</version>\n          \n          \n            \n                  <scope>test</scope>\n          \n          \n            \n                </dependency>\n          \n          \n            \n                <dependency>\n          \n          \n            \n                  <groupId>org.apache.curator</groupId>\n          \n          \n            \n                  <artifactId>curator-test</artifactId>\n          \n          \n            \n                  <version>5.1.0</version>\n          \n          \n            \n                  <scope>test</scope>\n          \n          \n            \n                </dependency>\n          \n      \n    \n    \n  \n\nI think this can be removed as a duplicate of the dependency above it.",
                        "body": "```suggestion\r\n    <dependency>\r\n      <groupId>org.apache.curator</groupId>\r\n      <artifactId>curator-test</artifactId>\r\n      <version>5.1.0</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n```\r\nI think this can be removed as a duplicate of the dependency above it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 131,
                        "originalStartLine": 126
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 131,
                "originalStartLine": 126,
                "subjectType": "LINE",
                "path": "minicluster/pom.xml",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "AlbertWhitlock",
            "DomGarguilo",
            "ctubbsii"
        ],
        "tdv": -40.0,
        "description": {
            "bodyText": "Part of issue #2441 This PR contains changes for the conversion from JUnit4 to JUnit5 for the accumulo-minicluster module."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2097,
        "title": {
            "body": "Fix history test inside ShellServerIT",
            "bodyHTML": "Fix history test inside ShellServerIT"
        },
        "comments": [],
        "total_comments_count": 16,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5OTg2MjkyOnYy",
                "comments": [
                    {
                        "bodyText": "There may be an opportunity here to validate that the clean command worked as expected.",
                        "body": "There may be an opportunity here to validate that the clean command worked as expected.",
                        "startLine": null,
                        "line": 1446,
                        "originalLine": 1443,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good idea.",
                        "body": "Good idea. ",
                        "startLine": null,
                        "line": 1446,
                        "originalLine": 1443,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I added a short validity check for the clear command in my latest commit",
                        "body": "I added a short validity check for the clear command in my latest commit",
                        "startLine": null,
                        "line": 1446,
                        "originalLine": 1443,
                        "originalStartLine": null
                    }
                ],
                "line": 1446,
                "startLine": 1446,
                "originalLine": 1443,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5OTkzNTIzOnYy",
                "comments": [
                    {
                        "bodyText": "Does the write to history perform an exec() - previously the test was executing a command, testing the command was successful (via the exec status) and then that appeared in the history - from a quick look I don't see where this performs the exec.  Not that these commands need tested, but is it a valid test of shell history?",
                        "body": "Does the write to history perform an exec() - previously the test was executing a command, testing the command was successful (via the exec status) and then that appeared in the history - from a quick look I don't see where this performs the exec.  Not that these commands need tested, but is it a valid test of shell history?",
                        "startLine": null,
                        "line": 1455,
                        "originalLine": 1445,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "These aren't executed. I felt it was safe to leave it out from an exec call since they aren't part of this test specifically. The exec command fails to write to the history file due how things are set up with the shell. The history file is part of the reader, but the reader isn't involved with the executions since I assume it doesn't interpret it as an input command (Only for this IT, things work normally inside the actual shell). This is why only ts.input would show up in the history file since it was being read.\nFrom a validity standpoint, the exec of the history command does work properly and the contents of the reader's history file gets displayed.",
                        "body": "These aren't executed. I felt it was safe to leave it out from an exec call since they aren't part of this test specifically. The exec command fails to write to the history file due how things are set up with the shell. The history file is part of the reader, but the reader isn't involved with the executions since I assume it doesn't interpret it as an input command (Only for this IT, things work normally inside the actual shell). This is why only `ts.input` would show up in the history file since it was being read. \r\n\r\nFrom a validity standpoint, the exec of the history command does work properly and the contents of the reader's history file gets displayed. ",
                        "startLine": null,
                        "line": 1455,
                        "originalLine": 1445,
                        "originalStartLine": null
                    }
                ],
                "line": 1455,
                "startLine": 1455,
                "originalLine": 1445,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwMDU0MzM5OnYy",
                "comments": [
                    {
                        "bodyText": "This didn't first verify that \"foo\" was present, or that it was removed afterwards:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                ts.exec(\"history -c\", true, \"foo\", false);\n          \n          \n            \n                ts.exec(\"history\", true, \"foo\", true);\n          \n          \n            \n                ts.exec(\"history -c\", true);\n          \n          \n            \n                ts.exec(\"history\", true, \"foo\", false);",
                        "body": "This didn't first verify that \"foo\" was present, or that it was removed afterwards:\r\n\r\n```suggestion\r\n    ts.exec(\"history\", true, \"foo\", true);\r\n    ts.exec(\"history -c\", true);\r\n    ts.exec(\"history\", true, \"foo\", false);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1445,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Fair point, I was assuming the string present would account for the clear command as well and do the check after clearing. Unsure if that is the case but it was failing when I had the stringPresent set to true",
                        "body": "Fair point, I was assuming the string present would account for the clear command as well and do the check after clearing. Unsure if that is the case but it was failing when I had the stringPresent set to true",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1445,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'm pretty sure history -c just clears, and doesn't print anything. So, a check for any string present at all would have been false.",
                        "body": "I'm pretty sure `history -c` just clears, and doesn't print anything. So, a check for any string present at all would have been false.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1445,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1445,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwMDU1Mjc4OnYy",
                "comments": [
                    {
                        "bodyText": "This could verify that the table name and these commands are not present first:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                // write to history file. Does not execute functions\n          \n          \n            \n                ts.writeToHistory(\"createtable \" + table);\n          \n          \n            \n                // write to history file. Does not execute functions\n          \n          \n            \n                ts.exec(\"history\", true, table, false);\n          \n          \n            \n                ts.exec(\"history\", true, \"createtable\", false);\n          \n          \n            \n                ts.exec(\"history\", true, \"deletetable\", false);\n          \n          \n            \n                ts.writeToHistory(\"createtable \" + table);",
                        "body": "This could verify that the table name and these commands are not present first:\r\n\r\n```suggestion\r\n    // write to history file. Does not execute functions\r\n    ts.exec(\"history\", true, table, false);\r\n    ts.exec(\"history\", true, \"createtable\", false);\r\n    ts.exec(\"history\", true, \"deletetable\", false);\r\n    ts.writeToHistory(\"createtable \" + table);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1448,
                        "originalStartLine": 1447
                    },
                    {
                        "bodyText": "If validity check for the clear works correctly, then I am not sure this step is necessary but I don't have anything against being thorough so I will add.",
                        "body": "If validity check for the clear works correctly, then I am not sure this step is necessary but I don't have anything against being thorough so I will add. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1448,
                        "originalStartLine": 1447
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1448,
                "originalStartLine": 1447,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwMDU1ODgzOnYy",
                "comments": [
                    {
                        "bodyText": "This could be more thorough in checking that the createtable and deletetable commands were added:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                ts.exec(\"history\", true, table, true);\n          \n          \n            \n                ts.exec(\"history\", true, \"createtable \" + table, true);\n          \n          \n            \n                ts.exec(\"history\", true, \"deletetable -f \" + table, true);",
                        "body": "This could be more thorough in checking that the createtable and deletetable commands were added:\r\n\r\n```suggestion\r\n    ts.exec(\"history\", true, \"createtable \" + table, true);\r\n    ts.exec(\"history\", true, \"deletetable -f \" + table, true);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1452,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I agree on this point, I should have done that earlier.",
                        "body": "I agree on this point, I should have done that earlier. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1452,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1452,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwMDU3ODU2OnYy",
                "comments": [
                    {
                        "bodyText": "I think this was just a basic test ensuring that exec caused the command to be added to the history. If that doesn't work in the test case, because of the way the test is written, that's fine to remove this, so long as executing commands in the shell still appends to the history.",
                        "body": "I think this was just a basic test ensuring that exec caused the command to be added to the history. If that doesn't work in the test case, because of the way the test is written, that's fine to remove this, so long as executing commands in the shell still appends to the history.",
                        "startLine": 1444,
                        "line": 1445,
                        "originalLine": 1445,
                        "originalStartLine": 1444
                    },
                    {
                        "bodyText": "In a previous iteration, I kept this line but replaced the expected string with \"foo\". That is now being used in the validity check so I removed it here. The rest of what you said is still true and with your additions above, I believe the history command is thoroughly tested.",
                        "body": "In a previous iteration, I kept this line but replaced the expected string with \"foo\". That is now being used in the validity check so I removed it here. The rest of what you said is still true and with your additions above, I believe the history command is thoroughly tested. ",
                        "startLine": 1444,
                        "line": 1445,
                        "originalLine": 1445,
                        "originalStartLine": 1444
                    }
                ],
                "line": 1445,
                "startLine": 1444,
                "originalLine": 1445,
                "originalStartLine": 1444,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java",
                "diffSide": "LEFT",
                "startDiffSide": "LEFT"
            }
        ],
        "participants": [
            "Manno15",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": 28.0,
        "description": {
            "bodyText": "Fixes #2091.\nThe history command was failing due to the executed commands not being written to the history file. This change will write the expected commands to the history file but solely for the history test at this moment since some tests broke with the change."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1541,
        "title": {
            "body": "Replace use of equals() with Object.equals()",
            "bodyHTML": "Replace use of equals() with Object.equals()"
        },
        "comments": [],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTE2NDQ1OnYy",
                "comments": [
                    {
                        "bodyText": "This could be reduced further using AND, something like:\nreturn Objects.equals(tables, diskUsage.tables) && Objects.equals(usage, diskUsage.usage);\nAlso, any thought to replacing hashCode at the same time to use Objects.hash(tables, usage); - that might help with the constraint that equals and hashCode are consistent.",
                        "body": "This could be reduced further using AND, something like:\r\n`return Objects.equals(tables, diskUsage.tables) && Objects.equals(usage, diskUsage.usage);`\r\n\r\nAlso, any thought to replacing hashCode at the same time to use Objects.hash(tables, usage); - that might help with the constraint that equals and hashCode are consistent.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks @EdColeman . Updated to add further simplification and updated hashCode.",
                        "body": "Thanks @EdColeman . Updated to add further simplification and updated hashCode.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think the same thing could apply to the other 2 classes.",
                        "body": "I think the same thing could apply to the other 2 classes.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@EdColeman pushed up changes to the other two classes.",
                        "body": "@EdColeman pushed up changes to the other two classes.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 53,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/DiskUsage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTg3OTkyOnYy",
                "comments": [
                    {
                        "bodyText": "This was changed from instanceof to the use of getClass(), which is not the same. The latter is more narrow. I think it should be changed back to instanceof, although the check for null would be redundant, since instanceof is always false if it's null.",
                        "body": "This was changed from `instanceof` to the use of `getClass()`, which is not the same. The latter is more narrow. I think it should be changed back to `instanceof`, although the check for null would be redundant, since `instanceof` is always false if it's null.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 314,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ctubbsii, I reverted the aforementioned check back to its original form. Thanks.",
                        "body": "@ctubbsii, I reverted the aforementioned check back to its original form. Thanks.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 314,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 314,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/data/Condition.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjc5ODcxOnYy",
                "comments": [
                    {
                        "bodyText": "This could be simplified to:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                if (o == null || !(o instanceof Condition))\n          \n          \n            \n                if (!(o instanceof Condition))",
                        "body": "This could be simplified to:\r\n\r\n```suggestion\r\n    if (!(o instanceof Condition))\r\n```",
                        "startLine": null,
                        "line": 314,
                        "originalLine": 314,
                        "originalStartLine": null
                    }
                ],
                "line": 314,
                "startLine": 314,
                "originalLine": 314,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/data/Condition.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jmark99",
            "keith-turner",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": -2.0,
        "description": {
            "bodyText": "Utilize newer Java language features to simplfy code by using Object.equals() rather than equals()."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1553,
        "title": {
            "body": "Simplify some VolumeManager tooling",
            "bodyHTML": "Simplify some VolumeManager tooling"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDU5NjA3NjgzMA==",
                "body": "This is an incremental enhancement to a bunch of internal code related to VolumeManager.",
                "bodyText": "This is an incremental enhancement to a bunch of internal code related to VolumeManager.",
                "createdAt": "2020-03-07T11:09:26Z",
                "author": "ctubbsii"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDU5NjY4MzE4OQ==",
                "body": "> I had a question about the use of TemporaryFolder class but it looks like the tests are passing in Travis so it must not be an issue.\r\n\r\nYes. All the ITs passed, too.",
                "bodyText": "I had a question about the use of TemporaryFolder class but it looks like the tests are passing in Travis so it must not be an issue.\n\nYes. All the ITs passed, too.",
                "createdAt": "2020-03-09T17:54:14Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 13,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTM3NjE3OnYy",
                "comments": [
                    {
                        "bodyText": "Could use VisibleForTesting annotation.",
                        "body": "Could use VisibleForTesting annotation.",
                        "startLine": null,
                        "line": 104,
                        "originalLine": 104,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't like that annotation, because:\n\nit can create an unnecessary Guava dependency,\nI don't like checking to see if we already have Guava on that module, and\nthe annotation provides no additional value over a comment since there are no tools for which the annotation would matter\n\nThe method name makes it clear. The comment is bonus. An annotation wouldn't do anything other than add an import and possibly a new direct dependency if Guava wasn't already in the pom.",
                        "body": "I don't like that annotation, because:\r\n\r\n1. it can create an unnecessary Guava dependency,\r\n2. I don't like checking to see if we already have Guava on that module, and\r\n3. the annotation provides no additional value over a comment since there are no tools for which the annotation would matter\r\n\r\nThe method name makes it clear. The comment is bonus. An annotation wouldn't do anything other than add an import and possibly a new direct dependency if Guava wasn't already in the pom.",
                        "startLine": null,
                        "line": 104,
                        "originalLine": 104,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This makes me think we should just create our own annotation for VisibleForTesting since its not used for anything else other than a label.",
                        "body": "This makes me think we should just create our own annotation for VisibleForTesting since its not used for anything else other than a label. ",
                        "startLine": null,
                        "line": 104,
                        "originalLine": 104,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Maybe. That would eliminate the issue of bringing in a dependency when not needed, but it still wouldn't matter whether it's an annotation or a comment if we don't have any tooling for verification.",
                        "body": "Maybe. That would eliminate the issue of bringing in a dependency when not needed, but it still wouldn't matter whether it's an annotation or a comment if we don't have any tooling for verification.",
                        "startLine": null,
                        "line": 104,
                        "originalLine": 104,
                        "originalStartLine": null
                    }
                ],
                "line": 104,
                "startLine": 104,
                "originalLine": 104,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTY3MzM4OnYy",
                "comments": [
                    {
                        "bodyText": "Nice replacement.  Could use method reference here too:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                }).map((String opt) -> new Path(opt)).findFirst().orElse(null);\n          \n          \n            \n                }).map(Path::new).findFirst().orElse(null);",
                        "body": "Nice replacement.  Could use method reference here too:\r\n```suggestion\r\n    }).map(Path::new).findFirst().orElse(null);\r\n```",
                        "startLine": null,
                        "line": 356,
                        "originalLine": 356,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I wanted to explicitly use the String version (hence the variable type) to protect against future bugs, because Path has a constructor that takes a URI also, and it behaves differently. Using this instead of the method reference ensures we use the overloaded constructor that takes a String rather than the one that takes a URI.",
                        "body": "I wanted to explicitly use the String version (hence the variable type) to protect against future bugs, because Path has a constructor that takes a URI also, and it behaves differently. Using this instead of the method reference ensures we use the overloaded constructor that takes a String rather than the one that takes a URI.",
                        "startLine": null,
                        "line": 356,
                        "originalLine": 356,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "FWIW, if Path had static factory methods rather than public constructors, this would be easier to enforce using the method reference. (Path::fromString and Path::fromURI instead of Path::new).",
                        "body": "FWIW, if Path had static factory methods rather than public constructors, this would be easier to enforce using the method reference. (`Path::fromString` and `Path::fromURI` instead of `Path::new`).",
                        "startLine": null,
                        "line": 356,
                        "originalLine": 356,
                        "originalStartLine": null
                    }
                ],
                "line": 356,
                "startLine": 356,
                "originalLine": 356,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTg3ODAxOnYy",
                "comments": [
                    {
                        "bodyText": "This is cool.  Won't this delete the entire target directory though? If that is the case then I would imagine this would interfere with the build. Or is it anything that is created under this test that gets removed?  It is not clear from the javadoc.",
                        "body": "This is cool.  Won't this delete the entire target directory though? If that is the case then I would imagine this would interfere with the build. Or is it anything that is created under this test that gets removed?  It is not clear from the javadoc.",
                        "startLine": null,
                        "line": 75,
                        "originalLine": 75,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The argument to the constructor is the parent folder in which the temporary directory is created. This is from the javadoc for TemporaryFolder. When the test completes, the @Rule makes it delete itself, but not the parent directory.",
                        "body": "The argument to the constructor is the parent folder in which the temporary directory is created. This is from the javadoc for TemporaryFolder. When the test completes, the `@Rule` makes it delete itself, but not the parent directory.",
                        "startLine": null,
                        "line": 75,
                        "originalLine": 75,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks.  I missed that the parameter is parentFolder.",
                        "body": "Thanks.  I missed that the parameter is parentFolder.",
                        "startLine": null,
                        "line": 75,
                        "originalLine": 75,
                        "originalStartLine": null
                    }
                ],
                "line": 75,
                "startLine": 75,
                "originalLine": 75,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/log/SortedLogRecoveryTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "milleruntime"
        ],
        "tdv": -145.0,
        "description": {
            "bodyText": "Replace getVolumeByPath(p).getFileSystem() with getFileSystemByPath(p)\n(no caller used getVolumeByPath without immediately calling getFileSystem)\nRemove redundant null checks for path argument by pushing down into\ngetFileSystemByPath method\nRemove unneeded NonConfiguredVolume class and test\nRemove unneeded (and unused) VolumeManager.getContentSummary\nRename create method with overwrite capability to make API more clear\nRetain all exceptions when closing filesystems (as suppressed)\nSimplify/shorten implementations for VolumeManagerImpl methods\nMake VolumeManager AutoCloseable (it already had a close method)\nFix tests (ZooLockTest -> ZooLockIT, and numerous incorrect usages of\nTemporaryFolder)"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1732,
        "title": {
            "body": "Change Workflow monitor and PerInstanceResource monitor from static m‚Ä¶",
            "bodyHTML": "Change Workflow monitor and PerInstanceResource monitor from static m‚Ä¶"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg0MTQzNTA1Nw==",
                "body": "This PR is ready to merge. Approve by @junkaixue and @jiajunwang \r\nFinal commit message:\r\nChange Workflow monitor and PerInstanceResource monitor from static metric to dynamic metric.",
                "bodyText": "This PR is ready to merge. Approve by @junkaixue and @jiajunwang\nFinal commit message:\nChange Workflow monitor and PerInstanceResource monitor from static metric to dynamic metric.",
                "createdAt": "2021-05-14T18:49:54Z",
                "author": "zhangmeng916"
            }
        ],
        "total_comments_count": 19,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NjQyMjUwOnYy",
                "comments": [
                    {
                        "bodyText": "NIT: we can use the same function of incrementSimpleDynamicMetric",
                        "body": "NIT: we can use the same function of incrementSimpleDynamicMetric",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": 89
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 90,
                "originalStartLine": 89,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/WorkflowMonitor.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NjUyNzY1OnYy",
                "comments": [
                    {
                        "bodyText": "Should only throw JMException? And the same question to the other catches.",
                        "body": "Should only throw JMException? And the same question to the other catches.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 713,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 713,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NjUyOTEwOnYy",
                "comments": [
                    {
                        "bodyText": "Better to check null to avoid NPE.",
                        "body": "Better to check null to avoid NPE.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 899,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Unregister already has a null check like this. Should be enough, right?\npublic static void unregister(ObjectName objectName) {\nif (objectName != null && _beanServer.isRegistered(objectName)) {\ntry {\n..................",
                        "body": "Unregister already has a null check like this. Should be enough, right?\r\npublic static void unregister(ObjectName objectName) {\r\n    if (objectName != null && _beanServer.isRegistered(objectName)) {\r\n      try {\r\n..................\r\n       ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 899,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "_perInstanceResourceMonitorMap.get(beanName) could be null. And you are about to not use the unregister(objectName) method that has protection, right?",
                        "body": "_perInstanceResourceMonitorMap.get(beanName) could be null. And you are about to not use the unregister(objectName) method that has protection, right?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 899,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 899,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NjUzNzk1OnYy",
                "comments": [
                    {
                        "bodyText": "Is this method used anywhere? And the return string seems not to be a valid MBean name, which should look like, \"%s,%s=%s,%s=%s\"",
                        "body": "Is this method used anywhere? And the return string seems not to be a valid MBean name, which should look like, \"%s,%s=%s,%s=%s\"",
                        "startLine": null,
                        "line": null,
                        "originalLine": 121,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 121,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/PerInstanceResourceMonitor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NjU1MTU5OnYy",
                "comments": [
                    {
                        "bodyText": "These are just for generating the Object name, since BeanName won't be used in the ClusterStatusMonitor anymore, can we just make it private and change the logic to return a complete ObjectName?",
                        "body": "These are just for generating the Object name, since BeanName won't be used in the ClusterStatusMonitor anymore, can we just make it private and change the logic to return a complete ObjectName?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 161,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't think this comment has been addressed.\nOriginally, the PerInstanceResourceMonitor does not know cluster info. The BeanName object only contains the instance and resource info. So the registration is done in the ClusterStatusMonitor.\nIn this new version, since we encapsulate the register method inside PerInstanceResourceMonitor (since now it is a DynamicMBeanProvider). Based on this, I think there are 2 options,\n\nRemove BeanName class and always let the PerInstanceResourceMonitor initialized with the fully generated ObjectName (which includes the cluster name). For the existing BeanName usages in the ClusterStatusMonitor, we can change to use the ObjectName. The downside of this option is the PerInstanceResourceMonitor needs to understand MonitorDomainNames.ClusterStatus to generate full ObjectName.\nSince every PerInstanceResourceMonitor is generated in the ClusterStatusMonitor, we add a private method in the ClusterStatusMonitor to generate full ObjectName of the PerInstanceResourceMonitor when constructing it. And PerInstanceResourceMonitor does not need to know about the domain names etc. For example, we are now doing this design for InstanceMonitor. In this case, BeanName can also be removed since it is duplicated with the ObjectName parameter.\n\nPlease consider picking up either one of these 2 designs. The current implementation is a mix-up and the MBean name generating logic has duplicated code. It might introduce bugs if we change in one side (BeanName), but forget to change the other side (getObjectName).",
                        "body": "I don't think this comment has been addressed.\r\nOriginally, the PerInstanceResourceMonitor does not know cluster info. The BeanName object only contains the instance and resource info. So the registration is done in the ClusterStatusMonitor.\r\nIn this new version, since we encapsulate the register method inside PerInstanceResourceMonitor (since now it is a DynamicMBeanProvider). Based on this, I think there are 2 options,\r\n\r\n1. Remove BeanName class and always let the PerInstanceResourceMonitor initialized with the fully generated ObjectName (which includes the cluster name). For the existing BeanName usages in the ClusterStatusMonitor, we can change to use the ObjectName. The downside of this option is the PerInstanceResourceMonitor needs to understand MonitorDomainNames.ClusterStatus to generate full ObjectName.\r\n2. Since every PerInstanceResourceMonitor is generated in the ClusterStatusMonitor, we add a private method in the ClusterStatusMonitor to generate full ObjectName of the PerInstanceResourceMonitor when constructing it. And PerInstanceResourceMonitor does not need to know about the domain names etc. For example, we are now doing this design for InstanceMonitor. In this case, BeanName can also be removed since it is duplicated with the ObjectName parameter.\r\n\r\nPlease consider picking up either one of these 2 designs. The current implementation is a mix-up and the MBean name generating logic has duplicated code. It might introduce bugs if we change in one side (BeanName), but forget to change the other side (getObjectName).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 161,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Discussed offline. We will have everything inside BeanName structure, and deprecate other related get bean name functions to concentrate all logic.",
                        "body": "Discussed offline. We will have everything inside BeanName structure, and deprecate other related get bean name functions to concentrate all logic.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 161,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 161,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/PerInstanceResourceMonitor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NjU1NjMyOnYy",
                "comments": [
                    {
                        "bodyText": "I think these nested String.format calls are too verbose. If they are not shared, can we just make it one single method?",
                        "body": "I think these nested String.format calls are too verbose. If they are not shared, can we just make it one single method?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 183,
                        "originalStartLine": 167
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 183,
                "originalStartLine": 167,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/WorkflowMonitor.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NjU2MzAzOnYy",
                "comments": [
                    {
                        "bodyText": "Not for this PR, but this method seems to be a better fit in the SimpleDynamicMetric class",
                        "body": "Not for this PR, but this method seems to be a better fit in the SimpleDynamicMetric class",
                        "startLine": null,
                        "line": null,
                        "originalLine": 116,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 116,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/WorkflowMonitor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5Njk4MTY5OnYy",
                "comments": [
                    {
                        "bodyText": "Is it okay that this method (private void register(Object bean, ObjectName name)) is still used in other places in the code?",
                        "body": "Is it okay that this method (`private void register(Object bean, ObjectName name)`) is still used in other places in the code?",
                        "startLine": null,
                        "line": 883,
                        "originalLine": 883,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah, as long as we changed the register of workflow monitor and perinstanceresource monitor to use the dynamic register, we shouldn't be concerned about other places in this monitor. Later we may still need to change them though if we would like to change corresponding monitors.",
                        "body": "Yeah, as long as we changed the register of workflow monitor and perinstanceresource monitor to use the dynamic register, we shouldn't be concerned about other places in this monitor. Later we may still need to change them though if we would like to change corresponding monitors.",
                        "startLine": null,
                        "line": 883,
                        "originalLine": 883,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I see, thanks for clarification, but what about in other classes? My main concern is its usage in public void active() method, which in turn is used in private void enableClusterStatusMonitor(boolean enable) method in GenericHelixController. Although since the tests are passing it should be fine, but I was just curious.",
                        "body": "I see, thanks for clarification, but what about in other classes? My main concern is its usage in `public void active()` method, which in turn is used in `private void enableClusterStatusMonitor(boolean enable)` method in `GenericHelixController`. Although since the tests are passing it should be fine, but I was just curious.",
                        "startLine": null,
                        "line": 883,
                        "originalLine": 883,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I see. So this register is only registering cluster status monitor, which we haven't changed it yet. And inside cluster status monitor, other monitors got registered individually with different methods. Once we start to change cluster status monitor, we may need to handle its register from its calling class.",
                        "body": "I see. So this register is only registering cluster status monitor, which we haven't changed it yet. And inside cluster status monitor, other monitors got registered individually with different methods. Once we start to change cluster status monitor, we may need to handle its register from its calling class.",
                        "startLine": null,
                        "line": 883,
                        "originalLine": 883,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Got it, thanks.",
                        "body": "Got it, thanks.",
                        "startLine": null,
                        "line": 883,
                        "originalLine": 883,
                        "originalStartLine": null
                    }
                ],
                "line": 883,
                "startLine": 883,
                "originalLine": 883,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "zhangmeng916",
            "jiajunwang",
            "junkaixue",
            "rabashizade"
        ],
        "tdv": 67.0,
        "description": {
            "bodyText": "‚Ä¶etrics to dynamic metrics\nIssues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixed #1683\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThese PR continues to change some legacy metrics that use static metric to the standard ones that use dynamic metric. The changed monitor includes workflow monitor and perinstanceresource monitor. There are also some corresponding changes made in the test and caller functions.\nTests\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\nHelix-core:\n[INFO] Tests run: 1268, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,062.131 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1268, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-core ---\n[INFO] Loading execution data file /home/mnzhang/helix/helix-core/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Core' with 894 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:24 h\n[INFO] Finished at: 2021-05-11T11:27:32-07:00\n\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2648,
        "title": {
            "body": "Address TODOs found in code",
            "bodyHTML": "Address TODOs found in code"
        },
        "comments": [],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4grse_",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                public void validate(String name, String value) throws ParameterException {\n          \n          \n            \n                @Override\n          \n          \n            \n                public void validate(String name, String value) throws ParameterException {",
                        "body": "```suggestion\r\n    @Override\r\n    public void validate(String name, String value) throws ParameterException {\r\n```",
                        "startLine": null,
                        "line": 244,
                        "originalLine": 243,
                        "originalStartLine": null
                    }
                ],
                "line": 244,
                "startLine": 244,
                "originalLine": 243,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/ShellOptionsJC.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4grsoF",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  int n = Integer.parseInt(value);\n          \n          \n            \n                  if (n < 0) {\n          \n          \n            \n                    throw new ParameterException(\n          \n          \n            \n                        \"Parameter \" + name + \" should be positive (found \" + value + \")\");\n          \n          \n            \n                  }\n          \n          \n            \n                  int n = -1;\n          \n          \n            \n                  try {\n          \n          \n            \n                    n = Integer.parseInt(value);\n          \n          \n            \n                  } catch (NumberFormatException e) {\n          \n          \n            \n                    // ignore, will be handled below\n          \n          \n            \n                  }\n          \n          \n            \n                  if (n < 0) {\n          \n          \n            \n                    throw new ParameterException(\n          \n          \n            \n                        \"Parameter \" + name + \" should be a positive integer (was \" + value + \")\");\n          \n          \n            \n                  }",
                        "body": "```suggestion\r\n      int n = -1;\r\n      try {\r\n        n = Integer.parseInt(value);\r\n      } catch (NumberFormatException e) {\r\n        // ignore, will be handled below\r\n      }\r\n      if (n < 0) {\r\n        throw new ParameterException(\r\n            \"Parameter \" + name + \" should be a positive integer (was \" + value + \")\");\r\n      }\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 248,
                        "originalStartLine": 244
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 248,
                "originalStartLine": 244,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/ShellOptionsJC.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4grsvl",
                "comments": [
                    {
                        "bodyText": "Should explicitly use UTF_8 when constructing a String from byte array, otherwise, this could fail on some platforms where UTF_8 is not the default.",
                        "body": "Should explicitly use `UTF_8` when constructing a String from byte array, otherwise, this could fail on some platforms where `UTF_8` is not the default.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 890,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 890,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ConditionalWriterIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4grsyi",
                "comments": [
                    {
                        "bodyText": "Should explicitly use UTF_8 when constructing new strings here.",
                        "body": "Should explicitly use `UTF_8` when constructing new strings here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 897,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 897,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ConditionalWriterIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4grs2j",
                "comments": [
                    {
                        "bodyText": "This table name should be unique for this test method.",
                        "body": "This table name should be unique for this test method.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 95,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ExistingMacIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "DomGarguilo",
            "ctubbsii"
        ],
        "tdv": -10.0,
        "description": {
            "bodyText": "I looked through some of the TODOs in the comments and did my best to address those that I could."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1927,
        "title": {
            "body": "Document master/manager rename in Upgrader9to10 re #1922",
            "bodyHTML": "Document master/manager rename in Upgrader9to10 re #1922"
        },
        "comments": [],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYyMTQ5MDYwOnYy",
                "comments": [
                    {
                        "bodyText": "@milleruntime does this cover what you were looking for?",
                        "body": "@milleruntime does this cover what you were looking for?",
                        "startLine": null,
                        "line": 98,
                        "originalLine": 98,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is great, thanks. I was also thinking we could link the methods associated with the change but that might not always be easy",
                        "body": "This is great, thanks. I was also thinking we could link the methods associated with the change but that might not always be easy",
                        "startLine": null,
                        "line": 98,
                        "originalLine": 98,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I added a reference to the associated upgrade method.",
                        "body": "I added a reference to the associated upgrade method.",
                        "startLine": null,
                        "line": 98,
                        "originalLine": 98,
                        "originalStartLine": null
                    }
                ],
                "line": 98,
                "startLine": 98,
                "originalLine": 98,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/Upgrader9to10.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYyMTgyMzkyOnYy",
                "comments": [
                    {
                        "bodyText": "I am not sure which spot in the javadoc is more likely for users to see (at the class or method) but you could link to the method like this:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n             * \"manager.\" instead (see the {@code renameOldMasterPropsinZK(ServerContext)} method). Note that\n          \n          \n            \n             * \"manager.\" instead (see the {@link #renameOldMasterPropsinZK(ServerContext)} method). Note that",
                        "body": "I am not sure which spot in the javadoc is more likely for users to see (at the class or method) but you could link to the method like this:\r\n\r\n```suggestion\r\n * \"manager.\" instead (see the {@link #renameOldMasterPropsinZK(ServerContext)} method). Note that\r\n```",
                        "startLine": null,
                        "line": 103,
                        "originalLine": 103,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "There isn't any javadoc on that private method, so I thought having a link to it would be more confusing.",
                        "body": "There isn't any javadoc on that private method, so I thought having a link to it would be more confusing.",
                        "startLine": null,
                        "line": 103,
                        "originalLine": 103,
                        "originalStartLine": null
                    }
                ],
                "line": 103,
                "startLine": 103,
                "originalLine": 103,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/Upgrader9to10.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "brianloss",
            "milleruntime"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3403,
        "title": {
            "body": "Set finished time for GC cycles even if Exception",
            "bodyHTML": "Set finished time for GC cycles even if Exception"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5cf7MF",
                "body": "Looks like this might not be a complete fix. I was able to reproduce the error by killing a tserver, and the error occurred in the Manager, not the GC. So, I think there's a place I missed.",
                "bodyText": "Looks like this might not be a complete fix. I was able to reproduce the error by killing a tserver, and the error occurred in the Manager, not the GC. So, I think there's a place I missed.",
                "createdAt": "2023-05-17T18:29:51Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5cgTdG",
                "body": "After further investigation, it seems this will fix the issue where the finished state is not updated (and stays 0) and the cycle stats aren't updated, if there's an exception that occurred during the cycle.\r\n\r\nThis does not yet fix the situation where the current cycle is not yet finished, and has not set a finished time. In those cases, we set ManagerInformation to have a \"Running\" label for the gcStatus (it can also take a value of \"Down\" or \"Waiting\"), but it doesn't appear to be used anywhere, and appears to be different than the StatusInformation resource object, which also has a gcStatus, but uses items like \"OK\" and \"ERROR\" instead, and power some specific visual items in the monitor.",
                "bodyText": "After further investigation, it seems this will fix the issue where the finished state is not updated (and stays 0) and the cycle stats aren't updated, if there's an exception that occurred during the cycle.\nThis does not yet fix the situation where the current cycle is not yet finished, and has not set a finished time. In those cases, we set ManagerInformation to have a \"Running\" label for the gcStatus (it can also take a value of \"Down\" or \"Waiting\"), but it doesn't appear to be used anywhere, and appears to be different than the StatusInformation resource object, which also has a gcStatus, but uses items like \"OK\" and \"ERROR\" instead, and power some specific visual items in the monitor.",
                "createdAt": "2023-05-17T20:00:27Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5chHnk",
                "body": "Should be fixed with that latest commit.",
                "bodyText": "Should be fixed with that latest commit.",
                "createdAt": "2023-05-17T22:52:47Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4tkVVD",
                "comments": [
                    {
                        "bodyText": "This change isn't a functional one... it just makes it more clear that they're both coming from the same source when computing the difference.",
                        "body": "This change isn't a functional one... it just makes it more clear that they're both coming from the same source when computing the difference.",
                        "startLine": null,
                        "line": 57,
                        "originalLine": 55,
                        "originalStartLine": null
                    }
                ],
                "line": 57,
                "startLine": 57,
                "originalLine": 55,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/monitor/src/main/java/org/apache/accumulo/monitor/rest/gc/GarbageCollectorStats.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Always set the finished time for GC cycles, even if an exception occurred in the cycle. This prevents a GCStatus object containing a started time, but the finished time staying the default value of 0.\nIdeally, this wouldn't be a problem if we used the setter/getter methods on Thrift objects so that we can tell the difference between a 0 that has been set and one that is 0 just because it's a primitive type that defaults to 0 when unset. Thrift tracks which fields are set using isSetFieldname methods, but since we're not consistently using those, and just grabbing the value of the field without checking if it has been set, we need to make sure that we've set it to something sensible.\nI believe this fixes #3374"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2213,
        "title": {
            "body": "Refactored code that does bookeeping for compacting files.",
            "bodyHTML": "Refactored code that does bookeeping for compacting files."
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM42QmhN",
                "body": "@keith-turner Did you consider a more object oriented design to this code, to avoid the large switch statements?",
                "bodyText": "@keith-turner Did you consider a more object oriented design to this code, to avoid the large switch statements?",
                "createdAt": "2021-09-01T14:08:01Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM42Q4G6",
                "body": "> @keith-turner Did you consider a more object oriented design to this code, to avoid the large switch statements?\r\n\r\nNo I didn't.  What did you have in mind?",
                "bodyText": "@keith-turner Did you consider a more object oriented design to this code, to avoid the large switch statements?\n\nNo I didn't.  What did you have in mind?",
                "createdAt": "2021-09-01T15:25:21Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM42RAxt",
                "body": "> > @keith-turner Did you consider a more object oriented design to this code, to avoid the large switch statements?\r\n> \r\n> No I didn't. What did you have in mind?\r\n\r\nSomething like this as an alternative approach: https://github.com/apache/accumulo/pull/2256",
                "bodyText": "@keith-turner Did you consider a more object oriented design to this code, to avoid the large switch statements?\n\nNo I didn't. What did you have in mind?\n\nSomething like this as an alternative approach: #2256",
                "createdAt": "2021-09-01T16:03:55Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 13,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwNDQ4MzUxOnYy",
                "comments": [
                    {
                        "bodyText": "This creates an unmodifiable view over runningJobs. However, runningJobs can still be modified in the below synchronized methods and this view doesn't protect against concurrent reads over the set, which could lead to ConcurrentModificationExceptions while streaming/iterating the set in the new TabletCompactionFileManager class. I think instead of using a HashSet and synchronize methods, you could use ConcurrentHashMap.newKeySet() for the runningJobs field. You can still wrap it with unmodifiable to ensure TabletCompactionFileManager can't alter the set.",
                        "body": "This creates an unmodifiable view over `runningJobs`. However, `runningJobs` can still be modified in the below synchronized methods and this view doesn't protect against concurrent reads over the set, which could lead to `ConcurrentModificationException`s while streaming/iterating the set in the new `TabletCompactionFileManager` class. I think instead of using a `HashSet` and synchronize methods, you could use `ConcurrentHashMap.newKeySet()` for the `runningJobs` field. You can still wrap it with unmodifiable to ensure `TabletCompactionFileManager` can't alter the set.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 207,
                        "originalStartLine": 206
                    },
                    {
                        "bodyText": "Currently all accesses to runningJobs and fileMgr are within in synchronized blocks in CompactableImpl (at least that is my expectation). This is because changes in state related to compactions must atomically change the jobs, files, and other information.  Therefore a ConcurrentHashMap would not be necessary and using it would imply a usage pattern that is not wanted.  I will document this expectation.",
                        "body": "Currently all accesses to runningJobs and fileMgr are within in synchronized blocks in CompactableImpl (at least that is my expectation). This is because changes in state related to compactions must atomically change the jobs, files, and other information.  Therefore a ConcurrentHashMap would not be necessary and using it would imply a usage pattern that is not wanted.  I will document this expectation.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 207,
                        "originalStartLine": 206
                    },
                    {
                        "bodyText": "I guess it's technically correct if all operations on TabletCompactionFileManager instances are guarded with a synchronized block as well. However, my concern is that's very fragile and hard to enforce. It also implies a high degree of coordination between the two separate classes in one sense (for synchronization), whereas in another sense (mutable data access), that degree of coordination is implied by the protective use of Collections.unmodifiableSet to not exist. If they were coordinating to that degree (such as if TabletCompactionFileManager were an inner-class of CompactableImpl), I wouldn't think it necessary to do that protective wrapping.\nAdditionally, it feels weird that methods on the TabletCompactionFileManager object would require synchronizing on CompactableImpl.this. This feels like CompactableImpl's internal implementation details are leaking into the second object.\nI just think it might be more clear if, as long as we're separating these into two distinct classes, we further ensure they are decoupled, so you don't have to make assumptions about how the set of running jobs is shared between them. As is, the concurrency model seems very fragile. Some ideas:\n\nSynchronize on the runningJobs object instead of CompactableImpl.this, or via some other very explicit lock object,\nDon't share runningJobs with TabletCompactionFileManager at all, keeping all synchronization and access to runningJobs internal to CompactableImpl; expose what you need through CompactableImpl API methods\n\nWith lambdas, it seems we should be able to get very explicit, and less error prone synchronization, all contained in CompactableImpl, without leaking anything out:\npublic interface CompactableImpl {\n  // ...\n  public synchronized <T> T synchronizedDo(Function<Set<CompactionJob>, T> operation) {\n    return operation.apply(runningJobs);\n  }\n  // ...\n}",
                        "body": "I guess it's technically correct if all operations on `TabletCompactionFileManager` instances are guarded with a synchronized block as well. However, my concern is that's very fragile and hard to enforce. It also implies a high degree of coordination between the two separate classes in one sense (for synchronization), whereas in another sense (mutable data access), that degree of coordination is implied by the protective use of `Collections.unmodifiableSet` to not exist. If they were coordinating to that degree (such as if `TabletCompactionFileManager` were an inner-class of `CompactableImpl`), I wouldn't think it necessary to do that protective wrapping.\r\n\r\nAdditionally, it feels weird that methods on the `TabletCompactionFileManager` object would require synchronizing on `CompactableImpl.this`. This feels like `CompactableImpl`'s internal implementation details are leaking into the second object.\r\n\r\nI just think it might be more clear if, as long as we're separating these into two distinct classes, we further ensure they are decoupled, so you don't have to make assumptions about how the set of running jobs is shared between them. As is, the concurrency model seems very fragile. Some ideas:\r\n\r\n1. Synchronize on the `runningJobs` object instead of `CompactableImpl.this`, or via some other very explicit lock object,\r\n2. Don't share `runningJobs` with `TabletCompactionFileManager` at all, keeping all synchronization and access to `runningJobs` internal to `CompactableImpl`; expose what you need through `CompactableImpl` API methods\r\n\r\nWith lambdas, it seems we should be able to get very explicit, and less error prone synchronization, all contained in `CompactableImpl`, without leaking anything out:\r\n\r\n```java\r\npublic interface CompactableImpl {\r\n  // ...\r\n  public synchronized <T> T synchronizedDo(Function<Set<CompactionJob>, T> operation) {\r\n    return operation.apply(runningJobs);\r\n  }\r\n  // ...\r\n}\r\n```\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 207,
                        "originalStartLine": 206
                    },
                    {
                        "bodyText": "The classes are meant to be tightly coupled.  It was never intended that anything besides CompactableImpl would use TabletCompactionFileManager.  Making it an inner class seems like a good way to express this.  Tracking the state of compacting files and which files are eligible for compaction is one of the most complicated parts of CompactableImpl currently.  The goal with this change was to logically group that code to make it easier to test and modify.  However I don't want to attempt to make it a standalone unit in terms of functionality or synchronization as I think doing this would make the code harder to understand and verify for correctness.  I can not really think of anything simpler to understand than the current synchronized code blocks in CompactableImpl.  Making it an inner class will make it clear that is tightly coupled while still allowing testing and logical grouping of the code that does bookkeeping for compacting files.",
                        "body": "The classes are meant to be tightly coupled.  It was never intended that anything besides CompactableImpl would use TabletCompactionFileManager.  Making it an inner class seems like a good way to express this.  Tracking the state of compacting files and which files are eligible for compaction is one of the most complicated parts of CompactableImpl currently.  The goal with this change was to logically group that code to make it easier to test and modify.  However I don't want to attempt to make it a standalone unit in terms of functionality or synchronization as I think doing this would make the code harder to understand and verify for correctness.  I can not really think of anything simpler to understand than the current synchronized code blocks in CompactableImpl.  Making it an inner class will make it clear that is tightly coupled while still allowing testing and logical grouping of the code that does bookkeeping for compacting files.  ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 207,
                        "originalStartLine": 206
                    },
                    {
                        "bodyText": "Made the class an inner class in e035a3f.  In this change it no longer passes in runningJobs, the inner class just calls a method on the outer class to access it.  Also made the name of the inner class FileManager",
                        "body": "Made the class an inner class in e035a3f.  In this change it no longer passes in runningJobs, the inner class just calls a method on the outer class to access it.  Also made the name of the inner class FileManager",
                        "startLine": null,
                        "line": null,
                        "originalLine": 207,
                        "originalStartLine": 206
                    },
                    {
                        "bodyText": "I think the inner class makes sense. However, it's still hard to verify that all the accesses are synchronized. For example, noneRunning has a read on runningJobs but is not synchronized. Tracing it back, it is called by some other methods which are also not synchronized... but then those methods are called by other methods which are called only in synchronized blocks. Requiring all these uses to be traced back to verify the concurrency model is correct is frustrating and error-prone. I wish there was a better way, but not sure of what could work better. Maybe you could throw in an extra synchronized keyword or two to guard runningJobs, so it's less error-prone, taking advantage of reentrancy so the redundant synchronized keywords don't matter. Either way, I think the tight coupling is more clear as an inner-class. Thanks for making that change.",
                        "body": "I think the inner class makes sense. However, it's still hard to verify that all the accesses are synchronized. For example, `noneRunning` has a read on `runningJobs` but is not synchronized. Tracing it back, it is called by some other methods which are also not synchronized... but then those methods are called by other methods which are called only in synchronized blocks. Requiring all these uses to be traced back to verify the concurrency model is correct is frustrating and error-prone. I wish there was a better way, but not sure of what could work better. Maybe you could throw in an extra synchronized keyword or two to guard `runningJobs`, so it's less error-prone, taking advantage of reentrancy so the redundant synchronized keywords don't matter. Either way, I think the tight coupling is more clear as an inner-class. Thanks for making that change.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 207,
                        "originalStartLine": 206
                    },
                    {
                        "bodyText": "I wish there was a better way, but not sure of what could work better.\n\n@ctubbsii  not sure if this workable, but one possible way is to move all in memory state in compactableImpl into another class that handles all sync.  A lot of the code in compactableImpl has the following pattern.\nsomeMethod() {\n   synchronized(this) {\n       // examine/change multiple instance var that change the objects state\n   }\n\n   // do something like a metadata read/write or call to Tablet\n  \n  synchronized(this) {\n       // examine/change multiple instance var that change the objects state\n  }\nThe above sync blocks could be replaced w/ calls to an object that synchronized and manages all of the in memory state for CompactableImpl.  The changes in this PR take a subset of that in memory state (files) and move them to an inner class.\nWould need to analyze the code to see if its possible, but it could be one way to simplify the code by grouping the in memory state and sync into a single class (excluding the I/O type operations).",
                        "body": "> I wish there was a better way, but not sure of what could work better.\r\n\r\n@ctubbsii  not sure if this workable, but one possible way is to move all in memory state in compactableImpl into another class that handles all sync.  A lot of the code in compactableImpl has the following pattern.\r\n\r\n```java\r\nsomeMethod() {\r\n   synchronized(this) {\r\n       // examine/change multiple instance var that change the objects state\r\n   }\r\n\r\n   // do something like a metadata read/write or call to Tablet\r\n  \r\n  synchronized(this) {\r\n       // examine/change multiple instance var that change the objects state\r\n  }\r\n```\r\n\r\nThe above sync blocks could be replaced w/ calls to an object that synchronized and manages all of the in memory state for CompactableImpl.  The changes in this PR take a subset of that in memory state (files) and move them to an inner class.  \r\n\r\nWould need to analyze the code to see if its possible, but it could be one way to simplify the code by grouping the in memory state and sync into a single class (excluding the I/O type operations).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 207,
                        "originalStartLine": 206
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 207,
                "originalStartLine": 206,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/CompactableImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwNDU0ODYzOnYy",
                "comments": [
                    {
                        "bodyText": "Should handle this TODO or create follow on ticket",
                        "body": "Should handle this TODO or create follow on ticket",
                        "startLine": null,
                        "line": null,
                        "originalLine": 279,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I will open an issue and remove the TODO before merging this.",
                        "body": "I will open an issue and remove the TODO before merging this.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 279,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "opened #2222",
                        "body": "opened #2222 ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 279,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 279,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/CompactableImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "milleruntime",
            "ctubbsii"
        ],
        "tdv": -19.0,
        "description": {
            "bodyText": "Refactored the code that tracks the status of each tablets files that are involved in compactions.  The refactoring pulled the code into its own class.  No functionality was changed.  This change was done in preparation for #2199   This change will also make it possible to write unit tests for this functionality.  Comprehensive unit test for this code can be added after changes for #2199 are made."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1746,
        "title": {
            "body": "Close #1739. Cleanup Splits file if CreateTable FaTE operation fails.",
            "bodyHTML": "Close #1739. Cleanup Splits file if CreateTable FaTE operation fails."
        },
        "comments": [],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDgzNTQ4OnYy",
                "comments": [
                    {
                        "bodyText": "returns boolean, should we log when delete fails?",
                        "body": "returns boolean, should we log when delete fails?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I can add a log for it if it is necessary but I should also add a check to make sure there is even a split file to begin with... I will add that.",
                        "body": "I can add a log for it if it is necessary but I should also add a check to make sure there is even a split file to begin with... I will add that.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 86,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/tableOps/create/CreateTable.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQzMDEwOnYy",
                "comments": [
                    {
                        "bodyText": "@Manno15 if this throws an Exception, then unreserveNamespace() will not execute and that may not be good.",
                        "body": "@Manno15 if this throws an Exception, then unreserveNamespace() will not execute and that may not be good. ",
                        "startLine": null,
                        "line": 88,
                        "originalLine": 88,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "We could wrap this and put the unreserve call in the finally block.",
                        "body": "We could wrap this and put the unreserve call in the finally block.",
                        "startLine": null,
                        "line": 88,
                        "originalLine": 88,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I will make a new pull request with these changes",
                        "body": "I will make a new pull request with these changes",
                        "startLine": null,
                        "line": 88,
                        "originalLine": 88,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Follow up made on #1759",
                        "body": "Follow up made on #1759 ",
                        "startLine": null,
                        "line": 88,
                        "originalLine": 88,
                        "originalStartLine": null
                    }
                ],
                "line": 88,
                "startLine": 88,
                "originalLine": 88,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/tableOps/create/CreateTable.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Manno15",
            "dlmarion",
            "keith-turner",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Uses the same cleanup logic that is used if the operation is successful. Closes #1739"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1605,
        "title": {
            "body": "Fixes #564 adds support multiple compaction executors",
            "bodyHTML": "Fixes #564 adds support multiple compaction executors"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYyNTk0NDE3MA==",
                "body": "> Would there be value in marking the new properties/APIs as \"experimental\" until it bears out after a release or two?\r\n\r\nThat would entail keeping all the old code and then jamming this new code into the old code.  I don't think that would help achieve stability or maintainability.  There are actually a lot of big changes that have built up for 2.1.0.  I think we need to stop accepting new features for 2.1.0 at some point and start heavily testing it and only fixing bugs.\r\n\r\n> There are so many new classes. The number of new classes might make the compaction code a bit more logical, but it's a big shift from the current code, and very hard for a newcomer to quickly familiarize themselves with all the code.\r\n\r\nDid you look at the javadoc link I posted? The current plugins break down by data and execution.  The CompactionSelector, CompactionConfigurer, and iterators are only concerned with user data and can be set per table or per compaction.  The CompactionPlanner and CompactionDispatcher are only concerned with executing compactions. Planners are configured at the system level and dispatchers are configured per table. Users can set execution hints when initiating a compaction through the API and these hints are made available to the dispatcher and planner.   If this is helpful, I can work this into the javadoc.\r\n\r\n> It might help to organize a video chat or slide show to go over all the code changes at a high level, so that other Accumulo devs can quickly assess the new design.\r\n\r\nI can do a chat on slack.  One goal of that could be to determine how the written documentation could be improved. \r\n\r\n> I kind of liked the idea of setting a single compaction strategy property that encapsulates all the configuration\r\n\r\nThis is very vague and I don't know what this would concretely look like.  We could discuss this in the chat.  If you have more specific ideas, it would helpful to write them up somewhere.",
                "bodyText": "Would there be value in marking the new properties/APIs as \"experimental\" until it bears out after a release or two?\n\nThat would entail keeping all the old code and then jamming this new code into the old code.  I don't think that would help achieve stability or maintainability.  There are actually a lot of big changes that have built up for 2.1.0.  I think we need to stop accepting new features for 2.1.0 at some point and start heavily testing it and only fixing bugs.\n\nThere are so many new classes. The number of new classes might make the compaction code a bit more logical, but it's a big shift from the current code, and very hard for a newcomer to quickly familiarize themselves with all the code.\n\nDid you look at the javadoc link I posted? The current plugins break down by data and execution.  The CompactionSelector, CompactionConfigurer, and iterators are only concerned with user data and can be set per table or per compaction.  The CompactionPlanner and CompactionDispatcher are only concerned with executing compactions. Planners are configured at the system level and dispatchers are configured per table. Users can set execution hints when initiating a compaction through the API and these hints are made available to the dispatcher and planner.   If this is helpful, I can work this into the javadoc.\n\nIt might help to organize a video chat or slide show to go over all the code changes at a high level, so that other Accumulo devs can quickly assess the new design.\n\nI can do a chat on slack.  One goal of that could be to determine how the written documentation could be improved.\n\nI kind of liked the idea of setting a single compaction strategy property that encapsulates all the configuration\n\nThis is very vague and I don't know what this would concretely look like.  We could discuss this in the chat.  If you have more specific ideas, it would helpful to write them up somewhere.",
                "createdAt": "2020-05-08T18:06:06Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYyNTk3MjI3OA==",
                "body": "@ctubbsii something else that I eventually need to write is user facing documention.  The documentation written so for is a bit more internal.  The old WIP PR #1589 does have a bit of user facing documentation in its opening comment that would be useful to look at though.  It shows how to set configure different compaction services and make tables use them.  The properties have changed a bit, but all of the concepts are the same.",
                "bodyText": "@ctubbsii something else that I eventually need to write is user facing documention.  The documentation written so for is a bit more internal.  The old WIP PR #1589 does have a bit of user facing documentation in its opening comment that would be useful to look at though.  It shows how to set configure different compaction services and make tables use them.  The properties have changed a bit, but all of the concepts are the same.",
                "createdAt": "2020-05-08T19:11:30Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY0MzUxNDg1Ng==",
                "body": "There have not been any comments on this in a while, does anyone have any objections to me merging this?  In other branches in my fork I have been working on following work for #1609, #1611, and #1612.  I would like to merge this so I can submit PRs for those, which are much smaller relative to this.\r\n\r\nI have [run a test of this code](https://gist.github.com/keith-turner/29b72dfa97acad53c395dd0724b65f1c) on a cluster and plan to run more test.  I would like to wait to run subsequent test after finishing the follow on work.",
                "bodyText": "There have not been any comments on this in a while, does anyone have any objections to me merging this?  In other branches in my fork I have been working on following work for #1609, #1611, and #1612.  I would like to merge this so I can submit PRs for those, which are much smaller relative to this.\nI have run a test of this code on a cluster and plan to run more test.  I would like to wait to run subsequent test after finishing the follow on work.",
                "createdAt": "2020-06-12T23:00:56Z",
                "author": "keith-turner"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDY0NDQxNjM1MA==",
                "body": "@milleruntime I found all the TODOs and addressed/removed them.",
                "bodyText": "@milleruntime I found all the TODOs and addressed/removed them.",
                "createdAt": "2020-06-15T22:11:05Z",
                "author": "keith-turner"
            }
        ],
        "total_comments_count": 67,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjczNzAxOnYy",
                "comments": [
                    {
                        "bodyText": "Why disable these from the full logger by default?",
                        "body": "Why disable these from the full logger by default?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 83,
                        "originalStartLine": 81
                    },
                    {
                        "bodyText": "I don't know, it was probably annoying me as I spent a lot of time looking at the logs while working on this.  That change should not be made in this PR, I will pull it out.",
                        "body": "I don't know, it was probably annoying me as I spent a lot of time looking at the logs while working on this.  That change should not be made in this PR, I will pull it out.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 83,
                        "originalStartLine": 81
                    },
                    {
                        "bodyText": "removed in ecc79e3",
                        "body": "removed in ecc79e3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 83,
                        "originalStartLine": 81
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 83,
                "originalStartLine": 81,
                "subjectType": "LINE",
                "path": "assemble/conf/log4j2-service.properties",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjc2OTAxOnYy",
                "comments": [
                    {
                        "bodyText": "I don't necessarily see the second reason to be a problem. Binding these into a single entity, can be nice for modularizing the user code to make it more reusable, and maintainable in a separate user-controlled repo. Under the new paradigm, what's the best way for users to combine their overall compaction strategy so they can maintain it separately, and just drop it in when needed? Would they just serialize the CompactionConfig in some way?",
                        "body": "I don't necessarily see the second reason to be a problem. Binding these into a single entity, can be nice for modularizing the user code to make it more reusable, and maintainable in a separate user-controlled repo. Under the new paradigm, what's the best way for users to combine their overall compaction strategy so they can maintain it separately, and just drop it in when needed? Would they just serialize the `CompactionConfig` in some way?",
                        "startLine": 32,
                        "line": 34,
                        "originalLine": 32,
                        "originalStartLine": 30
                    },
                    {
                        "bodyText": "My motivation was in the past we had two compaction strategies included with Accumulo, one that filtered compaction candidates based on max size and another that changed the compression type based on input files sizes.  These had nothing to do with each other, but only one could be configured at a time.",
                        "body": "My motivation was in the past we had two compaction strategies included with Accumulo, one that filtered compaction candidates based on max size and another that changed the compression type based on input files sizes.  These had nothing to do with each other, but only one could be configured at a time.\r\n\r\n ",
                        "startLine": 32,
                        "line": 34,
                        "originalLine": 32,
                        "originalStartLine": 30
                    },
                    {
                        "bodyText": "@ctubbsii did the answer and the slack chat we had resolve this or do you think there is still something to be done?",
                        "body": "@ctubbsii did the answer and the slack chat we had resolve this or do you think there is still something to be done?",
                        "startLine": 32,
                        "line": 34,
                        "originalLine": 32,
                        "originalStartLine": 30
                    }
                ],
                "line": 34,
                "startLine": 32,
                "originalLine": 32,
                "originalStartLine": 30,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CompactionStrategyConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjc3MDYxOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                requireNonNull(className);\n          \n          \n            \n                this.className = className;\n          \n          \n            \n                this.className = requireNonNull(className);",
                        "body": "```suggestion\r\n    this.className = requireNonNull(className);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": 44
                    },
                    {
                        "bodyText": "fixed in ecc79e3",
                        "body": "fixed in ecc79e3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": 44
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 45,
                "originalStartLine": 44,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/PluginConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjc3MzE3OnYy",
                "comments": [
                    {
                        "bodyText": "Should the CompactionStrategy interface exist in an SPI package? Otherwise, it seems we haven't completely solved the use of internal types here.",
                        "body": "Should the CompactionStrategy interface exist in an SPI package? Otherwise, it seems we haven't completely solved the use of internal types here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 41,
                        "originalStartLine": 40
                    },
                    {
                        "bodyText": "That should not be mentioned, that is a copy and paste bug.  I will fix that.",
                        "body": "That should not be mentioned, that is a copy and paste bug.  I will fix that.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 41,
                        "originalStartLine": 40
                    },
                    {
                        "bodyText": "fixed in ecc79e3",
                        "body": "fixed in ecc79e3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 41,
                        "originalStartLine": 40
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 41,
                "originalStartLine": 40,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/PluginConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjc4MTg4OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                requireNonNull(opts);\n          \n          \n            \n                this.options = Map.copyOf(opts);\n          \n          \n            \n                return this;\n          \n          \n            \n                this.options = Map.copyOf(requireNonNull(opts));\n          \n          \n            \n                return this;",
                        "body": "```suggestion\r\n    this.options = Map.copyOf(requireNonNull(opts));\r\n    return this;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": 62
                    },
                    {
                        "bodyText": "The javadoc for Map.copyOf says it will thow an NPE if its input is null.  So the requireNonNull could be dropped.",
                        "body": "The javadoc for Map.copyOf says it will thow an NPE if its input is null.  So the requireNonNull could be dropped.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": 62
                    },
                    {
                        "bodyText": "fixed in ecc79e3",
                        "body": "fixed in ecc79e3",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": 62
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 64,
                "originalStartLine": 62,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/PluginConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjc4NjYwOnYy",
                "comments": [
                    {
                        "bodyText": "Since className and options have setters, this class is mutable, and changing it can result in unpredictable behavior if stored in data structures that use hashCode and equals. Can this class be refactored to be immutable?",
                        "body": "Since `className` and `options` have setters, this class is mutable, and changing it can result in unpredictable behavior if stored in data structures that use `hashCode` and `equals`. Can this class be refactored to be immutable?",
                        "startLine": 74,
                        "line": 84,
                        "originalLine": 84,
                        "originalStartLine": 74
                    },
                    {
                        "bodyText": "Made immutable in ecc79e3",
                        "body": "Made immutable in ecc79e3",
                        "startLine": 74,
                        "line": 84,
                        "originalLine": 84,
                        "originalStartLine": 74
                    }
                ],
                "line": 84,
                "startLine": 74,
                "originalLine": 84,
                "originalStartLine": 74,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/PluginConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjc5MzQ0OnYy",
                "comments": [
                    {
                        "bodyText": "I'm confused by this javadoc. I don't think this javadoc is sufficient for me to understand how it is intended to be used, without additional outside documentation. Can you provide accompanying code for the compression example?\nAlso, I'm wondering if we can come up with a better name for this. I might be able to think of something once I get a better grasp on how it's supposed to be used.",
                        "body": "I'm confused by this javadoc. I don't think this javadoc is sufficient for me to understand how it is intended to be used, without additional outside documentation. Can you provide accompanying code for the compression example?\r\n\r\nAlso, I'm wondering if we can come up with a better name for this. I might be able to think of something once I get a better grasp on how it's supposed to be used.",
                        "startLine": 27,
                        "line": 33,
                        "originalLine": 33,
                        "originalStartLine": 27
                    },
                    {
                        "bodyText": "CompressionConfigurer is an example.  It overrides the table property for compression type when the sum of input files exceeds a certain size.",
                        "body": "[CompressionConfigurer](https://github.com/apache/accumulo/blob/bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8/core/src/main/java/org/apache/accumulo/core/client/admin/compaction/CompressionConfigurer.java) is an example.  It overrides the table property for compression type when the sum of input files exceeds a certain size.",
                        "startLine": 27,
                        "line": 33,
                        "originalLine": 33,
                        "originalStartLine": 27
                    },
                    {
                        "bodyText": "Would this be more appropriately named as a factory?  It seems to be creating a compaction configuration - so maybe something like CompressionConfigFactory?",
                        "body": "Would this be more appropriately named as a factory?  It seems to be creating a compaction configuration - so maybe something like CompressionConfigFactory?  ",
                        "startLine": 27,
                        "line": 33,
                        "originalLine": 33,
                        "originalStartLine": 27
                    },
                    {
                        "bodyText": "I agree the current name is not great.  I am not too excited about CompressionConfigFactory either.  One thing that occurred to me while running a recent test on a cluster of this PR is that in addition to thinking of a new class name, we also need to think about the table property names.  Below are table props I set when running the test.\ntable.compaction.configurer=org.apache.accumulo.core.client.admin.compaction.CompressionConfigurer\ntable.compaction.configurer.opts.large.compress.threshold=100M\ntable.compaction.configurer.opts.large.compress.type=gz",
                        "body": "I agree the current name is not great.  I am not too excited about CompressionConfigFactory either.  One thing that occurred to me while running a recent test on a cluster of this PR is that in addition to thinking of a new class name, we also need to think about the table property names.  Below are table props I set when running the test.\r\n\r\n```\r\ntable.compaction.configurer=org.apache.accumulo.core.client.admin.compaction.CompressionConfigurer\r\ntable.compaction.configurer.opts.large.compress.threshold=100M\r\ntable.compaction.configurer.opts.large.compress.type=gz\r\n```",
                        "startLine": 27,
                        "line": 33,
                        "originalLine": 33,
                        "originalStartLine": 27
                    }
                ],
                "line": 33,
                "startLine": 27,
                "originalLine": 33,
                "originalStartLine": 27,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/CompactionConfigurer.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjc5ODU4OnYy",
                "comments": [
                    {
                        "bodyText": "Can this suppression occur more narrowly, rather than for the entire class?",
                        "body": "Can this suppression occur more narrowly, rather than for the entire class?",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 28,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This entire class is utility code for a deprecated class.",
                        "body": "This entire class is utility code for a deprecated class.",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 28,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "In that case, it too can be marked @Deprecated instead of merely suppressing the deprecation.",
                        "body": "In that case, it too can be marked `@Deprecated` instead of merely suppressing the deprecation.",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 28,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think other non-deprecated code calls this to deal with compaction strategies.  I was trying to put the code that does this in one place and in order to avoid suppression elsewhere.",
                        "body": "I think other non-deprecated code calls this to deal with compaction strategies.  I was trying to put the code that does this in one place and in order to avoid suppression elsewhere.",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 28,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ctubbsii does my answer address your concern?",
                        "body": "@ctubbsii does my answer address your concern?",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 28,
                        "originalStartLine": null
                    }
                ],
                "line": 28,
                "startLine": 28,
                "originalLine": 28,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/CompactionStrategyConfigUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjgwMDM4OnYy",
                "comments": [
                    {
                        "bodyText": "Where do these numbers come from? An inline comment would be useful.",
                        "body": "Where do these numbers come from? An inline comment would be useful.",
                        "startLine": 43,
                        "line": 45,
                        "originalLine": 45,
                        "originalStartLine": 43
                    },
                    {
                        "bodyText": "I don't remember.  I may have taken a git commit hash or they may be random.  The intent is to be random.",
                        "body": "I don't remember.  I may have taken a git commit hash or they may be random.  The intent is to be random.",
                        "startLine": 43,
                        "line": 45,
                        "originalLine": 45,
                        "originalStartLine": 43
                    }
                ],
                "line": 45,
                "startLine": 43,
                "originalLine": 45,
                "originalStartLine": 43,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/UserCompactionUtils.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjgwOTQ2OnYy",
                "comments": [
                    {
                        "bodyText": "Presumably, these new properties are for major compactions only. The property prefix could be made consistent with other tserver.compaction.major properties.",
                        "body": "Presumably, these new properties are for major compactions only. The property prefix could be made consistent with other `tserver.compaction.major` properties.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 413,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done in 8d024d8",
                        "body": "Done in 8d024d8",
                        "startLine": null,
                        "line": null,
                        "originalLine": 413,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 413,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY2NDQzOnYy",
                "comments": [
                    {
                        "bodyText": "Typo\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n             * This class select which files a user compaction will compact. It can also be configured per table\n          \n          \n            \n             * This class selects which files a user compaction will compact. It can also be configured per table",
                        "body": "Typo\r\n```suggestion\r\n * This class selects which files a user compaction will compact. It can also be configured per table\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 37,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 37,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/CompactionSelector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY4MjU2OnYy",
                "comments": [
                    {
                        "bodyText": "Open issue for TODO",
                        "body": "Open issue for TODO ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 106,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 106,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/TooManyDeletesSelector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY4MzUxOnYy",
                "comments": [
                    {
                        "bodyText": "Open Issue for TODO",
                        "body": "Open Issue for TODO",
                        "startLine": null,
                        "line": null,
                        "originalLine": 468,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 468,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/master/src/main/java/org/apache/accumulo/master/FateServiceHandler.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY4NTE2OnYy",
                "comments": [
                    {
                        "bodyText": "Open issue for TODO",
                        "body": "Open issue for TODO",
                        "startLine": null,
                        "line": null,
                        "originalLine": 58,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 58,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY4NTcyOnYy",
                "comments": [
                    {
                        "bodyText": "Open issue for TODO",
                        "body": "Open issue for TODO",
                        "startLine": null,
                        "line": null,
                        "originalLine": 67,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 67,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY4NjgwOnYy",
                "comments": [
                    {
                        "bodyText": "Open issue for TODO",
                        "body": "Open issue for TODO",
                        "startLine": null,
                        "line": null,
                        "originalLine": 143,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 143,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjI5MzE2OnYy",
                "comments": [
                    {
                        "bodyText": "You don't want warnings for this class?  It is no longer used with this change.",
                        "body": "You don't want warnings for this class?  It is no longer used with this change.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 25,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "good catch, fixed in 5aa9672",
                        "body": "good catch, fixed in 5aa9672",
                        "startLine": null,
                        "line": null,
                        "originalLine": 25,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 25,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/EverythingCompactionStrategy.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjM5MzI2OnYy",
                "comments": [
                    {
                        "bodyText": "I think these names weren't updated after previous changes.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              private PluginConfig selectorConfig = UserCompactionUtils.DEFAULT_CSC;\n          \n          \n            \n              private PluginConfig selectorConfig = UserCompactionUtils.DEFAULT_SELECTOR;",
                        "body": "I think these names weren't updated after previous changes.\r\n```suggestion\r\n  private PluginConfig selectorConfig = UserCompactionUtils.DEFAULT_SELECTOR;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "done in 5aa9672",
                        "body": "done in 5aa9672",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 53,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CompactionConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQwNDU5OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              private PluginConfig configurerConfig = UserCompactionUtils.DEFAULT_CCC;\n          \n          \n            \n              private PluginConfig configurerConfig = UserCompactionUtils.DEFAULT_CONFIGURER;",
                        "body": "```suggestion\r\n  private PluginConfig configurerConfig = UserCompactionUtils.DEFAULT_CONFIGURER;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 54,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "done in 5aa9672",
                        "body": "done in 5aa9672",
                        "startLine": null,
                        "line": null,
                        "originalLine": 54,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 54,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CompactionConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQyMzEyOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n             * imported files. Accumulo estimates that bulk imported files have zero entires. The second option\n          \n          \n            \n             * imported files. Accumulo estimates that bulk imported files have zero entries. The second option",
                        "body": "```suggestion\r\n * imported files. Accumulo estimates that bulk imported files have zero entries. The second option\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 52,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 52,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/TooManyDeletesSelector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQ0MzY0OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  \"Compaction planner for metadatat table\"),\n          \n          \n            \n                  \"Compaction planner for metadata table\"),",
                        "body": "```suggestion\r\n      \"Compaction planner for metadata table\"),\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 429,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 429,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQ1NjY5OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  \"Options for the table compaction configuror\"),\n          \n          \n            \n                  \"Options for the table compaction configurer\"),",
                        "body": "```suggestion\r\n      \"Options for the table compaction configurer\"),\r\n```",
                        "startLine": null,
                        "line": 706,
                        "originalLine": 706,
                        "originalStartLine": null
                    }
                ],
                "line": 706,
                "startLine": 706,
                "originalLine": 706,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQ1OTMwOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  \"A configurable dispatcher that decides what comaction service a table should use.\"),\n          \n          \n            \n                  \"A configurable dispatcher that decides what compaction service a table should use.\"),",
                        "body": "```suggestion\r\n      \"A configurable dispatcher that decides what compaction service a table should use.\"),\r\n```",
                        "startLine": null,
                        "line": 695,
                        "originalLine": 695,
                        "originalStartLine": null
                    }
                ],
                "line": 695,
                "startLine": 695,
                "originalLine": 695,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQ4MTAyOnYy",
                "comments": [
                    {
                        "bodyText": "API javadoc needs description.",
                        "body": "API javadoc needs description. ",
                        "startLine": null,
                        "line": 27,
                        "originalLine": 27,
                        "originalStartLine": null
                    }
                ],
                "line": 27,
                "startLine": 27,
                "originalLine": 27,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/CompactableFile.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjUwMjYyOnYy",
                "comments": [
                    {
                        "bodyText": "I think these names weren't updated after previous changes. (see other suggestion)",
                        "body": "I think these names weren't updated after previous changes. (see other suggestion)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 48,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 48,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/UserCompactionUtils.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjUxMDkxOnYy",
                "comments": [
                    {
                        "bodyText": "Looks like no changes to this file",
                        "body": "Looks like no changes to this file",
                        "startLine": null,
                        "line": 205,
                        "originalLine": 205,
                        "originalStartLine": null
                    }
                ],
                "line": 205,
                "startLine": 205,
                "originalLine": 205,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/singletons/SingletonManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU3OTg3OnYy",
                "comments": [
                    {
                        "bodyText": "Not sure what this means, javadoc could be improved.",
                        "body": "Not sure what this means, javadoc could be improved.",
                        "startLine": null,
                        "line": 22,
                        "originalLine": 22,
                        "originalStartLine": null
                    }
                ],
                "line": 22,
                "startLine": 22,
                "originalLine": 22,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionDirectives.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU5MTA1OnYy",
                "comments": [
                    {
                        "bodyText": "Javadoc description needed for public facing SPI.",
                        "body": "Javadoc description needed for public facing SPI.",
                        "startLine": null,
                        "line": 26,
                        "originalLine": 26,
                        "originalStartLine": null
                    }
                ],
                "line": 26,
                "startLine": 26,
                "originalLine": 26,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionKind.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjYzNDM2OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              /*\n          \n          \n            \n              /**",
                        "body": "```suggestion\r\n  /**\r\n```",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    }
                ],
                "line": 37,
                "startLine": 37,
                "originalLine": 37,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionPlanner.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjY3MzUzOnYy",
                "comments": [
                    {
                        "bodyText": "Should this class be in this package?",
                        "body": "Should this class be in this package?",
                        "startLine": null,
                        "line": 31,
                        "originalLine": 31,
                        "originalStartLine": null
                    }
                ],
                "line": 31,
                "startLine": 31,
                "originalLine": 31,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionsDirectiveImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjY4Mzg4OnYy",
                "comments": [
                    {
                        "bodyText": "Should have brief description.",
                        "body": "Should have brief description.",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 26,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "done in 5aa9672",
                        "body": "done in 5aa9672",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 26,
                        "originalStartLine": null
                    }
                ],
                "line": 28,
                "startLine": 28,
                "originalLine": 26,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionServices.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjcxNDMyOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n             * default it dispatches to a compction service named default.\n          \n          \n            \n             *\n          \n          \n            \n             * <p>\n          \n          \n            \n             * The following schema is supported for configration options.\n          \n          \n            \n             * default it dispatches to a compaction service named default.\n          \n          \n            \n             *\n          \n          \n            \n             * <p>\n          \n          \n            \n             * The following schema is supported for configuration options.",
                        "body": "```suggestion\r\n * default it dispatches to a compaction service named default.\r\n *\r\n * <p>\r\n * The following schema is supported for configuration options.\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 32,
                        "originalStartLine": 29
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 32,
                "originalStartLine": 29,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/SimpleCompactionDispatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Njc1MDkzOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n             * The following is a desciption of each functional component.\n          \n          \n            \n             *\n          \n          \n            \n             * <ul>\n          \n          \n            \n             * <li><b>Compaction Manager</b> A non pluggable component within the tablet server that brings all\n          \n          \n            \n             * other components together. The manager will route compactables to compaction services. For each\n          \n          \n            \n             * kind of compaction, an individual compactible will be routed to a single compaction service. For\n          \n          \n            \n             * The following is a description of each functional component.\n          \n          \n            \n             *\n          \n          \n            \n             * <ul>\n          \n          \n            \n             * <li><b>Compaction Manager</b> A non pluggable component within the tablet server that brings all\n          \n          \n            \n             * other components together. The manager will route compactables to compaction services. For each\n          \n          \n            \n             * kind of compaction, an individual compactable will be routed to a single compaction service. For",
                        "body": "```suggestion\r\n * The following is a description of each functional component.\r\n *\r\n * <ul>\r\n * <li><b>Compaction Manager</b> A non pluggable component within the tablet server that brings all\r\n * other components together. The manager will route compactables to compaction services. For each\r\n * kind of compaction, an individual compactable will be routed to a single compaction service. For\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": 29
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 34,
                "originalStartLine": 29,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/package-info.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Njg2MzMyOnYy",
                "comments": [
                    {
                        "bodyText": "This related to removal for merging minor compactions?",
                        "body": "This related to removal for merging minor compactions?",
                        "startLine": null,
                        "line": 247,
                        "originalLine": 247,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "yeah, eliminating merging minor compaction eliminated the need of dealing with a file being merged and in use by scans.",
                        "body": "yeah, eliminating merging minor compaction eliminated the need of dealing with a file being merged and in use by scans.",
                        "startLine": null,
                        "line": 247,
                        "originalLine": 247,
                        "originalStartLine": null
                    }
                ],
                "line": 247,
                "startLine": 247,
                "originalLine": 247,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/util/MasterMetadataUtil.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Njg3NTM3OnYy",
                "comments": [
                    {
                        "bodyText": "Is all the work for removing merging minor compactions done here?",
                        "body": "Is all the work for removing merging minor compactions done here? ",
                        "startLine": null,
                        "line": 38,
                        "originalLine": 38,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes",
                        "body": "Yes",
                        "startLine": null,
                        "line": 38,
                        "originalLine": 38,
                        "originalStartLine": null
                    }
                ],
                "line": 38,
                "startLine": 38,
                "originalLine": 38,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/ActiveCompaction.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "ctubbsii",
            "EdColeman",
            "milleruntime"
        ],
        "tdv": 1082.0,
        "description": {
            "bodyText": "This change adds support for multiple compaction executors and\nmultuple concurrent compactions per tablet.\nThe best way to understand these changes is to look at the documentation\nat core/src/main/java/org/apache/accumulo/core/spi/compaction/package-info.java\nThe javadocs mentioned above are hard to read in source form and are rendered at the link below.\nhttps://keith-turner.github.io/apidocs-accumulo-564/org/apache/accumulo/core/spi/compaction/package-summary.html\nThe following link was added on 5/13 and goes over some use cases\nhttps://gist.github.com/keith-turner/f6f7ca661d88b935b74f57dbdeeb07d3\nThe following link was added on 6/1 and documents a test I ran on a cluster with this code.\nhttps://gist.github.com/keith-turner/29b72dfa97acad53c395dd0724b65f1c"
        }
    },
    {
        "repo": "zookeeper",
        "pr_number": 2114,
        "title": {
            "body": "ZOOKEEPER-4791: Improve logging when the connection to a remote serve‚Ä¶",
            "bodyHTML": "ZOOKEEPER-4791: Improve logging when the connection to a remote serve‚Ä¶"
        },
        "comments": [
            {
                "id": "IC_kwDOAAJ0585yQlOC",
                "body": "ping @eolivelli - this looks good me now",
                "bodyText": "ping @eolivelli - this looks good me now",
                "createdAt": "2024-01-30T14:10:36Z",
                "author": "soenkeliebau"
            },
            {
                "id": "IC_kwDOAAJ0585yTC11",
                "body": "Ping @tisonkun . Thanks :) ",
                "bodyText": "Ping @tisonkun . Thanks :)",
                "createdAt": "2024-01-30T17:59:41Z",
                "author": "Maleware"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAJ058431ruQ",
                "comments": [
                    {
                        "bodyText": "it seem that you are not printing the state",
                        "body": "it seem that you are not printing the state",
                        "startLine": null,
                        "line": null,
                        "originalLine": 530,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah! Good catch, thanks!",
                        "body": "Yeah! Good catch, thanks!\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 530,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 530,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAJ058431ryT",
                "comments": [
                    {
                        "bodyText": "maybe \"UNKNOWN\" is better than \"null\" here ?",
                        "body": "maybe \"UNKNOWN\" is better than \"null\" here ?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 531,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think you are right, UNKOWN is a bit more speaking. Done.",
                        "body": "I think you are right, UNKOWN is a bit more speaking. Done.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 531,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "super-nit: I think I'd prefer \"unknown\", by capitalizing it we suggest that UNKNOWN is a variant of the State enum, whereas \"unknown\" would rather suggest that we were unable to figure out the state.\nBut again, super-super-nitty comment and I have no strong opinion - might just be my brain is wired weird to think about this :)",
                        "body": "super-nit: I think I'd prefer \"unknown\", by capitalizing it we suggest that UNKNOWN is a variant of the State enum, whereas \"unknown\" would rather suggest that we were unable to figure out the state.\r\nBut again, super-super-nitty comment and I have no strong opinion - might just be my brain is wired weird to think about this :)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 531,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 531,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Maleware",
            "soenkeliebau",
            "eolivelli",
            "tisonkun"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "‚Ä¶r is closed"
        }
    },
    {
        "repo": "struts",
        "pr_number": 552,
        "title": {
            "body": "[WW-5165] Upgrades Spring to version 5.3.20",
            "bodyHTML": "[WW-5165] Upgrades Spring to version 5.3.20"
        },
        "comments": [],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs4hWm9W",
                "comments": [
                    {
                        "bodyText": "Maybe we could add some additional infos to the commit to clarify the context\nRemove unused spring-webmvc-portlet\nSpring 5.x dropped support for spring-webmvc-portlet\nhttps://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x#dropped-support",
                        "body": "Maybe we could add some additional infos to the commit to clarify the context\r\n\r\nRemove unused spring-webmvc-portlet\r\nSpring 5.x dropped support for spring-webmvc-portlet\r\nhttps://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x#dropped-support",
                        "startLine": null,
                        "line": 133,
                        "originalLine": 133,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I know, but the Struts Portlet Plugin depends on it for now - the whole Portel thing is already marked as deprecated and will be gone with the next major release.",
                        "body": "I know, but the Struts Portlet Plugin depends on it for now - the whole Portel thing is already marked as deprecated and will be gone with the next major release.",
                        "startLine": null,
                        "line": 133,
                        "originalLine": 133,
                        "originalStartLine": null
                    }
                ],
                "line": 133,
                "startLine": 133,
                "originalLine": 133,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "plugins/portlet/pom.xml",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4hWnay",
                "comments": [
                    {
                        "bodyText": "background: Add spring-context for testing with StaticApplicationContext",
                        "body": "background: Add spring-context for testing with StaticApplicationContext",
                        "startLine": null,
                        "line": 247,
                        "originalLine": 247,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Do you mean to use <scope>test</scope>?",
                        "body": "Do you mean to use `<scope>test</scope>`?",
                        "startLine": null,
                        "line": 247,
                        "originalLine": 247,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I guess, for the test suite to work, this would suffice -- but my comment was just meant as a review note.",
                        "body": "I guess, for the test suite to work, this would suffice -- but my comment was just meant as a review note.",
                        "startLine": null,
                        "line": 247,
                        "originalLine": 247,
                        "originalStartLine": null
                    }
                ],
                "line": 247,
                "startLine": 247,
                "originalLine": 247,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/pom.xml",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4hWnrr",
                "comments": [
                    {
                        "bodyText": "good idea, to freeze the spring version here",
                        "body": "good idea, to freeze the spring version here",
                        "startLine": null,
                        "line": 54,
                        "originalLine": 54,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It's the only way to avoid conflict of dependencies :D",
                        "body": "It's the only way to avoid conflict of dependencies :D",
                        "startLine": null,
                        "line": 54,
                        "originalLine": 54,
                        "originalStartLine": null
                    }
                ],
                "line": 54,
                "startLine": 54,
                "originalLine": 54,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "plugins/portlet-mocks/pom.xml",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "lukaszlenart",
            "sepe81"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Refs WW-5165\nCloses #534"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3813,
        "title": {
            "body": "Modified ExternalCompactionUtil.findCompactionCoordinator to use ZooCache",
            "bodyHTML": "Modified ExternalCompactionUtil.findCompactionCoordinator to use ZooCache"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5oKhIt",
                "body": "Full IT build kicked off",
                "bodyText": "Full IT build kicked off",
                "createdAt": "2023-10-04T20:25:06Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4zTDgw",
                "comments": [
                    {
                        "bodyText": "There's a couple of different variants of this that are slightly more concise, some could inline the lockPath as well. I couldn't get it more concise than 3 lines. But, there is a variant of this that would inline the lockPath and still be only 3 lines total. I'm not sure if you want to go with any of them.\nBut, at a minimum, the String should be interpreting the address as UTF-8, because that's how it should have been persisted.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                byte[] address =\n          \n          \n            \n                    ServiceLock.getLockData(context.getZooCache(), ServiceLock.path(lockPath), new ZcStat());\n          \n          \n            \n                if (null == address) {\n          \n          \n            \n                  return Optional.empty();\n          \n          \n            \n                }\n          \n          \n            \n                return Optional.of(HostAndPort.fromString(new String(address)));\n          \n          \n            \n                Optional<byte[]> address = Optional.ofNullable(\n          \n          \n            \n                    ServiceLock.getLockData(context.getZooCache(), ServiceLock.path(lockPath), new ZcStat()));\n          \n          \n            \n                return address.map(bytes -> new String(bytes, UTF_8)).map(HostAndPort::fromString);",
                        "body": "There's a couple of different variants of this that are slightly more concise, some could inline the lockPath as well. I couldn't get it more concise than 3 lines. But, there is a variant of this that would inline the lockPath and still be only 3 lines total. I'm not sure if you want to go with any of them.\r\n\r\nBut, at a minimum, the String should be interpreting the address as UTF-8, because that's how it should have been persisted.\r\n\r\n```suggestion\r\n    Optional<byte[]> address = Optional.ofNullable(\r\n        ServiceLock.getLockData(context.getZooCache(), ServiceLock.path(lockPath), new ZcStat()));\r\n    return address.map(bytes -> new String(bytes, UTF_8)).map(HostAndPort::fromString);\r\n```\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 106,
                        "originalStartLine": 101
                    },
                    {
                        "bodyText": "I think I'm just going to add the UTF_8 argument to the String constructor. By modifying this to call Optional.map twice we are incurring 2 calls to Objects.requireNonNull, Optional.isPresent, and Optional.empty vs one null-check and one call to Optional.empty. Your suggestion may reduce the lines of code, but it's not as efficient in achieving the same result.",
                        "body": "I think I'm just going to add the `UTF_8` argument to the String constructor. By modifying this to call `Optional.map` twice we are incurring 2 calls to `Objects.requireNonNull`, `Optional.isPresent`, and `Optional.empty` vs one null-check and one call to `Optional.empty`. Your suggestion may reduce the lines of code, but it's not as efficient in achieving the same result.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 106,
                        "originalStartLine": 101
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 106,
                "originalStartLine": 101,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/util/compaction/ExternalCompactionUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner",
            "ctubbsii"
        ],
        "tdv": -35.0,
        "description": {
            "bodyText": "Closes #3783"
        }
    },
    {
        "repo": "commons-collections",
        "pr_number": 315,
        "title": {
            "body": "replaced merge with old mergeInPlace",
            "bodyHTML": "replaced merge with old mergeInPlace"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmGs5GNb7-",
                "body": "Any issues with merging this?",
                "bodyText": "Any issues with merging this?",
                "createdAt": "2022-07-07T16:54:26Z",
                "author": "Claudenw"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmGs4ikWwC",
                "comments": [
                    {
                        "bodyText": "Do we really need this file?",
                        "body": "Do we really need this file?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "added by accident, should be removed now.",
                        "body": "added by accident, should be removed now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/conf/checkstyle.orig",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmGs4ikWwo",
                "comments": [
                    {
                        "bodyText": "Do we really need this file?",
                        "body": "Do we really need this file?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "added by accident, should be removed now.",
                        "body": "added by accident, should be removed now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/conf/checkstyle2.xml",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Claudenw",
            "garydgregory"
        ],
        "tdv": -26.0,
        "description": {
            "bodyText": "This change makes merge() act like other collections {{merge}} methods and update the item in place.  The mergeInPlace() method is removed.  Any previous use of merge should be replaced with\nBloomFilter bf = bf1.copy();\nbf.merge( thing );\n\nfixes https://issues.apache.org/jira/browse/COLLECTIONS-829"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2243,
        "title": {
            "body": "Minor changes to compactable error message template",
            "bodyHTML": "Minor changes to compactable error message template"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM4198Oq",
                "body": "Thanks @Manno15 !",
                "bodyText": "Thanks @Manno15 !",
                "createdAt": "2021-08-25T11:51:37Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQyNzMxNDAyOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                      \"Compacting not in set of all files %s, compacting files %s\", this.allFiles,\n          \n          \n            \n                      \"Compacting not in set of all files: %s, compacting files: %s\", this.allFiles,",
                        "body": "```suggestion\r\n          \"Compacting not in set of all files: %s, compacting files: %s\", this.allFiles,\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 79,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 79,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/Compactable.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQyNzQzMDk1OnYy",
                "comments": [
                    {
                        "bodyText": "The message itself is still confusing to me. How about this?\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                      \"Compacting not in set of all files: %s, compacting files: %s\", this.allFiles,\n          \n          \n            \n                      compactingFiles);\n          \n          \n            \n                      \"Compacting files %s not in set of all files: %s\", compactingFiles,\n          \n          \n            \n                      this.allFiles);",
                        "body": "The message itself is still confusing to me. How about this?\r\n```suggestion\r\n          \"Compacting files %s not in set of all files: %s\", compactingFiles,\r\n          this.allFiles);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 80,
                        "originalStartLine": 79
                    },
                    {
                        "bodyText": "That does sound better",
                        "body": "That does sound better\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 80,
                        "originalStartLine": 79
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 80,
                "originalStartLine": 79,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/Compactable.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "Manno15",
            "milleruntime",
            "DomGarguilo"
        ],
        "tdv": null,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "httpcomponents-client",
        "pr_number": 501,
        "title": {
            "body": "HTTPCLIENT-2277: RFC 9111 conformance improvements / bug fixes",
            "bodyHTML": "HTTPCLIENT-2277: RFC 9111 conformance improvements / bug fixes"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmQs5q5Sxp",
                "body": "@arturobernalg This PR is still work in progress. Do take a look at the changes in `ResponseCachingPolicy` and `CachedResponseSuitabilityChecker` and let me know if find anything disagreeable.",
                "bodyText": "@arturobernalg This PR is still work in progress. Do take a look at the changes in ResponseCachingPolicy and CachedResponseSuitabilityChecker and let me know if find anything disagreeable.",
                "createdAt": "2023-11-04T10:17:37Z",
                "author": "ok2c"
            },
            {
                "id": "IC_kwDOAAMmQs5q6dQ9",
                "body": "@arturobernalg Please review.",
                "bodyText": "@arturobernalg Please review.",
                "createdAt": "2023-11-05T11:25:16Z",
                "author": "ok2c"
            },
            {
                "id": "IC_kwDOAAMmQs5riO9T",
                "body": "> @arturobernalg Please review.\r\n\r\nI haven't forgotten about this PR.",
                "bodyText": "@arturobernalg Please review.\n\nI haven't forgotten about this PR.",
                "createdAt": "2023-11-09T16:16:56Z",
                "author": "arturobernalg"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmQs4026Ch",
                "comments": [
                    {
                        "bodyText": "We can streamline the process by using StreamSupport.stream to create a stream directly from the Iterator<HeaderElement>. This approach eliminates the need for an intermediate collection and allows us to process elements in a single pipeline, which is more memory-efficient and idiomatic to the stream API.",
                        "body": "We can streamline the process by using `StreamSupport.stream` to create a stream directly from the `Iterator<HeaderElement>`. This approach eliminates the need for an intermediate collection and allows us to process elements in a single pipeline, which is more memory-efficient and idiomatic to the stream API.",
                        "startLine": null,
                        "line": 230,
                        "originalLine": 230,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@arturobernalg Agreed. Corrected. Please take another look.",
                        "body": "@arturobernalg Agreed. Corrected. Please take another look.",
                        "startLine": null,
                        "line": 230,
                        "originalLine": 230,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@arturobernalg Agreed. Corrected. Please take another look.\n\nPerfect. LGTM",
                        "body": "> @arturobernalg Agreed. Corrected. Please take another look.\r\n\r\nPerfect. LGTM",
                        "startLine": null,
                        "line": 230,
                        "originalLine": 230,
                        "originalStartLine": null
                    }
                ],
                "line": 230,
                "startLine": 230,
                "originalLine": 230,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "httpclient5-cache/src/main/java/org/apache/hc/client5/http/impl/cache/CacheKeyGenerator.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ok2c",
            "arturobernalg"
        ],
        "tdv": 134.0,
        "description": {
            "bodyText": "Aligns the behavior of the caching protocol handlers with the specification requirements (sections 3 and 4 RFC 9111)\nImproved normalization of variant header elements\nBug fixes"
        }
    },
    {
        "repo": "commons-collections",
        "pr_number": 316,
        "title": {
            "body": "COLLECTIONS-823: Modified ArrayCountingBloomFilter.forEachBitMap to be more efficient",
            "bodyHTML": "COLLECTIONS-823: Modified ArrayCountingBloomFilter.forEachBitMap to be more efficient"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmGs5FuMtQ",
                "body": "# [Codecov](https://codecov.io/gh/apache/commons-collections/pull/316?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) Report\n> Merging [#316](https://codecov.io/gh/apache/commons-collections/pull/316?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (ee4c826) into [master](https://codecov.io/gh/apache/commons-collections/commit/a79ea005b1ec4ad228067a9c5f2e10dcfb324c5e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (a79ea00) will **decrease** coverage by `0.03%`.\n> The diff coverage is `100.00%`.\n\n```diff\n@@             Coverage Diff              @@\n##             master     #316      +/-   ##\n============================================\n- Coverage     86.07%   86.03%   -0.04%     \n- Complexity     4673     4677       +4     \n============================================\n  Files           287      287              \n  Lines         13511    13524      +13     \n  Branches       1983     1989       +6     \n============================================\n+ Hits          11630    11636       +6     \n- Misses         1321     1325       +4     \n- Partials        560      563       +3     \n```\n\n\n| [Impacted Files](https://codecov.io/gh/apache/commons-collections/pull/316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) | Coverage Œî | |\n|---|---|---|\n| [...ections4/bloomfilter/ArrayCountingBloomFilter.java](https://codecov.io/gh/apache/commons-collections/pull/316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L2Jsb29tZmlsdGVyL0FycmF5Q291bnRpbmdCbG9vbUZpbHRlci5qYXZh) | `100.00% <100.00%> (√∏)` | |\n| [...commons/collections4/map/AbstractReferenceMap.java](https://codecov.io/gh/apache/commons-collections/pull/316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L21hcC9BYnN0cmFjdFJlZmVyZW5jZU1hcC5qYXZh) | `88.88% <0.00%> (-2.60%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/apache/commons-collections/pull/316?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation)\n> `Œî = absolute <relative> (impact)`, `√∏ = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/apache/commons-collections/pull/316?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation). Last update [a79ea00...ee4c826](https://codecov.io/gh/apache/commons-collections/pull/316?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation).\n",
                "bodyText": "Codecov Report\n\nMerging #316 (ee4c826) into master (a79ea00) will decrease coverage by 0.03%.\nThe diff coverage is 100.00%.\n\n@@             Coverage Diff              @@\n##             master     #316      +/-   ##\n============================================\n- Coverage     86.07%   86.03%   -0.04%     \n- Complexity     4673     4677       +4     \n============================================\n  Files           287      287              \n  Lines         13511    13524      +13     \n  Branches       1983     1989       +6     \n============================================\n+ Hits          11630    11636       +6     \n- Misses         1321     1325       +4     \n- Partials        560      563       +3     \n\n\n\nImpacted Files\nCoverage Œî\n\n\n\n\n\n...ections4/bloomfilter/ArrayCountingBloomFilter.java\n100.00% <100.00%> (√∏)\n\n\n\n...commons/collections4/map/AbstractReferenceMap.java\n88.88% <0.00%> (-2.60%)\n‚¨áÔ∏è\n\n\n\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\nŒî = absolute <relative> (impact), √∏ = not affected, ? = missing data\nPowered by Codecov. Last update a79ea00...ee4c826. Read the comment docs.",
                "createdAt": "2022-06-29T09:19:27Z",
                "author": "codecov-commenter"
            }
        ],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmGs4iq92a",
                "comments": [
                    {
                        "bodyText": "final int blocksm1\nAlthough it is the same number I would prefer counts.length here and not shape.getNumberOfBits() since it is the total length of the counts array that is being iterated over.",
                        "body": "`final int blocksm1`\r\n\r\nAlthough it is the same number I would prefer `counts.length` here and not `shape.getNumberOfBits()` since it is the total length of the counts array that is being iterated over.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 234,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "fixed",
                        "body": "fixed",
                        "startLine": null,
                        "line": null,
                        "originalLine": 234,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 234,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/collections4/bloomfilter/ArrayCountingBloomFilter.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAMmGs4iq9-9",
                "comments": [
                    {
                        "bodyText": "Remove the the",
                        "body": "Remove `the the`",
                        "startLine": null,
                        "line": null,
                        "originalLine": 237,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "done",
                        "body": "done",
                        "startLine": null,
                        "line": null,
                        "originalLine": 237,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 237,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/collections4/bloomfilter/ArrayCountingBloomFilter.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Claudenw",
            "codecov-commenter",
            "aherbert"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Resolves https://issues.apache.org/jira/projects/COLLECTIONS/issues/COLLECTIONS-823\nModifies ArrayCountingBloomFilter.forEachBitmap() to be more efficient. by not creating an array of longs but building each long and calling the consumer in turn."
        }
    },
    {
        "repo": "opennlp",
        "pr_number": 512,
        "title": {
            "body": "OPENNLP-1476 Modernize DictionaryEntryPersistor to create XMLReader via javax.xml.parsers.SAXParserFactory",
            "bodyHTML": "OPENNLP-1476 Modernize DictionaryEntryPersistor to create XMLReader via javax.xml.parsers.SAXParserFactory"
        },
        "comments": [
            {
                "id": "IC_kwDOACnPtM5WrFTF",
                "body": "@kinow / @rzo1 / @jzonthemtn Please see my \"Notes\" comment in the PR description.\r\n\r\nIf possible on your side, please report back whether faster built-times are reproducible in your dev setup. \r\nWith it we could estimate a performance increase for certain scenarios. ",
                "bodyText": "@kinow / @rzo1 / @jzonthemtn Please see my \"Notes\" comment in the PR description.\nIf possible on your side, please report back whether faster built-times are reproducible in your dev setup.\nWith it we could estimate a performance increase for certain scenarios.",
                "createdAt": "2023-03-03T21:11:03Z",
                "author": "mawiesne"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACnPtM4q6G6J",
                "comments": [
                    {
                        "bodyText": "What are the implications of this?",
                        "body": "What are the implications of this?",
                        "startLine": null,
                        "line": 234,
                        "originalLine": 234,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Basically, from a runtime perspective: none.\nThe switch to this way of creating the XMLReader instance is kind of a modernization.\nYou might wanna check the JavaDoc of XMLReaderFactory.createXMLReader() for details: https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/xml/sax/helpers/XMLReaderFactory.html",
                        "body": "Basically, from a runtime perspective: _none_. \r\n\r\nThe switch to this way of creating the XMLReader instance is kind of a modernization. \r\nYou might wanna check the JavaDoc of `XMLReaderFactory.createXMLReader()` for details: https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/xml/sax/helpers/XMLReaderFactory.html",
                        "startLine": null,
                        "line": 234,
                        "originalLine": 234,
                        "originalStartLine": null
                    }
                ],
                "line": 234,
                "startLine": 234,
                "originalLine": 234,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "opennlp-tools/src/main/java/opennlp/tools/dictionary/serializer/DictionaryEntryPersistor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "mawiesne",
            "kinow",
            "jzonthemtn",
            "rzo1"
        ],
        "tdv": -30.0,
        "description": {
            "bodyText": "Notes:\n\nI experienced a lower built-time when compared with the latest main branch (MacOS, M1)\nmain: ~¬†60s, with this change/PR: ~¬†55s\n\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  55.863 s\n\nTasks\nThank you for contributing to Apache OpenNLP.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically main)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?\n Have you written or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2106,
        "title": {
            "body": "Make LogReader more discoverable",
            "bodyHTML": "Make LogReader more discoverable"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg0MDcyODEyNg==",
                "body": "Sounds good, thanks @jmark99 ",
                "bodyText": "Sounds good, thanks @jmark99",
                "createdAt": "2021-05-13T17:56:13Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwNTExMDkzOnYy",
                "comments": [
                    {
                        "bodyText": "This is okay, but I wonder if this will allow users to see the full usage. Is there a --help or -? option to show the usage, or if the command-line options are wrong, is there anyway for the user to see what the correct usage is? The code that this bit replaces did new JCommander(opts).usage().",
                        "body": "This is okay, but I wonder if this will allow users to see the full usage. Is there a `--help` or `-?` option to show the usage, or if the command-line options are wrong, is there anyway for the user to see what the correct usage is? The code that this bit replaces did `new JCommander(opts).usage()`.",
                        "startLine": 99,
                        "line": 103,
                        "originalLine": 103,
                        "originalStartLine": 99
                    },
                    {
                        "bodyText": "There is a -h/--help and -? option available for the command. I followed the convention used with accumulo rfile-info. Initially I printed the given message and called the JCommander usage command. I wasn't particularly happy with what it printed out initially:\n Usage: <main class> [options] <logfile> { **<logfile** ...}\n\nI didn't find a way to have it replace '<main class>' with 'accumulo wal-info. The help options properly display 'accumulo wal-info ...' in the usage statement as desired. I'm okay putting the JCommander.usage back in but I wasn't sure if the <main class> verbiage would be confusing to users. Thoughts?",
                        "body": "There is a -h/--help and -? option available for the command. I followed the convention used with accumulo rfile-info. Initially I printed the given message and called the JCommander usage command. I wasn't particularly happy with what it printed out initially:\r\n<pre>\r\n Usage: &lt;main class&gt; [options] &lt;logfile&gt; { **&lt;logfile** ...}\r\n</pre>\r\nI didn't find a way to have it replace '&lt;main class&gt;' with 'accumulo wal-info. The help options properly display 'accumulo wal-info ...' in the usage statement as desired. I'm okay putting the JCommander.usage back in but I wasn't sure if the &lt;main class&gt; verbiage would be confusing to users. Thoughts?",
                        "startLine": 99,
                        "line": 103,
                        "originalLine": 103,
                        "originalStartLine": 99
                    },
                    {
                        "bodyText": "I think this is consistent with what we do with the other KeywordExecutable utilities. Perhaps we could add an exit method to the interface to use by them all. The method could take the Help object since it has an exit method that's called by the JCommander parseArgs.",
                        "body": "I think this is consistent with what we do with the other KeywordExecutable utilities. Perhaps we could add an exit method to the interface to use by them all. The method could take the Help object since it has an exit method that's called by the JCommander parseArgs.",
                        "startLine": 99,
                        "line": 103,
                        "originalLine": 103,
                        "originalStartLine": 99
                    },
                    {
                        "bodyText": "The following code will print the message and then display the usage:\n    if (opts.files.isEmpty()) { \n      JCommander jc = new JCommander(opts);\n      jc.setProgramName(\"accumulo wal-info\");\n      System.err.println(\"No WAL files were given\");\n      jc.usage();\n      System.exit(1);\n    }\n\nWe can do this or merge the current changes and then place a follow-on ticket to implement Mike's suggestion.",
                        "body": "The following code will print the message and then display the usage:\r\n\r\n```\r\n    if (opts.files.isEmpty()) { \r\n      JCommander jc = new JCommander(opts);\r\n      jc.setProgramName(\"accumulo wal-info\");\r\n      System.err.println(\"No WAL files were given\");\r\n      jc.usage();\r\n      System.exit(1);\r\n    }\r\n```\r\nWe can do this or merge the current changes and then place a follow-on ticket to implement Mike's suggestion. ",
                        "startLine": 99,
                        "line": 103,
                        "originalLine": 103,
                        "originalStartLine": 99
                    },
                    {
                        "bodyText": "As long as there's some way for users to discover the usage, I don't necessarily care about the details. I just wasn't sure if the current changes still supported some kind of discovery. If you say there is a help flag already, then that's sufficient for me. If you want to make additional improvements later, that's also fine.",
                        "body": "As long as there's some way for users to discover the usage, I don't necessarily care about the details. I just wasn't sure if the current changes still supported some kind of discovery. If you say there is a help flag already, then that's sufficient for me. If you want to make additional improvements later, that's also fine.",
                        "startLine": 99,
                        "line": 103,
                        "originalLine": 103,
                        "originalStartLine": 99
                    },
                    {
                        "bodyText": "I will merge with the current update and we can create a follow-on ticket if we decide to pursue additional improvements.",
                        "body": "I will merge with the current update and we can create a follow-on ticket if we decide to pursue additional improvements.",
                        "startLine": 99,
                        "line": 103,
                        "originalLine": 103,
                        "originalStartLine": 99
                    }
                ],
                "line": 103,
                "startLine": 99,
                "originalLine": 103,
                "originalStartLine": 99,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/logger/LogReader.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "jmark99",
            "milleruntime",
            "ctubbsii"
        ],
        "tdv": 10.0,
        "description": {
            "bodyText": "Use the KeywordExecutable service to make wal-info (the WAL LogReader class) available as part of the Accumulo command line. Can be used by running:\naccumulo wal-info\nCloses #2100"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1508,
        "title": {
            "body": "Fix ondemand rebalance flooding and log flooding caused by dangling jobs",
            "bodyHTML": "Fix ondemand rebalance flooding and log flooding caused by dangling jobs"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyMDk3MzU1NQ==",
                "body": "I think the logic change is fine. But it's better to add the test coverage.",
                "bodyText": "I think the logic change is fine. But it's better to add the test coverage.",
                "createdAt": "2020-11-03T08:27:20Z",
                "author": "jiajunwang"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyMTg3NjkyMw==",
                "body": "This PR is ready to be merged, approved by @alirezazamani\r\nFinal commit message:\r\n## Fix ondemand rebalance flooding and log flooding caused by dangling jobs  ##\r\nThis PR changes runtime dag refresh logic to eliminate ondemand rebalance flooding caused by dangling jobs. This PR also changes log level to get rid of log flooding caused by missing target resources. ",
                "bodyText": "This PR is ready to be merged, approved by @alirezazamani\nFinal commit message:\nFix ondemand rebalance flooding and log flooding caused by dangling jobs\nThis PR changes runtime dag refresh logic to eliminate ondemand rebalance flooding caused by dangling jobs. This PR also changes log level to get rid of log flooding caused by missing target resources.",
                "createdAt": "2020-11-04T17:43:06Z",
                "author": "NealSun96"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjQyNTQxOnYy",
                "comments": [
                    {
                        "bodyText": "Why this section is removed: this section is refresh runtime dags based on JobConfigs. For every new job config, its workflow is added; for ever job config that doesn't exist in the jobqueue's dag (seems to be duplicate with the first part of logic), its workflow is added.\nWith dangling jobs, their jobConfigs are never deleted, so this section is activated all the time and the workflow, if exists, will have its DAG refreshed all the time. The problem is detailed in PR description.\nI don't think the extra logic for new job config or for the race condition makes much sense, given that a new logic which compares WorkflowConfig version is in place - if a new job is added, eventually the DAG will be updated, which will cause a version change and a runtime dag refresh.",
                        "body": "Why this section is removed: this section is refresh runtime dags based on JobConfigs. For every new job config, its workflow is added; for ever job config that doesn't exist in the jobqueue's dag (seems to be duplicate with the first part of logic), its workflow is added. \r\n\r\nWith dangling jobs, their jobConfigs are never deleted, so this section is activated all the time and the workflow, if exists, will have its DAG refreshed all the time. The problem is detailed in PR description. \r\n\r\nI don't think the extra logic for new job config or for the race condition makes much sense, given that a new logic which compares WorkflowConfig version is in place - if a new job is added, eventually the DAG will be updated, which will cause a version change and a runtime dag refresh. ",
                        "startLine": null,
                        "line": 119,
                        "originalLine": 119,
                        "originalStartLine": null
                    }
                ],
                "line": 119,
                "startLine": 119,
                "originalLine": 119,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/common/caches/TaskDataCache.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTA5NjMwOnYy",
                "comments": [
                    {
                        "bodyText": "Maybe this comment needs to be changed. It was added for the purge race condition. Now it is serving as general-purpose workflow config modification.",
                        "body": "Maybe this comment needs to be changed. It was added for the purge race condition. Now it is serving as general-purpose workflow config modification.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 120,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 120,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/common/caches/TaskDataCache.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "NealSun96",
            "jiajunwang",
            "alirezazamani"
        ],
        "tdv": -5.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1506, #1507\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR fixes 2 issues:\n\nOndemand rebalance flooding after TF IS removal. This is caused by an old problem. A jobConfig can exist for the previous iterations of a workflow, but the job doesn't exist in the job DAG. Because of runtime DAG refresh logic, such a jobConfig will cause the runtime DAG to be refreshed every time the pipeline runs. A new runtime DAG causes all the jobs to be reprocessed, and during processing, the cleanup logic is run for every job that has already completed. Before IS removal, the cleanup logic attempts to delete the IS again, which has no effect; in the new code, an onDemand rebalance is triggered instead.\nThis \"dangling job\" will not be removed, so the job dag refresh keeps on happening, which causes the ondemand rebalances to keep on firing.\nLog flooding for jobs that miss target resources after TF IS removal. Similarly, \"dangling jobs\" can have missing target resources once their target resources are deleted. Before IS removal, this is not a problem because this log is only triggered when the job is first processed; now, the processing logic happens every pipeline (since it's config based, instead of IS based), so the log could keep on firing.\n\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 1237, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4,907.142 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1237, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:21 h\n[INFO] Finished at: 2020-11-03T13:22:54-08:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3481,
        "title": {
            "body": "Remove redundant main from zoo-info-viewer tool",
            "bodyHTML": "Remove redundant main from zoo-info-viewer tool"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5enkLX",
                "body": "This additional testing in this PR was inspired by a comment on https://github.com/apache/accumulo/pull/3445 \r\n\r\n@ctubbsii  wrote:\r\n```\r\nThis is out of scope for this PR, but we may want to add a test to check that we don't introduce new main classes unintentionally. Currently we only have a test that checks that we're preserving the existing ones... but a better test would be to check through all our classes, and check each one for having a main method, and failing if it finds any we haven't identified as needing one.\r\n```\r\n\r\nThe removal on main from zoo-info-viewer is to prefer consistency in launch options for two similar tools new to 2.1 (zoo-info-viewer) and 2.1.1 (zoo-prop-editor)\r\n",
                "bodyText": "This additional testing in this PR was inspired by a comment on #3445\n@ctubbsii  wrote:\nThis is out of scope for this PR, but we may want to add a test to check that we don't introduce new main classes unintentionally. Currently we only have a test that checks that we're preserving the existing ones... but a better test would be to check through all our classes, and check each one for having a main method, and failing if it finds any we haven't identified as needing one.\n\nThe removal on main from zoo-info-viewer is to prefer consistency in launch options for two similar tools new to 2.1 (zoo-info-viewer) and 2.1.1 (zoo-prop-editor)",
                "createdAt": "2023-06-12T14:13:34Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5eqJGT",
                "body": "> The changes really improve the original submission.\r\n\r\nYeah, it was a good opportunity to get that extra test coverage.",
                "bodyText": "The changes really improve the original submission.\n\nYeah, it was a good opportunity to get that extra test coverage.",
                "createdAt": "2023-06-12T21:08:30Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4uw0Q7",
                "comments": [
                    {
                        "bodyText": "This previously used the fully qualified class name because you can't suppress the deprecation warning in the imports. It should be changed back.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                expectSet.put(\"master\", MasterExecutable.class);\n          \n          \n            \n                expectSet.put(\"master\", MasterExecutable.class);",
                        "body": "This previously used the fully qualified class name because you can't suppress the deprecation warning in the imports. It should be changed back.\r\n\r\n```suggestion\r\n    expectSet.put(\"master\", MasterExecutable.class);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 140,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 140,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/start/KeywordStartIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4uw1u2",
                "comments": [
                    {
                        "bodyText": "This only checks for KeywordExecutables that have a main method that we didn't expect. My comment was to check all classes, not just KeywordExecutable classes. So, this is a start, but incomplete (relative to the suggestion).",
                        "body": "This only checks for KeywordExecutables that have a main method that we didn't expect. My comment was to check all classes, not just KeywordExecutable classes. So, this is a start, but incomplete (relative to the suggestion).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 227,
                        "originalStartLine": 226
                    },
                    {
                        "bodyText": "My suggestion can be done for 3.x",
                        "body": "My suggestion can be done for 3.x",
                        "startLine": null,
                        "line": null,
                        "originalLine": 227,
                        "originalStartLine": 226
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 227,
                "originalStartLine": 226,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/start/KeywordStartIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "EdColeman",
            "ctubbsii"
        ],
        "tdv": -18.0,
        "description": {
            "bodyText": "removes instanceName and instanceId as command line options\nimproves KeywordStartIT to check for methods that have a main in addition to verifying legacy utilities keep a main\nsmall doc improvements clarifying main usage in tools"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1765,
        "title": {
            "body": "Issue #1742 - Added forEach to ScannerBase. Added test in ScannerIT.",
            "bodyHTML": "Issue #1742 - Added forEach to ScannerBase. Added test in ScannerIT."
        },
        "comments": [],
        "total_comments_count": 13,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjA2NDYyOnYy",
                "comments": [
                    {
                        "bodyText": "Needs a @since 2.1.0 javadoc tag.",
                        "body": "Needs a `@since 2.1.0` javadoc tag. ",
                        "startLine": null,
                        "line": 368,
                        "originalLine": 361,
                        "originalStartLine": null
                    }
                ],
                "line": 368,
                "startLine": 368,
                "originalLine": 361,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/ScannerBase.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDMyMjk1OnYy",
                "comments": [
                    {
                        "bodyText": "You don't need to compare CF and CQ, you can compare Key equality directly. That will shorten the test code a bit. You also don't need to call toString() on anything.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n          \n          \n            \n                  Key expectedKey = expectedEntry.getKey();\n          \n          \n            \n                  Value expectedValue = expectedEntry.getValue();\n          \n          \n            \n            \n          \n          \n            \n                  String expectedCf = expectedKey.getColumnFamily().toString();\n          \n          \n            \n                  String actualCf = entry.getKey().getColumnFamily().toString();\n          \n          \n            \n            \n          \n          \n            \n                  String expectedCq = expectedKey.getColumnQualifier().toString();\n          \n          \n            \n                  String actualCq = entry.getKey().getColumnQualifier().toString();\n          \n          \n            \n            \n          \n          \n            \n                  String expectedVal = expectedValue.toString();\n          \n          \n            \n                  String actualVal = entry.getValue().toString();\n          \n          \n            \n            \n          \n          \n            \n                  assertEquals(expectedCf, actualCf);\n          \n          \n            \n                  assertEquals(expectedCq, actualCq);\n          \n          \n            \n                  assertEquals(expectedVal, actualVal);\n          \n          \n            \n                  Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n          \n          \n            \n                  assertEquals(expectedEntry.getKey(), entry.getKey());\n          \n          \n            \n                  assertEquals(expectedEntry.getValue(), entry.getValue());",
                        "body": "You don't need to compare CF and CQ, you can compare Key equality directly. That will shorten the test code a bit. You also don't need to call `toString()` on anything.\r\n\r\n```suggestion\r\n      Map.Entry<Key,Value> expectedEntry = s.iterator().next();\r\n      assertEquals(expectedEntry.getKey(), entry.getKey());\r\n      assertEquals(expectedEntry.getValue(), entry.getValue());\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 114,
                        "originalStartLine": 99
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 114,
                "originalStartLine": 99,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDMzMjg5OnYy",
                "comments": [
                    {
                        "bodyText": "I don't think most (if any) of these should be class members. They can be local variables in the test case.",
                        "body": "I don't think most (if any) of these should be class members. They can be local variables in the test case.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 46,
                        "originalStartLine": 40
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 46,
                "originalStartLine": 40,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM0MTg3OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                Map<Key,Value> map = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                class MyBiConsumer implements BiConsumer<Key,Value> {\n          \n          \n            \n                  @Override\n          \n          \n            \n                  public void accept(Key key, Value value) {\n          \n          \n            \n                    map.put(key, value);\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                keyValueConsumer = new MyBiConsumer();\n          \n          \n            \n            \n          \n          \n            \n                fet.forEach(keyValueConsumer);\n          \n          \n            \n                Map<Key,Value> map = new HashMap<>();\n          \n          \n            \n                fet.forEach((k,v) -> map.put(k,v));",
                        "body": "```suggestion\r\n    Map<Key,Value> map = new HashMap<>();\r\n    fet.forEach((k,v) -> map.put(k,v));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 94,
                        "originalStartLine": 83
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 94,
                "originalStartLine": 83,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM0MzUxOnYy",
                "comments": [
                    {
                        "bodyText": "Should verify mock objects at the end of the test.",
                        "body": "Should verify mock objects at the end of the test.",
                        "startLine": null,
                        "line": 138,
                        "originalLine": 115,
                        "originalStartLine": null
                    }
                ],
                "line": 138,
                "startLine": 138,
                "originalLine": 115,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM0NjA0OnYy",
                "comments": [
                    {
                        "bodyText": "This can be done in the test. It doesn't need to be here, unless it's common code for multiple tests.",
                        "body": "This can be done in the test. It doesn't need to be here, unless it's common code for multiple tests.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 66,
                        "originalStartLine": 63
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 66,
                "originalStartLine": 63,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTM3MDA3OnYy",
                "comments": [
                    {
                        "bodyText": "Didn't notice this before, but Java class names should start uppercase.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              private static class forEachTester {\n          \n          \n            \n              private static class ForEachTester {",
                        "body": "Didn't notice this before, but Java class names should start uppercase.\r\n```suggestion\r\n  private static class ForEachTester {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Later comment makes this suggestion unnecessary. The class isn't needed at all.",
                        "body": "Later comment makes this suggestion unnecessary. The class isn't needed at all.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 40,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTM4NTQzOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                ScannerBase s;\n          \n          \n            \n                Map<Key,Value> scannerMap;\n          \n          \n            \n                Iterator<Map.Entry<Key,Value>> it;\n          \n          \n            \n                Key key;\n          \n          \n            \n                Value val;\n          \n          \n            \n                BiConsumer<Key,Value> keyValueConsumer;\n          \n          \n            \n                forEachTester fet;\n          \n          \n            \n            \n          \n          \n            \n                s = createMock(ScannerBase.class);\n          \n          \n            \n                key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n          \n          \n            \n                val = new Value(new Text(\"v1\"));\n          \n          \n            \n                scannerMap = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                scannerMap.put(key, val);\n          \n          \n            \n            \n          \n          \n            \n                fet = new forEachTester(scannerMap);\n          \n          \n            \n            \n          \n          \n            \n                it = scannerMap.entrySet().iterator();\n          \n          \n            \n                ScannerBase s = createMock(ScannerBase.class);\n          \n          \n            \n                Map<Key,Value> scannerMap = new HashMap<>();\n          \n          \n            \n                scannerMap.put(new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v1\")));\n          \n          \n            \n                scannerMap.put(new Key(new Text(\"b\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v2\")));\n          \n          \n            \n                ForEachTester fet = new ForEachTester(scannerMap);\n          \n          \n            \n            \n          \n          \n            \n                Iterator<Map.Entry<Key,Value>> it = scannerMap.entrySet().iterator();",
                        "body": "```suggestion\r\n    ScannerBase s = createMock(ScannerBase.class);\r\n    Map<Key,Value> scannerMap = new HashMap<>();\r\n    scannerMap.put(new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v1\")));\r\n    scannerMap.put(new Key(new Text(\"b\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v2\")));\r\n    ForEachTester fet = new ForEachTester(scannerMap);\r\n\r\n    Iterator<Map.Entry<Key,Value>> it = scannerMap.entrySet().iterator();\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 75,
                        "originalStartLine": 58
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 75,
                "originalStartLine": 58,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTM5NzMwOnYy",
                "comments": [
                    {
                        "bodyText": "After simplifying a bit myself, it seems like that the forEach concept is being tested on the ForEachTester object, but the test is never actually calling the ScannerBase.forEach method... which is the method that this test case should be covering.\nIt would be better if ScannerBase was a partial mock... overriding iterator() (as you've already done), but leaving the implementation of forEach alone, and calling that in your test. The ForEachTester class doesn't seem necessary at all. It can simply be deleted.",
                        "body": "After simplifying a bit myself, it seems like that the `forEach` concept is being tested on the `ForEachTester` object, but the test is never actually calling the `ScannerBase.forEach` method... which is the method that this test case should be covering.\r\n\r\nIt would be better if `ScannerBase` was a partial mock... overriding `iterator()` (as you've already done), but leaving the implementation of `forEach` alone, and calling that in your test. The `ForEachTester` class doesn't seem necessary at all. It can simply be deleted.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 81,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 81,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDM5NTY0OnYy",
                "comments": [
                    {
                        "bodyText": "Extending List forces you to add implementations for a bunch of methods. You can just implement ScannerBase, and have a constructor that takes a map, which itself is easily constructed, using Map.of(...). MockScanner's iterator() method can just return map.entrySet().iterator().",
                        "body": "Extending List forces you to add implementations for a bunch of methods. You can just implement ScannerBase, and have a constructor that takes a `map`, which itself is easily constructed, using `Map.of(...)`. MockScanner's `iterator()` method can just return `map.entrySet().iterator()`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 58,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 58,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "cradal",
            "keith-turner",
            "ctubbsii"
        ],
        "tdv": 97.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1795,
        "title": {
            "body": "Read/Write config files consistently",
            "bodyHTML": "Read/Write config files consistently"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDczMDY0NzA1MQ==",
                "body": "Finally figured out the problem. VolumeIT needs to update an existing config file, so it needs to read the old one, update it, then write a new one. The old FileBasedConfigurationBuilder code that was changed in #1786 was not obvious that it needed to both read and write. I have a fix incoming.",
                "bodyText": "Finally figured out the problem. VolumeIT needs to update an existing config file, so it needs to read the old one, update it, then write a new one. The old FileBasedConfigurationBuilder code that was changed in #1786 was not obvious that it needed to both read and write. I have a fix incoming.",
                "createdAt": "2020-11-19T21:27:16Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTA3MDQwOnYy",
                "comments": [
                    {
                        "bodyText": "It's odd that this constructor throws a more general exception, I would think it would have been the other way around.",
                        "body": "It's odd that this constructor throws a more general exception, I would think it would have been the other way around.  ",
                        "startLine": null,
                        "line": 74,
                        "originalLine": 74,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This constructor is newer, so they probably made it less specific because they declared their exceptions too narrowly when they wrote the original method.",
                        "body": "This constructor is newer, so they probably made it less specific because they declared their exceptions too narrowly when they wrote the original method.",
                        "startLine": null,
                        "line": 74,
                        "originalLine": 74,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Ah OK, that makes sense.",
                        "body": "Ah OK, that makes sense.",
                        "startLine": null,
                        "line": 74,
                        "originalLine": 74,
                        "originalStartLine": null
                    }
                ],
                "line": 74,
                "startLine": 74,
                "originalLine": 74,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/cluster/RemoteShellOptions.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTA3NTI4OnYy",
                "comments": [
                    {
                        "bodyText": "Looks like this changed got dinged by Sec bugs.  Should triage this before committing.",
                        "body": "Looks like this changed got dinged by Sec bugs.  Should triage this before committing. ",
                        "startLine": null,
                        "line": 93,
                        "originalLine": 92,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Here is the reference, I don't think it applies: https://find-sec-bugs.github.io/bugs.htm#URLCONNECTION_SSRF_FD",
                        "body": "Here is the reference, I don't think it applies: https://find-sec-bugs.github.io/bugs.htm#URLCONNECTION_SSRF_FD",
                        "startLine": null,
                        "line": 93,
                        "originalLine": 92,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah, I'm fixing that now. Also, my test didn't pass, so I still need to figure out if this actually fixes the bug I was seeing in the tests.",
                        "body": "Yeah, I'm fixing that now. Also, my test didn't pass, so I still need to figure out if this actually fixes the bug I was seeing in the tests.",
                        "startLine": null,
                        "line": 93,
                        "originalLine": 92,
                        "originalStartLine": null
                    }
                ],
                "line": 93,
                "startLine": 93,
                "originalLine": 92,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "start/src/main/java/org/apache/accumulo/start/classloader/AccumuloClassLoader.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "dlmarion",
            "milleruntime"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Use UTF-8 for all FileReaders and FileWriters\nUse an InputStreamReader instead of a FileReader for reading class\npath resources identified with a URL rather than a file name\nThis fixes a failure in some ITs, including VolumeIT, which reads a\nclass path resource, rather than a file\nEnsure PropertiesConfigurations use read() and write() instead of\nless convenient getlayout() methods to load/save"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2234,
        "title": {
            "body": "Create AccumuloDataVersion",
            "bodyHTML": "Create AccumuloDataVersion"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM5NjQ1NzU5OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n               // defines Accumulo data version constants",
                        "body": "```suggestion\r\n   // defines Accumulo data version constants\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 24,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 24,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/Constants.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "EdColeman"
        ],
        "tdv": 76.0,
        "description": {
            "bodyText": "Move data version from ServerConstants to AccumuloDataVersion and added\njavadoc description\nCreate AccumuloDataVersion.get() for getting data version\nMove other constants from ServerConstants to Constants\nRename ServerConstants to ServerDirs"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2339,
        "title": {
            "body": "Update parent POM, plugins, LICENSE",
            "bodyHTML": "Update parent POM, plugins, LICENSE"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM45Gbbm",
                "body": "LGTM - seeing all of the places where we create an instance of SecureRandom - would there be significant benefit if a ServerContext created an instance an then it was reused anywhere that a random number was needed and context was available - possibly as a follow on PR?",
                "bodyText": "LGTM - seeing all of the places where we create an instance of SecureRandom - would there be significant benefit if a ServerContext created an instance an then it was reused anywhere that a random number was needed and context was available - possibly as a follow on PR?",
                "createdAt": "2021-11-02T17:48:34Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM45Gecv",
                "body": "> LGTM - seeing all of the places where we create an instance of SecureRandom - would there be significant benefit if a ServerContext created an instance an then it was reused anywhere that a random number was needed and context was available - possibly as a follow on PR?\r\n\r\nSo, I thought about that... but, there's a risk of having things block if the Java security provider for SecureRandom isn't thread safe. So, I chose to limit the amount of sharing of these instances. So, if the implementation is thread-safe, there's just a few extra objects hanging around in the JVM, but if it's not thread-safe, the scope of any potential contention is limited.",
                "bodyText": "LGTM - seeing all of the places where we create an instance of SecureRandom - would there be significant benefit if a ServerContext created an instance an then it was reused anywhere that a random number was needed and context was available - possibly as a follow on PR?\n\nSo, I thought about that... but, there's a risk of having things block if the Java security provider for SecureRandom isn't thread safe. So, I chose to limit the amount of sharing of these instances. So, if the implementation is thread-safe, there's just a few extra objects hanging around in the JVM, but if it's not thread-safe, the scope of any potential contention is limited.",
                "createdAt": "2021-11-02T18:04:59Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4cNpz_",
                "comments": [
                    {
                        "bodyText": "I do not have an issue with the change, but this instance (and that in CryptoUtils) seemed to go out of the way to allow a specific SecureRandom type to be used - could there be a specific reason?  I don't know, maybe some kind of external compatibility with something that would have been verified with particular algorithm - or somehow to prevent something that would weaken the effectiveness of the encryption in some use-cases?",
                        "body": "I do not have an issue with the change, but this instance (and that in CryptoUtils) seemed to go out of the way to allow a specific SecureRandom type to be used - could there be a specific reason?  I don't know, maybe some kind of external compatibility with something that would have been verified with particular algorithm - or somehow to prevent something that would weaken the effectiveness of the encryption in some use-cases?",
                        "startLine": null,
                        "line": 317,
                        "originalLine": 317,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I provided an explanation in the commit message / description above. See \"Remove use of explicit SHA1PRNG implementation of SecureRandom\". SHA1PRNG is, by far, a weaker implementation than whatever /dev/urandom (the default) would give, and specifying the SUN implementation explicitly bypasses user's ability to configure their own Java security providers. In future, the SUN implementation may not even be available. If a specific provider/implementation is desired, it should be configured in the Java security config files, not hard-coded here, bypassing the secure settings set by a system administrator.",
                        "body": "I provided an explanation in the commit message / description above. See \"Remove use of explicit SHA1PRNG implementation of SecureRandom\". SHA1PRNG is, by far, a weaker implementation than whatever /dev/urandom (the default) would give, and specifying the SUN implementation explicitly bypasses user's ability to configure their own Java security providers. In future, the SUN implementation may not even be available. If a specific provider/implementation is desired, it should be configured in the Java security config files, not hard-coded here, bypassing the secure settings set by a system administrator.",
                        "startLine": null,
                        "line": 317,
                        "originalLine": 317,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Again - I agree with the change and I think what you are proposing is a move in a better direction.  What I wonder is why was this done originally - maybe it was unnecessary or was attempting something that it didn't quite materialize.  It would just help validate the change if the original intent can be determined.",
                        "body": "Again - I agree with the change and I think what you are proposing is a move in a better direction.  What I wonder is why was this done originally - maybe it was unnecessary or was attempting something that it didn't quite materialize.  It would just help validate the change if the original intent can be determined.",
                        "startLine": null,
                        "line": 317,
                        "originalLine": 317,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It would just help validate the change if the original intent can be determined.\n\nSHA1PRNG was the default when the old experimental crypto properties (now removed) made it configurable in Accumulo's site configuration file, rather than relying on Java security settings. It was leftover from that, and then updated slightly in #617, although it could have been removed at that point, since it was no longer configurable in Accumulo's site file, as the experimental properties to configure it had already been removed for 2.0 in #560.\nThe original intent was to provide a default for a configurable implementation. After my changes, one can still change the implementation... but would have to do so using standard Java security configuration files, rather than some custom experimental configuration we previously had and have now removed. My changes restore the original intent to make it configurable, since it was only possible to use the hard-coded default since the properties were removed in #560.",
                        "body": "> It would just help validate the change if the original intent can be determined.\r\n\r\nSHA1PRNG was the default when the old experimental crypto properties (now removed) made it configurable in Accumulo's site configuration file, rather than relying on Java security settings. It was leftover from that, and then updated slightly in #617, although it could have been removed at that point, since it was no longer configurable in Accumulo's site file, as the experimental properties to configure it had already been removed for 2.0 in #560.\r\n\r\nThe original intent was to provide a default for a configurable implementation. After my changes, one can still change the implementation... but would have to do so using standard Java security configuration files, rather than some custom experimental configuration we previously had and have now removed. My changes restore the original intent to make it configurable, since it was only possible to use the hard-coded default since the properties were removed in #560.",
                        "startLine": null,
                        "line": 317,
                        "originalLine": 317,
                        "originalStartLine": null
                    }
                ],
                "line": 317,
                "startLine": 317,
                "originalLine": 317,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/crypto/AESCryptoService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4cNqSu",
                "comments": [
                    {
                        "bodyText": "Could this have been to allow extension if the RandomVolumeChooser was extended?",
                        "body": "Could this have been to allow extension if the RandomVolumeChooser was extended?",
                        "startLine": null,
                        "line": 29,
                        "originalLine": 29,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I thought about this, but decided against exposing it. There's no reason a subclass needs to rely on this specific instance of the Random. And, exposing the field to sub-classes really restricts our ability to evolve implementation (fields are harder to evolve than methods). If it becomes necessary/useful to expose this, it can be done in a getter method that can be overridden. But, it doesn't seem to be necessary at this time.",
                        "body": "I thought about this, but decided against exposing it. There's no reason a subclass needs to rely on this specific instance of the Random. And, exposing the field to sub-classes really restricts our ability to evolve implementation (fields are harder to evolve than methods). If it becomes necessary/useful to expose this, it can be done in a getter method that can be overridden. But, it doesn't seem to be necessary at this time.",
                        "startLine": null,
                        "line": 29,
                        "originalLine": 29,
                        "originalStartLine": null
                    }
                ],
                "line": 29,
                "startLine": 29,
                "originalLine": 29,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/fs/RandomVolumeChooser.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "EdColeman",
            "Manno15"
        ],
        "tdv": -63.0,
        "description": {
            "bodyText": "Update Apache parent POM to 24\n\nTake advantage of enforcer rules built-in to Apache parent POM\n\nUse minimalJavaBuildVersion and minimalMavenBuildVersion properties\nRemove redundant enforcer checks in our POM\n\n\nRemove redundant version information and plugin definitions from\nApache POM that aren't overridden\n\nUpdate build plugin versions to latest\n\nSort BOM dependencies in dependencyManagement before others (a change\nin behavior with latest sortpom-maven-plugin that's not possible to\noverride, but this makes more sense anyway)\nSort sortpom-maven-plugin's options, ensure blank lines are removed (a\nchange in the default that is overridable), and ensure space before\nthe closing slash on empty elements to keep it consistent with other\nplugins that update the POM\nUpdate spotbugs-related Random issues (and minor Random tweaks)\n\nAlways assign SecureRandom objects to SecureRandom variables, so\nspotbugs doesn't flag them as insecure Random usages\nAllow SecureRandom objects to be reused using a static final\ninstance for many classes, to avoid one-off object uses (usually\nprivate, except for a public instance for sharing across ITs)\nWhile fixing Random-related spotbugs issues, apply naming\nconsistently\nRemove use of explicit SHA1PRNG implementation of SecureRandom,\npreferring non-blocking native implementation (default), and relying\non users to configure their SecureRandom provider through Java\nsecurity settings if they want something different from the default\nRemove incorrect attempts to try to seed SecureRandom objects with a\npredictable seed (SecureRandom default implementation isn't\npredictable, even with a specific seed, since it uses the OS's\nnative random source)\nRemove unneeded spotbugs warnings suppressions\nUse a fixed-length stream of random numbers in several places where\na loop was used to iterate a fixed number of times and the loop\nvariable wasn't needed\nFor the rare cases where we use a predictable random with a known\nseed for testing, pass the seed in the constructor to avoid useless\ninitiationalization steps to do the initial seed only to\nreinitialize immediately with a call to setSeed\n\n\n\nFix pom/license issues related to micrometer (re #2305)\n\nMove metrics-related dependency versions and transitive dependency\nexclusions into project's parent pom's dependencyManagement section\nUpdate LICENSE to include CC0 artifacts used for metrics dependencies\nRemove property for micrometer version that is only used once for the\nmicrometer BOM\n\nOther\n\nRename incorrect filename RolllingStatsTest.java to\nRollingStatsTest.java to match the class name RollingStatsTest\nUpdate AuthenticationTokenTest to use IntStream.allMatch to loop until\na byte array is generated that isn't all zeros, instead of using\nassertFalse, which has a (rare) chance of failing the test\nunnecessarily"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2097,
        "title": {
            "body": "Clean up after TestAuthValidator --  fix TestClusterAccessor",
            "bodyHTML": "Clean up after TestAuthValidator --  fix TestClusterAccessor"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5DXd_j",
                "body": "@xyuanlu final commit message?",
                "bodyText": "@xyuanlu final commit message?",
                "createdAt": "2022-05-18T16:21:35Z",
                "author": "junkaixue"
            },
            {
                "id": "IC_kwDOAPIHxc5DXgRf",
                "body": "Thanks for review. \r\n\r\nFinal commit message:\r\n\r\n**Clean up after TestAuthValidator -- fix TestClusterAccessor**\r\n\r\n",
                "bodyText": "Thanks for review.\nFinal commit message:\nClean up after TestAuthValidator -- fix TestClusterAccessor",
                "createdAt": "2022-05-18T16:31:19Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4hUWj_",
                "comments": [
                    {
                        "bodyText": "sorry for my ignorance, but shouldn't we be deleting Helix Cluster, rather than directly using zkclient to delete znodes?",
                        "body": "sorry for my ignorance, but shouldn't we be deleting Helix Cluster, rather than directly using zkclient to delete znodes?",
                        "startLine": null,
                        "line": 63,
                        "originalLine": 62,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the comments...I updated.",
                        "body": "Thanks for the comments...I updated.",
                        "startLine": null,
                        "line": 63,
                        "originalLine": 62,
                        "originalStartLine": null
                    }
                ],
                "line": 63,
                "startLine": 63,
                "originalLine": 62,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestAuthValidator.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4hUWuW",
                "comments": [
                    {
                        "bodyText": "to be honest, you don't need another copy of the same string, directly use CLASSNAME_TEST_DEFAULT_AUTH..",
                        "body": "to be honest, you don't need another copy of the same string, directly use CLASSNAME_TEST_DEFAULT_AUTH.. \r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "+1",
                        "body": "+1",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Updated.",
                        "body": "Updated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 69,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestAuthValidator.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "junkaixue",
            "desaikomal",
            "NealSun96"
        ],
        "tdv": 4.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#2096\n#2093\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nTestAuthValidator create 2 clusters testDefaultAuthValidator and testCustomAuthValidator. These 2 clusters are not cleaned up causing TestClusterAccessor. testGetClusters to fail.\nTests\n\n The following tests are written for this issue:\n\nNA\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\nCU result:\ntestHelixViewAggregator(org.apache.helix.view.integration.TestHelixViewAggregator)\nLink to issue: #2049\nlocal run:\n\n[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 183.686 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-view-aggregator ---\n[INFO] Loading execution data file /Users/xialu/Documents/WorkSpace/helix/helix-view-aggregator/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: View Aggregator' with 15 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  03:09 min\n[INFO] Finished at: 2022-05-27T22:28:57-07:00\n[INFO] ------------------------------------------------------------------------\n\n\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3366,
        "title": {
            "body": "Handle exceptions during tablet metadata task",
            "bodyHTML": "Handle exceptions during tablet metadata task"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5bMRVB",
                "body": "I am not sure that just logging the error and then waiting for the next check is appropriate, and a retry and fail after X attempts may be a better approach.\r\n\r\nFor the case that triggered this, it seems the error is transient, but what if it was not?  I think the check was to validate that the tserver can read the entire metadata table - if it cannot, it may not be \"safe\" to continue to run with incomplete metadata information.  Even if those operations \"fail\" because the metadata cannot be known to be consistent, if we allow the tserver to keep running, then it seems like work would be continued to be assigned / attempted even though it will not work with the current tserver state.\r\n\r\nThis would be similar the the issue where tservers could not host tablets, but the manager keeps seeing that tserver as having 0 tablets and kept trying to make assignments to that \"under-utilized\" tserver. (the solution was to detect and remove the tserver lock to stop assignment attempts.\r\n\r\nThis change shifts the priority to \"keeping the tserver up\" rather than killing the process is it cannot fill a basic requirement of being able to maintain a consistent view of the metadata.  A retry may provide a balance of having a better chance to ride out transient errors, but still provide a hard fail if it cannot.",
                "bodyText": "I am not sure that just logging the error and then waiting for the next check is appropriate, and a retry and fail after X attempts may be a better approach.\nFor the case that triggered this, it seems the error is transient, but what if it was not?  I think the check was to validate that the tserver can read the entire metadata table - if it cannot, it may not be \"safe\" to continue to run with incomplete metadata information.  Even if those operations \"fail\" because the metadata cannot be known to be consistent, if we allow the tserver to keep running, then it seems like work would be continued to be assigned / attempted even though it will not work with the current tserver state.\nThis would be similar the the issue where tservers could not host tablets, but the manager keeps seeing that tserver as having 0 tablets and kept trying to make assignments to that \"under-utilized\" tserver. (the solution was to detect and remove the tserver lock to stop assignment attempts.\nThis change shifts the priority to \"keeping the tserver up\" rather than killing the process is it cannot fill a basic requirement of being able to maintain a consistent view of the metadata.  A retry may provide a balance of having a better chance to ride out transient errors, but still provide a hard fail if it cannot.",
                "createdAt": "2023-05-01T16:52:29Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5bM5db",
                "body": "Note that the validation was not throwing an exception and hence was not actually halting the server (see Tablet.compareTabletInfo).  It was halting because the tserver had a failure when attempting to scan the metadata.  Hence catching Exception is OK here (or moving it to the non-critical thread pool) UNLESS you want to have the validation halt the server.  In any case a scan failure should NOT halt the server.",
                "bodyText": "Note that the validation was not throwing an exception and hence was not actually halting the server (see Tablet.compareTabletInfo).  It was halting because the tserver had a failure when attempting to scan the metadata.  Hence catching Exception is OK here (or moving it to the non-critical thread pool) UNLESS you want to have the validation halt the server.  In any case a scan failure should NOT halt the server.",
                "createdAt": "2023-05-01T19:25:24Z",
                "author": "ivakegg"
            },
            {
                "id": "IC_kwDOACaFSM5bNjS1",
                "body": "> Note that the validation was not throwing an exception and hence was not actually halting the server (see Tablet.compareTabletInfo). It was halting because the tserver had a failure when attempting to scan the metadata. Hence catching Exception is OK here (or moving it to the non-critical thread pool) UNLESS you want to have the validation halt the server. In any case a scan failure should NOT halt the server.\r\n\r\nRight I wouldn't think we should halt either on scan failure so that's what this fix does, is prevent that. In terms of making it a non critical task I guess that is fine too, if we are catching the exception and continuing I'm not sure it much matters at that point. Either way it seems like catching an exception and logging it there vs killing the task makes sense so it can be retried normally so the task and server don't fall over.\r\n\r\nIn terms of whether not we retry faster or some other logic on scan failure maybe that's a follow on issue if that is going to be more complex and maybe could be something for 2.1.2. This at least fixes the immediately issue that is a regression in 2.1 for 2.1.1 so the server doesn't fall over on a scan failure which just may be transient. Halting on metadata failure itself (not a scan failure) is another issue entirely of course and maybe that is valid but maybe shouldn't be a bug fix release and 3.0 instead.",
                "bodyText": "Note that the validation was not throwing an exception and hence was not actually halting the server (see Tablet.compareTabletInfo). It was halting because the tserver had a failure when attempting to scan the metadata. Hence catching Exception is OK here (or moving it to the non-critical thread pool) UNLESS you want to have the validation halt the server. In any case a scan failure should NOT halt the server.\n\nRight I wouldn't think we should halt either on scan failure so that's what this fix does, is prevent that. In terms of making it a non critical task I guess that is fine too, if we are catching the exception and continuing I'm not sure it much matters at that point. Either way it seems like catching an exception and logging it there vs killing the task makes sense so it can be retried normally so the task and server don't fall over.\nIn terms of whether not we retry faster or some other logic on scan failure maybe that's a follow on issue if that is going to be more complex and maybe could be something for 2.1.2. This at least fixes the immediately issue that is a regression in 2.1 for 2.1.1 so the server doesn't fall over on a scan failure which just may be transient. Halting on metadata failure itself (not a scan failure) is another issue entirely of course and maybe that is valid but maybe shouldn't be a bug fix release and 3.0 instead.",
                "createdAt": "2023-05-01T21:10:00Z",
                "author": "cshannon"
            },
            {
                "id": "IC_kwDOACaFSM5bSaeK",
                "body": "My point is that the entire check seems to be trying to validate that the tserver can read and has a consistent view of the metadata tablet.   If this check cannot complete then I think the intention was to \"hard\" fail the tserver so that it was not trying to run with possibly incomplete / incorrect view of the metadata.\r\n\r\nBecause it seems a transient (but somehow repeating) failure is stopping the tserver - a more conservative change would be to retry the scan (or the entire check) to guard against transient failures - but if the check cannot complete within a reasonable period, then it would be safer to continue to stop the process.\r\n\r\nChanging the check so that it only logs the exception seems that it could lead to cases where the tserver would continue to run when the intention is that it would have been halted.\r\n\r\nWe may want to add resiliency to the check, but the underlying issue seems to be something in the environment is repeatably causing a scan failure while reading the metadata - nurffing the check to accommodate that case my just be hiding an underlying issue that needs to be corrected.  This change seems that it could allow other issues to also be hidden.\r\n\r\nAgain, I am addressing the overall goal of the check - not the issue that a transient scan failure seems to be triggering more aggressively that necessary.",
                "bodyText": "My point is that the entire check seems to be trying to validate that the tserver can read and has a consistent view of the metadata tablet.   If this check cannot complete then I think the intention was to \"hard\" fail the tserver so that it was not trying to run with possibly incomplete / incorrect view of the metadata.\nBecause it seems a transient (but somehow repeating) failure is stopping the tserver - a more conservative change would be to retry the scan (or the entire check) to guard against transient failures - but if the check cannot complete within a reasonable period, then it would be safer to continue to stop the process.\nChanging the check so that it only logs the exception seems that it could lead to cases where the tserver would continue to run when the intention is that it would have been halted.\nWe may want to add resiliency to the check, but the underlying issue seems to be something in the environment is repeatably causing a scan failure while reading the metadata - nurffing the check to accommodate that case my just be hiding an underlying issue that needs to be corrected.  This change seems that it could allow other issues to also be hidden.\nAgain, I am addressing the overall goal of the check - not the issue that a transient scan failure seems to be triggering more aggressively that necessary.",
                "createdAt": "2023-05-02T14:11:04Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5bSnfM",
                "body": "I think it makes sense for the check not to terminate the tablet server and log an error.  The original intention of the check was to ensure what tablets have in memory matches the metadata table, it was not to test scanning the metadata table.  Not being able to scan the metadata table is not great, but it was not the intent of the check.  So the check can find problems that it was not designed to, that is a good thing.  However the check finding a new unforeseen problem and not giving anyone a chance to work through it (because it nuked all the tservers) is not a good thing. ",
                "bodyText": "I think it makes sense for the check not to terminate the tablet server and log an error.  The original intention of the check was to ensure what tablets have in memory matches the metadata table, it was not to test scanning the metadata table.  Not being able to scan the metadata table is not great, but it was not the intent of the check.  So the check can find problems that it was not designed to, that is a good thing.  However the check finding a new unforeseen problem and not giving anyone a chance to work through it (because it nuked all the tservers) is not a good thing.",
                "createdAt": "2023-05-02T14:43:18Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5bSpm4",
                "body": "Also, if there are any bugs in the check itself we would not want that to kill tservers.",
                "bodyText": "Also, if there are any bugs in the check itself we would not want that to kill tservers.",
                "createdAt": "2023-05-02T14:48:40Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5bTICu",
                "body": "If I had the wrong impression of the check, then I am okay with the changes - maybe log the error and also move it to a non-critical thread check?\r\n\r\nAre there things that we *should* be checking for a tserver to validate that it meets some minimal level of healthy?",
                "bodyText": "If I had the wrong impression of the check, then I am okay with the changes - maybe log the error and also move it to a non-critical thread check?\nAre there things that we should be checking for a tserver to validate that it meets some minimal level of healthy?",
                "createdAt": "2023-05-02T16:08:02Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5bTYfr",
                "body": "> Are there things that we should be checking for a tserver to validate that it meets some minimal level of healthy?\r\n\r\nWe also have some sort of check for stuck compactions, I think it just logs something also.  Does it make sense to emit metrics for these things in addition a log message?  Maybe each server could have a unhealthy count metric.  The impl of the metric could survey known things and add one if they are currently unhealthy.  If a compaction is currently stuck that would contribute to the count when surveyed. If the metadata validation with memory is having problems that would contribute to the counter when surveyed.  If things are unhealthy and then healthy the survey would count nothing and emit zero.",
                "bodyText": "Are there things that we should be checking for a tserver to validate that it meets some minimal level of healthy?\n\nWe also have some sort of check for stuck compactions, I think it just logs something also.  Does it make sense to emit metrics for these things in addition a log message?  Maybe each server could have a unhealthy count metric.  The impl of the metric could survey known things and add one if they are currently unhealthy.  If a compaction is currently stuck that would contribute to the count when surveyed. If the metadata validation with memory is having problems that would contribute to the counter when surveyed.  If things are unhealthy and then healthy the survey would count nothing and emit zero.",
                "createdAt": "2023-05-02T16:46:31Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5bTaPV",
                "body": "I had been thinking that a metric for the elapsed time in this check would make a good metric - it might be a good proxy for health over time as well as possibly being useful to compare across servers.  But with the upcoming changes I thought it may be better to hold off until those settle.",
                "bodyText": "I had been thinking that a metric for the elapsed time in this check would make a good metric - it might be a good proxy for health over time as well as possibly being useful to compare across servers.  But with the upcoming changes I thought it may be better to hold off until those settle.",
                "createdAt": "2023-05-02T16:51:58Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5bXLz0",
                "body": "I moved the check to a non critical thread based on the feedback here. Is there anything else to do here or is this good to merge?",
                "bodyText": "I moved the check to a non critical thread based on the feedback here. Is there anything else to do here or is this good to merge?",
                "createdAt": "2023-05-03T10:39:43Z",
                "author": "cshannon"
            },
            {
                "id": "IC_kwDOACaFSM5bZO3H",
                "body": "After some discussion we decided to keep it as a critical task as it already was but to just keep the try/catch change so we don't fall over for normal exceptions.",
                "bodyText": "After some discussion we decided to keep it as a critical task as it already was but to just keep the try/catch change so we don't fall over for normal exceptions.",
                "createdAt": "2023-05-03T16:24:34Z",
                "author": "cshannon"
            }
        ],
        "total_comments_count": 12,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4tCB9z",
                "comments": [
                    {
                        "bodyText": "I believe this will absolutely fix the problem.  I am wondering if changing the \"watchCriticalFixedDelay\" on line 826 can simply be changed to \"watchNonCriticalScheduledTask\" instead ?  Maybe a combination of this and that.",
                        "body": "I believe this will absolutely fix the problem.  I am wondering if changing the \"watchCriticalFixedDelay\" on line 826 can simply be changed to \"watchNonCriticalScheduledTask\" instead ?  Maybe a combination of this and that.",
                        "startLine": null,
                        "line": 841,
                        "originalLine": 841,
                        "originalStartLine": null
                    }
                ],
                "line": 841,
                "startLine": 841,
                "originalLine": 841,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "cshannon",
            "EdColeman",
            "ivakegg",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Make sure to catch and log any errors when the tablet metadata verification task runs to check tablet metadata so that errors do not cause the task and server to halt.\nThis closes #3346"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1575,
        "title": {
            "body": "Skip restricted ports in TServer port search",
            "bodyHTML": "Skip restricted ports in TServer port search"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDYwNjM3MDIwNA==",
                "body": "Also, please avoid force-pushing, especially after reviewers have commented. It marks previous review comments as obsolete (regardless of whether they've been addressed) and makes it significantly harder to see the what changed.",
                "bodyText": "Also, please avoid force-pushing, especially after reviewers have commented. It marks previous review comments as obsolete (regardless of whether they've been addressed) and makes it significantly harder to see the what changed.",
                "createdAt": "2020-03-31T03:02:24Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 18,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODU2OTgxOnYy",
                "comments": [
                    {
                        "bodyText": "enum comparisons in Java should always use == and not .equals(Object)\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                      if (p.getType().equals(PropertyType.PORT)) {\n          \n          \n            \n                      if (p.getType() == PropertyType.PORT) {",
                        "body": "enum comparisons in Java should always use `==` and not `.equals(Object)`\r\n\r\n```suggestion\r\n          if (p.getType() == PropertyType.PORT) {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 177,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Also, you might be able to do something shorter with streams. Something like:\nList<Integer> restrictedPorts = EnumSet.allOf(Property.class).stream()\n        .filter(p -> p.getType() == HttpMethod.TRACE)\n        .map(config::getPort).collect(Collectors.toList());",
                        "body": "Also, you might be able to do something shorter with streams. Something like:\r\n\r\n```java\r\nList<Integer> restrictedPorts = EnumSet.allOf(Property.class).stream()\r\n        .filter(p -> p.getType() == HttpMethod.TRACE)\r\n        .map(config::getPort).collect(Collectors.toList());\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 177,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If we \"remember\" which config proper where we found each integer (by collecting as Map<Integer,Property>, perhaps), then we could also have more informative debug log messages when ports are skipped.",
                        "body": "If we \"remember\" which config proper where we found each integer (by collecting as `Map<Integer,Property>`, perhaps), then we could also have more informative debug log messages when ports are skipped.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 177,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks! Will incorporate these. I also realized that TSERV_CLIENTPORT should not be skipped as it is a valid port for the TServer to use even if port search is enabled.",
                        "body": "Thanks! Will incorporate these. I also realized that TSERV_CLIENTPORT should not be skipped as it is a valid port for the TServer to use even if port search is enabled.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 177,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TSERV_CLIENTPORT should be the starting point before incrementing, so I don't think it would be a problem anyway, but it wouldn't hurt to skip it too, just in case the code is changed, or reused for other services.",
                        "body": "`TSERV_CLIENTPORT` should be the starting point before incrementing, so I don't think it would be a problem anyway, but it wouldn't hurt to skip it too, just in case the code is changed, or reused for other services.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 177,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done. The debug logs now include port numbers, the config setting and the description as well.\n2020-03-30T08:57:25,201 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:9997. Error: Could not create ServerSocket on address /0.0.0.0:9997.\n2020-03-30T08:57:25,214 [rpc.TServerUtils] DEBUG: During port search, skipping reserved port 9998 - property gc.port.client (The listening port for the garbage collector's monitor service)\n2020-03-30T08:57:25,215 [rpc.TServerUtils] DEBUG: During port search, skipping reserved port 9999 - property master.port.client (The port used for handling client connections on the master)\n2020-03-30T08:57:25,215 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\n2020-03-30T08:57:25,215 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10000. Error: Could not create ServerSocket on address /0.0.0.0:10000.\n2020-03-30T08:57:25,215 [rpc.TServerUtils] INFO : Unable to use port 10000, retrying. (Thread Name = Thrift Client Server)\n2020-03-30T08:57:25,215 [rpc.TServerUtils] DEBUG: During port search, skipping reserved port 10001 - property master.replication.coordinator.port (Port for the replication coordinator service)\n2020-03-30T08:57:25,216 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\n2020-03-30T08:57:25,216 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10002. Error: Could not create ServerSocket on address /0.0.0.0:10002.\n2020-03-30T08:57:25,216 [rpc.TServerUtils] INFO : Unable to use port 10002, retrying. (Thread Name = Thrift Client Server)\n2020-03-30T08:57:25,216 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\n2020-03-30T08:57:25,223 [tserver.TabletServer] INFO : address = dev-ub18:10003",
                        "body": "Done. The debug logs now include port numbers, the config setting and the description as well.\r\n```\r\n2020-03-30T08:57:25,201 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:9997. Error: Could not create ServerSocket on address /0.0.0.0:9997.\r\n2020-03-30T08:57:25,214 [rpc.TServerUtils] DEBUG: During port search, skipping reserved port 9998 - property gc.port.client (The listening port for the garbage collector's monitor service)\r\n2020-03-30T08:57:25,215 [rpc.TServerUtils] DEBUG: During port search, skipping reserved port 9999 - property master.port.client (The port used for handling client connections on the master)\r\n2020-03-30T08:57:25,215 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\r\n2020-03-30T08:57:25,215 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10000. Error: Could not create ServerSocket on address /0.0.0.0:10000.\r\n2020-03-30T08:57:25,215 [rpc.TServerUtils] INFO : Unable to use port 10000, retrying. (Thread Name = Thrift Client Server)\r\n2020-03-30T08:57:25,215 [rpc.TServerUtils] DEBUG: During port search, skipping reserved port 10001 - property master.replication.coordinator.port (Port for the replication coordinator service)\r\n2020-03-30T08:57:25,216 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\r\n2020-03-30T08:57:25,216 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10002. Error: Could not create ServerSocket on address /0.0.0.0:10002.\r\n2020-03-30T08:57:25,216 [rpc.TServerUtils] INFO : Unable to use port 10002, retrying. (Thread Name = Thrift Client Server)\r\n2020-03-30T08:57:25,216 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\r\n2020-03-30T08:57:25,223 [tserver.TabletServer] INFO : address = dev-ub18:10003\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 177,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 177,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODU3NzExOnYy",
                "comments": [
                    {
                        "bodyText": "I don't think we need this debug statement here, but if there's an easy way to unit test the code with a mock configuration, that might be nice. Might need to move some of this port search logic into a separate method to make that easier.",
                        "body": "I don't think we need this debug statement here, but if there's an easy way to unit test the code with a mock configuration, that might be nice. Might need to move some of this port search logic into a separate method to make that easier.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 181,
                        "originalStartLine": 180
                    },
                    {
                        "bodyText": "Done. I added what I think is a pretty comprehensive unit test. Please take a look when possible.",
                        "body": "Done. I added what I think is a pretty comprehensive unit test. Please take a look when possible.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 181,
                        "originalStartLine": 180
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 181,
                "originalStartLine": 180,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODU4MDA4OnYy",
                "comments": [
                    {
                        "bodyText": "There is no need to guard log messages with .isLEVELEnabled() calls when merely printing a log statement, since the logging framework already does this itself (it's also why we use the format string instead of using String.format or string concatenation ourselves). We only need to do that if we're doing extra work to prepare the log messages.\nSee previous comment on suggestion to improve this log message with the specific service that has reserved it. Could print Property.getKey() here.",
                        "body": "There is no need to guard log messages with `.isLEVELEnabled()` calls when merely printing a log statement, since the logging framework already does this itself (it's also why we use the format string instead of using `String.format` or string concatenation ourselves). We only need to do that if we're doing extra work to prepare the log messages.\r\n\r\nSee previous comment on suggestion to improve this log message with the specific service that has reserved it. Could print `Property.getKey()` here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 196,
                        "originalStartLine": 192
                    },
                    {
                        "bodyText": "Thanks, I was doing this based on suggestions to do so from @keith-turner for a previous PR - but I realize now that the suggestion was related to the extra work in that case (joining a list) to prep the log message. Will rework.",
                        "body": "Thanks, I was doing this based on suggestions to do so from @keith-turner for a previous PR - but I realize now that the suggestion was related to the extra work in that case (joining a list) to prep the log message. Will rework.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 196,
                        "originalStartLine": 192
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 196,
                "originalStartLine": 192,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDMxODk2OnYy",
                "comments": [
                    {
                        "bodyText": "I think I have an idea to simplify the unit testing logic for the port search behavior by putting all the port search logic into a single method that accepts a starting port and a config, and returns a selected port, but I can experiment with that idea after we merge in the functionality you've added.",
                        "body": "I think I have an idea to simplify the unit testing logic for the port search behavior by putting all the port search logic into a single method that accepts a starting port and a config, and returns a selected port, but I can experiment with that idea after we merge in the functionality you've added.",
                        "startLine": 238,
                        "line": 239,
                        "originalLine": 239,
                        "originalStartLine": 238
                    },
                    {
                        "bodyText": "It would be nice to rework this entire unit test to use less static stuff and pass more, but that would be follow on work.  Not something for this PR.",
                        "body": "It would be nice to rework this entire unit test to use less static stuff and pass more, but that would be follow on work.  Not something for this PR.",
                        "startLine": 238,
                        "line": 239,
                        "originalLine": 239,
                        "originalStartLine": 238
                    },
                    {
                        "bodyText": "I can't remember the entire idea I had to simplify the logic for this test. I looked over the existing test, and it seems fine as-is, but I did open #1815 to clean up some of the static stuff and EasyMock code a bit.",
                        "body": "I can't remember the entire idea I had to simplify the logic for this test. I looked over the existing test, and it seems fine as-is, but I did open #1815 to clean up some of the static stuff and EasyMock code a bit.",
                        "startLine": 238,
                        "line": 239,
                        "originalLine": 239,
                        "originalStartLine": 238
                    }
                ],
                "line": 239,
                "startLine": 238,
                "originalLine": 239,
                "originalStartLine": 238,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/util/TServerUtilsTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTQ1MDcwOnYy",
                "comments": [
                    {
                        "bodyText": "May be able to do the following.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                      if (reservedPorts.keySet().contains(port)) {\n          \n          \n            \n                      if (reservedPorts.containsKey(port)) {",
                        "body": "May be able to do the following.\r\n\r\n```suggestion\r\n          if (reservedPorts.containsKey(port)) {\r\n```",
                        "startLine": null,
                        "line": 199,
                        "originalLine": 199,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Will do! Allow me a few hours to add a commit and push this change.",
                        "body": "Will do! Allow me a few hours to add a commit and push this change.",
                        "startLine": null,
                        "line": 199,
                        "originalLine": 199,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'm going to merge now. I can make this change subsequently.",
                        "body": "I'm going to merge now. I can make this change subsequently.",
                        "startLine": null,
                        "line": 199,
                        "originalLine": 199,
                        "originalStartLine": null
                    }
                ],
                "line": 199,
                "startLine": 199,
                "originalLine": 199,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "arvindshmicrosoft",
            "ctubbsii",
            "keith-turner"
        ],
        "tdv": 25.0,
        "description": {
            "bodyText": "Fixes #1573. Includes debug logging for ports being skipped. This has been tested by running 4 TableServer instances on a single node using Uno. Debug logs added in this PR are below, clearly showing the reserved ports being skipped:\n2020-03-28T15:04:31,877 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:9997. Error: Could not create ServerSocket on address /0.0.0.0:9997.\n2020-03-28T15:04:31,883 [rpc.TServerUtils] DEBUG: Adding port 9999 to list of restricted ports\n2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 10001 to list of restricted ports\n2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 9997 to list of restricted ports\n2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 9998 to list of restricted ports\n2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 9995 to list of restricted ports\n2020-03-28T15:04:31,884 [rpc.TServerUtils] DEBUG: Adding port 12234 to list of restricted ports\n2020-03-28T15:04:31,886 [rpc.TServerUtils] DEBUG: Adding port 0 to list of restricted ports\n2020-03-28T15:04:31,886 [rpc.TServerUtils] DEBUG: During port search, skipping port 9998 as it is reserved for another service\n2020-03-28T15:04:31,886 [rpc.TServerUtils] DEBUG: During port search, skipping port 9999 as it is reserved for another service\n2020-03-28T15:04:31,886 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\n2020-03-28T15:04:31,887 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10000. Error: Could not create ServerSocket on address /0.0.0.0:10000.\n2020-03-28T15:04:31,887 [rpc.TServerUtils] INFO : Unable to use port 10000, retrying. (Thread Name = Thrift Client Server)\n2020-03-28T15:04:31,887 [rpc.TServerUtils] DEBUG: During port search, skipping port 10001 as it is reserved for another service\n2020-03-28T15:04:31,887 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\n2020-03-28T15:04:31,887 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10002. Error: Could not create ServerSocket on address /0.0.0.0:10002.\n2020-03-28T15:04:31,887 [rpc.TServerUtils] INFO : Unable to use port 10002, retrying. (Thread Name = Thrift Client Server)\n2020-03-28T15:04:31,887 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\n2020-03-28T15:04:31,909 [tserver.TabletServer] INFO : address = ubdev:10003"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1599,
        "title": {
            "body": "Fix #1598 - Reduce MasterMetricsIT test resources.",
            "bodyHTML": "Fix #1598 - Reduce MasterMetricsIT test resources."
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDUzNjE2OnYy",
                "comments": [
                    {
                        "bodyText": "Does this affect the behavior of the test at all?",
                        "body": "Does this affect the behavior of the test at all?",
                        "startLine": null,
                        "line": 63,
                        "originalLine": 63,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Never mind, I read the comments on #1598 after I looked at this code.",
                        "body": "Never mind, I read the comments on #1598 after I looked at this code.",
                        "startLine": null,
                        "line": 63,
                        "originalLine": 63,
                        "originalStartLine": null
                    }
                ],
                "line": 63,
                "startLine": 63,
                "originalLine": 63,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/MasterMetricsIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "ctubbsii",
            "milleruntime"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4260,
        "title": {
            "body": "fixes SplitRecoveryIT to work with newer columns",
            "bodyHTML": "fixes SplitRecoveryIT to work with newer columns"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM44rhYf",
                "comments": [
                    {
                        "bodyText": "The two methods that were removed from this class were moved to the integration test because it was the only thing using them.  Thought it made it more clear that this code was only used by test code.",
                        "body": "The two methods that were removed from this class were moved to the integration test because it was the only thing using them.  Thought it made it more clear that this code was only used by test code.",
                        "startLine": null,
                        "line": 71,
                        "originalLine": 71,
                        "originalStartLine": null
                    }
                ],
                "line": 71,
                "startLine": 71,
                "originalLine": 71,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/SplitRecovery12to13.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM44uNnJ",
                "comments": [
                    {
                        "bodyText": "So, this looks like the real change here, the other changes are due to the method moves. What is the old column here?",
                        "body": "So, this looks like the real change here, the other changes are due to the method moves. What is the old column here?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 204,
                        "originalStartLine": 194
                    },
                    {
                        "bodyText": "These columns are handled on upgrade by the code this class is testing.  If Ample sees those columns it throws an exception.",
                        "body": "[These columns](https://github.com/apache/accumulo/blob/5d12597b4dedb60524775d0411405bafc3ee86ce/core/src/main/java/org/apache/accumulo/core/metadata/schema/MetadataSchema.java#L427-L433) are handled on upgrade by the code this class is testing.  If Ample sees those columns it throws an exception.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 204,
                        "originalStartLine": 194
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 204,
                "originalStartLine": 194,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/SplitRecoveryIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": "LEFT"
            }
        ],
        "participants": [
            "keith-turner",
            "dlmarion"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "SplitRecoveryIT is a tricky test to maintain because it is testing upgrade code that deals with older metadata columns that Accumulo no longer recognizes.  This commit adjust the test to work with recent changes to the metadata schema in the elasticity branch."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1868,
        "title": {
            "body": "Fixes #1867. Move authentication before attempting to create new Client object",
            "bodyHTML": "Fixes #1867. Move authentication before attempting to create new Client object"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc2MzUyNzA4Mw==",
                "body": "Thanks, @ctubbsii  for fixing the build issue. I pushed while running out of the office so I didn't do a full `-Psunny` build. Is this good to merge or is there more to be done?",
                "bodyText": "Thanks, @ctubbsii  for fixing the build issue. I pushed while running out of the office so I didn't do a full -Psunny build. Is this good to merge or is there more to be done?",
                "createdAt": "2021-01-20T11:06:17Z",
                "author": "Manno15"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNjQ5ODMyOnYy",
                "comments": [
                    {
                        "bodyText": "I was thinking about the case where accumuloClient is null. No authentication of the user is performed in that case. That might be okay, because that only happens on startup and there might already be an earlier failure that would prevent startup with incorrect credentials. However, I'm not sure about that without looking into it more.\nAn alternative implementation, that doesn't rely on assumptions about how/when this method is used is to use a local variable for the client while it is being authenticated, and only swapping it out and closing the old one, if it passes authentication, as in:\nvar newClient = Accumulo.newClient().from(clientProperties).as(principal, token).build();\nnewClient.securityOperations().authenticateUser(principal, token);\nvar oldClient = accumuloClient;\naccumuloClient = newClient; // swap out old client if the new client has authenticated\ncontext = (ClientContext) accumuloClient; // update the context with the new client\nif (oldClient != null) {\n  // clean up the old client\n  oldClient.close();\n}\nThis fixes another possible issue where the old client is always closed, even if the new client fails to authenticate.",
                        "body": "I was thinking about the case where accumuloClient is null. No authentication of the user is performed in that case. That might be okay, because that only happens on startup and there might already be an earlier failure that would prevent startup with incorrect credentials. However, I'm not sure about that without looking into it more.\r\n\r\nAn alternative implementation, that doesn't rely on assumptions about how/when this method is used is to use a local variable for the client while it is being authenticated, and only swapping it out and closing the old one, if it passes authentication, as in:\r\n\r\n```java\r\nvar newClient = Accumulo.newClient().from(clientProperties).as(principal, token).build();\r\nnewClient.securityOperations().authenticateUser(principal, token);\r\nvar oldClient = accumuloClient;\r\naccumuloClient = newClient; // swap out old client if the new client has authenticated\r\ncontext = (ClientContext) accumuloClient; // update the context with the new client\r\nif (oldClient != null) {\r\n  // clean up the old client\r\n  oldClient.close();\r\n}\r\n```\r\n\r\nThis fixes another possible issue where the old client is always closed, even if the new client fails to authenticate.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1193,
                        "originalStartLine": 1185
                    },
                    {
                        "bodyText": "You bring up good points. I did think about those cases when I made this change but from what I saw, this function was only called for change user and the update password command. I could be wrong on that. I will look to implementing your suggestion as I agree that being on the safe side of things is best.",
                        "body": "You bring up good points. I did think about those cases when I made this change but from what I saw, this function was only called for change user and the update password command. I could be wrong on that. I will look to implementing your suggestion as I agree that being on the safe side of things is best. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1193,
                        "originalStartLine": 1185
                    },
                    {
                        "bodyText": "I am running into a warning about an unreferenced accumulo client without calling close. Looking into it now.",
                        "body": "I am running into a warning about an unreferenced accumulo client without calling close. Looking into it now. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1193,
                        "originalStartLine": 1185
                    },
                    {
                        "bodyText": "I am running into a warning about an unreferenced accumulo client without calling close. Looking into it now.\n\nWere you able to solve that with your more recent changes?",
                        "body": "> I am running into a warning about an unreferenced accumulo client without calling close. Looking into it now.\r\n\r\nWere you able to solve that with your more recent changes?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1193,
                        "originalStartLine": 1185
                    },
                    {
                        "bodyText": "Yes, the newClient.close() resolves this.",
                        "body": "Yes, the newClient.close() resolves this.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1193,
                        "originalStartLine": 1185
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1193,
                "originalStartLine": 1185,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyODc4NDY3OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  newClient.close();\n          \n          \n            \n                  throw new AccumuloSecurityException(principal, SecurityErrorCode.BAD_CREDENTIALS);\n          \n          \n            \n                  // new client can't authenticate; close and discard\n          \n          \n            \n                  newClient.close();\n          \n          \n            \n                  throw e;",
                        "body": "```suggestion\r\n      // new client can't authenticate; close and discard\r\n      newClient.close();\r\n      throw e;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1190,
                        "originalStartLine": 1189
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1190,
                "originalStartLine": 1189,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyOTIzNjI4OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            import org.apache.accumulo.core.clientImpl.thrift.SecurityErrorCode;\n          \n          \n            \n            import org.apache.accumulo.core.conf.ClientProperty;\n          \n          \n            \n            import org.apache.accumulo.core.conf.ClientProperty;",
                        "body": "```suggestion\r\nimport org.apache.accumulo.core.conf.ClientProperty;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 66,
                        "originalStartLine": 65
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 66,
                "originalStartLine": 65,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "Manno15",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "There are a few possible options on where we could authenticate so if anyone has feedback on a better way, let me know.\nResults after the change:\n\nThe user stays as root since the wrong credentials were entered for the user 'jeff'.\nCloses #1867"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3941,
        "title": {
            "body": "rename DataLevel tableId() to metaTableId(), doc updates",
            "bodyHTML": "rename DataLevel tableId() to metaTableId(), doc updates"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5riEo9",
                "body": "@EdColeman once Keith's documentation suggestions are committed, I think this is good to merge.",
                "bodyText": "@EdColeman once Keith's documentation suggestions are committed, I think this is good to merge.",
                "createdAt": "2023-11-09T15:53:44Z",
                "author": "ddanielr"
            }
        ],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM400Ndh",
                "comments": [
                    {
                        "bodyText": "This comment is a bit hard to follow.\nCan the metadata table location references be simplified\nlike root metadata range vs root metadata that points to the metadata",
                        "body": "This comment is a bit hard to follow. \r\n\r\nCan the metadata table location references be simplified\r\nlike `root metadata range` vs `root metadata that points to the metadata` \r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 337,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'm open to suggestions.  I was trying to convey that user -> metadata, metadata -> root, and root -> ZooKeeper.  One issue is that metadata is overloaded.  When we say metadata, is it the table? The information for a level that references point to the next level?  Even that last sentence is awkward for me, so if someone has any suggestions I'll happily hit commit suggestion and move on.",
                        "body": "I'm open to suggestions.  I was trying to convey that user -> metadata, metadata -> root, and root -> ZooKeeper.  One issue is that metadata is overloaded.  When we say metadata, is it the table? The information for a level that references point to the next level?  Even that last sentence is awkward for me, so if someone has any suggestions I'll happily hit commit suggestion and move on.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 337,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 337,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletsMetadata.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM402O2V",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Set the range to the table range that stores the provided level's metadata. For example\n          \n          \n            \n                 * {@link DataLevel#USER} will set the range to the metadata table. {@link DataLevel#METADATA}\n          \n          \n            \n                 * will set the range to the root table.\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 * For a given data level, read all of its tablets metadata.  For DataLevel.USER this will read tablet metadata from the accumulo.metadata table for all user tables.  For DataLevel.METADATA this will read tablet metadata from the accumulo.root table.  For DataLevel.ROOT this will read tablet metadata from Zookeeper.\n          \n          \n            \n                 */",
                        "body": "```suggestion\r\n    /**\r\n     * For a given data level, read all of its tablets metadata.  For DataLevel.USER this will read tablet metadata from the accumulo.metadata table for all user tables.  For DataLevel.METADATA this will read tablet metadata from the accumulo.root table.  For DataLevel.ROOT this will read tablet metadata from Zookeeper.\r\n     */\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 326,
                        "originalStartLine": 322
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 326,
                "originalStartLine": 322,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletsMetadata.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM402Pem",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Set the range to the data level that contains the metadata references for the provided\n          \n          \n            \n                 * TableId. For example, if the TableId is the metadata table id, then the table range will be\n          \n          \n            \n                 * root metadata that points to the metadata. Likewise, if the TableId is a user table, then the\n          \n          \n            \n                 * table range will be the metadata table range that points to the user table.\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 * For a given table read all of its tablet metadata.  If the table id  is for a user table, then its metadata will be read from its section in the accumulo.metadata table. If the table id is for the accumulo.metadata table, then its metadata will be read from the accumulo.root table.  If the table id is for the accumulo.root table, then its metadata will be read from zookeeper.\n          \n          \n            \n                 */",
                        "body": "```suggestion\r\n    /**\r\n     * For a given table read all of its tablet metadata.  If the table id  is for a user table, then its metadata will be read from its section in the accumulo.metadata table. If the table id is for the accumulo.metadata table, then its metadata will be read from the accumulo.root table.  If the table id is for the accumulo.root table, then its metadata will be read from zookeeper.\r\n     */\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 339,
                        "originalStartLine": 334
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 339,
                "originalStartLine": 334,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletsMetadata.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "EdColeman",
            "ddanielr",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Renames the DataLevel method tableId to metaTableId to help clarify that the id returned is the reference to the meta data that contain information for that level (USER points to metadata table, METADATA points to ROOT and ROOT point to ZooKeeper)\nAlso adds some javadoc to emphasize the level, meta data relationship for forLevel and forTable in TabletsMetadata"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3099,
        "title": {
            "body": "Fix flaky AuthenticationTokenSecretManagerTest",
            "bodyHTML": "Fix flaky AuthenticationTokenSecretManagerTest"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5Pckud",
                "body": "@ctubbsii - not sure what's up but the recent checks are failing due to \"shellcheck\" having an issue. It looks like the last 3 commits have had the same problem starting with the Apache parent pom version 28 update so not sure if it's related to the root pom change or a coincidence.",
                "bodyText": "@ctubbsii - not sure what's up but the recent checks are failing due to \"shellcheck\" having an issue. It looks like the last 3 commits have had the same problem starting with the Apache parent pom version 28 update so not sure if it's related to the root pom change or a coincidence.",
                "createdAt": "2022-11-30T23:35:52Z",
                "author": "cshannon"
            },
            {
                "id": "IC_kwDOACaFSM5PeJv0",
                "body": "> @ctubbsii - not sure what's up but the recent checks are failing due to \"shellcheck\" having an issue. It looks like the last 3 commits have had the same problem starting with the Apache parent pom version 28 update so not sure if it's related to the root pom change or a coincidence.\r\n\r\n@cshannon The changes where this was first observed did not change anything even remotely related to the scripts that would have triggered shellcheck. It looks like the version of shellcheck installed on the builder is newer than the version that we've previously seen, and the newer version is detecting a new issue, https://www.shellcheck.net/wiki/SC2294\r\n\r\nThis is easily fixed. Please disregard for now, since you're not changing any scripts.",
                "bodyText": "@ctubbsii - not sure what's up but the recent checks are failing due to \"shellcheck\" having an issue. It looks like the last 3 commits have had the same problem starting with the Apache parent pom version 28 update so not sure if it's related to the root pom change or a coincidence.\n\n@cshannon The changes where this was first observed did not change anything even remotely related to the scripts that would have triggered shellcheck. It looks like the version of shellcheck installed on the builder is newer than the version that we've previously seen, and the newer version is detecting a new issue, https://www.shellcheck.net/wiki/SC2294\nThis is easily fixed. Please disregard for now, since you're not changing any scripts.",
                "createdAt": "2022-12-01T07:06:50Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4nixC0",
                "comments": [
                    {
                        "bodyText": "The comment doesn't match. This is sleeping for 100 milliseconds, right? Other than that mismatch, this seems fine.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                // Sleep for 1 millisecond to guarantee token is unique\n          \n          \n            \n                Thread.sleep(100);\n          \n          \n            \n                // Briefly sleep to guarantee token is unique, since the token is based on the time\n          \n          \n            \n                Thread.sleep(100);",
                        "body": "The comment doesn't match. This is sleeping for 100 milliseconds, right? Other than that mismatch, this seems fine.\r\n\r\n```suggestion\r\n    // Briefly sleep to guarantee token is unique, since the token is based on the time\r\n    Thread.sleep(100);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 212,
                        "originalStartLine": 211
                    },
                    {
                        "bodyText": "Yeah I updated the time from 1 to 100 in my second commit but didn't update the comment so good catch.",
                        "body": "Yeah I updated the time from 1 to 100 in my second commit but didn't update the comment so good catch.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 212,
                        "originalStartLine": 211
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 212,
                "originalStartLine": 211,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/security/delegation/AuthenticationTokenSecretManagerTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "cshannon",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Part of the ID of the generated token is the issue date which is the current time in millis so this adds a 1 millisecond sleep in between token generation to guarantee the tokens will be unique.\nThis fixes #3075"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3824,
        "title": {
            "body": "Add tests to SampleIT for files with ranges",
            "bodyHTML": "Add tests to SampleIT for files with ranges"
        },
        "comments": [],
        "total_comments_count": 1,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4zYH9A",
                "comments": [
                    {
                        "bodyText": "Haven't looked too deeply into these changes yet but one small things I saw was it might be good to add all these scanners and writers to try-with-resources blocks.",
                        "body": "Haven't looked too deeply into these changes yet but one small things I saw was it might be good to add all these scanners and writers to try-with-resources blocks.",
                        "startLine": 138,
                        "line": 148,
                        "originalLine": 147,
                        "originalStartLine": 137
                    }
                ],
                "line": 148,
                "startLine": 138,
                "originalLine": 147,
                "originalStartLine": 137,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/SampleIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "cshannon",
            "keith-turner",
            "Manno15",
            "DomGarguilo"
        ],
        "tdv": 49.0,
        "description": {
            "bodyText": "This updates the sample ITs to test that sampling works correctly with fenced files and that only sample data that is in the given ranges will be returned on scans\nThis addresses part of #3766\nOriginal comment: #3761 (comment)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3152,
        "title": {
            "body": "Improve JavaDocs for VolumeChooser classes",
            "bodyHTML": "Improve JavaDocs for VolumeChooser classes"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5SGTJT",
                "body": "@dlmarion any other changes you  want to see or is this good? ",
                "bodyText": "@dlmarion any other changes you  want to see or is this good?",
                "createdAt": "2023-01-10T14:42:38Z",
                "author": "ddanielr"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4okwos",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n             * A {@link VolumeChooser} that selects a volume at random from the list of provided volumes. This\n          \n          \n            \n             * class is currently the default volume chooser as set by {@link Property#GENERAL_VOLUME_CHOOSER}.\n          \n          \n            \n             * A {@link VolumeChooser} that selects a volume at random from the list of provided volumes. \n          \n      \n    \n    \n  \n\nIf the default ever changes, then we have to remember to update this comment. Users can just check the default value of the property.",
                        "body": "```suggestion\r\n * A {@link VolumeChooser} that selects a volume at random from the list of provided volumes. \r\n```\r\n\r\nIf the default ever changes, then we have to remember to update this comment. Users can just check the default value of the property.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 28,
                        "originalStartLine": 27
                    },
                    {
                        "bodyText": "Sounds good! Changes implemented",
                        "body": "Sounds good! Changes implemented",
                        "startLine": null,
                        "line": null,
                        "originalLine": 28,
                        "originalStartLine": 27
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 28,
                "originalStartLine": 27,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/fs/RandomVolumeChooser.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "ddanielr",
            "dlmarion",
            "Manno15"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Fixes: #3110\nAdded more documentation for implementations of the VolumeChooser.\nAdded property table and basic usage examples to PreferredVolumeChooser.\nFixed minor grammatical issues."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1899,
        "title": {
            "body": "add take/free instance(s) API",
            "bodyHTML": "add take/free instance(s) API"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc45rCDL",
                "body": "This PR is ready to be merged. Approved by @junkaixue . \r\nCommit message: \"Create Cluster Maintenance Management service and add API signature and interfaces.\"",
                "bodyText": "This PR is ready to be merged. Approved by @junkaixue .\nCommit message: \"Create Cluster Maintenance Management service and add API signature and interfaces.\"",
                "createdAt": "2021-11-12T21:22:16Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 11,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4cSUtf",
                "comments": [
                    {
                        "bodyText": "Let's make it more detailed naming? OperationalStatus?",
                        "body": "Let's make it more detailed naming? OperationalStatus?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 28,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. Updated.",
                        "body": "TFTR. Updated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 28,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 28,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementInstanceInfo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4cSU1E",
                "comments": [
                    {
                        "bodyText": "Shall we make it as a map for searching purpose? Or just one String. Not quite sure about the list of string.",
                        "body": "Shall we make it as a map for searching purpose? Or just one String. Not quite sure about the list of string.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 32,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 32,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementInstanceInfo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4cSU9a",
                "comments": [
                    {
                        "bodyText": "Have a kv map there at least? And simple kv set/get methods.",
                        "body": "Have a kv map there at least? And simple kv set/get methods.",
                        "startLine": null,
                        "line": 25,
                        "originalLine": 4,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Add a comment at class level that this Snapshot can extend Snapshot from common/core module if there is more generic snapshot.",
                        "body": "Add a comment at class level that this Snapshot can extend Snapshot from common/core module if there is more generic snapshot.",
                        "startLine": null,
                        "line": 25,
                        "originalLine": 4,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the review. I plan to add the enum and other implementation for this class in further PR.",
                        "body": "Thanks for the review. I plan to add the enum and other implementation for this class in further PR. ",
                        "startLine": null,
                        "line": 25,
                        "originalLine": 4,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Add a note for that. Will do the impl in next PR.",
                        "body": "Add a note for that. Will do the impl in next PR.",
                        "startLine": null,
                        "line": 25,
                        "originalLine": 4,
                        "originalStartLine": null
                    }
                ],
                "line": 25,
                "startLine": 25,
                "originalLine": 4,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/common/datamodel/RestSnapShot.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4cfgbq",
                "comments": [
                    {
                        "bodyText": "NIT: let's format it as line by line.",
                        "body": "NIT: let's format it as line by line.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 29,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. Updated.",
                        "body": "TFTR. Updated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 29,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 29,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementInstanceInfo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "junkaixue",
            "narendly"
        ],
        "tdv": 13.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1896\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis change adds dummy APIs for take/free instance and the batch mode.\nTests\n\n The following tests are written for this issue:\n\nNA\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2580,
        "title": {
            "body": "Convert defaultTimeoutSeconds() to defaultTimeout()",
            "bodyHTML": "Convert defaultTimeoutSeconds() to defaultTimeout()"
        },
        "comments": [],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4fpZZJ",
                "comments": [
                    {
                        "bodyText": "If the method is going to be renamed anyway, defaultTimeout is sufficient. The type doesn't need to be included. It was only ever included before because we needed to know that it was seconds, and not, for example, millis.",
                        "body": "If the method is going to be renamed anyway, `defaultTimeout` is sufficient. The type doesn't need to be included. It was only ever included before because we needed to know that it was seconds, and not, for example, millis.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 76,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good idea. Addressed in 546a85d",
                        "body": "Good idea. Addressed in [546a85d](https://github.com/apache/accumulo/pull/2580/commits/546a85dd508cfb0f2508d8372ed10df843bd6e52)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 76,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 76,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "hadoop-mapreduce/src/test/java/org/apache/accumulo/hadoop/its/mapreduce/AccumuloFileOutputFormatIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4fpZmj",
                "comments": [
                    {
                        "bodyText": "If the the defaultTimeoutDuration() is 0, it should really be an error. We don't want infinite timeouts by default, only if the user explicitly set it with -Dtimeout.factor=0.",
                        "body": "If the the `defaultTimeoutDuration()` is 0, it should really be an error. We don't want infinite timeouts by default, only if the user explicitly set it with `-Dtimeout.factor=0`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 114,
                        "originalStartLine": 115
                    },
                    {
                        "bodyText": "Addressed in c03f65e",
                        "body": "Addressed in [c03f65e](https://github.com/apache/accumulo/pull/2580/commits/c03f65e720d08abd1341872295d7faaa241d3b93)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 114,
                        "originalStartLine": 115
                    },
                    {
                        "bodyText": "We don't want infinite timeouts by default, only if the user explicitly set it with -Dtimeout.factor=0.\n\nI don't think the timeout will be infinite by default. I think the only cases where the infinite timeout would be applied (before c03f65e) would be if the user explicitly set it with -Dtimeout.factor=0, or if defaultTimeout() was explicitly overridden to return a duration of zero.",
                        "body": "> We don't want infinite timeouts by default, only if the user explicitly set it with `-Dtimeout.factor=0`.\r\n\r\nI don't think the timeout will be infinite by default. I think the only cases where the infinite timeout would be applied (before [c03f65e](https://github.com/apache/accumulo/pull/2580/commits/c03f65e720d08abd1341872295d7faaa241d3b93)) would be if the user explicitly set it with `-Dtimeout.factor=0`, or if `defaultTimeout()` was explicitly overridden to return a duration of zero.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 114,
                        "originalStartLine": 115
                    },
                    {
                        "bodyText": "or if defaultTimeout() was explicitly overridden to return a duration of zero.\n\nRight. That's the case I'm talking about. This shouldn't happen. This should be an error. The only time it should be infinite is if the user says so explicitly with -Dtimeout.factor=0. None of our tests should ever have that as a their overridden default.",
                        "body": "> or if `defaultTimeout()` was explicitly overridden to return a duration of zero.\r\n\r\nRight. That's the case I'm talking about. This shouldn't happen. This should be an error. The only time it should be infinite is if the user says so explicitly with `-Dtimeout.factor=0`. None of our tests should ever have that as a their overridden default.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 114,
                        "originalStartLine": 115
                    },
                    {
                        "bodyText": "Your assertion check will cause the case I'm concerned about to fail, so this looks good to me now.",
                        "body": "Your assertion check will cause the case I'm concerned about to fail, so this looks good to me now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 114,
                        "originalStartLine": 115
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 114,
                "originalStartLine": 115,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/harness/AccumuloITBase.java",
                "diffSide": "RIGHT",
                "startDiffSide": "LEFT"
            }
        ],
        "participants": [
            "DomGarguilo",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "This PR changes AccumuloITBase.defaultTimeoutSeconds() (which returns an int value representing the timeout to apply in seconds) to AccumuloITBase.defaultTimeoutDuration() (which returns a Duration to use for the timeout).\nThe motivation behind this change is it seems like it would be better to use a stronger, more specific type. In this case we are dealing with time, it seems like Duration makes sense instead of int. The seconds value returned by the current implementation of this method is eventually converted into a Duration anyways."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4126,
        "title": {
            "body": "ZooStore deferral time to use System.nanoTime()",
            "bodyHTML": "ZooStore deferral time to use System.nanoTime()"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5v6oNm",
                "body": "Borrow from https://github.com/apache/accumulo/pull/2906#issuecomment-1234611631:\r\n\r\nThanks for the PR @kevinrr888. If you wish to be added as a contributor to https://accumulo.apache.org/people/ , please open a pull request to add yourself (in alphabetical order) at https://github.com/apache/accumulo-website/edit/main/pages/people.md and leave a reference to apache/accumulo#4126 in your commit log.\r\n\r\nIf you intend to be a regular contributor to Accumulo projects, please consider subscribing to our developer mailing list (https://accumulo.apache.org/contact-us/) and introducing yourself.",
                "bodyText": "Borrow from #2906 (comment):\nThanks for the PR @kevinrr888. If you wish to be added as a contributor to https://accumulo.apache.org/people/ , please open a pull request to add yourself (in alphabetical order) at https://github.com/apache/accumulo-website/edit/main/pages/people.md and leave a reference to #4126 in your commit log.\nIf you intend to be a regular contributor to Accumulo projects, please consider subscribing to our developer mailing list (https://accumulo.apache.org/contact-us/) and introducing yourself.",
                "createdAt": "2024-01-04T19:23:06Z",
                "author": "DomGarguilo"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM425KWu",
                "comments": [
                    {
                        "bodyText": "because nanoTime can wrap, the min wait time could be Long.MAX_VALUE - 10 but this could return something like Long.MAX_VALUE + 10 if its in the values because that would be negative.\nDid the following experiment\njshell> var vals = List.of(Long.MAX_VALUE - 10, Long.MAX_VALUE + 10)\nvals ==> [9223372036854775797, -9223372036854775799]\n\njshell> long currTime = Long.MAX_VALUE + 5\ncurrTime ==> -9223372036854775804\n\njshell> vals.stream().mapToLong(l-> l - currTime).min().getAsLong()\n$15 ==> -15\n\njshell> Collections.min(vals) - currTime\n$16 ==> 5\n\nBased on that, thinking this code could be.  Hopefully the following code is correct even if nano time wraps.\nlong currTime = System.nanoTime();\nlong minDuration = deferred.values().stream().mapToLong(l-> l - currTime).min().getAsLong()\n waitTime = TimeUnit.MILLISECONDS.convert(minDuration, TimeUnit.NANOSECONDS);",
                        "body": "because nanoTime can wrap, the min wait time could be `Long.MAX_VALUE - 10` but this could return something like `Long.MAX_VALUE + 10` if its in the values because that would be negative.   \r\n\r\nDid the following experiment\r\n\r\n```\r\njshell> var vals = List.of(Long.MAX_VALUE - 10, Long.MAX_VALUE + 10)\r\nvals ==> [9223372036854775797, -9223372036854775799]\r\n\r\njshell> long currTime = Long.MAX_VALUE + 5\r\ncurrTime ==> -9223372036854775804\r\n\r\njshell> vals.stream().mapToLong(l-> l - currTime).min().getAsLong()\r\n$15 ==> -15\r\n\r\njshell> Collections.min(vals) - currTime\r\n$16 ==> 5\r\n```\r\n\r\nBased on that, thinking this code could be.  Hopefully the following code is correct even if nano time wraps.\r\n\r\n```java\r\nlong currTime = System.nanoTime();\r\nlong minDuration = deferred.values().stream().mapToLong(l-> l - currTime).min().getAsLong()\r\n waitTime = TimeUnit.MILLISECONDS.convert(minDuration, TimeUnit.NANOSECONDS);\r\n```\r\n\r\n\r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 207,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good catch! Changed to suggested.",
                        "body": "Good catch! Changed to suggested.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 207,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 207,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/fate/ZooStore.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kevinrr888",
            "DomGarguilo",
            "keith-turner",
            "EdColeman"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "closes #4068\n\nZooStore now uses System.nanoTime() instead of System.currentTimeMillis()\nAdded TimeUnit param to unreserve()\nRenamed 'defered' -> 'deferred'\n\nAlso have branch ready to be compared against elasticity if these changes are good (changes were also requested for AccumuloStore in elasticity)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3681,
        "title": {
            "body": "Remove getTabletHostingGoal method from TableOperations",
            "bodyHTML": "Remove getTabletHostingGoal method from TableOperations"
        },
        "comments": [],
        "total_comments_count": 1,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4xKPGA",
                "comments": [
                    {
                        "bodyText": "May be able to do something like the following and avoid creating the list.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                tabletInformationList.forEach(p -> shellState.getWriter()\n          \n          \n            \n                shellState.getAccumuloClient().tableOperations()\n          \n          \n            \n                    .getTabletInformation(tableName, range).forEach(p -> shellState.getWriter()",
                        "body": "May be able to do something like the following and avoid creating the list.\r\n\r\n```suggestion\r\n    shellState.getAccumuloClient().tableOperations()\r\n        .getTabletInformation(tableName, range).forEach(p -> shellState.getWriter()\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 55,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/commands/GetTabletHostingGoalCommand.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jmark99",
            "keith-turner"
        ],
        "tdv": -25.0,
        "description": {
            "bodyText": "Remove the getTabletHostingGoal method from TableOperations as the information can now be retrieved with the more robust getTabletInformation method.\nThe shell command, getgoals, still works as before, but the GetTabletHostingGoalCommand was updated to use the new getTabletInformation method to retrieve the necessary information rather than the removed getTabletHostingGoal method."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3639,
        "title": {
            "body": "Adds IT that verifies scans see data written by concurrent writers",
            "bodyHTML": "Adds IT that verifies scans see data written by concurrent writers"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5h6-tC",
                "body": "Created this IT for testing #3634, however realized its good for 2.1.X and #3573 to stress read patterns the metadata table relies on, so decided to create it in 2.1 and merge it forward to elasticity.",
                "bodyText": "Created this IT for testing #3634, however realized its good for 2.1.X and #3573 to stress read patterns the metadata table relies on, so decided to create it in 2.1 and merge it forward to elasticity.",
                "createdAt": "2023-07-19T22:31:23Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5h-jCl",
                "body": "This test is a great idea",
                "bodyText": "This test is a great idea",
                "createdAt": "2023-07-20T11:53:04Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5iG73b",
                "body": "I added merge, bulk import, compaction filtering, and batch scan to the test in 7cbc635.  I also added some debugging tips based on a problem I ran into where bulk importing deletes was causing the test to fail.  Spent hours trying to track down the cause and finally developed a technique that made tracking the problem down really quick.  I documented the technique [in the code](https://github.com/apache/accumulo/blob/7cbc6356fecb569a713094dba779f5e54c9301c9/test/src/main/java/org/apache/accumulo/test/ScanConsistencyIT.java#L93-L108) and left a [utility method](https://github.com/apache/accumulo/blob/7cbc6356fecb569a713094dba779f5e54c9301c9/test/src/main/java/org/apache/accumulo/test/ScanConsistencyIT.java#L668-L696) related to the technique in the test.\r\n\r\nThe problem I ran into is documented [here in the test](https://github.com/apache/accumulo/blob/7cbc6356fecb569a713094dba779f5e54c9301c9/test/src/main/java/org/apache/accumulo/test/ScanConsistencyIT.java#L488-L496).  The problem is caused by the fact that major compactions no longer force a flush, this is a change made some time in the past, trying to find an issue for that.  Not flushing before a full major compaction is ok when only doing live ingest or only doing bulk import, but for a mix of bulk import and live ingest not flushing before full major compaction has a consequence as I discovered in the test.\r\n",
                "bodyText": "I added merge, bulk import, compaction filtering, and batch scan to the test in 7cbc635.  I also added some debugging tips based on a problem I ran into where bulk importing deletes was causing the test to fail.  Spent hours trying to track down the cause and finally developed a technique that made tracking the problem down really quick.  I documented the technique in the code and left a utility method related to the technique in the test.\nThe problem I ran into is documented here in the test.  The problem is caused by the fact that major compactions no longer force a flush, this is a change made some time in the past, trying to find an issue for that.  Not flushing before a full major compaction is ok when only doing live ingest or only doing bulk import, but for a mix of bulk import and live ingest not flushing before full major compaction has a consequence as I discovered in the test.",
                "createdAt": "2023-07-21T16:51:15Z",
                "author": "keith-turner"
            }
        ],
        "total_comments_count": 17,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4wWjjN",
                "comments": [
                    {
                        "bodyText": "should we add merging?",
                        "body": "should we add merging?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 473,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "yeah that would be good to add.  maybe bulk import too",
                        "body": "yeah that would be good to add.  maybe bulk import too\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 473,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "added merge and other stuff in 7cbc635",
                        "body": "added merge and other stuff in 7cbc635",
                        "startLine": null,
                        "line": null,
                        "originalLine": 473,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 473,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ScanConsistencyIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4wWjyA",
                "comments": [
                    {
                        "bodyText": "Is there any value to letting this run longer?",
                        "body": "Is there any value to letting this run longer?",
                        "startLine": null,
                        "line": 136,
                        "originalLine": 100,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah I think there is value in running it longer, but maybe not in the IT.  We definitely want to know if does not work on a short run in the IT.  I think I will add a main method  that allows running it.  I think it would be good to have as an IT and something that is easy to run for longer periods.",
                        "body": "Yeah I think there is value in running it longer, but maybe not in the IT.  We definitely want to know if does not work on a short run in the IT.  I think I will add a main method  that allows running it.  I think it would be good to have as an IT and something that is easy to run for longer periods.\r\n\r\n",
                        "startLine": null,
                        "line": 136,
                        "originalLine": 100,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Opened #3646",
                        "body": "Opened #3646 ",
                        "startLine": null,
                        "line": 136,
                        "originalLine": 100,
                        "originalStartLine": null
                    }
                ],
                "line": 136,
                "startLine": 136,
                "originalLine": 100,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ScanConsistencyIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4wWkyT",
                "comments": [
                    {
                        "bodyText": "Is it possible that the BatchWriter flushes in this loop based on default configs? If so, a scan that starts during this loop will see more data than expected.",
                        "body": "Is it possible that the BatchWriter flushes in this loop based on default configs? If so, a scan that starts during this loop will see more data than expected.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 401,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah that is ok, the scans do not care if they see extra data. They just require that they see all data that was successfully written before the scan started.\nThere is a very last scan done after all the writers have stopped, that scan does not tolerate extra data and should throw an exception if it sees it.",
                        "body": "Yeah that is ok, the scans do not care if they see extra data. They just require that they see all data that was successfully written before the scan started.\r\n\r\nThere is a very last scan done after all the writers have stopped, that scan does not tolerate extra data and should throw an exception if it sees it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 401,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 401,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ScanConsistencyIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4waTRJ",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  Path bulkDir = new Path(tctx.tmpDir + \"/\" + \"bulkimport_\" + nextLongAbs(random));\n          \n          \n            \n                  Path bulkDir = new Path(tctx.tmpDir + \"/bulkimport_\" + nextLongAbs(random));",
                        "body": "```suggestion\r\n      Path bulkDir = new Path(tctx.tmpDir + \"/bulkimport_\" + nextLongAbs(random));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 437,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 437,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ScanConsistencyIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4wabY6",
                "comments": [
                    {
                        "bodyText": "I realize that this adds to the existing pattern - but would it be worth it to use a more standardized toString format that includes the field names? Otherwise, you need to read the code to understand that '12 1000 1234` is 'size: 12, numEntries 1000, time 1234'",
                        "body": "I realize that this adds to the existing pattern - but would it be worth it to use a more standardized toString format that includes the field names? Otherwise, you need to read the code to understand that '12 1000 1234` is 'size: 12, numEntries 1000, time 1234'  ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 108,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It would be good to improve the toString.  I am thinking maybe I should not make this change in 2.1 because I didn't analyze how this toString method was used. I made the change when trying to figure out the problem with bulk importing delete keys.  I'll either improve it or not change it after looking into how its used.",
                        "body": "It would be good to improve the toString.  I am thinking maybe I should not make this change in 2.1 because I didn't analyze how this toString method was used. I made the change when trying to figure out the problem with bulk importing delete keys.  I'll either improve it or not change it after looking into how its used.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 108,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That class is used in a huge number of places.  I decided to err on the side of caution and not change its toString rather try to analyze everywhere its used.",
                        "body": "That class is used in a huge number of places.  I decided to err on the side of caution and not change its toString rather try to analyze everywhere its used.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 108,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 108,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/DataFileValue.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4w0Mia",
                "comments": [
                    {
                        "bodyText": "I don't think it makes sense to add this to the sunny tests, as it's not testing base functionality, but it's testing more complicated edge cases that can be left in the larger test suite.",
                        "body": "I don't think it makes sense to add this to the sunny tests, as it's not testing base functionality, but it's testing more complicated edge cases that can be left in the larger test suite.",
                        "startLine": null,
                        "line": 82,
                        "originalLine": 82,
                        "originalStartLine": null
                    }
                ],
                "line": 82,
                "startLine": 82,
                "originalLine": 82,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ScanConsistencyIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "dlmarion",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": 164.0,
        "description": {
            "bodyText": "The IT ensures that when there are concurrent writes, scans, and table operations that scans always see any data written before the scan started."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3984,
        "title": {
            "body": "Fix TServerClient.getThriftServerConnection for compactor queue names",
            "bodyHTML": "Fix TServerClient.getThriftServerConnection for compactor queue names"
        },
        "comments": [],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM41jak4",
                "comments": [
                    {
                        "bodyText": "If this lookup is only used for Constants.ZCOMPACTORS then why not just check for that vs having it be the default else route?",
                        "body": "If this lookup is only used for `Constants.ZCOMPACTORS` then why not just check for that vs having it be the default `else` route? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You are just suggesting that I remove the negation in the if predicate for readability or something? I wouldn't say it's a default else. It will only get in there when serverPath ends with ZCOMPACTORS.",
                        "body": "You are just suggesting that I remove the negation in the `if` predicate for readability or something? I wouldn't say it's a `default` else. It will only get in there when serverPath ends with ZCOMPACTORS.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah I was suggesting dropping the negation for readability.\nSince you have two server paths (ZTSERVERS & ZSSERVERS) that use the same parsing and only one ZCOMPACTORS that uses a different data path.\n    for (String serverPath : serverPaths) {\n      if (serverPath.endsWith(Constants.ZCOMPACTORS)) {\n\t// Compactor path has another subdirectory, the group / queue name\n        for (String groupName : zc.getChildren(serverPath)) {\n          for (String server : zc.getChildren(serverPath + \"/\" + groupName)) {\n            var zLocPath = ServiceLock.path(serverPath + \"/\" + groupName + \"/\" + server);\n            zc.getLockData(zLocPath).map(sld -> sld.getAddress(service))\n                .map(address -> new ThriftTransportKey(address, rpcTimeout, context))\n                .ifPresent(servers::add);\n          }\n        }  \n      } else {\n\t  for (String server : zc.getChildren(serverPath)) {\n          var zLocPath = ServiceLock.path(serverPath + \"/\" + server);\n          zc.getLockData(zLocPath).map(sld -> sld.getAddress(service))\n              .map(address -> new ThriftTransportKey(address, rpcTimeout, context))\n              .ifPresent(servers::add);\n        }\n      }\n    }",
                        "body": "Yeah I was suggesting dropping the negation for readability. \r\nSince you have two server paths (`ZTSERVERS` & `ZSSERVERS`) that use the same parsing and only one `ZCOMPACTORS` that uses a different data path. \r\n\r\n```\r\n    for (String serverPath : serverPaths) {\r\n      if (serverPath.endsWith(Constants.ZCOMPACTORS)) {\r\n\t// Compactor path has another subdirectory, the group / queue name\r\n        for (String groupName : zc.getChildren(serverPath)) {\r\n          for (String server : zc.getChildren(serverPath + \"/\" + groupName)) {\r\n            var zLocPath = ServiceLock.path(serverPath + \"/\" + groupName + \"/\" + server);\r\n            zc.getLockData(zLocPath).map(sld -> sld.getAddress(service))\r\n                .map(address -> new ThriftTransportKey(address, rpcTimeout, context))\r\n                .ifPresent(servers::add);\r\n          }\r\n        }  \r\n      } else {\r\n\t  for (String server : zc.getChildren(serverPath)) {\r\n          var zLocPath = ServiceLock.path(serverPath + \"/\" + server);\r\n          zc.getLockData(zLocPath).map(sld -> sld.getAddress(service))\r\n              .map(address -> new ThriftTransportKey(address, rpcTimeout, context))\r\n              .ifPresent(servers::add);\r\n        }\r\n      }\r\n    }\r\n```\r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I pushed the change, but GitHub is having an issue right now with Pull Requests, so it's not showing up.",
                        "body": "I pushed the change, but GitHub is having an issue right now with Pull Requests, so it's not showing up.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 82,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/rpc/clients/TServerClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "ddanielr"
        ],
        "tdv": 52.0,
        "description": {
            "bodyText": "This fixes an issue introducted in #3951 where the Compactor and ScanServer now expose the ClientService. The issue fixed here is that #3951 did not account for the extra part in the compactor path in ZooKeeper that is used for the queue name."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1487,
        "title": {
            "body": "Add a configuration option to allow enable/disable writing error log to ZK",
            "bodyHTML": "Add a configuration option to allow enable/disable writing error log to ZK"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcxODMyMjkwOA==",
                "body": "The PR title seems not grammar correct, maybe \"Add a configuration option to allow enable/disable writing error log to ZK\"?",
                "bodyText": "The PR title seems not grammar correct, maybe \"Add a configuration option to allow enable/disable writing error log to ZK\"?",
                "createdAt": "2020-10-29T02:41:23Z",
                "author": "lei-xia"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcxODMyNDYyMg==",
                "body": "> The PR title seems not grammar correct, maybe \"Add a configuration option to allow enable/disable writing error log to ZK\"?\r\n\r\nchanged.",
                "bodyText": "The PR title seems not grammar correct, maybe \"Add a configuration option to allow enable/disable writing error log to ZK\"?\n\nchanged.",
                "createdAt": "2020-10-29T02:47:20Z",
                "author": "kaisun2000"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyNDM3OTQ1NQ==",
                "body": "@dasahcc , @pkuwm , @jiajunwang , ping?",
                "bodyText": "@dasahcc , @pkuwm , @jiajunwang , ping?",
                "createdAt": "2020-11-10T00:59:15Z",
                "author": "kaisun2000"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyNTE5NjA3Ng==",
                "body": "The PR is approved, please help to merge\r\n\r\n> Improve statusUpdateUtil log error to ZK by adding an option to enabled\r\nit. By default, it would not log error to ZK. This is to avoid some\r\nerror code path that keep flooding ZK sever which cause DoS to Zk.\r\nSuch as HelixTaskExecutor onMessage creation messageHandler exception.",
                "bodyText": "The PR is approved, please help to merge\n\nImprove statusUpdateUtil log error to ZK by adding an option to enabled\nit. By default, it would not log error to ZK. This is to avoid some\nerror code path that keep flooding ZK sever which cause DoS to Zk.\nSuch as HelixTaskExecutor onMessage creation messageHandler exception.",
                "createdAt": "2020-11-11T04:48:26Z",
                "author": "kaisun2000"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyNTIwNjc0Mw==",
                "body": "I'll merge this PR once the PR CI is successful.",
                "bodyText": "I'll merge this PR once the PR CI is successful.",
                "createdAt": "2020-11-11T05:24:26Z",
                "author": "huizhilu"
            }
        ],
        "total_comments_count": 56,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTM5NDMwOnYy",
                "comments": [
                    {
                        "bodyText": "minor: \"helix.StateUpdateUtil.errorLogToZK.enabled\"?  We still log error to local logfile, right?",
                        "body": "minor: \"helix.StateUpdateUtil.errorLogToZK.enabled\"?  We still log error to local logfile, right?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is not minor, this is a MAJOR, a very good point. Let me make sure we have error level log out to logfile.",
                        "body": "This is not minor, this is a MAJOR, a very good point. Let me make sure we have error level log out to logfile.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 86,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTU0MDk2OnYy",
                "comments": [
                    {
                        "bodyText": "Please use HelixUtil.getSystemPropertyAsBoolean(), it allows you to specify the default value there in the method.",
                        "body": "Please use HelixUtil.getSystemPropertyAsBoolean(), it allows you to specify the default value there in the method.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 62,
                        "originalStartLine": 61
                    },
                    {
                        "bodyText": "There is only HelixUtil.getSystemPropertyAsInt/Long, no asBoolean(). Let me add as Boolean then, make the changes a little bit wider.",
                        "body": "There is only HelixUtil.getSystemPropertyAsInt/Long, no asBoolean(). Let me add as Boolean then, make the changes a little bit wider.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 62,
                        "originalStartLine": 61
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 62,
                "originalStartLine": 61,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/StatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTU3OTAxOnYy",
                "comments": [
                    {
                        "bodyText": "Same here, use HelixUtil.",
                        "body": "Same here, use HelixUtil.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 70,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "In this test, here we are setting this property so that later test which asserting existence of error record in Zk won't fail. HelixUtil does not apply here as it is used to retrieve record.",
                        "body": "In this test, here we are setting this property so that later test which asserting existence of error record in Zk won't fail. HelixUtil does not apply here as it is used to retrieve record.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 70,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 70,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTkwNDA5OnYy",
                "comments": [
                    {
                        "bodyText": "Can you test enable it by the new config?",
                        "body": "Can you test enable it by the new config?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 24,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It is already tested in TestParticipantManager. testSessionExpiryInTransition assert the error log znode is not null. Do we need to add another explicit one here?",
                        "body": "It is already tested in TestParticipantManager. testSessionExpiryInTransition assert the error log znode is not null. Do we need to add another explicit one here? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 24,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It is better to add both positive and negative tests in here. The main purpose of the other test is not testing error log though.",
                        "body": "It is better to add both positive and negative tests in here. The main purpose of the other test is not testing error log though.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 24,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "both added now.",
                        "body": "both added now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 24,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 24,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/util/TestStatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTk5NDI1OnYy",
                "comments": [
                    {
                        "bodyText": "This import is not used.",
                        "body": "This import is not used.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 65,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 65,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 65,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDAwNTc5OnYy",
                "comments": [
                    {
                        "bodyText": "We don't have to create this method to be redundant.\nSimply, Boolean.getBoolean(propertyKey, propertyDefaultValue) is already what is needed, right?",
                        "body": "We don't have to create this method to be redundant.\r\nSimply, `Boolean.getBoolean(propertyKey, propertyDefaultValue)` is already what is needed, right?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 479,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "+1. Unless you need some error handling in the function.",
                        "body": "+1. Unless you need some error handling in the function.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 479,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 479,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 479,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDAwNzU5OnYy",
                "comments": [
                    {
                        "bodyText": "Boolean.getBoolean(propertyKey, propertyDefaultValue) is simple and good enough?",
                        "body": "`Boolean.getBoolean(propertyKey, propertyDefaultValue)` is simple and good enough?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 60,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 60,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/StatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDAxMDIyOnYy",
                "comments": [
                    {
                        "bodyText": "Nit, record.toString() is redundant, record is enough as toString() would be auto called.",
                        "body": "Nit, `record.toString()` is redundant, `record` is enough as `toString()` would be auto called.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 568,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "changed.",
                        "body": "changed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 568,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 568,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/StatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDAxODI2OnYy",
                "comments": [
                    {
                        "bodyText": "Can you help me understand why you set the property here, but clear it in TestStatusUpdateUtil? Why do we not put both in the test method? Otherwise, the system config would affect other tests, right?",
                        "body": "Can you help me understand why you set the property here, but clear it in `TestStatusUpdateUtil`? Why do we not put both in the test method? Otherwise, the system config would affect other tests, right?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 70,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "public void testSessionExpiryInTransition() throws Exception {\n\n    String errPath = PropertyPathBuilder.instanceError(clusterName, \"localhost_12918\", oldSessionId,\n        \"TestDB0\", \"TestDB0_0\");\n    ZNRecord error = _gZkClient.readData(errPath);\n    Assert.assertNotNull(error,\n        \"InterruptedException should happen in old session since task is being cancelled during handleNewSession\");\n\n\nTo make sure the following test would work.",
                        "body": "```\r\n  public void testSessionExpiryInTransition() throws Exception {\r\n\r\n    String errPath = PropertyPathBuilder.instanceError(clusterName, \"localhost_12918\", oldSessionId,\r\n        \"TestDB0\", \"TestDB0_0\");\r\n    ZNRecord error = _gZkClient.readData(errPath);\r\n    Assert.assertNotNull(error,\r\n        \"InterruptedException should happen in old session since task is being cancelled during handleNewSession\");\r\n\r\n```\r\n\r\nTo make sure the following test would work.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 70,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "ERROR_LOG_TO_ZK_ENABLED in StatusUpdateUtil is static. I changed to use reflection to control the value now. So there is no need to set or clear it in TestStatusUpdateUtil anymore.",
                        "body": "ERROR_LOG_TO_ZK_ENABLED in StatusUpdateUtil is static. I changed to use reflection to control the value now. So there is no need to set or clear it in `TestStatusUpdateUtil` anymore.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 70,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 70,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDAyMDA1OnYy",
                "comments": [
                    {
                        "bodyText": "Missing apache license. Maybe you could setup apache license in your intellij?",
                        "body": "Missing apache license. Maybe you could setup apache license in your intellij?",
                        "startLine": null,
                        "line": 2,
                        "originalLine": 2,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "added.",
                        "body": "added.",
                        "startLine": null,
                        "line": 2,
                        "originalLine": 2,
                        "originalStartLine": null
                    }
                ],
                "line": 2,
                "startLine": 2,
                "originalLine": 2,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/util/TestStatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDAyNzU0OnYy",
                "comments": [
                    {
                        "bodyText": "Why assertTrue(True); which is always true? Just put a comment it is expected. Or to be more accurate, we can assert the exception message to ensure the exception is the expected one not others(same exception type but different message thrown from other places).",
                        "body": "Why `assertTrue(True);` which is always true? Just put a comment it is expected. Or to be more accurate, we can assert the exception message to ensure the exception is the expected one not others(same exception type but different message thrown from other places). ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 69,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/util/TestStatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDc2NjM1OnYy",
                "comments": [
                    {
                        "bodyText": "IMHO,\nif (!ERROR_LOG_TO_ZK_ENABLED) {\n_logger.error(\"StatusUpdate Error record: {}\", record.toString());\nreturn;\n}\n...",
                        "body": "IMHO,\r\n\r\nif (!ERROR_LOG_TO_ZK_ENABLED) {\r\n  _logger.error(\"StatusUpdate Error record: {}\", record.toString());\r\n  return;\r\n}\r\n...",
                        "startLine": null,
                        "line": 559,
                        "originalLine": 569,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Not actually, even we disable writting to ZK, we still need to log into local log file, right?",
                        "body": "Not actually, even we disable writting to ZK, we still need to log into local log file, right?",
                        "startLine": null,
                        "line": 559,
                        "originalLine": 569,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't have a strong preference here.\nBut I think it depends on how we treat this util, is it a more powerful logger? Or it is a status updater like the name suggested.\nThe current implementation is treating this class as a pure status updater. There is no extra log done unless the update process fails. And I think it is clean. If a log is needed, then the caller shall call logger method in parallel with the publishErrorRecord() method.\nOn the other hand, if we want to twist this class to be a more powerful logger, then we will have mixed usage. Only part of the code is using it. And whether to use it or not is not clear.\nOverall, I treat the log here as a fallback logic when ERROR_LOG_TO_ZK_ENABLED == false. So it shall not log when the util still writes to ZK.",
                        "body": "I don't have a strong preference here.\r\nBut I think it depends on how we treat this util, is it a more powerful logger? Or it is a status updater like the name suggested.\r\n\r\nThe current implementation is treating this class as a pure status updater. There is no extra log done unless the update process fails. And I think it is clean. If a log is needed, then the caller shall call logger method in parallel with the publishErrorRecord() method.\r\n\r\nOn the other hand, if we want to twist this class to be a more powerful logger, then we will have mixed usage. Only part of the code is using it. And whether to use it or not is not clear.\r\n\r\nOverall, I treat the log here as a fallback logic when ERROR_LOG_TO_ZK_ENABLED == false. So it shall not log when the util still writes to ZK.",
                        "startLine": null,
                        "line": 559,
                        "originalLine": 569,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "So let us keep it this way. The reasoning is that source of truth logging is in log file.",
                        "body": "So let us keep it this way. The reasoning is that source of truth logging is in log file.",
                        "startLine": null,
                        "line": 559,
                        "originalLine": 569,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'm fine with both designs. But as I mentioned, this change is half-way. Please either ensure that the source of truth is with the log for ALL the status util call (including log error, log status, etc.) or please don't log here otherwise the util is mixed up with some methods with log and the others don't.",
                        "body": "I'm fine with both designs. But as I mentioned, this change is half-way. Please either ensure that the source of truth is with the log for ALL the status util call (including log error, log status, etc.) or please don't log here otherwise the util is mixed up with some methods with log and the others don't.",
                        "startLine": null,
                        "line": 559,
                        "originalLine": 569,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good point. The log are in publishStatusUpdateRecord and publishErrorRecord.\nHere publishStatusUpdateRecord would never log to Zk anymore. The participant side, it has trace level log to log4j, but not controller side. Let me revise it to the way that both controller and participant side has log to log4j then.",
                        "body": "Good point. The log are in `publishStatusUpdateRecord` and `publishErrorRecord`.\r\n\r\nHere publishStatusUpdateRecord would never log to Zk anymore. The participant side, it has trace level log to log4j, but not controller side. Let me revise it to the way that both controller and participant side has log to log4j then.",
                        "startLine": null,
                        "line": 559,
                        "originalLine": 569,
                        "originalStartLine": null
                    }
                ],
                "line": 559,
                "startLine": 559,
                "originalLine": 569,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/StatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDc3MzExOnYy",
                "comments": [
                    {
                        "bodyText": "This is a potential thread leak if test failure.",
                        "body": "This is a potential thread leak if test failure.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 73,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "fixed in tearing down in afterClass()",
                        "body": "fixed in tearing down in afterClass()",
                        "startLine": null,
                        "line": null,
                        "originalLine": 73,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 73,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/util/TestStatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY1MTY4OnYy",
                "comments": [
                    {
                        "bodyText": "Again, we are disabling log to ZK, not disabling error log (to log file) at all, right?",
                        "body": "Again, we are disabling log to ZK, not disabling error log (to log file) at all, right?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "We have a class ZkSystemPropertyKeys to hold this kind of system property. Please put this there.",
                        "body": "We have a class ZkSystemPropertyKeys to hold this kind of system property. Please put this there.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@lei-xia, so let us change the name to \" STATEUPDATEUTIL_ERROR_LOG2ZK_ENABLED?",
                        "body": "@lei-xia, so let us change the name to \" STATEUPDATEUTIL_ERROR_LOG2ZK_ENABLED?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@dasahcc, ZkSystemPropertyKeys is for Zookeeper related. This is more to me like logging related.",
                        "body": "@dasahcc, ZkSystemPropertyKeys is for Zookeeper related. This is more to me like logging related.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 86,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTQ4NDcwOnYy",
                "comments": [
                    {
                        "bodyText": "I thought more about this configuration. Can we directly make it an enum now instead of changing it later? Otherwise, we will need to deprecate this item and go through the painful backward compatibility checklist in the future.\nI suggest making it STATEUPDATE_ERROR_REPORTING_CHANNEL.",
                        "body": "I thought more about this configuration. Can we directly make it an enum now instead of changing it later? Otherwise, we will need to deprecate this item and go through the painful backward compatibility checklist in the future.\r\n\r\nI suggest making it STATEUPDATE_ERROR_REPORTING_CHANNEL.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Can you illustrate the idea how to make it enum? Something like\nenum STATEUPDATE_ERROR_REPORTING_CHANNEL {\n    LOG4J,\n    LOG2ZK\n};\n\n\nand in the system property,\npublic static final String STATEUPDATEUTIL_ERROR_LOG2ZK_ENABLED = <enum value>;\nthen we will convert the system property to enum value?",
                        "body": "Can you illustrate the idea how to make it enum? Something like \r\n\r\n```\r\nenum STATEUPDATE_ERROR_REPORTING_CHANNEL {\r\n    LOG4J,\r\n    LOG2ZK\r\n};\r\n\r\n```\r\n\r\nand in the system property, \r\n`public static final String STATEUPDATEUTIL_ERROR_LOG2ZK_ENABLED = <enum value>`;\r\nthen we will convert the system property to enum value?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "STATEUPDATEUTIL_ERROR_PERSISTANCY_ENABLED",
                        "body": "STATEUPDATEUTIL_ERROR_PERSISTANCY_ENABLED",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "changed.",
                        "body": "changed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 86,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTUwOTMzOnYy",
                "comments": [
                    {
                        "bodyText": "nit, we can move this line out of the if-else block too.",
                        "body": "nit, we can move this line out of the if-else block too.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 504,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "fixed.",
                        "body": "fixed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 504,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 504,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/StatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTUxMTgzOnYy",
                "comments": [
                    {
                        "bodyText": "same here.",
                        "body": "same here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 522,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "fixed.",
                        "body": "fixed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 522,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 522,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/StatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI0OTYwOnYy",
                "comments": [
                    {
                        "bodyText": "Do we really need this error log for the whole record? It may eat up the disk, imagine if znrecord is close to 1 MB. I am not sure if we really need the record for troubleshooting. Maybe logging the instanceName, updateSubPath, sessionId, etc. is good enough?",
                        "body": "Do we really need this error log for the whole record? It may eat up the disk, imagine if znrecord is close to 1 MB. I am not sure if we really need the record for troubleshooting. Maybe logging the instanceName, updateSubPath, sessionId, etc. is good enough?",
                        "startLine": null,
                        "line": 558,
                        "originalLine": 559,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is not a concern. Previously the issue is that N participant would write the log to one Zk quorum at the same time repeatedly. Here, we are writing to N participant at the same time. If this is a concern, we need to revisit all the participant side logging then.",
                        "body": "This is not a concern. Previously the issue is that N participant would write the log to one Zk quorum at the same time repeatedly. Here, we are writing to N participant at the same time. If this is a concern, we need to revisit all the participant side logging then.",
                        "startLine": null,
                        "line": 558,
                        "originalLine": 559,
                        "originalStartLine": null
                    }
                ],
                "line": 558,
                "startLine": 558,
                "originalLine": 559,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/StatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjM5NzY0OnYy",
                "comments": [
                    {
                        "bodyText": "nit, private?\nSince we already doing reflection, I think making it private won't block the test, right?",
                        "body": "nit, private?\r\nSince we already doing reflection, I think making it private won't block the test, right? ",
                        "startLine": null,
                        "line": 59,
                        "originalLine": 59,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Actually it is not the case. Making it private won't work as I just tested. I am not an expert in this area. If you know other trick, let me know.",
                        "body": "Actually it is not the case. Making it private won't work as I just tested. I am not an expert in this area. If you know other trick, let me know.\r\n",
                        "startLine": null,
                        "line": 59,
                        "originalLine": 59,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is not the case. Just tested, it does not work. I am not an expert in this area. Feel free to let me know if you know the trick here.",
                        "body": "This is not the case. Just tested, it does not work. I am not an expert in this area. Feel free to let me know if you know the trick here.",
                        "startLine": null,
                        "line": 59,
                        "originalLine": 59,
                        "originalStartLine": null
                    }
                ],
                "line": 59,
                "startLine": 59,
                "originalLine": 59,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/StatusUpdateUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjkyNzA2OnYy",
                "comments": [
                    {
                        "bodyText": "The system property is JVM level. If we don't unset the config, later tests will be using this config. Maybe there are no tests using the config yet. But I suggest, as a good practice, we also unset the config to make unit tests isolated, ensuring other tests won't be impacted by this test's configs.",
                        "body": "The system property is JVM level. If we don't unset the config, later tests will be using this config. Maybe there are no tests using the config yet. But I suggest, as a good practice, we also unset the config to make unit tests isolated, ensuring other tests won't be impacted by this test's configs.",
                        "startLine": null,
                        "line": 71,
                        "originalLine": 70,
                        "originalStartLine": null
                    }
                ],
                "line": 71,
                "startLine": 71,
                "originalLine": 70,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kaisun2000",
            "lei-xia",
            "huizhilu",
            "jiajunwang",
            "junkaixue"
        ],
        "tdv": 169.0,
        "description": {
            "bodyText": "Issues\n\n\n My PR addresses the following Helix issues and references them in the PR description:\nfix #1486\n\n\nDescription\n\n\n Here are some details about my PR, including screenshots of any UI changes:\nImprove statusUpdateUtil log error to ZK by adding an option to enabled\nit. By default, it would not log error to ZK. This is to avoid some\nerror code path that keep flooding ZK sever which cause DoS to Zk.\nSuch as HelixTaskExecutor onMessage creation messageHandler exception.\n\n\nTests\n\n\n The following tests are written for this issue:\nTestStatusUpdateUtil\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\ngithub passed.\nhttps://github.com/apache/helix/runs/1344486165?check_suite_focus=true\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "opennlp",
        "pr_number": 585,
        "title": {
            "body": "OPENNLP-1543 Add Polish abbreviation dictionary",
            "bodyHTML": "OPENNLP-1543 Add Polish abbreviation dictionary"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOACnPtM43MnOQ",
                "comments": [
                    {
                        "bodyText": "Woah, great job! üëè",
                        "body": "Woah, great job! :clap: ",
                        "startLine": null,
                        "line": 29,
                        "originalLine": 29,
                        "originalStartLine": null
                    }
                ],
                "line": 29,
                "startLine": 29,
                "originalLine": 29,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "opennlp-tools/src/test/resources/opennlp/tools/sentdetect/origin-training-data.txt",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "mawiesne",
            "kinow",
            "rzo1"
        ],
        "tdv": 45.0,
        "description": {
            "bodyText": "What does this PR do?\n\nadds abb_PL.xml to opennlp-tools/lang\nadds new test cases for the POL localization\nadjusts and enhances existing test cases for the PL locale\n\nTasks\nThank you for contributing to Apache OpenNLP.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically main)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?\n Have you written or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2234,
        "title": {
            "body": "Add new submodule meta client - a generic metadata client",
            "bodyHTML": "Add new submodule meta client - a generic metadata client"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5MB3RJ",
                "body": "Can we first create feature-branch? Then start working from their. \r\n",
                "bodyText": "Can we first create feature-branch? Then start working from their.",
                "createdAt": "2022-10-12T04:05:40Z",
                "author": "desaikomal"
            },
            {
                "id": "IC_kwDOAPIHxc5Me3rG",
                "body": "This change is ready to me merged. Approved by @qqu0127 \r\nCommit message:\r\nAdd new submodule meta client - a generic metadata client",
                "bodyText": "This change is ready to me merged. Approved by @qqu0127\nCommit message:\nAdd new submodule meta client - a generic metadata client",
                "createdAt": "2022-10-19T00:08:05Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4l32TI",
                "comments": [
                    {
                        "bodyText": "Styling suggestion, not urgent though, let's have an empty line between each two methods and before each comment block. Thanks.",
                        "body": "Styling suggestion, not urgent though, let's have an empty line between each two methods and before each comment block. Thanks.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 58,
                        "originalStartLine": 44
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 58,
                "originalStartLine": 44,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/api/MetaClientInterface.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4oOvYd",
                "comments": [
                    {
                        "bodyText": "@xyuanlu Are we not supporting \"SEQUENTIAL\" in basic CRUD metaclient interface? Or you want to add it in only zk specific implementation?",
                        "body": "@xyuanlu Are we not supporting \"SEQUENTIAL\" in basic CRUD metaclient interface? Or you want to add it in only zk specific implementation? ",
                        "startLine": null,
                        "line": 32,
                        "originalLine": 32,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "We plan to add it later.",
                        "body": "We plan to add it later. ",
                        "startLine": null,
                        "line": 32,
                        "originalLine": 32,
                        "originalStartLine": null
                    }
                ],
                "line": 32,
                "startLine": 32,
                "originalLine": 32,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/api/MetaClientInterface.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "desaikomal",
            "qqu0127",
            "rahulrane50",
            "NealSun96"
        ],
        "tdv": 14.0,
        "description": {
            "bodyText": "Issues\n[WIP] This is a draft PR for meta client. It should be merged to a feature branch instead on master.\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#2237\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR is the first change for MetaClient. It adds a metaclient submodule.\nTests\n\n The following tests are written for this issue:\n\nNA\nTests will be added with implementations.\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2834,
        "title": {
            "body": "Provide getProperties method on Configuration that does not filter",
            "bodyHTML": "Provide getProperties method on Configuration that does not filter"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5Hbgqn",
                "body": "User was running tests against 2.1.0-SNAPSHOT and found that getting properties was consuming an unexpected amount of CPU time. User provided stack trace:\r\n\r\n```\r\n\"Split/MajC initiator\" #51 daemon prio=5 os_prio=0 cpu=8876417.63ms elapsed=70703.21s tid=0x0000561224710000 nid=0x29e1 runnable  [0x00007fbceee29000]    java.lang.Thread.State: RUNNABLE\r\n         at org.apache.accumulo.core.conf.DefaultConfiguration.lambda$getProperties$1(DefaultConfiguration.java:59)\r\n         at org.apache.accumulo.core.conf.DefaultConfiguration$$Lambda$247/0x00000008403ce840.test(Unknown Source)\r\n         at java.util.stream.ReferencePipeline$2$1.accept(java.base@11.0.15/ReferencePipeline.java:176)\r\n         at java.util.HashMap$EntrySpliterator.forEachRemaining(java.base@11.0.15/HashMap.java:1764)\r\n         at java.util.stream.AbstractPipeline.copyInto(java.base@11.0.15/AbstractPipeline.java:484)\r\n         at java.util.stream.AbstractPipeline.wrapAndCopyInto(java.base@11.0.15/AbstractPipeline.java:474)\r\n         at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(java.base@11.0.15/ForEachOps.java:150)\r\n         at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(java.base@11.0.15/ForEachOps.java:173)\r\n         at java.util.stream.AbstractPipeline.evaluate(java.base@11.0.15/AbstractPipeline.java:234)\r\n         at java.util.stream.ReferencePipeline.forEach(java.base@11.0.15/ReferencePipeline.java:497)\r\n         at org.apache.accumulo.core.conf.DefaultConfiguration.getProperties(DefaultConfiguration.java:60)\r\n         at org.apache.accumulo.core.conf.SiteConfiguration.getProperties(SiteConfiguration.java:272)\r\n         at org.apache.accumulo.core.conf.SiteConfiguration.getProperties(SiteConfiguration.java:266)\r\n         at org.apache.accumulo.server.conf.ZooBasedConfiguration.getProperties(ZooBasedConfiguration.java:127)\r\n         at org.apache.accumulo.core.conf.AccumuloConfiguration.get(AccumuloConfiguration.java:84)\r\n         at org.apache.accumulo.server.conf.NamespaceConfiguration.get(NamespaceConfiguration.java:62)\r\n         at org.apache.accumulo.server.conf.TableConfiguration.get(TableConfiguration.java:98)\r\n         at org.apache.accumulo.core.conf.AccumuloConfiguration.getAsBytes(AccumuloConfiguration.java:240)\r\n         at org.apache.accumulo.tserver.tablet.Tablet.findSplitRow(Tablet.java:1196)\r\n         at org.apache.accumulo.tserver.tablet.Tablet.needsSplit(Tablet.java:1344)\r\n         - locked <0x0000000547991f30> (a org.apache.accumulo.tserver.tablet.Tablet)\r\n         at org.apache.accumulo.tserver.TabletServer$MajorCompactor.run(TabletServer.java:457)\r\n```\r\n\r\nThe DefaultConfiguration.getProperties method is inefficient (O(n)) when you know which properties you want to pull from the map (O(1)).",
                "bodyText": "User was running tests against 2.1.0-SNAPSHOT and found that getting properties was consuming an unexpected amount of CPU time. User provided stack trace:\n\"Split/MajC initiator\" #51 daemon prio=5 os_prio=0 cpu=8876417.63ms elapsed=70703.21s tid=0x0000561224710000 nid=0x29e1 runnable  [0x00007fbceee29000]    java.lang.Thread.State: RUNNABLE\n         at org.apache.accumulo.core.conf.DefaultConfiguration.lambda$getProperties$1(DefaultConfiguration.java:59)\n         at org.apache.accumulo.core.conf.DefaultConfiguration$$Lambda$247/0x00000008403ce840.test(Unknown Source)\n         at java.util.stream.ReferencePipeline$2$1.accept(java.base@11.0.15/ReferencePipeline.java:176)\n         at java.util.HashMap$EntrySpliterator.forEachRemaining(java.base@11.0.15/HashMap.java:1764)\n         at java.util.stream.AbstractPipeline.copyInto(java.base@11.0.15/AbstractPipeline.java:484)\n         at java.util.stream.AbstractPipeline.wrapAndCopyInto(java.base@11.0.15/AbstractPipeline.java:474)\n         at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(java.base@11.0.15/ForEachOps.java:150)\n         at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(java.base@11.0.15/ForEachOps.java:173)\n         at java.util.stream.AbstractPipeline.evaluate(java.base@11.0.15/AbstractPipeline.java:234)\n         at java.util.stream.ReferencePipeline.forEach(java.base@11.0.15/ReferencePipeline.java:497)\n         at org.apache.accumulo.core.conf.DefaultConfiguration.getProperties(DefaultConfiguration.java:60)\n         at org.apache.accumulo.core.conf.SiteConfiguration.getProperties(SiteConfiguration.java:272)\n         at org.apache.accumulo.core.conf.SiteConfiguration.getProperties(SiteConfiguration.java:266)\n         at org.apache.accumulo.server.conf.ZooBasedConfiguration.getProperties(ZooBasedConfiguration.java:127)\n         at org.apache.accumulo.core.conf.AccumuloConfiguration.get(AccumuloConfiguration.java:84)\n         at org.apache.accumulo.server.conf.NamespaceConfiguration.get(NamespaceConfiguration.java:62)\n         at org.apache.accumulo.server.conf.TableConfiguration.get(TableConfiguration.java:98)\n         at org.apache.accumulo.core.conf.AccumuloConfiguration.getAsBytes(AccumuloConfiguration.java:240)\n         at org.apache.accumulo.tserver.tablet.Tablet.findSplitRow(Tablet.java:1196)\n         at org.apache.accumulo.tserver.tablet.Tablet.needsSplit(Tablet.java:1344)\n         - locked <0x0000000547991f30> (a org.apache.accumulo.tserver.tablet.Tablet)\n         at org.apache.accumulo.tserver.TabletServer$MajorCompactor.run(TabletServer.java:457)\n\nThe DefaultConfiguration.getProperties method is inefficient (O(n)) when you know which properties you want to pull from the map (O(1)).",
                "createdAt": "2022-07-28T16:48:43Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5HehNn",
                "body": "I agree with your observations here. I'll admit that I don't fully understand the layers of configuration objects here. I do think there is an opportunity to consolidate some of this logic, but that's a different PR possibly for another time.",
                "bodyText": "I agree with your observations here. I'll admit that I don't fully understand the layers of configuration objects here. I do think there is an opportunity to consolidate some of this logic, but that's a different PR possibly for another time.",
                "createdAt": "2022-07-29T11:44:23Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5IBWOF",
                "body": "It's being used in `AccumuloConfiguration.get(String)` and `AccumuloConfiguration.iterator`",
                "bodyText": "It's being used in AccumuloConfiguration.get(String) and AccumuloConfiguration.iterator",
                "createdAt": "2022-08-08T16:00:40Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5IBdmz",
                "body": "> It's being used in `AccumuloConfiguration.get(String)` and `AccumuloConfiguration.iterator`\r\n\r\nThat was a big code change for such a small convenience, I think. It doesn't save from having to iterate over the properties in `AccumuloConfiguration.get(String)` case, either (because we're still iterating in the new method body). And, in the `AccumuloConfiguration.iterator` case, I think there's a bug, because `getProperties(entries)` there now seems equivalent to `getProperties(entries, x -> false);` instead of `getProperties(entries, x -> true);`, because the varargs is empty (meaning no properties are specified and matched, instead of all of them matching).\r\n\r\nIn the best case scenario, it seems we're avoiding constructing a Predicate in two places in internal code in favor of constructing a varargs arrays instead. I'm not sure that's better in terms of performance, and there's a lot more code to get the job done. Overall, I don't think this change was better than what was there before.",
                "bodyText": "It's being used in AccumuloConfiguration.get(String) and AccumuloConfiguration.iterator\n\nThat was a big code change for such a small convenience, I think. It doesn't save from having to iterate over the properties in AccumuloConfiguration.get(String) case, either (because we're still iterating in the new method body). And, in the AccumuloConfiguration.iterator case, I think there's a bug, because getProperties(entries) there now seems equivalent to getProperties(entries, x -> false); instead of getProperties(entries, x -> true);, because the varargs is empty (meaning no properties are specified and matched, instead of all of them matching).\nIn the best case scenario, it seems we're avoiding constructing a Predicate in two places in internal code in favor of constructing a varargs arrays instead. I'm not sure that's better in terms of performance, and there's a lot more code to get the job done. Overall, I don't think this change was better than what was there before.",
                "createdAt": "2022-08-08T16:28:13Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5IBhqw",
                "body": ">  It doesn't save from having to iterate over the properties in AccumuloConfiguration.get(String) case, either (because we're still iterating in the new method body)\r\n\r\nWe are iterating over the varargs method parameter and pulling the property value from the map of properties vs testing each entry in the map of properties to see if the Predicate returns true.\r\n\r\n> in the AccumuloConfiguration.iterator case, I think there's a bug, because getProperties(entries) there now seems equivalent to getProperties(entries, x -> false); instead of getProperties(entries, x -> true);, because the varargs is empty (meaning no properties are specified and matched, instead of all of them matching).\r\n\r\nI handled this in DefaultConfiguration.getInstance, but I think you are right in that I missed this in the other classes, I will submit a follow-on to fix this.\r\n\r\n> In the best case scenario, it seems we're avoiding constructing a Predicate in two places in internal code in favor of constructing a varargs arrays instead. I'm not sure that's better in terms of performance, and there's a lot more code to get the job done. Overall, I don't think this change was better than what was there before.\r\n\r\nI disagree. In the case where the caller wants to get the value for a single property (or even a few) with fully qualified names its certainly going to be more efficient to pull the properties from the map by key vs iterating over the entire map to test each key.",
                "bodyText": "It doesn't save from having to iterate over the properties in AccumuloConfiguration.get(String) case, either (because we're still iterating in the new method body)\n\nWe are iterating over the varargs method parameter and pulling the property value from the map of properties vs testing each entry in the map of properties to see if the Predicate returns true.\n\nin the AccumuloConfiguration.iterator case, I think there's a bug, because getProperties(entries) there now seems equivalent to getProperties(entries, x -> false); instead of getProperties(entries, x -> true);, because the varargs is empty (meaning no properties are specified and matched, instead of all of them matching).\n\nI handled this in DefaultConfiguration.getInstance, but I think you are right in that I missed this in the other classes, I will submit a follow-on to fix this.\n\nIn the best case scenario, it seems we're avoiding constructing a Predicate in two places in internal code in favor of constructing a varargs arrays instead. I'm not sure that's better in terms of performance, and there's a lot more code to get the job done. Overall, I don't think this change was better than what was there before.\n\nI disagree. In the case where the caller wants to get the value for a single property (or even a few) with fully qualified names its certainly going to be more efficient to pull the properties from the map by key vs iterating over the entire map to test each key.",
                "createdAt": "2022-08-08T16:43:37Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5IBlMk",
                "body": "> We are iterating over the varargs method parameter and pulling the property value from the map of properties vs testing each entry in the map of properties to see if the Predicate returns true.\r\n\r\nOh right. Still, this is a small scalar multiple difference. I don't think it will substantially affect performance, given that looking up a small number of properties this way would be rare anyway.\r\n\r\n> I disagree. In the case where the caller wants to get the value for a single property (or even a few) with fully qualified names its certainly going to be more efficient to pull the properties from the map by key vs iterating over the entire map to test each key.\r\n\r\nGiven your correction to my misunderstanding above, I agree with you. However, I don't think it matters that much in terms of performance. This is internal code, and it's unlikely we're hitting this often enough to need to optimize this specific case, especially since the caller can just do (pseudo-code): `for x in A,B,C { conf.get(x) }`",
                "bodyText": "We are iterating over the varargs method parameter and pulling the property value from the map of properties vs testing each entry in the map of properties to see if the Predicate returns true.\n\nOh right. Still, this is a small scalar multiple difference. I don't think it will substantially affect performance, given that looking up a small number of properties this way would be rare anyway.\n\nI disagree. In the case where the caller wants to get the value for a single property (or even a few) with fully qualified names its certainly going to be more efficient to pull the properties from the map by key vs iterating over the entire map to test each key.\n\nGiven your correction to my misunderstanding above, I agree with you. However, I don't think it matters that much in terms of performance. This is internal code, and it's unlikely we're hitting this often enough to need to optimize this specific case, especially since the caller can just do (pseudo-code): for x in A,B,C { conf.get(x) }",
                "createdAt": "2022-08-08T16:58:16Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5IBph9",
                "body": "> I don't think it will substantially affect performance, given that looking up a small number of properties this way would be rare anyway.\r\n\r\n> However, I don't think it matters that much in terms of performance\r\n\r\nWell, I would point you to this comment above (https://github.com/apache/accumulo/pull/2834#issuecomment-1198394023). Anything that uses `AccumuloConfiguration.get(String)` is more efficient with this code. There are several places where get(String) is being used in the internal code. Here's one good example:\r\n\r\n  RFileOperations.openWriter() -> TableConfiguration.get(Property) -> NamespaceConfiguration.get(Property) -> AccumuloConfiguration.get(String).",
                "bodyText": "I don't think it will substantially affect performance, given that looking up a small number of properties this way would be rare anyway.\n\n\nHowever, I don't think it matters that much in terms of performance\n\nWell, I would point you to this comment above (#2834 (comment)). Anything that uses AccumuloConfiguration.get(String) is more efficient with this code. There are several places where get(String) is being used in the internal code. Here's one good example:\nRFileOperations.openWriter() -> TableConfiguration.get(Property) -> NamespaceConfiguration.get(Property) -> AccumuloConfiguration.get(String).",
                "createdAt": "2022-08-08T17:15:56Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5IFE4x",
                "body": "> > I don't think it will substantially affect performance, given that looking up a small number of properties this way would be rare anyway.\r\n> \r\n> > However, I don't think it matters that much in terms of performance\r\n> \r\n> Well, I would point you to this comment above ([#2834 (comment)](https://github.com/apache/accumulo/pull/2834#issuecomment-1198394023)). Anything that uses `AccumuloConfiguration.get(String)` is more efficient with this code. There are several places where get(String) is being used in the internal code. Here's one good example:\r\n\r\nThat comment reveals an entirely different issue... that is a bug, where the call to Namespace.get(Property) delegates to it's parent using `getParent().get(String)` instead of `getParent().get(Property)`, like it should.\r\n\r\nRetrieving by Property should be very efficient. Retrieving by arbitrary String should be rare, and almost never used. I believe you've optimized for a case that shouldn't be called instead of fixing the calling code.",
                "bodyText": "I don't think it will substantially affect performance, given that looking up a small number of properties this way would be rare anyway.\n\n\nHowever, I don't think it matters that much in terms of performance\n\nWell, I would point you to this comment above (#2834 (comment)). Anything that uses AccumuloConfiguration.get(String) is more efficient with this code. There are several places where get(String) is being used in the internal code. Here's one good example:\n\nThat comment reveals an entirely different issue... that is a bug, where the call to Namespace.get(Property) delegates to it's parent using getParent().get(String) instead of getParent().get(Property), like it should.\nRetrieving by Property should be very efficient. Retrieving by arbitrary String should be rare, and almost never used. I believe you've optimized for a case that shouldn't be called instead of fixing the calling code.",
                "createdAt": "2022-08-09T12:02:15Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5IFJU6",
                "body": "> I believe you've optimized for a case that shouldn't be called instead of fixing the calling code.\r\n\r\nThat's a fair observation. I didn't question the existing code. It may very well be that the existing code can be fixed and these two commits reverted.",
                "bodyText": "I believe you've optimized for a case that shouldn't be called instead of fixing the calling code.\n\nThat's a fair observation. I didn't question the existing code. It may very well be that the existing code can be fixed and these two commits reverted.",
                "createdAt": "2022-08-09T12:19:05Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5IG-vC",
                "body": "@ctubbsii - are you working on anything related to this? If not, I can start on the things you mentioned above.",
                "bodyText": "@ctubbsii - are you working on anything related to this? If not, I can start on the things you mentioned above.",
                "createdAt": "2022-08-09T19:29:08Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5IG_-1",
                "body": "@dlmarion wrote:\r\n> @ctubbsii - are you working on anything related to this? If not, I can start on the things you mentioned above.\r\n\r\nI haven't started anything yet. Feel free to look into it. I was going to fix the calling code, and then check to see if there were any other callers that needed to be similarly fixed, before even considering whether to revert these two commits. I did notice a test failure in NamespacesIT, after the second commit that was related to configuration property inheritance, and I think is related that needs to be investigated as well.",
                "bodyText": "@dlmarion wrote:\n\n@ctubbsii - are you working on anything related to this? If not, I can start on the things you mentioned above.\n\nI haven't started anything yet. Feel free to look into it. I was going to fix the calling code, and then check to see if there were any other callers that needed to be similarly fixed, before even considering whether to revert these two commits. I did notice a test failure in NamespacesIT, after the second commit that was related to configuration property inheritance, and I think is related that needs to be investigated as well.",
                "createdAt": "2022-08-09T19:34:57Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5IHYyJ",
                "body": "@ctubbsii  - See https://github.com/apache/accumulo/pull/2864. I reverted the two commits and added a 3rd. In the 3rd commit I reduced calls to AccumuloConfiguration.get(String) and optimized that method.",
                "bodyText": "@ctubbsii  - See #2864. I reverted the two commits and added a 3rd. In the 3rd commit I reduced calls to AccumuloConfiguration.get(String) and optimized that method.",
                "createdAt": "2022-08-09T21:05:45Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 19,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4jksU0",
                "comments": [
                    {
                        "bodyText": "The comment that this is inefficient for multiple properties still applies, the advice to use filter maybe should be adjusted to the new methods, but in general prefer getting multiple properties so the \"read\" to get the underlying configs is minimized.",
                        "body": "The comment that this is inefficient for multiple properties still applies, the advice to use filter maybe should be adjusted to the new methods, but in general prefer getting multiple properties so the \"read\" to get the underlying configs is minimized.",
                        "startLine": null,
                        "line": 77,
                        "originalLine": 77,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The comment that this is inefficient for multiple properties still applies\n\nYeah, that's fair. I can put the comment back into the javadoc for that method.",
                        "body": "> The comment that this is inefficient for multiple properties still applies\r\n\r\nYeah, that's fair. I can put the comment back into the javadoc for that method.",
                        "startLine": null,
                        "line": 77,
                        "originalLine": 77,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "javadoc reverted in 300afea.",
                        "body": "javadoc reverted in 300afea.",
                        "startLine": null,
                        "line": 77,
                        "originalLine": 77,
                        "originalStartLine": null
                    }
                ],
                "line": 77,
                "startLine": null,
                "originalLine": 77,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/AccumuloConfiguration.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4jkuI3",
                "comments": [
                    {
                        "bodyText": "Is it necessary to duplicate the function here instead of delegating to the method in AccumuloConfiguration? Anything using this method is only valid as long as both stay in sync?  (I think this applies to the other methods that that have a concrete implementation in AccumuloConfiguration",
                        "body": "Is it necessary to duplicate the function here instead of delegating to the method in AccumuloConfiguration? Anything using this method is only valid as long as both stay in sync?  (I think this applies to the other methods that that have a concrete implementation in AccumuloConfiguration",
                        "startLine": null,
                        "line": 176,
                        "originalLine": 176,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Is it necessary to duplicate the function here instead of delegating to the method in AccumuloConfiguration?\n\nYes, I believe so. The methods in AccumuloConfiguration are abstract, there is no implementation. The version of getProperties that takes the filter is also abstract, so it's duplicated in all of the subclasses as well.",
                        "body": "> Is it necessary to duplicate the function here instead of delegating to the method in AccumuloConfiguration?\r\n\r\nYes, I believe so. The methods in AccumuloConfiguration are abstract, there is no implementation. The version of getProperties that takes the filter is also abstract, so it's duplicated in all of the subclasses as well.\r\n",
                        "startLine": null,
                        "line": 176,
                        "originalLine": 176,
                        "originalStartLine": null
                    }
                ],
                "line": 176,
                "startLine": 176,
                "originalLine": 176,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/conf/AccumuloConfigurationTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": 10.0,
        "description": {
            "bodyText": "The getProperties method which takes a filter is inefficient when\nyou know that you want to get all properties or you know the names\nof the properties. Provide a mechanism to get the properties w/out\nusing a filter"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2397,
        "title": {
            "body": "Add consistency checks for lastFlushID and lastCompactID",
            "bodyHTML": "Add consistency checks for lastFlushID and lastCompactID"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM4-Xa04",
                "body": "This change broke `org.apache.accumulo.test.functional.DeleteRowsIT.testManyRows`, and I'm not sure why. This may need to be reverted until it is solved.",
                "bodyText": "This change broke org.apache.accumulo.test.functional.DeleteRowsIT.testManyRows, and I'm not sure why. This may need to be reverted until it is solved.",
                "createdAt": "2022-02-20T21:41:56Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM4-XeuO",
                "body": "I will look into it when I get the chance. Feel free to revert if I don't get to it in time. ",
                "bodyText": "I will look into it when I get the chance. Feel free to revert if I don't get to it in time.",
                "createdAt": "2022-02-20T23:13:17Z",
                "author": "Manno15"
            },
            {
                "id": "IC_kwDOACaFSM4-Xe1N",
                "body": "Okay, I'll revert it then, because I don't want it to hold up other changes, but it should be simply to re-apply once the problem is discovered. I'll re-open the original issue to track it.",
                "bodyText": "Okay, I'll revert it then, because I don't want it to hold up other changes, but it should be simply to re-apply once the problem is discovered. I'll re-open the original issue to track it.",
                "createdAt": "2022-02-20T23:15:23Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM4-aA2q",
                "body": "Seems the issue is the if statement is true so it throws the RuntimeException. Which doesn't exit the test but rather slows things down due to the retries. This eventually causes the test to timeout. I can get a fix out next weekend though if someone else wants to tackle it in the meantime, feel free.\r\n\r\n```\r\n2022-02-21T10:28:17,562 [tablet.Tablet] ERROR: Closed tablet 1;n< lastFlushID is inconsistent with metadata : -1 != 0\r\n2022-02-21T10:28:17,562 [tablet.Tablet] ERROR: Failed to do close consistency check for tablet 1;n<\r\njava.lang.RuntimeException: Closed tablet 1;n< lastFlushID is inconsistent with metadata : -1 != 0\r\n\r\n```",
                "bodyText": "Seems the issue is the if statement is true so it throws the RuntimeException. Which doesn't exit the test but rather slows things down due to the retries. This eventually causes the test to timeout. I can get a fix out next weekend though if someone else wants to tackle it in the meantime, feel free.\n2022-02-21T10:28:17,562 [tablet.Tablet] ERROR: Closed tablet 1;n< lastFlushID is inconsistent with metadata : -1 != 0\n2022-02-21T10:28:17,562 [tablet.Tablet] ERROR: Failed to do close consistency check for tablet 1;n<\njava.lang.RuntimeException: Closed tablet 1;n< lastFlushID is inconsistent with metadata : -1 != 0",
                "createdAt": "2022-02-21T15:38:32Z",
                "author": "Manno15"
            }
        ],
        "total_comments_count": 23,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4ddNgK",
                "comments": [
                    {
                        "bodyText": "Didn't look at the rest of the PR, but one quick note: we'd want to log or throw these exceptions, rather than print them.",
                        "body": "Didn't look at the rest of the PR, but one quick note: we'd want to log or throw these exceptions, rather than print them.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1428,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1428,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4delX9",
                "comments": [
                    {
                        "bodyText": "I'm not sure that this comment is correct. In fact, I'm not sure that the original comment from 2013 applies at this point. From what my IDE search found, ZTABLE_FLUSH_ID is only set in ManagerClientServiceHandler#initiateFlush which IIRC is used when someone submits a flush command in the shell. From what I can tell, if a Tablet is hosted on a TabletServer in the normal course of business and minor compactions occur naturally, then lastFlushID will be equal to the value passed in the Tablet constructor and flushID will be equal to the value stored in ZooKeeper.",
                        "body": "I'm not sure that this comment is correct. In fact, I'm not sure that the original comment from 2013 applies at this point. From what my IDE search found, ZTABLE_FLUSH_ID is only set in [ManagerClientServiceHandler#initiateFlush](https://github.com/apache/accumulo/blob/main/server/manager/src/main/java/org/apache/accumulo/manager/ManagerClientServiceHandler.java#L125) which IIRC is used when someone submits a `flush` command in the shell. From what I can tell, if a Tablet is hosted on a TabletServer in the normal course of business and minor compactions occur naturally, then `lastFlushID` will be equal to the value passed in the Tablet constructor and `flushID` will be equal to the value stored in ZooKeeper.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1421,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That could very well be true. I based the comments off of the information that was provided in the original issue on GitHub. I can remove this if it is inaccurate or outdated or change the wording.",
                        "body": "That could very well be true. I based the comments off of the information that was provided in the original issue on GitHub. I can remove this if it is inaccurate or outdated or change the wording.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1421,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I would like someone else to confirm what I'm seeing. There may be a different way to do the close consistency check for flushes and compactions, I just think the information in the original issue, which this change is based off of, is out of date.",
                        "body": "I would like someone else to confirm what I'm seeing. There may be a different way to do the close consistency check for flushes and compactions, I just think the information in the original issue, which this change is based off of, is out of date.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1421,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@dlmarion Is this, and your other comment below resolved with the updated changes? Is this PR ready to be merged in your opinion?",
                        "body": "@dlmarion Is this, and your other comment below resolved with the updated changes? Is this PR ready to be merged in your opinion?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1421,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "From what I recall when I moved the issue into GitHub, I did notice certain circumstances which led to lastFlushID and getFlushID showing that no flush has occurred but still not being consistent with each other. I will re-investigate to see if that still holds true.",
                        "body": "From what I recall when I moved the issue into GitHub, I did notice certain circumstances which led to lastFlushID and getFlushID showing that no flush has occurred but still not being consistent with each other. I will re-investigate to see if that still holds true. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1421,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "From just a quick test run with accumulo-testing ingesting and things flushing normally (no compactions happened yet), I saw lastFlushID 0, last CompactID -1, getCompactID optionalLong empty, and getFlushID opt long 0.  The states match up but I am not sure the consistency checks here will pass through consistently.",
                        "body": "From just a quick test run with accumulo-testing ingesting and things flushing normally (no compactions happened yet), I saw lastFlushID 0, last CompactID -1, getCompactID optionalLong empty, and getFlushID opt long 0.  The states match up but I am not sure the consistency checks here will pass through consistently. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1421,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1421,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4demMd",
                "comments": [
                    {
                        "bodyText": "Same thing here. Z_COMPACT_ID is set to 0 when the table is created and incremented when a user manually compacts that table.",
                        "body": "Same thing here. `Z_COMPACT_ID` is set to `0` when the table is created and incremented when a user manually compacts that table.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1436,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1436,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4do_Xm",
                "comments": [
                    {
                        "bodyText": "this will read the current table wide flush ID from ZK.  That is not what we want to check here.  Instead, we want to check if lastFlushId matches what is stored in the metdata table for this tablet.  The lastFlushId instance var should contain whats in the metadata table and it should be updated in memory when the metadata table is updated.  We can change the Ample code that reads the tablet metadata to include flush id and then do something like the following.\nif(tabletMeta.getFlushId().orElse(-1) != lastFlushId) {\n  // mismatch with tablet metadata , so throw exception\n}\nNot sure if the case where flushId was never set it correct in the code above.  Need to investigate further.",
                        "body": "this will read the current table wide flush ID from ZK.  That is not what we want to check here.  Instead, we want to check if lastFlushId matches what is stored in the metdata table for this tablet.  The lastFlushId instance var should contain whats in the metadata table and it should be updated in memory when the metadata table is updated.  We can change the Ample code that reads the tablet metadata to include flush id and then do something like the following.\r\n\r\n```java\r\nif(tabletMeta.getFlushId().orElse(-1) != lastFlushId) {\r\n  // mismatch with tablet metadata , so throw exception\r\n}\r\n```\r\n\r\nNot sure if the case where flushId was never set it correct in the code above.  Need to investigate further.\r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1423,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "So I was looking into this and I have some questions.\nYou mentioned that we can change the Ample code that reads the tablet metadata to include flushID and do what you had suggested. I was curious what part of code that may be. I could not identify it, but I did see that Ample already had knowledge of flushID in general.\nWould the change just deal with how the variable is updated? Or would it be dealing with something more complex?",
                        "body": "So I was looking into this and I have some questions.\r\n\r\nYou mentioned that we can change the Ample code that reads the tablet metadata to include flushID and do what you had suggested. I was curious what part of code that may be. I could not identify it, but I did see that Ample already had knowledge of flushID in general. \r\n\r\nWould the change just deal with how the variable is updated? Or would it be dealing with something more complex?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1423,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I was curious what part of code that may be.\n\nThere is some code like the following earlier in the method that uses Ample to read the tablets metadata. Can add the FLUSH_ID to that code.\n      var tabletMeta = context.getAmple().readTablet(extent, ColumnType.FILES, ColumnType.LOGS,\n          ColumnType.ECOMP, ColumnType.PREV_ROW, ColumnType.FLUSH_ID);",
                        "body": ">  I was curious what part of code that may be.\r\n\r\nThere is some code like the following earlier in the method that uses Ample to read the tablets metadata. Can add the FLUSH_ID to that code.\r\n\r\n```java\r\n      var tabletMeta = context.getAmple().readTablet(extent, ColumnType.FILES, ColumnType.LOGS,\r\n          ColumnType.ECOMP, ColumnType.PREV_ROW, ColumnType.FLUSH_ID);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1423,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thank you, that is very helpful!\nWould this be a similar process for COMPACT_ID?",
                        "body": "Thank you, that is very helpful! \r\n\r\nWould this be a similar process for COMPACT_ID?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1423,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Would this be a similar process for COMPACT_ID?\n\nYeah I think so.",
                        "body": "> Would this be a similar process for COMPACT_ID?\r\n\r\nYeah I think so.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1423,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1423,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4duaeW",
                "comments": [
                    {
                        "bodyText": "The flush status is uncertain here, all we know is that this in memory data is inconsistent with the metadata table.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                    String msg = \"Closed tablet \" + extent + \" has not been flushed before being closed.\";\n          \n          \n            \n                    String msg = \"Closed tablet \" + extent + \" lastFlushId is inconsistent with metadata : \"+(tabletMeta.getFlushId().orElse(-1)+\" !=\" +lastFlushID;",
                        "body": "The flush status is uncertain here, all we know is that this in memory data is inconsistent with the metadata table.\r\n\r\n```suggestion\r\n        String msg = \"Closed tablet \" + extent + \" lastFlushId is inconsistent with metadata : \"+(tabletMeta.getFlushId().orElse(-1)+\" !=\" +lastFlushID;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1406,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1406,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4duah0",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    String msg = \"Closed tablet \" + extent + \" has not been compacted before being closed.\";\n          \n          \n            \n                    String msg = \"Closed tablet \" + extent + \" lastCompactID is inconsistent with metdata \"+tabletMeta.getCompactId().orElse(-1)+ \"!=\"+ lastCompactID",
                        "body": "```suggestion\r\n        String msg = \"Closed tablet \" + extent + \" lastCompactID is inconsistent with metdata \"+tabletMeta.getCompactId().orElse(-1)+ \"!=\"+ lastCompactID\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1412,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1412,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4d2Xiu",
                "comments": [
                    {
                        "bodyText": "Last week I examined to lastFlushID in the tablet server code to see if it is -1 when not set.  Based on my analysis, it is -1 so doing orElse(-1) is ok here.  I don't think I analyzed lastCompactID.  If it has not been done, it would be good to analyze initialization of both of them as my analysis of the one was quick.\nThis -1 practice is extremely brittle.  A good follow-on PR would be to do something else (constant vs -1, OptionalLong, Long+null, ??) to make it less brittle.",
                        "body": "Last week I examined to lastFlushID in the tablet server code to see if it is -1 when not set.  Based on my analysis, it is -1 so doing orElse(-1) is ok here.  I don't think I analyzed lastCompactID.  If it has not been done, it would be good to analyze initialization of both of them as my analysis of the one was quick. \r\n\r\nThis -1 practice is extremely brittle.  A good follow-on PR would be to do something else (constant vs -1, OptionalLong, Long+null, ??) to make it less brittle.",
                        "startLine": null,
                        "line": 1405,
                        "originalLine": 1405,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I will go ahead and analyze the initialization of both lastFlushID and lastCompactID.",
                        "body": "I will go ahead and analyze the initialization of both lastFlushID and lastCompactID.",
                        "startLine": null,
                        "line": 1405,
                        "originalLine": 1405,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Is there more to be done here? I see @keith-turner approved this. Is this ready to merge?",
                        "body": "Is there more to be done here? I see @keith-turner approved this. Is this ready to merge?",
                        "startLine": null,
                        "line": 1405,
                        "originalLine": 1405,
                        "originalStartLine": null
                    }
                ],
                "line": 1405,
                "startLine": 1405,
                "originalLine": 1405,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "foster33",
            "ctubbsii",
            "Manno15",
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 40.0,
        "description": {
            "bodyText": "Fixes #2153\nThis PR addresses the following:\n\nCreates a consistency check for getFlushID & lastFlushID\nCreates a consistency check for getCompactionID & lastCompactID\nRemoves TODO relating to change\nFixes a minor misspelling in the area of the original change\n\nIn my changes I have created two try / catch blocks surrounding the getFlushID and getCompactionID assignments. One for each consistency check. I was not sure whether the NoNodeException should be thrown, logged or just printed. If anyone has any input regarding that, I would appreciate it."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3028,
        "title": {
            "body": "fixes #2667 wait for metadata write in tablet close",
            "bodyHTML": "fixes #2667 wait for metadata write in tablet close"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5Ma5_m",
                "body": "I am going to run the bulk random walk test where I was seeing this bug for a day or two with these changes.",
                "bodyText": "I am going to run the bulk random walk test where I was seeing this bug for a day or two with these changes.",
                "createdAt": "2022-10-18T09:45:54Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5MbTjd",
                "body": "I ran a lot of compaction related ITs with these changes and those all passed.",
                "bodyText": "I ran a lot of compaction related ITs with these changes and those all passed.",
                "createdAt": "2022-10-18T11:20:25Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5MbXWK",
                "body": "> I am going to run the bulk random walk test where I was seeing this bug for a day or two with these changes.\r\n\r\nI'm not sure that we need to wait for the results of that to merge this. If you have good confidence that this works, then we will be running those types of tests for release testing.",
                "bodyText": "I am going to run the bulk random walk test where I was seeing this bug for a day or two with these changes.\n\nI'm not sure that we need to wait for the results of that to merge this. If you have good confidence that this works, then we will be running those types of tests for release testing.",
                "createdAt": "2022-10-18T11:33:27Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5MbdpY",
                "body": "> I'm not sure that we need to wait for the results of that to merge this. If you have good confidence that this works, then we will be running those types of tests for release testing.\r\n\r\nI will keep an eye on the test I have running to look for any adverse effects from this change. The bulk rw test mixes compactions randomly w/ lots of other table operation in a verifiable way so it's really good a stressing the compaction code.  If anything does turn up, I can open a new issue.  \r\n\r\nUnrelated to this, seeing how good the bulk RW test is at stressing compaction code I have wondered how I can tweak it to incorporate external compactions.\r\n\r\n",
                "bodyText": "I'm not sure that we need to wait for the results of that to merge this. If you have good confidence that this works, then we will be running those types of tests for release testing.\n\nI will keep an eye on the test I have running to look for any adverse effects from this change. The bulk rw test mixes compactions randomly w/ lots of other table operation in a verifiable way so it's really good a stressing the compaction code.  If anything does turn up, I can open a new issue.\nUnrelated to this, seeing how good the bulk RW test is at stressing compaction code I have wondered how I can tweak it to incorporate external compactions.",
                "createdAt": "2022-10-18T11:55:57Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5MdSSG",
                "body": "@keith-turner I was thinking it would be good to have external compactors running with internal compactions in the RW Bulk test, to try to create the situation I described in my comment.",
                "bodyText": "@keith-turner I was thinking it would be good to have external compactors running with internal compactions in the RW Bulk test, to try to create the situation I described in my comment.",
                "createdAt": "2022-10-18T17:15:08Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM5MnLHr",
                "body": "My random walk bulk test with these changes have been running for ~48hrs w/o issue except for #3032. ",
                "bodyText": "My random walk bulk test with these changes have been running for ~48hrs w/o issue except for #3032.",
                "createdAt": "2022-10-20T11:04:50Z",
                "author": "keith-turner"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4mFjHL",
                "comments": [
                    {
                        "bodyText": "What would happen if you have external compactions running and an internal compaction is SELECTING for the same tablet? It seems like the close would go through and if the other conditions in #2667 (comment) are met, we would get the same error.",
                        "body": "What would happen if you have external compactions running and an internal compaction is SELECTING for the same tablet? It seems like the close would go through and if the other conditions in https://github.com/apache/accumulo/issues/2667#issuecomment-1282120602 are met, we would get the same error.",
                        "startLine": null,
                        "line": 1525,
                        "originalLine": 1525,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "What would happen if you have external compactions running and an internal compaction is SELECTING for the same tablet? It seems like the close would go through and if the other conditions in #2667 (comment) are met, we would get the same error.\n\nI think that is ok, it does not close when these conditions are met it waits until none of the conditions are met to proceed with close.  Tablet.close() calls CompactableImpl.close() and waits for it to return before doing its validation.  So hopefully the tablet will wait for any in flight metadata writes happening in CompactableImpl now before doing its metadata validation.",
                        "body": "> What would happen if you have external compactions running and an internal compaction is SELECTING for the same tablet? It seems like the close would go through and if the other conditions in https://github.com/apache/accumulo/issues/2667#issuecomment-1282120602 are met, we would get the same error.\r\n\r\nI think that is ok, it does not close when these conditions are met it waits until none of the conditions are met to proceed with close.  Tablet.close() calls CompactableImpl.close() and waits for it to return before doing its validation.  So hopefully the tablet will wait for any in flight metadata writes happening in CompactableImpl now before doing its metadata validation.   ",
                        "startLine": null,
                        "line": 1525,
                        "originalLine": 1525,
                        "originalStartLine": null
                    }
                ],
                "line": 1525,
                "startLine": 1525,
                "originalLine": 1525,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/CompactableImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "dlmarion",
            "milleruntime"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1706,
        "title": {
            "body": "Related #1664. Allow Candidate batch size to be user configurable",
            "bodyHTML": "Related #1664. Allow Candidate batch size to be user configurable"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzY3MTM2OnYy",
                "comments": [
                    {
                        "bodyText": "If we make this property of type PropertyType.BYTES, then it may be more user friendly, and the comment about the default can be removed, because it would be redundant. If you do that, then it's a simple matter to divide by 2 to get the approximate number of characters for the count in the implementation. Using PropertyType.BYTES will also make it more user friendly, because users can use the typed-strings, like 16M or 1G or 512K when they change the configuration (and the default can be 8M).",
                        "body": "If we make this property of type `PropertyType.BYTES`, then it may be more user friendly, and the comment about the default can be removed, because it would be redundant. If you do that, then it's a simple matter to divide by 2 to get the approximate number of characters for the count in the implementation. Using `PropertyType.BYTES` will also make it more user friendly, because users can use the typed-strings, like `16M` or `1G` or `512K` when they change the configuration (and the default can be `8M`).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 572,
                        "originalStartLine": 571
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 572,
                "originalStartLine": 571,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUzNTU3OnYy",
                "comments": [
                    {
                        "bodyText": "Although our type engine is case-insensitive, it is better to use upper-case, so it looks like MegaBytes, and not milliBytes. üò∫\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              GC_CANDIDATE_BATCH_SIZE(\"gc.candidate.batch.size\", \"8m\", PropertyType.BYTES,\n          \n          \n            \n              GC_CANDIDATE_BATCH_SIZE(\"gc.candidate.batch.size\", \"8M\", PropertyType.BYTES,",
                        "body": "Although our type engine is case-insensitive, it is better to use upper-case, so it looks like MegaBytes, and not milliBytes. :smiley_cat:\r\n\r\n```suggestion\r\n  GC_CANDIDATE_BATCH_SIZE(\"gc.candidate.batch.size\", \"8M\", PropertyType.BYTES,\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 571,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Fair, I had it capitalized but I didn't like the way it looked and saw we had a 1g somewhere.",
                        "body": "Fair, I had it capitalized but I didn't like the way it looked and saw we had a `1g` somewhere. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 571,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'll take a look and make a separate PR to standardize everything on the case used by SI conventions, for all of our property descriptions and default values (uppercase for everything, except kilo, which is lowercase). It probably doesn't matter to anybody but me. üò∫",
                        "body": "I'll take a look and make a separate PR to standardize everything on the case used by SI conventions, for all of our property descriptions and default values (uppercase for everything, except kilo, which is lowercase). It probably doesn't matter to anybody but me. :smiley_cat: ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 571,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 571,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Manno15",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "This is in relation to #1664. This allows the batch size for garbage collecting implemented in #1650 to be configurable.\nAfter a discussion with @ctubbsii, I determined that I couldn't fully test out the upper limits (batch sizes of 64MB for example). With that in mind, I went ahead and made it configurable but kept it at its current default batch size."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2084,
        "title": {
            "body": "Add retry counter for log recovery with MinC",
            "bodyHTML": "Add retry counter for log recovery with MinC"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg0MTE1MjA0NA==",
                "body": "> Have you been able to test this change?\r\n\r\nI have tested this on a small cluster. It did allow the other tablets to be loaded while rescheduling the recovering of the tablet with the misconfigured iterator. My main concern was handling any possible edge case or any scenario that could disrupt normal recovery on a larger cluster. ",
                "bodyText": "Have you been able to test this change?\n\nI have tested this on a small cluster. It did allow the other tablets to be loaded while rescheduling the recovering of the tablet with the misconfigured iterator. My main concern was handling any possible edge case or any scenario that could disrupt normal recovery on a larger cluster.",
                "createdAt": "2021-05-14T10:14:33Z",
                "author": "Manno15"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg1Nzc3NDEwMA==",
                "body": "After looking through more JIRA tickets, I ran into [ACCUMULO-1570](https://issues.apache.org/jira/projects/ACCUMULO/issues/ACCUMULO-1570?filter=allopenissues&orderby=cf%5B12310200%5D+ASC%2C+priority+DESC%2C+updated+DESC). It is kind of similar but the idea was to offline a tablet and have it marked as broken when it kept failing to minor compact due to user iterator. Could do something similar for recovery in this PR. ",
                "bodyText": "After looking through more JIRA tickets, I ran into ACCUMULO-1570. It is kind of similar but the idea was to offline a tablet and have it marked as broken when it kept failing to minor compact due to user iterator. Could do something similar for recovery in this PR.",
                "createdAt": "2021-06-09T15:03:41Z",
                "author": "Manno15"
            }
        ],
        "total_comments_count": 15,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwNjUxMzQ2OnYy",
                "comments": [
                    {
                        "bodyText": "IllegalStateException does not feel like the right exception to me, please ignore if it you don't agree.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                        throw new IllegalStateException(e);\n          \n          \n            \n                        throw new RuntimeException(e);",
                        "body": "IllegalStateException does not feel like the right exception to me, please ignore if it you don't agree.\r\n\r\n```suggestion\r\n            throw new RuntimeException(e);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 145,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "A more specific exception is usually preferable to a generic \"RuntimeException\". However, the more specific exception should actually make sense for the situation. Exceeding the max retries here does seem to be a bad state, but perhaps not an illegal one. I don't have a better suggestion... just thinking \"out loud\".",
                        "body": "A more specific exception is usually preferable to a generic \"RuntimeException\". However, the more specific exception should actually make sense for the situation. Exceeding the max retries here does seem to be a *bad* state, but perhaps not an *illegal* one. I don't have a better suggestion... just thinking \"out loud\".",
                        "startLine": null,
                        "line": null,
                        "originalLine": 145,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I used IllegalStateException just as a placeholder since I saw it elsewhere in that file. That, along with the number of retries, needs to be discussed on what should be best.",
                        "body": "I used IllegalStateException just as a placeholder since I saw it elsewhere in that file. That, along with the number of retries, needs to be discussed on what should be best. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 145,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 145,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwNjUxOTAxOnYy",
                "comments": [
                    {
                        "bodyText": "Maybe the entire if stmt could be moved after the existing ProblemReport code so that it does not need to be repeated.",
                        "body": "Maybe the entire if stmt could be moved after the existing ProblemReport code so that it does not need to be repeated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 143,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 143,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwNjUyNDM0OnYy",
                "comments": [
                    {
                        "bodyText": "Including the key extent in log messages can be invaluable for debugging.  The existing log messages around failures don't include the extent.",
                        "body": "Including the key extent in log messages can be invaluable for debugging.  The existing log messages around failures don't include the extent.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 142,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good idea, I will revise the logging.",
                        "body": "Good idea, I will revise the logging.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 142,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It does seem that the warn/error messaging in AssignmentHandler and MinorCompationTask does include the key extent in the logging. I can still include it in this log message to help track it. I do worry about log overload throughout the whole process of rescheduling but I am not sure if that is an actual issue or not.",
                        "body": "It does seem that the warn/error messaging in `AssignmentHandler` and `MinorCompationTask` does include the key extent in the logging. I can still include it in this log message to help track it. I do worry about log overload throughout the whole process of rescheduling but I am not sure if that is an actual issue or not.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 142,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 142,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE0MDM3OTEyOnYy",
                "comments": [
                    {
                        "bodyText": "Should the same thing be done in the preceding catch block?  Also before this change, it seems like this catch block and the preceding catch block did the exact same thing.  Curios if you see any diffs @Manno15 w/ the previous catch block.  If they were the same and we want to do this check in both, then maybe the two catch blocks could be collapsed into one?",
                        "body": "Should the same thing be done in the preceding catch block?  Also before this change, it seems like this catch block and the preceding catch block did the exact same thing.  Curios if you see any diffs @Manno15 w/ the previous catch block.  If they were the same and we want to do this check in both, then maybe the two catch blocks could be collapsed into one?",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 143,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "ok I see a diff now, the 2nd catch block passes an exception to log.warn() and the 1st does not.  Still wondering if the prev catch block should do the same check.",
                        "body": "ok I see a diff now, the 2nd catch block passes an exception to log.warn() and the 1st does not.  Still wondering if the prev catch block should do the same check.",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 143,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I am not sure it is necessary. The issue stems from a misconfigured user iterator which I believe will only ever trigger the second catch block. I will look into it and see what would throw an IOException or UnsatisfiedLinkError and see if it relates to recovery or not.",
                        "body": "I am not sure it is necessary. The issue stems from a misconfigured user iterator which I believe will only ever trigger the second catch block. I will look into it and see what would throw an `IOException` or `UnsatisfiedLinkError` and see if it relates to recovery or not. ",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 143,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I am not sure it is necessary. The issue stems from a misconfigured user iterator which I believe will only ever trigger the second catch block.\n\nGiven the uncertainty about adding it to the other catch block, and that the observed problem was addressed, I think this can be merged for now and the other block could be modified later if needed.",
                        "body": "> I am not sure it is necessary. The issue stems from a misconfigured user iterator which I believe will only ever trigger the second catch block.\r\n\r\nGiven the uncertainty about adding it to the other catch block, and that the observed problem was addressed, I think this can be merged for now and the other block could be modified later if needed.",
                        "startLine": null,
                        "line": 143,
                        "originalLine": 143,
                        "originalStartLine": null
                    }
                ],
                "line": 143,
                "startLine": 143,
                "originalLine": 143,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Manno15",
            "keith-turner",
            "ctubbsii"
        ],
        "tdv": 29.0,
        "description": {
            "bodyText": "Potential fix for #2035.\nThe issue with #2035 occurs at \n  \n    \n      accumulo/server/tserver/src/main/java/org/apache/accumulo/tserver/AssignmentHandler.java\n    \n    \n         Line 175\n      in\n      30ce59f\n    \n  \n  \n    \n\n        \n          \n           && !tablet.minorCompactNow(MinorCompactionReason.RECOVERY)) { \n        \n    \n  \n\n\nIf an iterator is misconfigured, this line will never complete and hang in MinorCompactor.java. This potential fix adds a retry counter (only a small amount of retries for testing purposes), solely used when the reason for the minor compaction is recovery. The exception thrown is just a placeholder for now.\nThe result from this change is the exception thrown allows the assignments to get rescheduled so other tablets can be loaded in."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2224,
        "title": {
            "body": "Versioned Properties - refactored to address PR comments",
            "bodyHTML": "Versioned Properties - refactored to address PR comments"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM43ac0U",
                "body": "The partially addresses https://github.com/apache/accumulo/issues/1454 and https://github.com/apache/accumulo/issues/1225",
                "bodyText": "The partially addresses #1454 and #1225",
                "createdAt": "2021-09-28T22:51:24Z",
                "author": "EdColeman"
            }
        ],
        "total_comments_count": 73,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM0ODQzMzEwOnYy",
                "comments": [
                    {
                        "bodyText": "readKV is only called from this location. You could just put the method body here instead of making a new method. Same comment applies to writeKV.",
                        "body": "`readKV` is only called from this location. You could just put the method body here instead of making a new method. Same comment applies to `writeKV`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 148,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 148,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/GzipPropEncoding.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MDk2MjAzOnYy",
                "comments": [
                    {
                        "bodyText": "Just use primitive int here to avoid the unnecessary autoboxing/unboxing.",
                        "body": "Just use primitive `int` here to avoid the unnecessary autoboxing/unboxing.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 83,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 83,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/EncodingOptions.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MDk2MjQ5OnYy",
                "comments": [
                    {
                        "bodyText": "Not sure what this toString method is intended to be used for, but for completeness, could add compress field.",
                        "body": "Not sure what this toString method is intended to be used for, but for completeness, could add compress field.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 71,
                        "originalStartLine": 67
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 71,
                "originalStartLine": 67,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/EncodingOptions.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MDk2Nzc2OnYy",
                "comments": [
                    {
                        "bodyText": "Not sure you need a whole class to represent a 1-up number. Can just use int instead of EncodingVersion.",
                        "body": "Not sure you need a whole class to represent a 1-up number. Can just use `int` instead of `EncodingVersion`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 78,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I wanted it to be strongly typed so that it could be referenced by name rather than a \"magic number\" - but also wanted the serialized field to be compact and with a fast comparison, so wanted to avoid a string / name.",
                        "body": "I wanted it to be strongly typed so that it could be referenced by name rather than a \"magic number\" - but also wanted the serialized field to be compact and with a fast comparison, so wanted to avoid a string / name.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 78,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "What about just using constants for convenience names? Also, an integer might work better in future if you have an implementation that is compatible with a range of previous versions. Checking ranges for integers might be easier in that case than enumerating a set of versions by name.",
                        "body": "What about just using constants for convenience names? Also, an integer might work better in future if you have an implementation that is compatible with a range of previous versions. Checking ranges for integers might be easier in that case than enumerating a set of versions by name.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 78,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 78,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/EncodingOptions.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MDk4NjM4OnYy",
                "comments": [
                    {
                        "bodyText": "I'm unclear on the utility of storing a string timestamp.",
                        "body": "I'm unclear on the utility of storing a string timestamp.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The timestamp seemed attractive when looking at the data - it provides a hint when the data was initially serialized.  I also had thought about ways that having a timestamp could be used for deconfliction of  concurrent updates - you would then know the order that the operations were serialized - but never took it further thinking something might be possible.\nThe versioned properties should have a timestamp - but that could be time derived from the zNode modification time if we don't want to serialize it.\nI can drop the serialization, but it did seem like it was handy having that info available without needing extra info from zookeeper.",
                        "body": "The timestamp seemed attractive when looking at the data - it provides a hint when the data was initially serialized.  I also had thought about ways that having a timestamp could be used for deconfliction of  concurrent updates - you would then know the order that the operations were serialized - but never took it further thinking something might be possible.\r\n\r\nThe versioned properties should have a timestamp - but that could be time derived from the zNode modification time if we don't want to serialize it.  \r\n\r\nI can drop the serialization, but it did seem like it was handy having that info available without needing extra info from zookeeper. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't see clock time as useful for versioning or for resolving conflicts between concurrent updates, since clock times aren't that precise, aren't unique at any level of precision, and don't necessarily have meaning across different servers with different clocks. The only value I see is the human being able to read it and see what time it was on the server that stored it... but that's of limited value. I don't think that's needed. We don't do that any other place (we don't store clock time in RFile metadata, or in other ZK nodes, for example). System logs and/or ZK metadata should suffice for that kind of thing anyway.\nI guess if you're finding that it is still handy, and avoids getting extra info from ZK, I'd have to try to understand how you're utilizing it at the next layer up.",
                        "body": "I don't see clock time as useful for versioning or for resolving conflicts between concurrent updates, since clock times aren't that precise, aren't unique at any level of precision, and don't necessarily have meaning across different servers with different clocks. The only value I see is the human being able to read it and see what time it was on the server that stored it... but that's of limited value. I don't think that's needed. We don't do that any other place (we don't store clock time in RFile metadata, or in other ZK nodes, for example). System logs and/or ZK metadata should suffice for that kind of thing anyway.\r\n\r\nI guess if you're finding that it is still handy, and avoids getting extra info from ZK, I'd have to try to understand how you're utilizing it at the next layer up.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 69,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/GzipPropEncoding.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MDk5MTYwOnYy",
                "comments": [
                    {
                        "bodyText": "Is this version used to compare with the 1-up in ZK to ensure they are the same? If so, I'm not sure we need to store it inside the serialized blob, since it's only metadata about the blob. The VersionedProperty object should have it, certainly. I'm just not sure if it has any value stored inside the blob.",
                        "body": "Is this version used to compare with the 1-up in ZK to ensure they are the same? If so, I'm not sure we need to store it inside the serialized blob, since it's only metadata about the blob. The VersionedProperty object should have it, certainly. I'm just not sure if it has any value stored inside the blob.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 68,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 68,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/GzipPropEncoding.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MTAwNjEwOnYy",
                "comments": [
                    {
                        "bodyText": "small nit. I'd clean up some of these blank lines. The more the code is spread out like that, the harder it is to fit on one screen, especially when using large fonts, making it harder to read (for me, at least)",
                        "body": "small nit. I'd clean up some of these blank lines. The more the code is spread out like that, the harder it is to fit on one screen, especially when using large fonts, making it harder to read (for me, at least)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 199,
                        "originalStartLine": 194
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 199,
                "originalStartLine": 194,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/GzipPropEncoding.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MTAxMDE2OnYy",
                "comments": [
                    {
                        "bodyText": "Not sure I like the name of this interface, but the name isn't important. I think this is a good interface, and I like how the GZip implementation extends and implements it.",
                        "body": "Not sure I like the name of this interface, but the name isn't important. I think this is a good interface, and I like how the GZip implementation extends and implements it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 24,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I first had encoder. I first remember serdes used in kafka for serializer and deserializer, which is what this is doing.  I'm not sure I like either of the name choices. Open to suggestions",
                        "body": "I first had encoder. I first remember serdes used in kafka for serializer and deserializer, which is what this is doing.  I'm not sure I like either of the name choices. Open to suggestions",
                        "startLine": null,
                        "line": null,
                        "originalLine": 24,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "In general, I think a \"serialization\" interface can be presumed to have a corresponding deserialization action coupled to it (a one-way serializer isn't super useful). So, I don't find it necessary to force both words into the name. I'd probably just call it a PropSerializer (or perhaps MapSerializer). Similarly, other possible names could be based on \"converter\" or \"encoder\". Or, since you named the package \"codec\", you could just call this \"PropertyCodec\", with \"encode\" and \"decode\" method names.",
                        "body": "In general, I think a \"serialization\" interface can be presumed to have a corresponding deserialization action coupled to it (a one-way serializer isn't super useful). So, I don't find it necessary to force both words into the name. I'd probably just call it a PropSerializer (or perhaps MapSerializer). Similarly, other possible names could be based on \"converter\" or \"encoder\". Or, since you named the package \"codec\", you could just call this \"PropertyCodec\", with \"encode\" and \"decode\" method names.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 24,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 24,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/PropSerdes.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MTAxODQ0OnYy",
                "comments": [
                    {
                        "bodyText": "Should always compare enums with == and never .equals().\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                if (encodingOptions.getEncodingVersion().equals(EncodingOptions.EncodingVersion.V1_0)) {\n          \n          \n            \n                if (encodingOptions.getEncodingVersion() == EncodingOptions.EncodingVersion.V1_0) {",
                        "body": "Should always compare enums with `==` and never `.equals()`.\r\n```suggestion\r\n    if (encodingOptions.getEncodingVersion() == EncodingOptions.EncodingVersion.V1_0) {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 32,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 32,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/PropSerdesEncoderFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MTAzMDA5OnYy",
                "comments": [
                    {
                        "bodyText": "I'm not sure we need this factory at all. It's just extra layers of code to trace through and limits comprehension. We can just instantiate the GZip implementation directly. I don't anticipate making this pluggable or anything.",
                        "body": "I'm not sure we need this factory at all. It's just extra layers of code to trace through and limits comprehension. We can just instantiate the GZip implementation directly. I don't anticipate making this pluggable or anything.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 31,
                        "originalStartLine": 25
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 31,
                "originalStartLine": 25,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/PropSerdesEncoderFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MTA1NTA5OnYy",
                "comments": [
                    {
                        "bodyText": "I don't think this needs to be an interface with a separate implementation. These two can be combined and simplified to just a simple POJO container of { version, propMap }.\nI'm thinking something like:\npublic class VersionedProperties {\n  private final long version;\n  private final Map<String,String> properties;\n\n  public VersionedProperties(long version, Map<String,String> properties) {\n    this.version = version;\n    this.properties = Map.copyOf(requireNonNull(properties));\n  }\n  \n  public long getVersion() {\n    return version;\n  }\n  \n  public Map<String,String> getProperties() {\n    return properties;\n  }\n}",
                        "body": "I don't think this needs to be an interface with a separate implementation. These two can be combined and simplified to just a simple POJO container of `{ version, propMap }`.\r\n\r\nI'm thinking something like:\r\n\r\n```java\r\npublic class VersionedProperties {\r\n  private final long version;\r\n  private final Map<String,String> properties;\r\n\r\n  public VersionedProperties(long version, Map<String,String> properties) {\r\n    this.version = version;\r\n    this.properties = Map.copyOf(requireNonNull(properties));\r\n  }\r\n  \r\n  public long getVersion() {\r\n    return version;\r\n  }\r\n  \r\n  public Map<String,String> getProperties() {\r\n    return properties;\r\n  }\r\n}\r\n```\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 28,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 28,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ2ODU1MjA3OnYy",
                "comments": [
                    {
                        "bodyText": "Could make the @Experimental annotation public and use it here. It is currently only used by Property keys but I don't see why we couldn't use it elsewhere in places like here.\nAlso, I noticed this class is in the Test package. I am not sure that was intentional or not. If you put it in Test because its experimental, maybe using the annotation would make you feel better about putting it with the other codecs.",
                        "body": "Could make the `@Experimental` annotation public and use it here. It is currently only used by `Property` keys but I don't see why we couldn't use it elsewhere in places like here.\r\n\r\nAlso, I noticed this class is in the Test package. I am not sure that was intentional or not. If you put it in Test because its experimental, maybe using the annotation would make you feel better about putting it with the other codecs.",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I put in test until we discuss if it is even a desirable to provide as an option. It was really useful to drive the design because it required additional metadata - if it is acceptable and moved into the code base, there would be small changes required (like a property for codec selection) - those would be worthwhile to do, but I deferred until they would actually be used.\nThe code should also receive additional scrutiny to check that I'm not just providing an illusion of increased confidentially because of a coding or misapplication of the encryption API.\nIn test, it seemed clear enough to show intent and how additional codecs could be developed is desired.",
                        "body": "I put in test until we discuss if it is even a desirable to provide as an option. It was really useful to drive the design because it required additional metadata - if it is acceptable and moved into the code base, there would be small changes required (like a property for codec selection) - those would be worthwhile to do, but I deferred until they would actually be used.  \r\n\r\nThe code should also receive additional scrutiny to check that I'm not just providing an illusion of increased confidentially because of a coding or misapplication of the encryption API.\r\n\r\nIn test, it seemed clear enough to show intent and how additional codecs could be developed is desired.",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Would use of the @Experimental annotation alleviate your concerns about putting it in src?",
                        "body": "Would use of the `@Experimental` annotation alleviate your concerns about putting it in src?",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I can go either way.  The one sticking point for me is how to treat the secret - maybe you have some guidance from your other work with encryption?  It may be external to these changes, but in the scope of making it an option (even if experimental) I think we would need to provide something.",
                        "body": "I can go either way.  The one sticking point for me is how to treat the secret - maybe you have some guidance from your other work with encryption?  It may be external to these changes, but in the scope of making it an option (even if experimental) I think we would need to provide something.",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The AESCryptoService uses GCM similar to how you are using it but there are some details that differ. I don't know the imp super well but some differences that I noticed between yours and AESCryptoService:\n\nIt uses SecureRandom to generate the key\nIV gets stored in memory so it can be incremented\nThere is some Key wrapping/unwrapping\nKey gets loaded from a URI",
                        "body": "The `AESCryptoService` uses GCM similar to how you are using it but there are some details that differ. I don't know the imp super well but some differences that I noticed between yours and `AESCryptoService`:\r\n- It uses `SecureRandom` to generate the key\r\n- IV gets stored in memory so it can be incremented\r\n- There is some Key wrapping/unwrapping\r\n- Key gets loaded from a URI",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'd keep this in test. The experimental annotation is only useful on public API, and really then, only to generate docs. There's no value in making it more visible to expand its scope. Encrypting the properties in ZK is a neat idea, but quite a bit out of scope of the main work to improve property storage in ZK, and I think it's better if we keep this stuff in test for now.",
                        "body": "I'd keep this in test. The experimental annotation is only useful on public API, and really then, only to generate docs. There's no value in making it more visible to expand its scope. Encrypting the properties in ZK is a neat idea, but quite a bit out of scope of the main work to improve property storage in ZK, and I think it's better if we keep this stuff in test for now.",
                        "startLine": null,
                        "line": 55,
                        "originalLine": 57,
                        "originalStartLine": null
                    }
                ],
                "line": 55,
                "startLine": 55,
                "originalLine": 57,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodec.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MjA0MTg0OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * stream the reads from that array,\n          \n          \n            \n               * stream that reads from that array,",
                        "body": "```suggestion\r\n   * stream that reads from that array,\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 62,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 62,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/EncodingOptions.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MjEwNjY0OnYy",
                "comments": [
                    {
                        "bodyText": "Looks to be missing an argument. Might need to do something like the following instead\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                    throw new IllegalArgumentException(\n          \n          \n            \n                        \"Invalid data version - cannot process the version read: {}\");\n          \n          \n            \n                    throw new IllegalArgumentException(\n          \n          \n            \n                        \"Invalid data version - cannot process the version read: \" + encodingOpts);",
                        "body": "Looks to be missing an argument. Might need to do something like the following instead\r\n```suggestion\r\n        throw new IllegalArgumentException(\r\n            \"Invalid data version - cannot process the version read: \" + encodingOpts);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 121,
                        "originalStartLine": 120
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 121,
                "originalStartLine": 120,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedPropCodec.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MjEzMzE1OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * name, value pairs. 1\n          \n          \n            \n               * name, value pairs.",
                        "body": "```suggestion\r\n   * name, value pairs.\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 182,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 182,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedPropCodec.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MjI0OTc1OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n             * properties allows for comparison of properties and can be used to ensure that vales being written\n          \n          \n            \n             * to the backend store have not changed. This metadata should be written / appear early in the\n          \n          \n            \n             * encoded bytes and be uncompressed so that decisions can be made that may make deserialization\n          \n          \n            \n             * properties allows for comparison of properties and can be used to ensure that values being\n          \n          \n            \n             * written to the backend store have not changed. This metadata should be written / appear early in\n          \n          \n            \n             * the encoded bytes and be uncompressed so that decisions can be made that may make deserialization\n          \n      \n    \n    \n  \n\nThe missing 'u' in values pushed these to new lines after formatting",
                        "body": "```suggestion\r\n * properties allows for comparison of properties and can be used to ensure that values being\r\n * written to the backend store have not changed. This metadata should be written / appear early in\r\n * the encoded bytes and be uncompressed so that decisions can be made that may make deserialization\r\n```\r\nThe missing 'u' in values pushed these to new lines after formatting ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 41,
                        "originalStartLine": 39
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 41,
                "originalStartLine": 39,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MjI4OTIxOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * instances of this class are immutable, the creates a new copy of the properties. Other\n          \n          \n            \n               * instances of this class are immutable, this creates a new copy of the properties. Other",
                        "body": "```suggestion\r\n   * instances of this class are immutable, this creates a new copy of the properties. Other\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 158,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 158,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MjI5MDQzOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * Because instances of this class are immutable, the creates a new copy of the properties. Other\n          \n          \n            \n               * Because instances of this class are immutable, this creates a new copy of the properties. Other",
                        "body": "```suggestion\r\n   * Because instances of this class are immutable, this creates a new copy of the properties. Other\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 182,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 182,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MjI5MTM3OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * Because instances of this class are immutable, the creates a new copy of the properties. Other\n          \n          \n            \n               * Because instances of this class are immutable, this creates a new copy of the properties. Other",
                        "body": "```suggestion\r\n   * Because instances of this class are immutable, this creates a new copy of the properties. Other\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 204,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 204,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MjQzOTM5OnYy",
                "comments": [
                    {
                        "bodyText": "I'm wondering if update() could be renamed to something that implies that the properties are being added. \"update\" could mean other things too. Not a big deal just thought I would bring it up.",
                        "body": "I'm wondering if update() could be renamed to something that implies that the properties are being added. \"update\" could mean other things too. Not a big deal just thought I would bring it up.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 168,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Actually not so sure. \"update\" does make sense when a property is being replaced/updated but not so sure when a new prop is being added.",
                        "body": "Actually not so sure. \"update\" does make sense when a property is being replaced/updated but not so sure when a new prop is being added.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 168,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Its an add or an update.  New key, values are added, but if the key exists the value is replaced.  An alternative might be addOrUpdate, or upsert?",
                        "body": "Its an add or an update.  New key, values are added, but if the key exists the value is replaced.  An alternative might be addOrUpdate, or upsert? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 168,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "An alternative might be addOrUpdate, or upsert?\n\naddOrUpdate seems pretty intuitive to me",
                        "body": "> An alternative might be addOrUpdate, or upsert?\r\n\r\n`addOrUpdate` seems pretty intuitive to me",
                        "startLine": null,
                        "line": null,
                        "originalLine": 168,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 168,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ4MjY1NjIyOnYy",
                "comments": [
                    {
                        "bodyText": "You could just call the other addOrUpdate method here, making a map with a single k,v pair.",
                        "body": "You could just call the other addOrUpdate method here, making a map with a single k,v pair.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 171,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This avoids creating an additional hashmap - it would only be one entry and not a big deal - it may turn out that this method could be refactored out as upstream changes could do the same thing and just call addOrUpdate(map) - it will depend on how many places set just one property and if this is really a convenience or not.",
                        "body": "This avoids creating an additional hashmap - it would only be one entry and not a big deal - it may turn out that this method could be refactored out as upstream changes could do the same thing and just call addOrUpdate(map) - it will depend on how many places set just one property and if this is really a convenience or not.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 171,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 171,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ4MjY5NzI3OnYy",
                "comments": [
                    {
                        "bodyText": "Just curious - what's the advantage of ImmutableMap over Map.of() or Map.ofEntries()?",
                        "body": "Just curious - what's the advantage of ImmutableMap over Map.of() or Map.ofEntries()?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "None? But it strongly enforces the instance to be immutable. The goal was to prevent making an internal error that could change the state.  Instances are very likely to be shared by multiple threads, it was important to make sure that intermediate updates before being commuted to ZooKeeper were not visible until committed, retrieved so updates are consistent across threads.",
                        "body": "None? But it strongly enforces the instance to be immutable. The goal was to prevent making an internal error that could change the state.  Instances are very likely to be shared by multiple threads, it was important to make sure that intermediate updates before being commuted to ZooKeeper were not visible until committed, retrieved so updates are consistent across threads.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If multiple threads reference an instance of VersionedProperties, and one thread calls addOrUpdate or remove, how does the other thread see the change when these two methods return a new object?",
                        "body": "If multiple threads reference an instance of VersionedProperties, and one thread calls `addOrUpdate` or `remove`, how does the other thread see the change when these two methods return a new object?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The changes are propagated through ZooKeeper.  On a data change, the watcher will fire, which the propagates the notification to those interested - that code is in the next layer up.  This way, all processes on the \"local\" server and the tserver(s) and other processes only see \"atomic\" changes in properties - with ZooKeeper being the truth.\nOtherwise, say something in the manager was updating properties - until those changes are committed to ZooKeeper, all master processes will have the same, original values.  Once stored, those processes will get updated values on next read from the cache.",
                        "body": "The changes are propagated through ZooKeeper.  On a data change, the watcher will fire, which the propagates the notification to those interested - that code is in the next layer up.  This way, all processes on the \"local\" server and the tserver(s) and other processes only see \"atomic\" changes in properties - with ZooKeeper being the truth.\r\n\r\nOtherwise, say something in the manager was updating properties - until those changes are committed to ZooKeeper, all master processes will have the same, original values.  Once stored, those processes will get updated values on next read from the cache. \r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Can avoid the Guava type by using Java's own built-in immutable types:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              private final ImmutableMap<String,String> props;\n          \n          \n            \n              private final Map<String,String> props;",
                        "body": "Can avoid the Guava type by using Java's own built-in immutable types:\r\n\r\n```suggestion\r\n  private final Map<String,String> props;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 57,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 57,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bRC4J",
                "comments": [
                    {
                        "bodyText": "This method isn't used and can be deleted.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              private String keyGen() throws NoSuchAlgorithmException {\n          \n          \n            \n                SecretKey secretKey = KeyGenerator.getInstance(\"AES\").generateKey();\n          \n          \n            \n                return Base64.getEncoder().encodeToString(secretKey.getEncoded());\n          \n          \n            \n              }",
                        "body": "This method isn't used and can be deleted.\r\n\r\n```suggestion\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 250,
                        "originalStartLine": 246
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 250,
                "originalStartLine": 246,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRFz-",
                "comments": [
                    {
                        "bodyText": "An import for suggestions farther down in the file:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            import static java.util.Objects.requireNonNull;",
                        "body": "An import for suggestions farther down in the file:\r\n\r\n```suggestion\r\nimport static java.util.Objects.requireNonNull;\r\n\r\n```",
                        "startLine": null,
                        "line": 20,
                        "originalLine": 20,
                        "originalStartLine": null
                    }
                ],
                "line": 20,
                "startLine": 20,
                "originalLine": 20,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bRF4R",
                "comments": [
                    {
                        "bodyText": "Updating imports for suggestions further down:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            import java.util.Collections;\n          \n          \n            \n            import java.util.HashMap;\n          \n          \n            \n            import java.util.Map;\n          \n          \n            \n            import java.util.Objects;\n          \n          \n            \n            import java.util.TreeMap;\n          \n          \n            \n            \n          \n          \n            \n            import com.google.common.collect.ImmutableMap;\n          \n          \n            \n            import java.util.HashMap;\n          \n          \n            \n            import java.util.Map;\n          \n          \n            \n            import java.util.TreeMap;",
                        "body": "Updating imports for suggestions further down:\r\n\r\n```suggestion\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.TreeMap;\r\n\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 33,
                        "originalStartLine": 26
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 33,
                "originalStartLine": 26,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRF-T",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                this(NO_VERSION, Instant.now(), Collections.emptyMap());\n          \n          \n            \n                this(Map.of());",
                        "body": "```suggestion\r\n    this(Map.of());\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 63,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 63,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGC-",
                "comments": [
                    {
                        "bodyText": "Make immutable copy using built-ins, avoiding Guava:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                this.timestamp = timestamp;\n          \n          \n            \n                if (Objects.nonNull(props)) {\n          \n          \n            \n                  this.props = new ImmutableMap.Builder<String,String>().putAll(props).build();\n          \n          \n            \n                } else {\n          \n          \n            \n                  this.props = new ImmutableMap.Builder<String,String>().build();\n          \n          \n            \n                }\n          \n          \n            \n                this.timestamp = requireNonNull(timestamp);\n          \n          \n            \n                this.props = props == null ? Map.of() : Map.copyOf(props);",
                        "body": "Make immutable copy using built-ins, avoiding Guava:\r\n\r\n```suggestion\r\n    this.timestamp = requireNonNull(timestamp);\r\n    this.props = props == null ? Map.of() : Map.copyOf(props);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": 91
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 96,
                "originalStartLine": 91,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGHE",
                "comments": [
                    {
                        "bodyText": "Removing redundant indirect reference, since Instant is immutable, and the implementation just does this anyway:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                return Instant.from(timestamp);\n          \n          \n            \n                return timestamp;",
                        "body": "Removing redundant indirect reference, since Instant is immutable, and the implementation just does this anyway:\r\n```suggestion\r\n    return timestamp;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 141,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 141,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGMK",
                "comments": [
                    {
                        "bodyText": "Avoid unnecessary complexity, since the constructor will make an immutable copy anyway and this is easier to understand and maintain:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                ImmutableMap<String,String> updated =\n          \n          \n            \n                    ImmutableMap.<String,String>builder().putAll(new HashMap<>() {\n          \n          \n            \n                      {\n          \n          \n            \n                        putAll(props);\n          \n          \n            \n                        put(key, value);\n          \n          \n            \n                      }\n          \n          \n            \n                    }).build();\n          \n          \n            \n                var updated = new HashMap<>(props);\n          \n          \n            \n                updated.put(key, value);",
                        "body": "Avoid unnecessary complexity, since the constructor will make an immutable copy anyway and this is easier to understand and maintain:\r\n```suggestion\r\n    var updated = new HashMap<>(props);\r\n    updated.put(key, value);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 177,
                        "originalStartLine": 171
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 177,
                "originalStartLine": 171,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGOl",
                "comments": [
                    {
                        "bodyText": "Avoid unnecessary complexity, since the constructor will make an immutable copy anyway and this is easier to understand and maintain:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                ImmutableMap<String,String> updated =\n          \n          \n            \n                    ImmutableMap.<String,String>builder().putAll(new HashMap<>() {\n          \n          \n            \n                      {\n          \n          \n            \n                        putAll(props);\n          \n          \n            \n                        putAll(updates);\n          \n          \n            \n                      }\n          \n          \n            \n                    }).build();\n          \n          \n            \n                var updated = new HashMap<>(props);\n          \n          \n            \n                updated.putAll(updates);",
                        "body": "Avoid unnecessary complexity, since the constructor will make an immutable copy anyway and this is easier to understand and maintain:\r\n```suggestion\r\n    var updated = new HashMap<>(props);\r\n    updated.putAll(updates);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 200,
                        "originalStartLine": 194
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 200,
                "originalStartLine": 194,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGU1",
                "comments": [
                    {
                        "bodyText": "Avoid unnecessary complexity, since the constructor will make an immutable copy anyway and this is easier to understand and maintain:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                HashMap<String,String> orig = new HashMap<>(props);\n          \n          \n            \n                keys.forEach(orig::remove);\n          \n          \n            \n            \n          \n          \n            \n                ImmutableMap<String,String> updated =\n          \n          \n            \n                    ImmutableMap.<String,String>builder().putAll(orig).build();\n          \n          \n            \n                var updated = new HashMap<>(props);\n          \n          \n            \n                updated.keySet().removeAll(keys); // removing from keySet view removes from underlying mapping",
                        "body": "Avoid unnecessary complexity, since the constructor will make an immutable copy anyway and this is easier to understand and maintain:\r\n```suggestion\r\n    var updated = new HashMap<>(props);\r\n    updated.keySet().removeAll(keys); // removing from keySet view removes from underlying mapping\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 223,
                        "originalStartLine": 217
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 223,
                "originalStartLine": 217,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedProperties.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGnm",
                "comments": [
                    {
                        "bodyText": "Removing imports that aren't needed after unused method is removed:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            import java.security.NoSuchAlgorithmException;\n          \n          \n            \n            import java.time.Instant;\n          \n          \n            \n            import java.util.Base64;\n          \n          \n            \n            import java.util.HashMap;\n          \n          \n            \n            import java.util.Map;\n          \n          \n            \n            \n          \n          \n            \n            import javax.crypto.Cipher;\n          \n          \n            \n            import javax.crypto.CipherInputStream;\n          \n          \n            \n            import javax.crypto.CipherOutputStream;\n          \n          \n            \n            import javax.crypto.KeyGenerator;\n          \n          \n            \n            import javax.crypto.SecretKey;\n          \n          \n            \n            import java.time.Instant;\n          \n          \n            \n            import java.util.HashMap;\n          \n          \n            \n            import java.util.Map;\n          \n          \n            \n            \n          \n          \n            \n            import javax.crypto.Cipher;\n          \n          \n            \n            import javax.crypto.CipherInputStream;\n          \n          \n            \n            import javax.crypto.CipherOutputStream;",
                        "body": "Removing imports that aren't needed after unused method is removed:\r\n```suggestion\r\nimport java.time.Instant;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.CipherInputStream;\r\nimport javax.crypto.CipherOutputStream;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 39,
                        "originalStartLine": 29
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 39,
                "originalStartLine": 29,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGpu",
                "comments": [
                    {
                        "bodyText": "Using var to clean up redundant type specifications in local variables:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                VersionedPropEncryptCodec.GCMCipherParams cipherProps =\n          \n          \n            \n                    new VersionedPropEncryptCodec.GCMCipherParams(pass, salt);\n          \n          \n            \n            \n          \n          \n            \n                Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n          \n          \n            \n                var cipherProps = new VersionedPropEncryptCodec.GCMCipherParams(pass, salt);\n          \n          \n            \n            \n          \n          \n            \n                var cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");",
                        "body": "Using var to clean up redundant type specifications in local variables:\r\n```suggestion\r\n    var cipherProps = new VersionedPropEncryptCodec.GCMCipherParams(pass, salt);\r\n\r\n    var cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 65,
                        "originalStartLine": 62
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 65,
                "originalStartLine": 62,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGtw",
                "comments": [
                    {
                        "bodyText": "More places var could be useful:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n          \n          \n            \n            \n          \n          \n            \n                  CipherOutputStream cos = new CipherOutputStream(bos, cipher);\n          \n          \n            \n            \n          \n          \n            \n                  DataOutputStream dos = new DataOutputStream(cos);\n          \n          \n            \n                try (var bos = new ByteArrayOutputStream()) {\n          \n          \n            \n            \n          \n          \n            \n                  var cos = new CipherOutputStream(bos, cipher);\n          \n          \n            \n            \n          \n          \n            \n                  var dos = new DataOutputStream(cos);",
                        "body": "More places var could be useful:\r\n```suggestion\r\n    try (var bos = new ByteArrayOutputStream()) {\r\n\r\n      var cos = new CipherOutputStream(bos, cipher);\r\n\r\n      var dos = new DataOutputStream(cos);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 74,
                        "originalStartLine": 70
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 74,
                "originalStartLine": 70,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGu1",
                "comments": [
                    {
                        "bodyText": "Redundant flush (close on next line implies flush):\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  cos.flush();",
                        "body": "Redundant flush (close on next line implies flush):\r\n```suggestion\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 80,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 80,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bRGxS",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                try (ByteArrayInputStream bis = new ByteArrayInputStream(payload)) {\n          \n          \n            \n            \n          \n          \n            \n                  // write the property map keys, values.\n          \n          \n            \n                  try (CipherInputStream cis = new CipherInputStream(bis, cipher);\n          \n          \n            \n            \n          \n          \n            \n                      DataInputStream cdis = new DataInputStream(cis)) {\n          \n          \n            \n                try (var bis = new ByteArrayInputStream(payload)) {\n          \n          \n            \n            \n          \n          \n            \n                  // write the property map keys, values.\n          \n          \n            \n                  try (var cis = new CipherInputStream(bis, cipher);\n          \n          \n            \n                      var cdis = new DataInputStream(cis)) {",
                        "body": "```suggestion\r\n    try (var bis = new ByteArrayInputStream(payload)) {\r\n\r\n      // write the property map keys, values.\r\n      try (var cis = new CipherInputStream(bis, cipher);\r\n          var cdis = new DataInputStream(cis)) {\r\n\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": 90
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 96,
                "originalStartLine": 90,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRHR1",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                Instant now = Instant.now();\n          \n          \n            \n            \n          \n          \n            \n                Map<String,String> p = new HashMap<>();\n          \n          \n            \n                p.put(\"k1\", \"v1\");\n          \n          \n            \n            \n          \n          \n            \n                VersionedProperties vProps = new VersionedProperties(aVersion, now, p);\n          \n          \n            \n                var vProps = new VersionedProperties(aVersion, Instant.now(), Map.of(\"k1\", \"v1\"));",
                        "body": "```suggestion\r\n    var vProps = new VersionedProperties(aVersion, Instant.now(), Map.of(\"k1\", \"v1\"));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 116,
                        "originalStartLine": 111
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 116,
                "originalStartLine": 111,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRHX8",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                Instant now = Instant.now();\n          \n          \n            \n            \n          \n          \n            \n                // compression friendly\n          \n          \n            \n                Map<String,String> p = new HashMap<>();\n          \n          \n            \n                p.put(\"accumulo.prop.key_name.1\", \"value1\");\n          \n          \n            \n                p.put(\"accumulo.prop.key_name.2\", \"value2\");\n          \n          \n            \n                p.put(\"accumulo.prop.key_name.3\", \"value3\");\n          \n          \n            \n                p.put(\"accumulo.prop.key_name.4\", \"value4\");\n          \n          \n            \n                p.put(\"accumulo.prop.key_name.5\", \"value5\");\n          \n          \n            \n                p.put(\"accumulo.prop.key_name.6\", \"value9\");\n          \n          \n            \n            \n          \n          \n            \n                VersionedProperties vProps = new VersionedProperties(aVersion, now, p);\n          \n          \n            \n            \n          \n          \n            \n                // compression friendly\n          \n          \n            \n                var p = Map.of(\"accumulo.prop.key_name.1\", \"value1\", \"accumulo.prop.key_name.2\", \"value2\",\n          \n          \n            \n                    \"accumulo.prop.key_name.3\", \"value3\", \"accumulo.prop.key_name.4\", \"value4\",\n          \n          \n            \n                    \"accumulo.prop.key_name.5\", \"value5\", \"accumulo.prop.key_name.6\", \"value9\");\n          \n          \n            \n            \n          \n          \n            \n                VersionedProperties vProps = new VersionedProperties(aVersion, Instant.now(), p);",
                        "body": "```suggestion\r\n\r\n    // compression friendly\r\n    var p = Map.of(\"accumulo.prop.key_name.1\", \"value1\", \"accumulo.prop.key_name.2\", \"value2\",\r\n        \"accumulo.prop.key_name.3\", \"value3\", \"accumulo.prop.key_name.4\", \"value4\",\r\n        \"accumulo.prop.key_name.5\", \"value5\", \"accumulo.prop.key_name.6\", \"value9\");\r\n\r\n    VersionedProperties vProps = new VersionedProperties(aVersion, Instant.now(), p);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 169,
                        "originalStartLine": 158
                    },
                    {
                        "bodyText": "Map.of in this case is a little less readable in my opinion. For me, it's a bit quicker to read with each pair on its own line. Not a huge difference either way though.",
                        "body": "`Map.of` in this case is a little less readable in my opinion. For me, it's a bit quicker to read with each pair on its own line. Not a huge difference either way though.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 169,
                        "originalStartLine": 158
                    },
                    {
                        "bodyText": "I'm going to leave this for now",
                        "body": "I'm going to leave this for now",
                        "startLine": null,
                        "line": null,
                        "originalLine": 169,
                        "originalStartLine": 158
                    },
                    {
                        "bodyText": "Map.of has the nice property of being immutable, so you don't have to worry that it's modified anywhere in the test. You can format it to get one pair per line and suppress formatting by wrapping it with // @formatter:off and // @formatter:on, but it's probably not worth it. I actually prefer two columns per line, as long as both key and value fit (and they do here) because I don't actually care about the data and want to see the subsequent lines of code sooner. But, either way is fine with me. It's definitely not important.",
                        "body": "`Map.of` has the nice property of being immutable, so you don't have to worry that it's modified anywhere in the test. You can format it to get one pair per line and suppress formatting by wrapping it with `// @formatter:off` and `// @formatter:on`, but it's probably not worth it. I actually prefer two columns per line, as long as both key and value fit (and they do here) because I don't actually care about the data and want to see the subsequent lines of code sooner. But, either way is fine with me. It's definitely not important.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 169,
                        "originalStartLine": 158
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 169,
                "originalStartLine": 158,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRHee",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                Instant now = Instant.now();\n          \n          \n            \n            \n          \n          \n            \n                Map<String,String> p = new HashMap<>();\n          \n          \n            \n                p.put(\"k1\", \"v1\");\n          \n          \n            \n            \n          \n          \n            \n                VersionedProperties vProps = new VersionedProperties(aVersion, now, p);\n          \n          \n            \n                var vProps = new VersionedProperties(aVersion, Instant.now(), Map.of(\"k1\", \"v1\"));",
                        "body": "```suggestion\r\n    var vProps = new VersionedProperties(aVersion, Instant.now(), Map.of(\"k1\", \"v1\"));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 213,
                        "originalStartLine": 208
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 213,
                "originalStartLine": 208,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropEncryptCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRHqJ",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                Instant now = Instant.now();\n          \n          \n            \n            \n          \n          \n            \n                Map<String,String> p = new HashMap<>();\n          \n          \n            \n                p.put(\"k1\", \"v1\");\n          \n          \n            \n            \n          \n          \n            \n                VersionedProperties vProps = new VersionedProperties(aVersion, now, p);\n          \n          \n            \n                var vProps = new VersionedProperties(aVersion, Instant.now(), Map.of(\"k1\", \"v1\"));",
                        "body": "```suggestion\r\n    var vProps = new VersionedProperties(aVersion, Instant.now(), Map.of(\"k1\", \"v1\"));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 68,
                        "originalStartLine": 63
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 68,
                "originalStartLine": 63,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRHsl",
                "comments": [
                    {
                        "bodyText": "Could use assertThrows() to ensure the specific line throws the desired exception (can also optionally do checks on the resulting exception).",
                        "body": "Could use `assertThrows()` to ensure the specific line throws the desired exception (can also optionally do checks on the resulting exception).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 52,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 52,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bRIAj",
                "comments": [
                    {
                        "bodyText": "The experimental cipher encoding is only used in test. I think it could be moved there.",
                        "body": "The experimental cipher encoding is only used in test. I think it could be moved there.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 38,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 38,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/EncodingOptions.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bRIHL",
                "comments": [
                    {
                        "bodyText": "Could do a named static method, rather than a constructor here. It'd be an opportunity to have a more explicit name (similar to your V1_0 name above). Maybe fromStream or just decode to match the member method named encode. write() and read() also work (and would conflict less with the name of the class, which refers to encoding options for properties; a method named encode to encode the encoder options is a bit confusing).",
                        "body": "Could do a named static method, rather than a constructor here. It'd be an opportunity to have a more explicit name (similar to your `V1_0` name above). Maybe `fromStream` or just `decode` to match the member method named `encode`. `write()` and `read()` also work (and would conflict less with the name of the class, which refers to encoding options for properties; a method named `encode` to encode the encoder options is a bit confusing).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 69,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/EncodingOptions.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bRIbd",
                "comments": [
                    {
                        "bodyText": "This helper class doesn't appear to be used. Is this for later or leftover from a previous iteration?",
                        "body": "This helper class doesn't appear to be used. Is this for later or leftover from a previous iteration?",
                        "startLine": 250,
                        "line": 256,
                        "originalLine": 257,
                        "originalStartLine": 251
                    },
                    {
                        "bodyText": "It is used - its is a holdover an maybe overkill for just the two values - but I like the delegation so that it does not need to be handled in multiple places.  Will look at using a static method like previous suggestion.",
                        "body": "It is used - its is a holdover an maybe overkill for just the two values - but I like the delegation so that it does not need to be handled in multiple places.  Will look at using a static method like previous suggestion.",
                        "startLine": 250,
                        "line": 256,
                        "originalLine": 257,
                        "originalStartLine": 251
                    }
                ],
                "line": 256,
                "startLine": 250,
                "originalLine": 257,
                "originalStartLine": 251,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/codec/VersionedPropCodec.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4bRImz",
                "comments": [
                    {
                        "bodyText": "Can inline Instant.now() and use Map.of() to define these maps and inline them for easier readability (as I did in previous comments, but am too lazy to do for this class! üò∫ )",
                        "body": "Can inline `Instant.now()` and use `Map.of()` to define these maps and inline them for easier readability (as I did in previous comments, but am too lazy to do for this class! :smiley_cat: )",
                        "startLine": null,
                        "line": null,
                        "originalLine": 44,
                        "originalStartLine": 43
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 44,
                "originalStartLine": 43,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/codec/VersionedPropGzipCodecTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "EdColeman",
            "dlmarion",
            "ctubbsii",
            "milleruntime",
            "DomGarguilo"
        ],
        "tdv": 40.0,
        "description": {
            "bodyText": "This replaces PR #2194 Refactored to address PR comments\nThis the first step in moving towards a refactored ZooKeeper property storage. Intended to replace using individual nodes in ZooKeeper to save properties to a versioned group that is stored on a ZooKeeper single node. The PR contains the changes that provide serialization / deserialization of the properties along with maintaining versioning information.\nDesigned to allow evolution of the storage scheme.\nProvides a header that maintains schema version, data version, and timestamp.\nOptional compression of the byte storage array."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1424,
        "title": {
            "body": " Fix check for Standalone properties file. Fixes #1168 ",
            "bodyHTML": " Fix check for Standalone properties file. Fixes #1168 "
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDU1MzUzNDkwMg==",
                "body": "All ITs are passing now with this fix to the change",
                "bodyText": "All ITs are passing now with this fix to the change",
                "createdAt": "2019-11-13T18:20:16Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjEzMTA2Mjk1OnYy",
                "comments": [
                    {
                        "bodyText": "For future reference, there is an UncheckedIOException since Java 8 that works well for situations like this.",
                        "body": "For future reference, there is an UncheckedIOException since Java 8 that works well for situations like this.",
                        "startLine": null,
                        "line": 66,
                        "originalLine": 66,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Oh yeah... I always forget about that guy.",
                        "body": "Oh yeah... I always forget about that guy.",
                        "startLine": null,
                        "line": 66,
                        "originalLine": 66,
                        "originalStartLine": null
                    }
                ],
                "line": 66,
                "startLine": 66,
                "originalLine": 66,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/harness/conf/AccumuloClusterPropertyConfiguration.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "keith-turner",
            "ctubbsii"
        ],
        "tdv": -170.0,
        "description": {
            "bodyText": "Revert the revert for #1189 and cleanup the check to only throw error when appropriate."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1870,
        "title": {
            "body": "Improve Purge Offline Instances API",
            "bodyHTML": "Improve Purge Offline Instances API"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc43CXyz",
                "body": "This PR is ready to be merged, approved by @jiajunwang        \r\nFinal commit message:\r\n## Improve Purge Offline Instances API ##\r\nThis PR improves the API such that it will also purge any incomplete instance data, such as instance path without InstanceConfig or ParticipantHistory. ",
                "bodyText": "This PR is ready to be merged, approved by @jiajunwang\nFinal commit message:\nImprove Purge Offline Instances API\nThis PR improves the API such that it will also purge any incomplete instance data, such as instance path without InstanceConfig or ParticipantHistory.",
                "createdAt": "2021-09-20T22:07:59Z",
                "author": "NealSun96"
            }
        ],
        "total_comments_count": 11,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDUxMTY4MDAyOnYy",
                "comments": [
                    {
                        "bodyText": "Modifying the list in the loop which iterates this list, concurrent modification?",
                        "body": "Modifying the list in the loop which iterates this list, concurrent modification?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2226,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You're right, but surprisingly, I just cannot get concurrent modification exception locally. I even tried to trigger it with an explicit \"remove while iterate\" and it's still successful. However, I will change this logic to be safe.",
                        "body": "You're right, but surprisingly, I just cannot get concurrent modification exception locally. I even tried to trigger it with an explicit \"remove while iterate\" and it's still successful. However, I will change this logic to be safe. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2226,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 2226,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDUxMTY5Nzg0OnYy",
                "comments": [
                    {
                        "bodyText": "Question, what is the expected behavior if purge is called when a new node is joining the cluster? Before this change, the new joining node won't be removed. But after this change, the newly added node might lose its related znode, right?",
                        "body": "Question, what is the expected behavior if purge is called when a new node is joining the cluster? Before this change, the new joining node won't be removed. But after this change, the newly added node might lose its related znode, right?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2222,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You're correct that the newly created nodes may be impacted. This is a conundrum: the whole point of this change is to clean up leftover ZNodes caused by race conditions (messages sent to deleted ZNodes) because otherwise those leftovers can never be purged, however, fundamentally these ZNodes cannot be distinguished from the partial creation of new instances.\nThe reason why I did it this way is because the pervious implementation warns to not use this endpoint while instances are joining. The assumption is the same for this implementation, then we also don't need to worry about new instances (although it has changed from \"while no old instances are rejoining\" to \"while no instances are joining, old or new\").\nIf we really want to keep the behavior as before, we can check for two cases:\n\nExisting InstanceConfig but no History -> partial creation of new instances, don't purge;\nNon-existing InstanceConfig and no History -> race condition, purge.\nBut do you think that's necessary, given the previously mentioned assumption of using this endpoint?",
                        "body": "You're correct that the newly created nodes may be impacted. This is a conundrum: the whole point of this change is to clean up leftover ZNodes caused by race conditions (messages sent to deleted ZNodes) because otherwise those leftovers can never be purged, however, fundamentally these ZNodes cannot be distinguished from the partial creation of new instances. \r\n\r\nThe reason why I did it this way is because the pervious implementation warns to not use this endpoint while instances are joining. The assumption is the same for this implementation, then we also don't need to worry about new instances (although it has changed from \"while no old instances are rejoining\" to \"while no instances are joining, old or new\"). \r\n\r\nIf we really want to keep the behavior as before, we can check for two cases:\r\n1. Existing InstanceConfig but no History -> partial creation of new instances, don't purge;\r\n2. Non-existing InstanceConfig and no History -> race condition, purge.\r\nBut do you think that's necessary, given the previously mentioned assumption of using this endpoint? \r\n\r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2222,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I guess as long as we keep the assumption that no new node will join the cluster during purging, the logic should be fine. However, it is less ideal since there is no mechanism to enforce it. For now, I think additional checks, which introduce a lot of complexity, might not be enough to cover all the use cases. Let's just keep it simple.\nBut I would suggest adding a warning log if an instance that is being deleted might be a new node.",
                        "body": "I guess as long as we keep the assumption that no new node will join the cluster during purging, the logic should be fine. However, it is less ideal since there is no mechanism to enforce it. For now, I think additional checks, which introduce a lot of complexity, might not be enough to cover all the use cases. Let's just keep it simple.\r\nBut I would suggest adding a warning log if an instance that is being deleted might be a new node.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2222,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It didn't sit well with me so I changed the logic - now it should exclude new instances. The logic is not complex in the end.",
                        "body": "It didn't sit well with me so I changed the logic - now it should exclude new instances. The logic is not complex in the end. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2222,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 2222,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4a5FXt",
                "comments": [
                    {
                        "bodyText": "Why do we need to check liveInstancePath here? For this scenario, you already checked live instance in findTimeoutOfflineInstances, right? So this function should do pure removing.\nMoreover, with this assumption, you can just refactor the code to:\ndropInstance() {\n//check;\npurgeInstance();\n}\npurgeInstance() {\n// remove all ndoes.\n}",
                        "body": "Why do we need to check liveInstancePath here? For this scenario, you already checked live instance in findTimeoutOfflineInstances, right? So this function should do pure removing.\r\nMoreover, with this assumption, you can just refactor the code to:\r\ndropInstance() {\r\n//check;\r\npurgeInstance();\r\n}\r\npurgeInstance() {\r\n// remove all ndoes.\r\n}",
                        "startLine": null,
                        "line": null,
                        "originalLine": 291,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I adopted a similar style with the previous code, but I agree with the refactoring suggestion.",
                        "body": "I adopted a similar style with the previous code, but I agree with the refactoring suggestion. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 291,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 291,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4bFIOb",
                "comments": [
                    {
                        "bodyText": "nit, these duplicates with purgeInstance(), can we merge them?\nI know it will cause two \"String instancePath = PropertyPathBuilder.instance(clusterName, instanceName);\" in 2 methods. But IMO, it cleans up the code further.\nNo strong preference here.",
                        "body": "nit, these duplicates with purgeInstance(), can we merge them?\r\n\r\nI know it will cause two \"String instancePath = PropertyPathBuilder.instance(clusterName, instanceName);\" in 2 methods. But IMO, it cleans up the code further.\r\n\r\nNo strong preference here.",
                        "startLine": null,
                        "line": 231,
                        "originalLine": 231,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'd rather not since it's not a strict duplication: dropInstance is based on InstanceConfig, purgeInstance is based on instance name. We can make dropInstance call purgeInstance but that's a lot of twist and turns.",
                        "body": "I'd rather not since it's not a strict duplication: `dropInstance` is based on `InstanceConfig`, `purgeInstance` is based on instance name. We can make `dropInstance` call `purgeInstance` but that's a lot of twist and turns. ",
                        "startLine": null,
                        "line": 231,
                        "originalLine": 231,
                        "originalStartLine": null
                    }
                ],
                "line": 231,
                "startLine": 231,
                "originalLine": 231,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "NealSun96",
            "jiajunwang",
            "alirezazamani"
        ],
        "tdv": 8.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1869\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThe purgeOfflineInstances API is used to clean up the instance metadata in ZK that is left by offline instances. The API is only used during special use cases where a large amount of instance metadata is left uncleaned; instance metadata should usually be cleaned up manually.\nAs a cleanup API, purgeOfflineInstances has limitations: it cannot handle the case when participantHistory is missing. This is because purgeOfflineInstances uses the same underlying code as dropInstance. That means after one round of purging, race conditions could write unwanted data (such as messages) back to ZK, and they will never be cleaned up because participantHistory is no longer present.\nThis PR improves the API such that it will also purge any incomplete instance data, such as instance path without InstanceConfig or ParticipantHistory.\nTests\n\n The following tests are written for this issue:\n\nModified TestZkHelixAdmin.testPurgeOfflineInstances\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 1283, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,709.742 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1283, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n[INFO] --- jacoco-maven-plugin:0.8.6:report (generate-code-coverage-report) @ helix-core ---\n[INFO] Loading execution data file /home/nesun/helix/helix-core/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Core' with 909 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:35 h\n[INFO] Finished at: 2021-09-10T19:14:54-07:00\n[INFO] ------------------------------------------------------------------------\n\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2214,
        "title": {
            "body": "Remove continue point from Garbage Collector",
            "bodyHTML": "Remove continue point from Garbage Collector"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM403lDE",
                "body": "Thanks for taking a look @milleruntime. Looking more closely is a good idea since we definitely want the GC to work as expected. I've run the unit and IT tests as well as the sunny profile. Additionally, I ran the GC test in the accumulo-testing repo, although I'd like to run it for a longer period of time. I may wait and see if @keith-turner would like to take a look before merging since he had created the initial ticket.",
                "bodyText": "Thanks for taking a look @milleruntime. Looking more closely is a good idea since we definitely want the GC to work as expected. I've run the unit and IT tests as well as the sunny profile. Additionally, I ran the GC test in the accumulo-testing repo, although I'd like to run it for a longer period of time. I may wait and see if @keith-turner would like to take a look before merging since he had created the initial ticket.",
                "createdAt": "2021-07-26T19:58:26Z",
                "author": "jmark99"
            },
            {
                "id": "IC_kwDOACaFSM405zl0",
                "body": "@jmark99 I just took an initial look at this.  I plan to take a more in-depth look later this afternoon. ",
                "bodyText": "@jmark99 I just took an initial look at this.  I plan to take a more in-depth look later this afternoon.",
                "createdAt": "2021-07-27T14:38:09Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM4057IA",
                "body": "@mjwall might have additional insight if this overlaps with the issue that he has been tracking down. ",
                "bodyText": "@mjwall might have additional insight if this overlaps with the issue that he has been tracking down.",
                "createdAt": "2021-07-27T15:15:36Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM406rD0",
                "body": "@milleruntime , @keith-turner I did some re-factoring based upon @keith-turner suggestion concerning the getCandidates method. It now returns an iterator. With that change, the flow now more closely resembles the original flow of the code but without the continue point. ",
                "bodyText": "@milleruntime , @keith-turner I did some re-factoring based upon @keith-turner suggestion concerning the getCandidates method. It now returns an iterator. With that change, the flow now more closely resembles the original flow of the code but without the continue point.",
                "createdAt": "2021-07-27T20:01:34Z",
                "author": "jmark99"
            },
            {
                "id": "IC_kwDOACaFSM408b1L",
                "body": "I can look at this tonight if it is still open",
                "bodyText": "I can look at this tonight if it is still open",
                "createdAt": "2021-07-28T12:10:34Z",
                "author": "mjwall"
            },
            {
                "id": "IC_kwDOACaFSM409FRm",
                "body": "@mjwall I will wait until tomorrow to merge if you wish to take a look tonight.",
                "bodyText": "@mjwall I will wait until tomorrow to merge if you wish to take a look tonight.",
                "createdAt": "2021-07-28T15:59:08Z",
                "author": "jmark99"
            },
            {
                "id": "IC_kwDOACaFSM40_fOp",
                "body": "This looks good to me @jmark99 .  It is unrelated to what I am tracking in #1916.  First I have looked at Ample, cool abstraction.  Hope it is enough &lt;pun intended&gt;",
                "bodyText": "This looks good to me @jmark99 .  It is unrelated to what I am tracking in #1916.  First I have looked at Ample, cool abstraction.  Hope it is enough <pun intended>",
                "createdAt": "2021-07-29T12:01:27Z",
                "author": "mjwall"
            }
        ],
        "total_comments_count": 33,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwODY4OTg2OnYy",
                "comments": [
                    {
                        "bodyText": "Extra character in comment.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  // due to that causing a ConcurrentModificationException. T\n          \n          \n            \n                  // due to that causing a ConcurrentModificationException.",
                        "body": "Extra character in comment.\r\n```suggestion\r\n      // due to that causing a ConcurrentModificationException.\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 71,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Any idea why making the two type changes you suggested causes the fastbuild to fail with a formatting error?",
                        "body": "Any idea why making the two type changes you suggested causes the fastbuild to fail with a formatting error?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 71,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "White space maybe? I know the fastbuild checks if you built before pushing. Did you build locally after committing the suggestions? I almost always have to due to imports or formatting.",
                        "body": "White space maybe? I know the fastbuild checks if you built before pushing. Did you build locally after committing the suggestions? I almost always have to due to imports or formatting.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 71,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 71,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/test/java/org/apache/accumulo/gc/GarbageCollectionTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwODc3OTkxOnYy",
                "comments": [
                    {
                        "bodyText": "I wonder if this method should be split up. Previously we had one method to gather the candidates and then another that processed them.",
                        "body": "I wonder if this method should be split up. Previously we had one method to gather the candidates and then another that processed them.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Given that the processCandidates method is only about three lines, not counting the loop, I'm not sure it is worth it. I could re-create a method, getCandidates, that would be a one-liner returning the required Iterator and then gather the candidates and process them separately.\nIn the current code using a continue point, the getCandidates method  does get potential candidates and then returns to the collect method to do the processing. With the updated code using the iterator there is less of a separation between those two actions. Passing the iterator around between classes could become confusing as well. I had tried to do something similar to what you are suggesting but I was having issues with the iterator not keeping track of the candidates properly after being passed between multiple methods and classes.  Most likely coder error, but I eventually caved and went back to the current form that you see now.  I could try again if you feel strongly about it.",
                        "body": "Given that the processCandidates method is only about three lines, not counting the loop, I'm not sure it is worth it. I could re-create a method, getCandidates, that would be a one-liner returning the required Iterator and then gather the candidates and process them separately.\r\n\r\nIn the current code using a continue point, the getCandidates method  does get potential candidates and then returns to the collect method to do the processing. With the updated code using the iterator there is less of a separation between those two actions. Passing the iterator around between classes could become confusing as well. I had tried to do something similar to what you are suggesting but I was having issues with the iterator not keeping track of the candidates properly after being passed between multiple methods and classes.  Most likely coder error, but I eventually caved and went back to the current form that you see now.  I could try again if you feel strongly about it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "My concern is creating more complexity in code that is already overly complex. If we are going to change the interface, lets design it in a way that reduces complexity. It appears that the GC interfaces were done so users could potentially write their own but I don't think that ever happened. This then makes me think that if we want to make the GC pluggable, lets do it right (either as a part of the SPI or API). But this seems like much too daunting of a task and I don't think there is much for users to gain by writing their own. That brings me to the idea that we should at least refactor the GC to make it more readable and maintainable.\nUnfortunately, I don't have a suggestion on how that could be done for just these few methods. I would have to spend a lot more time looking at the GC.",
                        "body": "My concern is creating more complexity in code that is already overly complex. If we are going to change the interface, lets design it in a way that reduces complexity. It appears that the GC interfaces were done so users could potentially write their own but I don't think that ever happened. This then makes me think that if we want to make the GC pluggable, lets do it right (either as a part of the SPI or API). But this seems like much too daunting of a task and I don't think there is much for users to gain by writing their own. That brings me to the idea that we should at least refactor the GC to make it more readable and maintainable.\r\n\r\nUnfortunately, I don't have a suggestion on how that could be done for just these few methods. I would have to spend a lot more time looking at the GC.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 45,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 45,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionEnvironment.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwODc4NDg1OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * Given a sub-list of possible delection candidates, process and remove valid deletion\n          \n          \n            \n               * Given a sub-list of possible deletion candidates, process and remove valid deletion",
                        "body": "```suggestion\r\n   * Given a sub-list of possible deletion candidates, process and remove valid deletion\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 294,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 294,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwODgzNTg5OnYy",
                "comments": [
                    {
                        "bodyText": "The previous collect() method was confusing but it was the only public method of the GarbageCollectionAlgorithm so it was at least easier to follow from the one entry point. Since you are refactoring the methods, it might be a good opportunity to clean it up and make it easier to follow. The GC was already confusing but the way you split up the methods, is more confusing to me. It looks like you have the correct business logic between the methods but I think it could be organized better.\nIt seems the simplest solution would be to keep the same methods but just drop the continue point. Was there a reason you had to create new methods? I saw your comment in the tests about ConcurrentModificationException but I am not seeing where that could happen.",
                        "body": "The previous `collect()` method was confusing but it was the only public method of the `GarbageCollectionAlgorithm` so it was at least easier to follow from the one entry point. Since you are refactoring the methods, it might be a good opportunity to clean it up and make it easier to follow. The GC was already confusing but the way you split up the methods, is more confusing to me. It looks like you have the correct business logic between the methods but I think it could be organized better.\r\n\r\nIt seems the simplest solution would be to keep the same methods but just drop the continue point. Was there a reason you had to create new methods? I saw your comment in the tests about ConcurrentModificationException but I am not seeing where that could happen.",
                        "startLine": null,
                        "line": 318,
                        "originalLine": 309,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'll take another look, but primarily I was following @keith-turner format suggestion in the inital ticket. Since the call to Ample takes place in the classes implementing the GarbageCollectionEnvironment code, the few short lines seemed to belong in a single method. Not sure if better naming of methods would clear things up.\nRealistically the call to collect could be dropped altogether and just be replaced by a call to processCandidates (since that is all it calls anyway). I just kept it so the existing GC initial call would not be changed.  Then the GCA could have a  public method called' processCandidates' (or maybe even processDeletionCandidates). That seems clearer to me than using  'collect'. Then the the collectBatch call does what is implies. It collects a batch of potential deletion candidates and processes them. Maybe even get away from the 'collect' naming altogether and call it 'processBatch' or something similar.",
                        "body": "I'll take another look, but primarily I was following @keith-turner format suggestion in the inital ticket. Since the call to Ample takes place in the classes implementing the GarbageCollectionEnvironment code, the few short lines seemed to belong in a single method. Not sure if better naming of methods would clear things up. \r\n\r\nRealistically the call to collect could be dropped altogether and just be replaced by a call to processCandidates (since that is all it calls anyway). I just kept it so the existing GC initial call would not be changed.  Then the GCA could have a  public method called' processCandidates' (or maybe even processDeletionCandidates). That seems clearer to me than using  'collect'. Then the the collectBatch call does what is implies. It collects a batch of potential deletion candidates and processes them. Maybe even get away from the 'collect' naming altogether and call it 'processBatch' or something similar. ",
                        "startLine": null,
                        "line": 318,
                        "originalLine": 309,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I suspect the ConcurrentModificationException occurs in the test.  I would suggest refactoring the test GCE so that this does not happen rather than the GCA.  The GarbageCollectionAlgorithm was designed to pull the logic of collection into a single place where it could be unit tested.  This change pushes some logic of collection into the GarbCollEnv, resulting in a need to change logic in the test which means the full algorithm is not being tested.",
                        "body": "I suspect the ConcurrentModificationException occurs in the test.  I would suggest refactoring the test GCE so that this does not happen rather than the GCA.  The GarbageCollectionAlgorithm was designed to pull the logic of collection into a single place where it could be unit tested.  This change pushes some logic of collection into the GarbCollEnv, resulting in a need to change logic in the test which means the full algorithm is not being tested.",
                        "startLine": null,
                        "line": 318,
                        "originalLine": 309,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I suspect this is what was causing the CME in the unit test \n  \n    \n      accumulo/server/gc/src/test/java/org/apache/accumulo/gc/GarbageCollectionTest.java\n    \n    \n         Line 81\n      in\n      146b1d3\n    \n  \n  \n    \n\n        \n          \n           this.candidates.removeAll(candidateMap.values());",
                        "body": "I suspect this is what was causing the CME in the unit test https://github.com/apache/accumulo/blob/146b1d3d0dc2ade6f1888c9905d83e37d98aedbe/server/gc/src/test/java/org/apache/accumulo/gc/GarbageCollectionTest.java#L81",
                        "startLine": null,
                        "line": 318,
                        "originalLine": 309,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@keith-turner that was exactly the cause.",
                        "body": "@keith-turner that was exactly the cause. ",
                        "startLine": null,
                        "line": 318,
                        "originalLine": 309,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Still have not looked in depth, so this may not be workable.  Thinking one possible way to avoid the CME would be to make the getCandidates() method in TestGCE return a snapshot.  Something like :\n   Iterator<String> getCandidates() {\n        return List.copyOf(candidates).iterator();\n   }",
                        "body": "Still have not looked in depth, so this may not be workable.  Thinking one possible way to avoid the CME would be to make the getCandidates() method in TestGCE return a snapshot.  Something like :\r\n\r\n```java\r\n   Iterator<String> getCandidates() {\r\n        return List.copyOf(candidates).iterator();\r\n   }\r\n```",
                        "startLine": null,
                        "line": 318,
                        "originalLine": 309,
                        "originalStartLine": null
                    }
                ],
                "line": 318,
                "startLine": null,
                "originalLine": 309,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMxMTA3MTQ5OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              public void collectBatch(GarbageCollectionEnvironment gce, List<String> currentBatch)\n          \n          \n            \n              private void collectBatch(GarbageCollectionEnvironment gce, List<String> currentBatch)",
                        "body": "```suggestion\r\n  private void collectBatch(GarbageCollectionEnvironment gce, List<String> currentBatch)\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 306,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done. Thanks for catching this. It had been public in the prior form of the PR when it was being called from another class. Missed it when refactoring.",
                        "body": "Done. Thanks for catching this. It had been public in the prior form of the PR when it was being called from another class. Missed it when refactoring.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 306,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 306,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMxMTEwNjA0OnYy",
                "comments": [
                    {
                        "bodyText": "Do you know if this size caused multiple batches to be processed in the IT?  If not could make it smaller.",
                        "body": "Do you know if this size caused multiple batches to be processed in the IT?  If not could make it smaller.",
                        "startLine": null,
                        "line": 95,
                        "originalLine": 95,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@keith-turner, yes. That was the reasoning behind the modification. With the gcLotsOfCandidatesIT test it has to process a lot of batches.",
                        "body": "@keith-turner, yes. That was the reasoning behind the modification. With the gcLotsOfCandidatesIT test it has to process a lot of batches.",
                        "startLine": null,
                        "line": 95,
                        "originalLine": 95,
                        "originalStartLine": null
                    }
                ],
                "line": 95,
                "startLine": 95,
                "originalLine": 95,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/GarbageCollectorIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMxMzgyNzE1OnYy",
                "comments": [
                    {
                        "bodyText": "Could call this method deleteBatch since it doesn't do any collecting. That makes more sense to me since you already have the top level collect() method for the overall garbage collection.",
                        "body": "Could call this method `deleteBatch` since it doesn't do any collecting. That makes more sense to me since you already have the top level `collect()` method for the overall garbage collection.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 306,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I made this change.",
                        "body": "I made this change.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 306,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 306,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMyMTQ3NjE1OnYy",
                "comments": [
                    {
                        "bodyText": "This method doesn't make sense anymore. Since it's just returning an iterator and not actually doing all the fetching, tracing this operation isn't useful. The trace should be moved to wrap the retrieval of a batch.",
                        "body": "This method doesn't make sense anymore. Since it's just returning an iterator and not actually doing all the fetching, tracing this operation isn't useful. The trace should be moved to wrap the retrieval of a batch.",
                        "startLine": 270,
                        "line": 275,
                        "originalLine": 275,
                        "originalStartLine": 270
                    }
                ],
                "line": 275,
                "startLine": 270,
                "originalLine": 275,
                "originalStartLine": 270,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMyMTQ4NDAyOnYy",
                "comments": [
                    {
                        "bodyText": "This line is what the try (TraceScope candidatesSpan = Trace.startSpan(\"getCandidates\")) { should wrap.",
                        "body": "This line is what the `try (TraceScope candidatesSpan = Trace.startSpan(\"getCandidates\")) {` should wrap.",
                        "startLine": null,
                        "line": 298,
                        "originalLine": 298,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ctubbsii, I created a separate PR to address this as the issue was already closed and merged. See #2216.\nI'm hoping the IT timeout was a fluke. Not sure if it is included in the Sunny tests, but I have run them several times with no timeout.",
                        "body": "@ctubbsii, I created a separate PR to address this as the issue was already closed and merged. See #2216.\r\n\r\nI'm hoping the IT timeout was a fluke. Not sure if it is included in the Sunny tests, but I have run them several times with no timeout.",
                        "startLine": null,
                        "line": 298,
                        "originalLine": 298,
                        "originalStartLine": null
                    }
                ],
                "line": 298,
                "startLine": 298,
                "originalLine": 298,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jmark99",
            "keith-turner",
            "EdColeman",
            "mjwall",
            "ctubbsii",
            "milleruntime"
        ],
        "tdv": 101.0,
        "description": {
            "bodyText": "Updated Garbage Collection code to no longer use a continue point when processing deletion candidates. The GC  now uses an iterator that lasts during the lifetime of a GC cycle.\nThe GarbageCollectionTest was updated to work with the update, as was the GC integration test.\nCloses #1351"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2377,
        "title": {
            "body": "Remove useless null checks/assignments",
            "bodyHTML": "Remove useless null checks/assignments"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4dMX19",
                "comments": [
                    {
                        "bodyText": "Why remove this, but not the others?",
                        "body": "Why remove this, but not the others?",
                        "startLine": null,
                        "line": 80,
                        "originalLine": 80,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Because this was the only one flagged by my IDE. I fixed all the ones it flagged. I didn't look for others.",
                        "body": "Because this was the only one flagged by my IDE. I fixed all the ones it flagged. I didn't look for others.",
                        "startLine": null,
                        "line": 80,
                        "originalLine": 80,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think specifically, this removed the redundant assignment to null on line 87. If you're referring to lines 81 and 82, those assignments can't be removed, because those variables need to be initialized in subsequent lines. Line 80 did not need to be initialized because it is redundantly initialized on line 87.",
                        "body": "I think specifically, this removed the redundant assignment to null on line 87. If you're referring to lines 81 and 82, those assignments can't be removed, because those variables need to be initialized in subsequent lines. Line 80 did not need to be initialized because it is redundantly initialized on line 87.",
                        "startLine": null,
                        "line": 80,
                        "originalLine": 80,
                        "originalStartLine": null
                    }
                ],
                "line": 80,
                "startLine": 80,
                "originalLine": 80,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/TableMetadataServicer.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "dlmarion",
            "DomGarguilo"
        ],
        "tdv": -30.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "helix",
        "pr_number": 2318,
        "title": {
            "body": "Fix rebalancer failure counter in async scenario",
            "bodyHTML": "Fix rebalancer failure counter in async scenario"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5QUe4W",
                "body": "@qqu0127 This will be merged into master with feature branch, which happens now. :) ",
                "bodyText": "@qqu0127 This will be merged into master with feature branch, which happens now. :)",
                "createdAt": "2022-12-13T00:00:14Z",
                "author": "NealSun96"
            },
            {
                "id": "IC_kwDOAPIHxc5QUgna",
                "body": "If both baseline and partial rebalance fail, will we count 2 times instead\nof 1?\n\nBest Regards,\nJiajun\n\n\nOn Mon, Dec 12, 2022 at 4:00 PM Neal Sun ***@***.***> wrote:\n\n> Merged #2318 <https://github.com/apache/helix/pull/2318> into\n> nealsun/waged-pipeline-redesign.\n>\n> ‚Äî\n> Reply to this email directly, view it on GitHub\n> <https://github.com/apache/helix/pull/2318#event-8020033799>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AANYM2CD4WR435E3WGXRQMTWM64CVANCNFSM6AAAAAAS4PF4OA>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n",
                "bodyText": "If both baseline and partial rebalance fail, will we count 2 times instead\nof 1?\n\nBest Regards,\nJiajun\n‚Ä¶\nOn Mon, Dec 12, 2022 at 4:00 PM Neal Sun ***@***.***> wrote:\n Merged #2318 <#2318> into\n nealsun/waged-pipeline-redesign.\n\n ‚Äî\n Reply to this email directly, view it on GitHub\n <#2318 (comment)>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AANYM2CD4WR435E3WGXRQMTWM64CVANCNFSM6AAAAAAS4PF4OA>\n .\n You are receiving this because you are subscribed to this thread.Message\n ID: ***@***.***>",
                "createdAt": "2022-12-13T00:07:22Z",
                "author": "jiajunwang"
            },
            {
                "id": "IC_kwDOAPIHxc5QUrF2",
                "body": "@jiajunwang missed your message: yes we will count 2 times. Conceptually, given that these pipelines are separate async pipelines now, counting 2 times does make sense (rebalance failed on 2 occasions with possibly different settings). Operationally, since the metric is used to indicate errors, counting 2 times is mostly similar to counting 1 time (and definitely better than counting 0 times). ",
                "bodyText": "@jiajunwang missed your message: yes we will count 2 times. Conceptually, given that these pipelines are separate async pipelines now, counting 2 times does make sense (rebalance failed on 2 occasions with possibly different settings). Operationally, since the metric is used to indicate errors, counting 2 times is mostly similar to counting 1 time (and definitely better than counting 0 times).",
                "createdAt": "2022-12-13T01:02:26Z",
                "author": "NealSun96"
            },
            {
                "id": "IC_kwDOAPIHxc5QUtX7",
                "body": "Agreed. Not a concern.",
                "bodyText": "Agreed. Not a concern.",
                "createdAt": "2022-12-13T01:12:45Z",
                "author": "jiajunwang"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4n6btD",
                "comments": [
                    {
                        "bodyText": "For my own understanding, how was it working in the past? Did we simply skip the error and not counting?",
                        "body": "For my own understanding, how was it working in the past? Did we simply skip the error and not counting?",
                        "startLine": null,
                        "line": 463,
                        "originalLine": 463,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes, Global Rebalance failure was never accounted for in the failure metric. See #2062 .",
                        "body": "Yes, Global Rebalance failure was never accounted for in the failure metric. See #2062 . ",
                        "startLine": null,
                        "line": 463,
                        "originalLine": 463,
                        "originalStartLine": null
                    }
                ],
                "line": 463,
                "startLine": 463,
                "originalLine": 463,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/WagedRebalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "NealSun96",
            "jiajunwang",
            "qqu0127",
            "desaikomal"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #2062\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nAsync processes cannot propagate exceptions upwards, so we need to explicitly increment the failure counters during exception handling in the submission block. Since partial rebalance is turning into async, this PR fixes both the old problem (global rebalance missing rebalance failure counter) and the new problem.\nTests\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "httpcomponents-client",
        "pr_number": 287,
        "title": {
            "body": "Fix the issues causing Kerberos/SPNego to fail",
            "bodyHTML": "Fix the issues causing Kerberos/SPNego to fail"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc4MjcxMzA2MA==",
                "body": "@michael-o Just tweak the commit and force-push.",
                "bodyText": "@michael-o Just tweak the commit and force-push.",
                "createdAt": "2021-02-20T16:47:00Z",
                "author": "ok2c"
            }
        ],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1NjAxMDg1OnYy",
                "comments": [
                    {
                        "bodyText": "This name is semantically wrong! It is a service class and not a Kerberos scheme. I also don't understand why make a difference between null and #isEmpty() with a static final field.",
                        "body": "This name is semantically wrong! It is a service class and not a Kerberos scheme. I also don't understand why make a difference between `null` and `#isEmpty()` with a static final field.",
                        "startLine": null,
                        "line": 76,
                        "originalLine": 76,
                        "originalStartLine": null
                    }
                ],
                "line": 76,
                "startLine": 76,
                "originalLine": 76,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "httpclient5/src/main/java/org/apache/hc/client5/http/impl/auth/GGSSchemeBase.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "careylam",
            "ok2c",
            "michael-o"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "At the beginning of the negotiate, no token is defined in \"WWW-Authenticate: Negotiate\".\nKerberos expects HTTP."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3773,
        "title": {
            "body": "Remove unneeded chop compaction and split code",
            "bodyHTML": "Remove unneeded chop compaction and split code"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5nd-jT",
                "body": "@cshannon  is it ok if I merge this?  I would like to merge this no chop work into elasticity and would like to take these change along for the ride.  Also may open a quick follow on to remove the chop compaction from the SPI.  The changes I proposed here to avoid removing it added a lot of confusing complexity, so I resolved them.",
                "bodyText": "@cshannon  is it ok if I merge this?  I would like to merge this no chop work into elasticity and would like to take these change along for the ride.  Also may open a quick follow on to remove the chop compaction from the SPI.  The changes I proposed here to avoid removing it added a lot of confusing complexity, so I resolved them.",
                "createdAt": "2023-09-26T16:42:18Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5neAXU",
                "body": "Sure go for it, I won't have much time to make any changes until later this week so feel free to go ahead and merge it since you created follow on issues.",
                "bodyText": "Sure go for it, I won't have much time to make any changes until later this week so feel free to go ahead and merge it since you created follow on issues.",
                "createdAt": "2023-09-26T16:45:42Z",
                "author": "cshannon"
            },
            {
                "id": "IC_kwDOACaFSM5neHLK",
                "body": "I introduced a formatting build error.  Pushed edfc2e2011c7dd236fe50ac4a25822354a5e82d6 to main to fix that.",
                "bodyText": "I introduced a formatting build error.  Pushed edfc2e2 to main to fix that.",
                "createdAt": "2023-09-26T17:04:31Z",
                "author": "keith-turner"
            }
        ],
        "total_comments_count": 16,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4y49o0",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * ChoppedColumnFamily kept around for cleaning up old entries on upgrade\n          \n          \n            \n               * ChoppedColumnFamily kept around for cleaning up old entries on upgrade.  Currently not used, will be used by #3768",
                        "body": "```suggestion\r\n   * ChoppedColumnFamily kept around for cleaning up old entries on upgrade.  Currently not used, will be used by #3768\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 27,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 27,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/UpgraderConstants.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4y5B85",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                      return Set.of();\n          \n          \n            \n                      throw new IllegalArgumentException(\"Chop compactions are no longer expected\");",
                        "body": "```suggestion\r\n          throw new IllegalArgumentException(\"Chop compactions are no longer expected\");\r\n```",
                        "startLine": null,
                        "line": 313,
                        "originalLine": 313,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thinking that removing chop is a better option than this.",
                        "body": "Thinking that removing chop is a better option than this.",
                        "startLine": null,
                        "line": 313,
                        "originalLine": 313,
                        "originalStartLine": null
                    }
                ],
                "line": 313,
                "startLine": 313,
                "originalLine": 313,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/CompactableImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4y5CI1",
                "comments": [
                    {
                        "bodyText": "This was preexisting code, but the way the default case in the code works seems kinda suspect.  I will open an issue.",
                        "body": "This was preexisting code, but the way the default case in the code works seems kinda suspect.  I will open an issue.",
                        "startLine": null,
                        "line": 90,
                        "originalLine": 90,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "opened #3778",
                        "body": "opened #3778",
                        "startLine": null,
                        "line": 90,
                        "originalLine": 90,
                        "originalStartLine": null
                    }
                ],
                "line": 90,
                "startLine": 90,
                "originalLine": 90,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MajCEnv.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4y5DQa",
                "comments": [
                    {
                        "bodyText": "For completeness, should still handle this case in some way.   Experimented locally with the following changes to not use chop in the code.  Also made this default planner throw an exception if it sees chopped.\ndiff --git a/core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java b/core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java\nindex ad512da818..8fffeea6bf 100644\n--- a/core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java\n+++ b/core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java\n@@ -215,6 +215,8 @@ public class DefaultCompactionPlanner implements CompactionPlanner {\n       return params.createPlanBuilder().build();\n     }\n \n+    Preconditions.checkArgument(params.getKind() != CompactionKind.CHOP);\n+\n     Set<CompactableFile> filesCopy = new HashSet<>(params.getCandidates());\n \n     long maxSizeToCompact = getMaxSizeToCompact(params.getKind());\ndiff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java\nindex 9957eb1dee..87ace5ff4c 100644\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java\n@@ -150,6 +150,10 @@ public class CompactionManager {\n    */\n   private void submitCompaction(Compactable compactable) {\n     for (CompactionKind ctype : CompactionKind.values()) {\n+      if(ctype == CompactionKind.CHOP) {\n+        continue;\n+      }\n+\n       var csid = compactable.getConfiguredService(ctype);\n       var service = services.get(csid);\n       if (service == null) {\ndiff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java\nindex 1d1b0f0e8f..14c8bf7543 100644\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java\n@@ -268,6 +268,8 @@ public class CompactionService {\n \n   private CompactionPlan getCompactionPlan(CompactionKind kind, Compactable.Files files,\n       Compactable compactable) {\n+    Preconditions.checkArgument(kind != CompactionKind.CHOP, \"Chop compactions are no longer expected\");\n+\n     PlanningParameters params = new CpPlanParams(kind, compactable, files);\n \n     log.trace(\"Planning compactions {} {} {} {}\", planner.getClass().getName(),\nWondering if it would be better to remove the CHOP enum.  We could make this change to the SPI.",
                        "body": "For completeness, should still handle this case in some way.   Experimented locally with the following changes to not use chop in the code.  Also made this default planner throw an exception if it sees chopped.  \r\n\r\n```diff\r\ndiff --git a/core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java b/core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java\r\nindex ad512da818..8fffeea6bf 100644\r\n--- a/core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java\r\n+++ b/core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java\r\n@@ -215,6 +215,8 @@ public class DefaultCompactionPlanner implements CompactionPlanner {\r\n       return params.createPlanBuilder().build();\r\n     }\r\n \r\n+    Preconditions.checkArgument(params.getKind() != CompactionKind.CHOP);\r\n+\r\n     Set<CompactableFile> filesCopy = new HashSet<>(params.getCandidates());\r\n \r\n     long maxSizeToCompact = getMaxSizeToCompact(params.getKind());\r\ndiff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java\r\nindex 9957eb1dee..87ace5ff4c 100644\r\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java\r\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java\r\n@@ -150,6 +150,10 @@ public class CompactionManager {\r\n    */\r\n   private void submitCompaction(Compactable compactable) {\r\n     for (CompactionKind ctype : CompactionKind.values()) {\r\n+      if(ctype == CompactionKind.CHOP) {\r\n+        continue;\r\n+      }\r\n+\r\n       var csid = compactable.getConfiguredService(ctype);\r\n       var service = services.get(csid);\r\n       if (service == null) {\r\ndiff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java\r\nindex 1d1b0f0e8f..14c8bf7543 100644\r\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java\r\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java\r\n@@ -268,6 +268,8 @@ public class CompactionService {\r\n \r\n   private CompactionPlan getCompactionPlan(CompactionKind kind, Compactable.Files files,\r\n       Compactable compactable) {\r\n+    Preconditions.checkArgument(kind != CompactionKind.CHOP, \"Chop compactions are no longer expected\");\r\n+\r\n     PlanningParameters params = new CpPlanParams(kind, compactable, files);\r\n \r\n     log.trace(\"Planning compactions {} {} {} {}\", planner.getClass().getName(),\r\n```\r\n\r\nWondering if it would be better to remove the CHOP enum.  We could make this change to the SPI.",
                        "startLine": null,
                        "line": 276,
                        "originalLine": 276,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Removing chop is probably a better option than this.",
                        "body": "Removing chop is probably a better option than this.",
                        "startLine": null,
                        "line": 276,
                        "originalLine": 276,
                        "originalStartLine": null
                    }
                ],
                "line": 276,
                "startLine": 276,
                "originalLine": 276,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/DefaultCompactionPlanner.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4y5OLY",
                "comments": [
                    {
                        "bodyText": "When splitting used to be done we needed to host tablets in order to split them.   Now that splitting is no longer needed tablets need to be unhosted.  Wondering if the merge code will host a tablet and then unhost here.  Not sure how the larger code around these states works.",
                        "body": "When splitting used to be done we needed to host tablets in order to split them.   Now that splitting is no longer needed tablets need to be unhosted.  Wondering if the merge code will host a tablet and then unhost here.  Not sure how the larger code around these states works.",
                        "startLine": null,
                        "line": 650,
                        "originalLine": 650,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Opened #3780",
                        "body": "Opened #3780",
                        "startLine": null,
                        "line": 650,
                        "originalLine": 650,
                        "originalStartLine": null
                    }
                ],
                "line": 650,
                "startLine": 650,
                "originalLine": 650,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/Manager.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4y5OkF",
                "comments": [
                    {
                        "bodyText": "Wonder if this code is needlessly waiting for tablet to be hosted.",
                        "body": "Wonder if this code is needlessly waiting for tablet to be hosted.",
                        "startLine": null,
                        "line": 109,
                        "originalLine": 109,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Opened #3780",
                        "body": "Opened #3780",
                        "startLine": null,
                        "line": 109,
                        "originalLine": 109,
                        "originalStartLine": null
                    }
                ],
                "line": 109,
                "startLine": 109,
                "originalLine": 109,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/state/MergeStats.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4y5OxY",
                "comments": [
                    {
                        "bodyText": "This default case seems suspicious, will open an issue about it.",
                        "body": "This default case seems suspicious, will open an issue about it.",
                        "startLine": null,
                        "line": 107,
                        "originalLine": 107,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "opened #3778",
                        "body": "opened #3778",
                        "startLine": null,
                        "line": 107,
                        "originalLine": 107,
                        "originalStartLine": null
                    }
                ],
                "line": 107,
                "startLine": 107,
                "originalLine": 107,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/compactor/src/main/java/org/apache/accumulo/compactor/ExtCEnv.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "cshannon",
            "keith-turner"
        ],
        "tdv": -325.0,
        "description": {
            "bodyText": "This is a follow on to #3761 to clean up code that is no longer necessary. No-chop merge removes the need for chop compactions and splits are no longer necessary to be called from the manager anymore during deletions as files are instead fenced.\nThis closes #3769"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2680,
        "title": {
            "body": "Implement the cross-zone-based stoppable check",
            "bodyHTML": "Implement the cross-zone-based stoppable check"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5qXhld",
                "body": "Thanks @junkaixue @xyuanlu @zpinto for reviewing the PR. It's approved by @xyuanlu @zpinto and is ready to merge.\r\nFinal commit message: Implement the cross-zone-based stoppable check and add to_be_stopped_instances query parameter to the stoppable check API",
                "bodyText": "Thanks @junkaixue @xyuanlu @zpinto for reviewing the PR. It's approved by @xyuanlu @zpinto and is ready to merge.\nFinal commit message: Implement the cross-zone-based stoppable check and add to_be_stopped_instances query parameter to the stoppable check API",
                "createdAt": "2023-10-30T06:21:19Z",
                "author": "MarkGaox"
            }
        ],
        "total_comments_count": 24,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc40P86z",
                "comments": [
                    {
                        "bodyText": "Add java doc to explain what the to be stopped instances are.",
                        "body": "Add java doc to explain what the to be stopped instances are.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 370,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 370,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40P9wb",
                "comments": [
                    {
                        "bodyText": "This will break the backward compatibility. User can have non zone selected by let us to choose in order first one.",
                        "body": "This will break the backward compatibility. User can have non zone selected by let us to choose in order first one.",
                        "startLine": null,
                        "line": 240,
                        "originalLine": 240,
                        "originalStartLine": null
                    }
                ],
                "line": 240,
                "startLine": 240,
                "originalLine": 240,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/InstancesAccessor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40P93i",
                "comments": [
                    {
                        "bodyText": "Are we assuming this will be something passed by user? If it is already reconstructed by our code, then we don't need this check.",
                        "body": "Are we assuming this will be something passed by user? If it is already reconstructed by our code, then we don't need this check.",
                        "startLine": null,
                        "line": 248,
                        "originalLine": 248,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes. This will be provided by user. We won't construct and save the to_be_stopped_instances in our code.",
                        "body": "Yes. This will be provided by user. We won't construct and save the `to_be_stopped_instances` in our code.",
                        "startLine": null,
                        "line": 248,
                        "originalLine": 248,
                        "originalStartLine": null
                    }
                ],
                "line": 248,
                "startLine": 248,
                "originalLine": 248,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/InstancesAccessor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40P-EF",
                "comments": [
                    {
                        "bodyText": "I don't see any place to use this random",
                        "body": "I don't see any place to use this random",
                        "startLine": null,
                        "line": 180,
                        "originalLine": 155,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "At line 177, it's used to determine whether we want to do the shuffling of _orderOfZone. if random:Collections.shuffle(_orderOfZone);",
                        "body": "At line 177, it's used to determine whether we want to do the shuffling of _orderOfZone. if random:`Collections.shuffle(_orderOfZone);`",
                        "startLine": null,
                        "line": 180,
                        "originalLine": 155,
                        "originalStartLine": null
                    }
                ],
                "line": 180,
                "startLine": 180,
                "originalLine": 155,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/StoppableInstancesSelector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40SUrf",
                "comments": [
                    {
                        "bodyText": "It is backwards incompatible to change the signature of a public method.\nWe should keep a siblingNodesActiveReplicaCheck(HelixDataAccessor dataAccessor, String instanceName) and have it call siblingNodesActiveReplicaCheck(HelixDataAccessor dataAccessor, String instanceName, Set<String> toBeStoppedInstances) passing empty map for toBeStoppedInstances.",
                        "body": "It is backwards incompatible to change the signature of a public method.\r\n\r\nWe should keep a `siblingNodesActiveReplicaCheck(HelixDataAccessor dataAccessor, String instanceName)` and have it call `siblingNodesActiveReplicaCheck(HelixDataAccessor dataAccessor,\r\n      String instanceName, Set<String> toBeStoppedInstances)` passing empty map for toBeStoppedInstances.",
                        "startLine": null,
                        "line": 418,
                        "originalLine": 374,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You also need to take into consideration InstanceValidationUtil.perPartitionHealthCheck method. You should be passing toBeStopped to exclude the replicas on that instance from being checked for health and being in initState.\nThis is because the toBeStopped instance could already be undergoing operation. If that is the case, the status will likely not be in globalPartitionHealthStatus or it could be false. Also, it will be in the OFFLINE state. This case will fail the instances StoppableCheck, if we don't consider toBeStopped instances here.",
                        "body": "You also need to take into consideration `InstanceValidationUtil.perPartitionHealthCheck` method. You should be passing `toBeStopped` to exclude the replicas on that instance from being checked for health and being in initState.\r\n\r\nThis is because the toBeStopped instance could already be undergoing operation. If that is the case, the status will likely not be in `globalPartitionHealthStatus` or it could be `false`. Also, it will be in the OFFLINE state. This case will fail the instances StoppableCheck, if we don't consider `toBeStopped` instances here.",
                        "startLine": null,
                        "line": 418,
                        "originalLine": 374,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added overload two methods: siblingNodesActiveReplicaCheck(HelixDataAccessor dataAccessor, String instanceName) and perPartitionHealthCheck(List<ExternalView> externalViews, Map<String, Map<String, Boolean>> globalPartitionHealthStatus, String instanceToBeStop, HelixDataAccessor dataAccessor)",
                        "body": "Added overload two methods: `siblingNodesActiveReplicaCheck(HelixDataAccessor dataAccessor, String instanceName)` and `perPartitionHealthCheck(List<ExternalView> externalViews,\r\n      Map<String, Map<String, Boolean>> globalPartitionHealthStatus, String instanceToBeStop,\r\n      HelixDataAccessor dataAccessor)`",
                        "startLine": null,
                        "line": 418,
                        "originalLine": 374,
                        "originalStartLine": null
                    }
                ],
                "line": 418,
                "startLine": 418,
                "originalLine": 374,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40SVBK",
                "comments": [
                    {
                        "bodyText": "This shouldn't have to be changed if backwards compatibility is preserved. Refer to previous comment.",
                        "body": "This shouldn't have to be changed if backwards compatibility is preserved. Refer to previous comment.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 505,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 505,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/util/TestInstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40Sg_p",
                "comments": [
                    {
                        "bodyText": "This is not necessarily a part of the change, but I think we should re-evaluate whether the EMPTY_RESOURCE_ASSIGNMENT should keep an instance from being stoppable. There could be legitimate reason there is no resource assignment. Why should that block a deployment or other operation?",
                        "body": "This is not necessarily a part of the change, but I think we should re-evaluate whether the `EMPTY_RESOURCE_ASSIGNMENT` should keep an instance from being stoppable. There could be legitimate reason there is no resource assignment. Why should that block a deployment or other operation?",
                        "startLine": null,
                        "line": 764,
                        "originalLine": 748,
                        "originalStartLine": null
                    }
                ],
                "line": 764,
                "startLine": 764,
                "originalLine": 748,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40Sh9U",
                "comments": [
                    {
                        "bodyText": "Changing method signature of public method breaks backwards compatibility.",
                        "body": "Changing method signature of public method breaks backwards compatibility.",
                        "startLine": null,
                        "line": 353,
                        "originalLine": 348,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "+1. We could do function overload.",
                        "body": "+1. We could do function overload. ",
                        "startLine": null,
                        "line": 353,
                        "originalLine": 348,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added a new method public Map<String, StoppableCheck> batchGetInstancesStoppableChecks(String clusterId, List<String> instances, String jsonContent)",
                        "body": "Added a new method `public Map<String, StoppableCheck> batchGetInstancesStoppableChecks(String clusterId,\r\n      List<String> instances, String jsonContent)`",
                        "startLine": null,
                        "line": 353,
                        "originalLine": 348,
                        "originalStartLine": null
                    }
                ],
                "line": 353,
                "startLine": 353,
                "originalLine": 348,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40Spal",
                "comments": [
                    {
                        "bodyText": "Is there a reason to not return _stoppableInstances and not store the state in the object?\nIf you instantiate this class once and keep calling getStoppableInstances you will keep adding to _stoppableInstances but you will lose the state of toBeStoppedInstances in between calls unless the caller remembers to pass it on the next call.\nIf this is used incorrectly without thinking of this, it could lead to unexpected results.",
                        "body": "Is there a reason to not return _stoppableInstances and not store the state in the object?\r\n\r\nIf you instantiate this class once and keep calling `getStoppableInstances` you will keep adding to `_stoppableInstances` but you will lose the state of `toBeStoppedInstances` in between calls unless the caller remembers to pass it on the next call.\r\n\r\nIf this is used incorrectly without thinking of this, it could lead to unexpected results.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 122,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think that the way the selector works can be confusing to another user. My intuition would be, I use the builder to set the configuration for how the selector will select instances. Once I do this, all the attributes of the selector object are immutable.\nI should then be able to call something like, getStoppableResult which can return an object of type StoppableResult. Then my selector instance can be reused over an over again. It seems very weird to pass a reference to an empty ArrayList and then call methods which have side effects to modify that ArrayList by reference.\nJust my personal opinion, curious for input from others.",
                        "body": "I think that the way the selector works can be confusing to another user. My intuition would be, I use the builder to set the configuration for how the selector will select instances. Once I do this, all the attributes of the selector object are immutable.\r\n\r\nI should then be able to call something like, getStoppableResult which can return an object of type StoppableResult. Then my selector instance can be reused over an over again. It seems very weird to pass a reference to an empty ArrayList and then call methods which have side effects to modify that ArrayList by reference.\r\n\r\nJust my personal opinion, curious for input from others.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 122,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Removed _stoppableInstances and _failedStoppableInstances from class fields. Instead, getStoppableInstancesCrossZones and getStoppableInstancesInSingleZone will return the ObjectNode result that contains all the _stoppableInstances and _failedStoppableInstances information.",
                        "body": "Removed `_stoppableInstances` and `_failedStoppableInstances` from class fields. Instead, `getStoppableInstancesCrossZones` and `getStoppableInstancesInSingleZone` will return the `ObjectNode result` that contains all the `_stoppableInstances` and `_failedStoppableInstances` information.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 122,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 122,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/StoppableInstancesSelector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40Vvqs",
                "comments": [
                    {
                        "bodyText": "The reason why we still need to change this override is the getInstanceStoppableCheck will eventually call protected Map<String, Boolean> getInstanceHealthStatus(String clusterId, String instanceName, List<HealthCheck> healthChecks, Set<String> toBeStoppedInstances)",
                        "body": "The reason why we still need to change this override is the `getInstanceStoppableCheck` will eventually call `protected Map<String, Boolean> getInstanceHealthStatus(String clusterId, String instanceName,\r\n        List<HealthCheck> healthChecks, Set<String> toBeStoppedInstances) `",
                        "startLine": null,
                        "line": 117,
                        "originalLine": 117,
                        "originalStartLine": null
                    }
                ],
                "line": 117,
                "startLine": 117,
                "originalLine": 117,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/test/java/org/apache/helix/rest/clusterMaintenanceService/TestMaintenanceManagementService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40VyKn",
                "comments": [
                    {
                        "bodyText": "Please also mention this field need to be mutual exclusive with instanceToBeStop",
                        "body": "Please also mention this field need to be mutual exclusive with instanceToBeStop",
                        "startLine": null,
                        "line": null,
                        "originalLine": 273,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 273,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40VyfQ",
                "comments": [
                    {
                        "bodyText": "null check for toBeStoppedInstances ?",
                        "body": "null check for `toBeStoppedInstances `?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 452,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 452,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc40V6us",
                "comments": [
                    {
                        "bodyText": "nit: I would call this populateStoppableInstances or something along those lines since this method has side effect of modifying a list that is passed by reference.",
                        "body": "nit: I would call this `populateStoppableInstances` or something along those lines since this method has side effect of modifying a list that is passed by reference.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 131,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 131,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/StoppableInstancesSelector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "MarkGaox",
            "xyuanlu",
            "junkaixue",
            "zpinto"
        ],
        "tdv": 362.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n#2655\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nImplement the cross-zone-based stoppable check.\nAdd to_be_stopped_instances parameter in the API payload.\nModify the checks that will be affected by the to_be_stopped_instances. There are two checks that will be affected:\n\nsiblingNodesActiveReplicaCheck\nperPartitionHealthCheck\n\n\n\nTests\n\n The following tests are written for this issue:\n mvn test -Dtest=TestInstancesAccessor,TestMaintenanceManagementService,TestInstanceValidationUtilInRest,TestPerInstanceAccessor -pl helix-rest && mvn test -Dtest=TestInstanceValidationUtil -pl helix-core\n\n[INFO] Tests run: 45, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-rest ---\n[INFO] Loading execution data file /Users/xiaxgao/IdeaProjects/helix_ps/helix-rest/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 94 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:13 min\n[INFO] Finished at: 2023-10-27T00:53:55-07:00\n[INFO] ------------------------------------------------------------------------\n\n\n[INFO] Tests run: 24, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-core ---\n[INFO] Loading execution data file /Users/xiaxgao/IdeaProjects/helix_ps/helix-core/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Core' with 947 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  9.000 s\n[INFO] Finished at: 2023-10-24T14:11:11-07:00\n[INFO] ------------------------------------------------------------------------\n\n\n(List the names of added unit/integration tests)\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4059,
        "title": {
            "body": "Make bulk import wait for in-progress bulk imports",
            "bodyHTML": "Make bulk import wait for in-progress bulk imports"
        },
        "comments": [],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM42O_zU",
                "comments": [
                    {
                        "bodyText": "Would this benefit from a retry with a back-off, clamped to 500 or 1_000 ms?   Maybe something like [50, 100, 200, 400, 500, 500, ....] up until the rpc timeout?  This could still be responsive, but also allow some breathing room when calculating the disjoint - particularly if it is a large file set?",
                        "body": "Would this benefit from a retry with a back-off, clamped to 500 or 1_000 ms?   Maybe something like [50, 100, 200, 400, 500, 500, ....] up until the rpc timeout?  This could still be responsive, but also allow some breathing room when calculating the disjoint - particularly if it is a large file set?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1760,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That's a good point.\nGENERAL_RPC_TIMEOUT has a default value of 120s but it is reasonable to think that a user specified timeout would never be lower than a second, so increasing this wait to a second should be fine.",
                        "body": "That's a good point. \r\n`GENERAL_RPC_TIMEOUT` has a default value of `120s` but it is reasonable to think that a user specified timeout would never be lower than a second, so increasing this wait to a second should be fine.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1760,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1760,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM42RpGN",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    if (System.nanoTime() - now > rpcTimeoutNanos) {\n          \n          \n            \n                    if (lockWait > rpcTimeoutNanos) {",
                        "body": "```suggestion\r\n        if (lockWait > rpcTimeoutNanos) {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1767,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1767,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM42SEDo",
                "comments": [
                    {
                        "bodyText": "üëè for nanos",
                        "body": ":clap: for nanos",
                        "startLine": 1753,
                        "line": 1755,
                        "originalLine": 1755,
                        "originalStartLine": 1753
                    },
                    {
                        "bodyText": "This comment and the work I just did on #4067 prompted me to open #4068",
                        "body": "This comment and the work I just did on #4067 prompted me to open #4068",
                        "startLine": 1753,
                        "line": 1755,
                        "originalLine": 1755,
                        "originalStartLine": 1753
                    }
                ],
                "line": 1755,
                "startLine": 1753,
                "originalLine": 1755,
                "originalStartLine": 1753,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "ddanielr",
            "keith-turner",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": 17.0,
        "description": {
            "bodyText": "closes #4001 and adds a wait step for the bulk import to be delayed until the bulk import files are different."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2643,
        "title": {
            "body": "Separated tablet scan functions from TabletClientService into a new Thrift service",
            "bodyHTML": "Separated tablet scan functions from TabletClientService into a new Thrift service"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5B0q5h",
                "body": "IT Test run had 2 failures. SSLIT.adminStop timed out after 3 minutes and LateLastContactIT timed out. All others passed at https://github.com/dlmarion/accumulo/runs/6099910179",
                "bodyText": "IT Test run had 2 failures. SSLIT.adminStop timed out after 3 minutes and LateLastContactIT timed out. All others passed at https://github.com/dlmarion/accumulo/runs/6099910179",
                "createdAt": "2022-04-20T18:39:38Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5B04AF",
                "body": "> SSLIT.adminStop timed out after 3 minutes \r\n\r\nThe timeouts for this IT were recently adjusted (see #2631) so it might just be that the timeout needs to be increased for this test",
                "bodyText": "SSLIT.adminStop timed out after 3 minutes\n\nThe timeouts for this IT were recently adjusted (see #2631) so it might just be that the timeout needs to be increased for this test",
                "createdAt": "2022-04-20T19:32:23Z",
                "author": "DomGarguilo"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4glKOW",
                "comments": [
                    {
                        "bodyText": "Is this method identical to what is in TabletClientHandler?  If so may be good to share the code.  Maybe once class could have a static method that they both call.",
                        "body": "Is this method identical to what is in TabletClientHandler?  If so may be good to share the code.  Maybe once class could have a static method that they both call.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes, should be a copy. I can consolidate.",
                        "body": "Yes, should be a copy. I can consolidate.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in d4b1a76",
                        "body": "Addressed in d4b1a76",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 111,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ThriftScanClientHandler.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4glKYV",
                "comments": [
                    {
                        "bodyText": "Were all of these overridden methods copied exactly from TabletClientHandler?  Wondering if there any changes to look at.",
                        "body": "Were all of these overridden methods copied exactly from TabletClientHandler?  Wondering if there any changes to look at.",
                        "startLine": null,
                        "line": 127,
                        "originalLine": 185,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Should be an exact copy, there were no changes to the Thrift method signatures, just moving them. IIRC, I copied the code and pasted it into a new class.",
                        "body": "Should be an exact copy, there were no changes to the Thrift method signatures, just moving them. IIRC, I copied the code and pasted it into a new class.",
                        "startLine": null,
                        "line": 127,
                        "originalLine": 185,
                        "originalStartLine": null
                    }
                ],
                "line": 127,
                "startLine": 127,
                "originalLine": 185,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/ThriftScanClientHandler.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "DomGarguilo",
            "keith-turner"
        ],
        "tdv": 237.0,
        "description": {
            "bodyText": "related to #2640"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1550,
        "title": {
            "body": "Controller-side Task Current State Migration",
            "bodyHTML": "Controller-side Task Current State Migration"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDczMzE5MDY2MA==",
                "body": "I did initial parsing for this PR. Did not see any specific issue. Will look more soon.",
                "bodyText": "I did initial parsing for this PR. Did not see any specific issue. Will look more soon.",
                "createdAt": "2020-11-24T19:37:40Z",
                "author": "alirezazamani"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDczMzE5MzUzMA==",
                "body": "> So the participant side change will come later on. Right? Then this PR will be a new controller just listening on both paths? Basically, the integration tests are passing and they are confirming the controller is able to listen on both paths. But the actual functionality of the new path will be done later when you do participant side change?\r\n\r\nThe goal I'm trying to achieve is that this PR can be separately rolled out/back without breaking anything. Your understanding is right that there's no code that's making use of the new path, but the listener is ready to listen and respond with the new path. ",
                "bodyText": "So the participant side change will come later on. Right? Then this PR will be a new controller just listening on both paths? Basically, the integration tests are passing and they are confirming the controller is able to listen on both paths. But the actual functionality of the new path will be done later when you do participant side change?\n\nThe goal I'm trying to achieve is that this PR can be separately rolled out/back without breaking anything. Your understanding is right that there's no code that's making use of the new path, but the listener is ready to listen and respond with the new path.",
                "createdAt": "2020-11-24T19:43:26Z",
                "author": "NealSun96"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDczNjEzMjM3OA==",
                "body": "@dasahcc As requested, I have trimmed down this PR: I removed all the non-essential changes, including REST and tools (utils) changes. \r\n\r\nI kept both path building and controller logic change together. It doesn't make much sense for them to be separated. The controller change looks daunting, but it's actually just a refactor, so it's not very hard to review. Splitting it out would result too small of a PR. \r\n\r\nPlease let me know if this looks good. ",
                "bodyText": "@dasahcc As requested, I have trimmed down this PR: I removed all the non-essential changes, including REST and tools (utils) changes.\nI kept both path building and controller logic change together. It doesn't make much sense for them to be separated. The controller change looks daunting, but it's actually just a refactor, so it's not very hard to review. Splitting it out would result too small of a PR.\nPlease let me know if this looks good.",
                "createdAt": "2020-12-01T00:16:00Z",
                "author": "NealSun96"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDczODkzMjczMA==",
                "body": "Do not forget to request to merge it to the Task_CurrentState branch",
                "bodyText": "Do not forget to request to merge it to the Task_CurrentState branch",
                "createdAt": "2020-12-04T18:04:59Z",
                "author": "alirezazamani"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0MDI1NDA2Ng==",
                "body": "Yeah. I dont have major concern and already approve it. If there is no other concerns, feel free to check in.",
                "bodyText": "Yeah. I dont have major concern and already approve it. If there is no other concerns, feel free to check in.",
                "createdAt": "2020-12-07T23:56:39Z",
                "author": "junkaixue"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0MDg4OTEzMQ==",
                "body": "This PR is ready to be merged, approved by @alirezazamani @dasahcc @jiajunwang \r\nFinal commit message:\r\n## Controller-side Task Current State Migration ##\r\nFirst part of task current state migration. All changes made in this PR are on the controller side and are directly pipeline-impacting. ",
                "bodyText": "This PR is ready to be merged, approved by @alirezazamani @dasahcc @jiajunwang\nFinal commit message:\nController-side Task Current State Migration\nFirst part of task current state migration. All changes made in this PR are on the controller side and are directly pipeline-impacting.",
                "createdAt": "2020-12-08T19:19:59Z",
                "author": "NealSun96"
            }
        ],
        "total_comments_count": 63,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjc1MjU2OnYy",
                "comments": [
                    {
                        "bodyText": "Unused import?",
                        "body": "Unused import?",
                        "startLine": null,
                        "line": 47,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Removed.",
                        "body": "Removed. ",
                        "startLine": null,
                        "line": 47,
                        "originalLine": 47,
                        "originalStartLine": null
                    }
                ],
                "line": 47,
                "startLine": 47,
                "originalLine": 47,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjc3NDY3OnYy",
                "comments": [
                    {
                        "bodyText": "Why do we need to refreh here? Can TaskCurrentState get refreshed like regular current states?",
                        "body": "Why do we need to refreh here? Can TaskCurrentState get refreshed like regular current states?",
                        "startLine": null,
                        "line": 91,
                        "originalLine": 95,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It's to save performance on the regular pipeline. Other caches refresh in super.doRefresh(accessor), and TF specific caches can refresh here.",
                        "body": "It's to save performance on the regular pipeline. Other caches refresh in `super.doRefresh(accessor)`, and TF specific caches can refresh here. ",
                        "startLine": null,
                        "line": 91,
                        "originalLine": 95,
                        "originalStartLine": null
                    }
                ],
                "line": 91,
                "startLine": 91,
                "originalLine": 95,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/WorkflowControllerDataProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjc4MDMzOnYy",
                "comments": [
                    {
                        "bodyText": "Assuming we only refresh the task current state for the task pipeline then I got my answer to the above question? üëç",
                        "body": "Assuming we only refresh the task current state for the task pipeline then I got my answer to the above question? üëç ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "See above. I believe we're referring to the same thing.",
                        "body": "See above. I believe we're referring to the same thing. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 95,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjc4NjY5OnYy",
                "comments": [
                    {
                        "bodyText": "Good comment",
                        "body": "Good comment",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 93,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjM0MDAzOnYy",
                "comments": [
                    {
                        "bodyText": "Both current state and task current state are using the same CurrentState. Logically it's fine, but it is really confusing. Is this the ultimate solution? Do we have plan to rename?",
                        "body": "Both current state and task current state are using the same CurrentState. Logically it's fine, but it is really confusing. Is this the ultimate solution? Do we have plan to rename?",
                        "startLine": null,
                        "line": 490,
                        "originalLine": 490,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Down the line, task CurrentStates will have a different model. It's not within the scope of this change, though.",
                        "body": "Down the line, task CurrentStates will have a different model. It's not within the scope of this change, though. ",
                        "startLine": null,
                        "line": 490,
                        "originalLine": 490,
                        "originalStartLine": null
                    }
                ],
                "line": 490,
                "startLine": 490,
                "originalLine": 490,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/PropertyKey.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjM2MDY4OnYy",
                "comments": [
                    {
                        "bodyText": "I have a high level question about this PR. It separates current states to different paths and update them separately. How do you ensure the backward compatibility? e.g., routing table provider listens to current state path change, but now task related current state changes are removed from that path, routing table provider does have a different behavior than before, right? This may be what you want? But still this is not backward compatible.",
                        "body": "I have a high level question about this PR. It separates current states to different paths and update them separately. How do you ensure the backward compatibility? e.g., routing table provider listens to current state path change, but now task related current state changes are removed from that path, routing table provider does have a different behavior than before, right? This may be what you want? But still this is not backward compatible. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 92,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That is what we want: routing table provider should not be triggered by task current states; you could see the issue description for more details.\nThe backward compatibility needs to be ensured on the controller side, since this change should not impact the controller.",
                        "body": "That is what we want: routing table provider should not be triggered by task current states; you could see the issue description for more details.\r\n\r\nThe backward compatibility needs to be ensured on the controller side, since this change should not impact the controller. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 92,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "So a related question is that when we roll out this controller version, are we sure no client will notice the difference. I mean are we sure no client relies on current state change for any task related notification?",
                        "body": "So a related question is that when we roll out this controller version, are we sure no client will notice the difference. I mean are we sure no client relies on current state change for any task related notification?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 92,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The assumption I'm under is that no routing table provider should rely on task current states; preventing it from listening to task current states is the main goal of this change. This assumption is proposed before starting this project, so I'm inclined to believe that it's true. Conceptually, it also doesn't make sense for routing table provider to rely on task current states.",
                        "body": "The assumption I'm under is that no routing table provider should rely on task current states; preventing it from listening to task current states is the main goal of this change. This assumption is proposed before starting this project, so I'm inclined to believe that it's true. Conceptually, it also doesn't make sense for routing table provider to rely on task current states. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 92,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 92,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzg2MDYwOnYy",
                "comments": [
                    {
                        "bodyText": "This change is just a refactor: same code before and after.",
                        "body": "This change is just a refactor: same code before and after. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 182,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 182,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzkzNTY1OnYy",
                "comments": [
                    {
                        "bodyText": "Please remember to handle the instances are created but not have this path.",
                        "body": "Please remember to handle the instances are created but not have this path.",
                        "startLine": null,
                        "line": 196,
                        "originalLine": 196,
                        "originalStartLine": null
                    }
                ],
                "line": 196,
                "startLine": 196,
                "originalLine": 196,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzk0ODg1OnYy",
                "comments": [
                    {
                        "bodyText": "This \"else\" keyword is not necessary. You can have it as:\nif (xxx) {\nreturn xxx\n}\nreturn xxxx;",
                        "body": "This \"else\" keyword is not necessary. You can have it as:\r\n\r\nif (xxx) {\r\nreturn xxx\r\n}\r\nreturn xxxx;",
                        "startLine": null,
                        "line": null,
                        "originalLine": 529,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yep.",
                        "body": "Yep. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 529,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 529,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/PropertyKey.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzk1NTIxOnYy",
                "comments": [
                    {
                        "bodyText": "This is same logic as regular current state, right? We can create two different object for CurrentStateCache instead of creating a new class",
                        "body": "This is same logic as regular current state, right? We can create two different object for CurrentStateCache instead of creating a new class",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "No, the PopulateParticipantKeys function is different: it adds taskCurrentState keys.",
                        "body": "No, the `PopulateParticipantKeys` function is different: it adds `taskCurrentState` keys. ",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    }
                ],
                "line": 37,
                "startLine": 37,
                "originalLine": 37,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/common/caches/TaskCurrentStateCache.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzk4NDg2OnYy",
                "comments": [
                    {
                        "bodyText": "I would suggest we add a default implementation for this newly added API for backwards compatibility. I've noticed that a helix user ambry implements this interface. So if we don't add a default implementation, it'll break ambry build if they upgrades helix.\nAnd another benefit of default implementation is, we don't need to add an empty implementation in those classes like MockClusterManager in tests. Thus less changed files.",
                        "body": "I would suggest we add a default implementation for this newly added API for backwards compatibility. I've noticed that a helix user **ambry** implements this interface. So if we don't add a default implementation, it'll break ambry build if they upgrades helix.\r\nAnd another benefit of default implementation is, we don't need to add an empty implementation in those classes like `MockClusterManager` in tests. Thus less changed files. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 238,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thank you! Great tip!",
                        "body": "Thank you! Great tip!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 238,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 238,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODAzMDI5OnYy",
                "comments": [
                    {
                        "bodyText": "So we already split them. Is this necessary to combine them into current state output? Can we just change the later logic get current state from cache?",
                        "body": "So we already split them. Is this necessary to combine them into current state output? Can we just change the later logic get current state from cache?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It may be possible to keep them split for the 2 pipelines. Experimenting.",
                        "body": "It may be possible to keep them split for the 2 pipelines. Experimenting. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Looks like the pipelines are stuck, I'm checking again.\nI believe theoretically, it's possible to split the \"CurrentStateOutput\" for 2 pipelines. However, for this PR I would like to have minimal behavior changes. Combining the \"CurrentStateOutput\" is to maintain the task-side behavior; the task pipeline processes both regular and task framework resources, so there may be a caveat somewhere that's preventing this from working. If this isn't a big issue, I think it's wise for us to keep this behavior for now until a pipeline splitting project. What do you think? @dasahcc",
                        "body": "Looks like the pipelines are stuck, I'm checking again. \r\n\r\nI believe theoretically, it's possible to split the \"CurrentStateOutput\" for 2 pipelines. However, for this PR I would like to have minimal behavior changes. Combining the \"CurrentStateOutput\" is to maintain the task-side behavior; the task pipeline processes both regular and task framework resources, so there may be a caveat somewhere that's preventing this from working. If this isn't a big issue, I think it's wise for us to keep this behavior for now until a pipeline splitting project. What do you think? @dasahcc ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Strictly speaking, the pipelines are already split. So there won't be a separate project to split the pipeline further. Note that we have 2 pipelines already. The project we planned to do is split the code. So if you can do it in this PR, we will save some later work. Otherwise, any new code you added here using a branch might need to be re-write soon : )",
                        "body": "Strictly speaking, the pipelines are already split. So there won't be a separate project to split the pipeline further. Note that we have 2 pipelines already. The project we planned to do is split the code. So if you can do it in this PR, we will save some later work. Otherwise, any new code you added here using a branch might need to be re-write soon : )",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "When the project was first started, the agreement was that we keep all current behavior, which means merging task and non-task current states; due to possible naming conflicts, we allow regular current states to overwrite task ones. In terms of safety, this is the safest option since it doesn't modify behavior.\nI think we definitely need to split it. For the future project, I am talking about code splitting: the current way is that the 2 pipelines are using one stage, which isn't truly split. I can do it here, but I have concerns over the timeline. This PR is only the first PR, and there are the \"non-essential changes\" and \"participant-side changes\" all requiring reviews.\nI'm still looking into how this can be split, but if the intention here is \"it's a good to have\", then I'm against doing it for this PR due to time concerns and this is not a low hanging fruit apparently. It wasn't how we planned it either.",
                        "body": "When the project was first started, the agreement was that we keep all current behavior, which means merging task and non-task current states; due to possible naming conflicts, we allow regular current states to overwrite task ones. In terms of safety, this is the safest option since it doesn't modify behavior. \r\n\r\nI think we definitely need to split it. For the future project, I am talking about code splitting: the current way is that the 2 pipelines are using one stage, which isn't truly split. I can do it here, but I have concerns over the timeline. This PR is only the first PR, and there are the \"non-essential changes\" and \"participant-side changes\" all requiring reviews. \r\n\r\nI'm still looking into how this can be split, but if the intention here is \"it's a good to have\", then I'm against doing it for this PR due to time concerns and this is not a low hanging fruit apparently. It wasn't how we planned it either. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@dasahcc @jiajunwang I was very distracted by the argument itself that I lost sight to a very simple fact, my apology: splitting doesn't work here due to backward compatibility issues. If we completely split now, all task current states will fail to read for any participants with older helix versions. In another way, the splitting is already done in the sense that regular pipelines are not reading task current states anymore, which is an improvement done by this PR. :)\nThis PR itself doesn't introduce participant-side changes, so all task current states are still in the old path. Therefore complete split causes test problems. What I observed as \"pipelines stuck\" are overflowing logs caused by message handling, preventing me from seeing test outputs. In short, initialization messages are continuously generated due to missing current states from CurrentStateOutput, and that causes a log flood. If you're interested to find out more details, feel free to let me know.",
                        "body": "@dasahcc @jiajunwang I was very distracted by the argument itself that I lost sight to a very simple fact, my apology: splitting doesn't work here due to backward compatibility issues. If we completely split now, all task current states will fail to read for any participants with older helix versions. In another way, the splitting is already done in the sense that regular pipelines are not reading task current states anymore, which is an improvement done by this PR. :) \r\n\r\nThis PR itself doesn't introduce participant-side changes, so all task current states are still in the old path. Therefore complete split causes test problems. What I observed as \"pipelines stuck\" are overflowing logs caused by message handling, preventing me from seeing test outputs. In short, initialization messages are continuously generated due to missing current states from CurrentStateOutput, and that causes a log flood. If you're interested to find out more details, feel free to let me know. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 95,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODA1NDcxOnYy",
                "comments": [
                    {
                        "bodyText": "This changes the behavior, right? Can you elaborate what kind of scenario you will see this?",
                        "body": "This changes the behavior, right? Can you elaborate what kind of scenario you will see this?",
                        "startLine": 543,
                        "line": 547,
                        "originalLine": 547,
                        "originalStartLine": 543
                    },
                    {
                        "bodyText": "This change was because you reminded me about the instances without the task path. :)\nFor instance without TASKCURRENTSTATES path, the callback handler is still created, however, during reset(), subscribeChildChange() will be invoked and they will reach the above path. Since the path doesn't exist, this line causes a NoNodeException that's only caught on the outside by reset(). This causes some log pollution.\nI synced with @pkuwm and we determined that this is unexpected and should be fixed.",
                        "body": "This change was because you reminded me about the instances without the task path. :) \r\n\r\nFor instance without TASKCURRENTSTATES path, the callback handler is still created, however, during reset(), subscribeChildChange() will be invoked and they will reach the above path. Since the path doesn't exist, this line causes a NoNodeException that's only caught on the outside by reset(). This causes some log pollution. \r\n\r\nI synced with @pkuwm and we determined that this is unexpected and should be fixed. ",
                        "startLine": 543,
                        "line": 547,
                        "originalLine": 547,
                        "originalStartLine": 543
                    },
                    {
                        "bodyText": "My concern is if original behavior of other types will be changed as well. The exception we will see can be changed from NoNodeException to NullPointerException if you just return null for it.",
                        "body": "My concern is if original behavior of other types will be changed as well. The exception we will see can be changed from NoNodeException to NullPointerException if you just return null for it.",
                        "startLine": 543,
                        "line": 547,
                        "originalLine": 547,
                        "originalStartLine": 543
                    },
                    {
                        "bodyText": "All callers of this function (2 occasions) handle null cases. I believe this is the best solution when path doesn't exist, unless there's a better idea.",
                        "body": "All callers of this function (2 occasions) handle null cases. I believe this is the best solution when `path` doesn't exist, unless there's a better idea. ",
                        "startLine": 543,
                        "line": 547,
                        "originalLine": 547,
                        "originalStartLine": 543
                    }
                ],
                "line": 547,
                "startLine": 543,
                "originalLine": 547,
                "originalStartLine": 543,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTc3MjA0OnYy",
                "comments": [
                    {
                        "bodyText": "nit, but might be important, can we just call it TASK_STATE for simplicity?",
                        "body": "nit, but might be important, can we just call it TASK_STATE for simplicity?",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It's still CurrentState for now, so I prefer calling it TASK_CURRENT_STATE. It corresponds to the underlying model.",
                        "body": "It's still CurrentState for now, so I prefer calling it TASK_CURRENT_STATE. It corresponds to the underlying model. ",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think it is just a name so it won't impact any logic.\nBut task current state sounds redundent. Task state is good enough.",
                        "body": "I think it is just a name so it won't impact any logic.\r\nBut task current state sounds redundent. Task state is good enough.",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The name should reflect what it represents, and it represents a current state.\nAre you also suggesting that the zk path needs to be named as TASKSTATES? Personally, this name \"TaskCurrentState\" has been used everywhere from design doc to all variables in this PR. I don't see a big problem with it, so I don't think it's worth the effort to change all of them. The effort is not large but the return is even smaller.",
                        "body": "The name should reflect what it represents, and it represents a current state. \r\n\r\nAre you also suggesting that the zk path needs to be named as `TASKSTATES`? Personally, this name \"TaskCurrentState\" has been used everywhere from design doc to all variables in this PR. I don't see a big problem with it, so I don't think it's worth the effort to change all of them. The effort is not large but the return is even smaller. ",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Reduce the length of code is big deal to me. If this is not a big effort, I suggest we do it.\nBut this is my own opinion. I guess more ideas here will help. @dasahcc which name do you prefer?",
                        "body": "Reduce the length of code is big deal to me. If this is not a big effort, I suggest we do it.\r\nBut this is my own opinion. I guess more ideas here will help. @dasahcc which name do you prefer?",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TASK_CURRENT_STATE is a completely fine name in all regard, in my opinion. It has to be at least a wrong name to warranty changes on all variables that expand for 3 PRs, that's my take. I'll also defer to @dasahcc .",
                        "body": "TASK_CURRENT_STATE is a completely fine name in all regard, in my opinion. It has to be at least a wrong name to warranty changes on all variables that expand for 3 PRs, that's my take. I'll also defer to @dasahcc .",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Personally, TASK_CURRENT_STATE sounds better in this case. That equivalents CURRENT_STATE we have right now. Also if we use TASK_STATE, that could be confused with the TaskState enum class. Actually that is pointing to the concept of Job level state. Although I know this is something not correct, unless we change everything, we need to keep our naming concept consistent.",
                        "body": "Personally, TASK_CURRENT_STATE sounds better in this case. That equivalents CURRENT_STATE we have right now. Also if we use TASK_STATE, that could be confused with the TaskState enum class. Actually that is pointing to the concept of Job level state. Although I know this is something not correct, unless we change everything, we need to keep our naming concept consistent.",
                        "startLine": null,
                        "line": 37,
                        "originalLine": 37,
                        "originalStartLine": null
                    }
                ],
                "line": 37,
                "startLine": 37,
                "originalLine": 37,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/HelixConstants.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTc3NzA5OnYy",
                "comments": [
                    {
                        "bodyText": "Shall we call it jobName instead of resourceName?",
                        "body": "Shall we call it jobName instead of resourceName?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 509,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sure",
                        "body": "Sure",
                        "startLine": null,
                        "line": null,
                        "originalLine": 509,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 509,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/PropertyKey.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTgwMzI5OnYy",
                "comments": [
                    {
                        "bodyText": "Seems you did not update the propertyRefreshed flag for _taskCurrentStateCache, so the refreshClusterStateChangeFlags() won't work as expected.",
                        "body": "Seems you did not update the propertyRefreshed flag for _taskCurrentStateCache, so the refreshClusterStateChangeFlags() won't work as expected.",
                        "startLine": null,
                        "line": 90,
                        "originalLine": 94,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Resolved offline.",
                        "body": "Resolved offline. ",
                        "startLine": null,
                        "line": 90,
                        "originalLine": 94,
                        "originalStartLine": null
                    }
                ],
                "line": 90,
                "startLine": 90,
                "originalLine": 94,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/WorkflowControllerDataProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTgxODAyOnYy",
                "comments": [
                    {
                        "bodyText": "Since processCurrentStates already takes isTaskCache, can we put these complex into the processCurrentStates() method?",
                        "body": "Since processCurrentStates already takes isTaskCache, can we put these complex into the processCurrentStates() method?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 89,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Since processing task current states and processing regular current states share the same logic, at one point along the code, the same logic will be factored out. It either happens in process() (processCurrentStates() is the \"same logic\"), or it happens in processCurrentStates() (requires another new function). I think it can happen in process().",
                        "body": "Since processing task current states and processing regular current states share the same logic, at one point along the code, the same logic will be factored out. It either happens in `process()` (processCurrentStates() is the \"same logic\"), or it happens in `processCurrentStates()` (requires another new function). I think it can happen in `process()`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 89,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "In this case, I will suggest extracting another private method to make process() code cleaner.",
                        "body": "In this case, I will suggest extracting another private method to make process() code cleaner.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 89,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done.",
                        "body": "Done. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 89,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 89,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTcwMTU5OnYy",
                "comments": [
                    {
                        "bodyText": "Let's make the consistent format",
                        "body": "Let's make the consistent format",
                        "startLine": null,
                        "line": null,
                        "originalLine": 88,
                        "originalStartLine": 85
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 88,
                "originalStartLine": 85,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/WorkflowControllerDataProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTgwNzE4OnYy",
                "comments": [
                    {
                        "bodyText": "This is for backward compatibility, right?\nCan we create another private method to get the full task current state smartly? So you don't need 2 processCurrentStateMap calls here.",
                        "body": "This is for backward compatibility, right?\r\nCan we create another private method to get the full task current state smartly? So you don't need 2 processCurrentStateMap calls here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 192,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "We always need to process current states from both paths. In the resource pipeline, we need the regular current states; in the task pipeline, we need task current states + regular for backward compatibility.\nCould you elaborate on the \"getting smartly\" part? Do you mean: combine the current state maps so there's only one call? That would incur additional memory and computation cost.",
                        "body": "We always need to process current states from both paths. In the resource pipeline, we need the regular current states; in the task pipeline, we need task current states + regular for backward compatibility. \r\nCould you elaborate on the \"getting smartly\" part? Do you mean: combine the current state maps so there's only one call? That would incur additional memory and computation cost. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 192,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This logic should be in the cache, actually.\ngetCurrentState(boolean isTaskPipeline) {\ncurrentstates = cache.getCurrentState(...)\nif (isTaskPipeline) {\nfilter currentStates for the tasks only\ncurrentstates.addAll(cache.getTaskCurrentState(...))\n} else {\nfilter currentStates for the resources only\n}\nreturn currentStates\n}",
                        "body": "This logic should be in the cache, actually.\r\n\r\ngetCurrentState(boolean isTaskPipeline) {\r\n  currentstates = cache.getCurrentState(...)\r\n  if (isTaskPipeline) {\r\n    filter currentStates for the tasks only\r\n    currentstates.addAll(cache.getTaskCurrentState(...))\r\n  } else {\r\n    filter currentStates for the resources only\r\n  }\r\n  return currentStates\r\n} ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 192,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Right now, it can't be a part of BaseControllerDataProvider if that's what you're referring to. TaskCurrentStateCache exists in WorkflowControllerDataProvider only, and it's for a performance reason since it only needs to be refreshed there, not in the regular pipeline. Without first determining isTaskPipeline, we can't parse the base data provider to the workflow data provider.\nOf course, we can change how that works. I'll experiment.",
                        "body": "Right now, it can't be a part of `BaseControllerDataProvider` if that's what you're referring to. `TaskCurrentStateCache` exists in `WorkflowControllerDataProvider` only, and it's for a performance reason since it only needs to be refreshed there, not in the regular pipeline. Without first determining `isTaskPipeline`, we can't parse the base data provider to the workflow data provider.\r\n\r\nOf course, we can change how that works. I'll experiment. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 192,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 192,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "NealSun96",
            "alirezazamani",
            "junkaixue",
            "jiajunwang",
            "huizhilu",
            "zhangmeng916"
        ],
        "tdv": 57.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1549 (Partially)\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nTo address excessive ZooKeeper reads caused by task framework CurrentState updates, it is proposed to move task framework CurrentStates to their separate path.\nThe change is divided to multiple phases. This is the first phase, where the main focus of the changes are on the controller side. These changes should be backward compatible, and should not break anything even without further changes on participant sides\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 1250, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,108.977 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1250, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:25 h\n[INFO] Finished at: 2020-12-01T12:14:17-08:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1934,
        "title": {
            "body": "Stop recovery if tablet is being deleted",
            "bodyHTML": "Stop recovery if tablet is being deleted"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0NTI1Njg2OnYy",
                "comments": [
                    {
                        "bodyText": "It's not clear without reading a bunch of code what thy this block is being skipped under these circumstances. A comment would help. Is this change just to avoid attempting WAL recovery on a table being deleted, if such a tablet is being loaded?",
                        "body": "It's not clear without reading a bunch of code what thy this block is being skipped under these circumstances. A comment would help. Is this change just to avoid attempting WAL recovery on a table being deleted, if such a tablet is being loaded?",
                        "startLine": null,
                        "line": 344,
                        "originalLine": 343,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I can add a comment.\n\nIs this change just to avoid attempting WAL recovery on a table being deleted, if such a tablet is being loaded?\n\nExactly. This is one optimization of least resistance for deletes during a tablet load. I really didn't want to try and short circuit the Tablet loading and risk breaking something.",
                        "body": "I can add a comment. \r\n\r\n> Is this change just to avoid attempting WAL recovery on a table being deleted, if such a tablet is being loaded?\r\n\r\nExactly. This is one optimization of least resistance for deletes during a tablet load. I really didn't want to try and short circuit the Tablet loading and risk breaking something.",
                        "startLine": null,
                        "line": 344,
                        "originalLine": 343,
                        "originalStartLine": null
                    }
                ],
                "line": 344,
                "startLine": 344,
                "originalLine": 343,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/Tablet.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2876,
        "title": {
            "body": "Fix AccumuloConfiguration.get(String) to get Property by key",
            "bodyHTML": "Fix AccumuloConfiguration.get(String) to get Property by key"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4kAAP6",
                "comments": [
                    {
                        "bodyText": "Style-wise, you could probably just remove the \"else\" line and corresponding curlies, and move the contents of that block up one level of indentation.",
                        "body": "Style-wise, you could probably just remove the \"else\" line and corresponding curlies, and move the contents of that block up one level of indentation.",
                        "startLine": null,
                        "line": 86,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah, but I think at first glance it's easier to read this way.",
                        "body": "Yeah, but I think at first glance it's easier to read this way.",
                        "startLine": null,
                        "line": 86,
                        "originalLine": 86,
                        "originalStartLine": null
                    }
                ],
                "line": 86,
                "startLine": 86,
                "originalLine": 86,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/AccumuloConfiguration.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Prior commit attempted to create a Property by enum value using the key.\nFixed this to call Property.getPropertyByKey instead."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4007,
        "title": {
            "body": "Add Volume replacement test for logs",
            "bodyHTML": "Add Volume replacement test for logs"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM41x7jd",
                "comments": [
                    {
                        "bodyText": "You may want to add the visible for testing to document the reason this is public.",
                        "body": "You may want to add the visible for testing to document the reason this is public.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 92,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I made the method protected instead.",
                        "body": "I made the method protected instead.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 92,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 92,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "EdColeman"
        ],
        "tdv": 8.0,
        "description": {
            "bodyText": "VolumeUtil.switchVolumes is used to perform\nvolume replacement on LogEntry objects. However,\nthere was no test for it.\nRelated to #4004"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2153,
        "title": {
            "body": "Add AclRegister interfaces and ClusterAccessor integration",
            "bodyHTML": "Add AclRegister interfaces and ClusterAccessor integration"
        },
        "comments": [],
        "total_comments_count": 11,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4iQONN",
                "comments": [
                    {
                        "bodyText": "If we perform this before the cluster creation, then if ACL fails the cluster isn't created either. I'm not sure which one is the better option though, a cluster without ACL or an ACL without a cluster.",
                        "body": "If we perform this before the cluster creation, then if ACL fails the cluster isn't created either. I'm not sure which one is the better option though, a cluster without ACL or an ACL without a cluster.",
                        "startLine": null,
                        "line": 193,
                        "originalLine": 193,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Synced offline: we will allow only allow a cluster to be created if the ACL exists, so we are changing the order.\nWhen creating ACL, we will keep it idempotent, but only for the correct user.",
                        "body": "Synced offline: we will allow only allow a cluster to be created if the ACL exists, so we are changing the order. \r\n\r\nWhen creating ACL, we will keep it idempotent, but only for the correct user. ",
                        "startLine": null,
                        "line": 193,
                        "originalLine": 193,
                        "originalStartLine": null
                    }
                ],
                "line": 193,
                "startLine": null,
                "originalLine": 193,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iSn-P",
                "comments": [
                    {
                        "bodyText": "nit: do you need to add the standard Apache banner?",
                        "body": "nit: do you need to add the standard Apache banner?",
                        "startLine": null,
                        "line": 1,
                        "originalLine": 1,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for catching it, my intellij seems to be misconfigured.",
                        "body": "Thanks for catching it, my intellij seems to be misconfigured. ",
                        "startLine": null,
                        "line": 1,
                        "originalLine": 1,
                        "originalStartLine": null
                    }
                ],
                "line": 1,
                "startLine": 1,
                "originalLine": 1,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/acl/AclRegister.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iSoBW",
                "comments": [
                    {
                        "bodyText": "nit: Please add some comments about purpose of this interface.",
                        "body": "nit: Please add some comments about purpose of this interface.",
                        "startLine": null,
                        "line": 25,
                        "originalLine": 6,
                        "originalStartLine": null
                    }
                ],
                "line": 25,
                "startLine": 25,
                "originalLine": 6,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/acl/AclRegister.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iSosg",
                "comments": [
                    {
                        "bodyText": "do we need any additional methods to ever update Acl or ACL policy? also how about ACL validations?",
                        "body": "do we need any additional methods to ever update Acl or ACL policy? also how about ACL validations?",
                        "startLine": null,
                        "line": 27,
                        "originalLine": 7,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Those functionalities can be supported by other interfaces. For this PR, I'm adding the minimal required functionality which is to register an ACL entry.",
                        "body": "Those functionalities can be supported by other interfaces. For this PR, I'm adding the minimal required functionality which is to register an ACL entry. ",
                        "startLine": null,
                        "line": 27,
                        "originalLine": 7,
                        "originalStartLine": null
                    }
                ],
                "line": 27,
                "startLine": 27,
                "originalLine": 7,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/acl/AclRegister.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4iSpNh",
                "comments": [
                    {
                        "bodyText": "how about proper successful test case?",
                        "body": "how about proper successful test case?",
                        "startLine": null,
                        "line": 93,
                        "originalLine": 93,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The first test case covered that.",
                        "body": "The first test case covered that. ",
                        "startLine": null,
                        "line": 93,
                        "originalLine": 93,
                        "originalStartLine": null
                    }
                ],
                "line": 93,
                "startLine": 93,
                "originalLine": 93,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestAclRegister.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "NealSun96",
            "rabashizade",
            "desaikomal"
        ],
        "tdv": 25.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #2152\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR introduces the AclRegister interface, an interface that can be implemented with developers' choices of mechanisms on how ACL is created and registered. The implementation is then registered to the rest server, and it's called when clusters are created.\nTests\n\n The following tests are written for this issue:\n\nTestAclRegister\n\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\nRerun failed test in CI:\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 62.693 s - in org.apache.helix.integration.task.TestMaxNumberOfAttemptsMasterSwitch\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3476,
        "title": {
            "body": "Improve javadocs for the TabletFile interface",
            "bodyHTML": "Improve javadocs for the TabletFile interface"
        },
        "comments": [],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4uql3k",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * depending on the specific implementation.\n          \n          \n            \n               * depending on the specific implementation.  For example, a path in hdfs would be returned as `hdfs://nn1/accumulo/tables/5a/t-0001/F0002.rf`",
                        "body": "```suggestion\r\n   * depending on the specific implementation.  For example, a path in hdfs would be returned as `hdfs://nn1/accumulo/tables/5a/t-0001/F0002.rf`\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 40,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFile.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4uqubj",
                "comments": [
                    {
                        "bodyText": "Based on this description, it almost seems like we don't need this method, because it's just the substring of getPath() since the last index of /, which could be done in the calling code. And, with one method, it becomes a functional interface, too, so callers could easily map a stream to the last path element when they need to. In any case, the minimal change is just to fix the javadoc formatting:\nMissing <p> for separate paragraph, but in this case, I don't think it needs it. Can just use one paragraph.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n               * Returns the fileName of the TabletFile. The value return is the name itself and not the entire\n          \n          \n            \n               * path.\n          \n          \n            \n               *\n          \n          \n            \n               * For example, if the full path for a TabletFile is\n          \n          \n            \n               * 'hdfs://nn1/accumulo/tables/5a/t-0001/F0002.rf', this method returns 'F0002.rf'.\n          \n          \n            \n               * Returns the fileName of the TabletFile. The value return is the name itself and not the entire\n          \n          \n            \n               * path. For example, if the full path for a TabletFile is\n          \n          \n            \n               * 'hdfs://nn1/accumulo/tables/5a/t-0001/F0002.rf', this method returns 'F0002.rf'.",
                        "body": "Based on this description, it almost seems like we don't need this method, because it's just the substring of `getPath()` since the last index of `/`, which could be done in the calling code. And, with one method, it becomes a functional interface, too, so callers could easily map a stream to the last path element when they need to. In any case, the minimal change is just to fix the javadoc formatting:\r\n\r\nMissing `<p>` for separate paragraph, but in this case, I don't think it needs it. Can just use one paragraph.\r\n\r\n```suggestion\r\n   * Returns the fileName of the TabletFile. The value return is the name itself and not the entire\r\n   * path. For example, if the full path for a TabletFile is\r\n   * 'hdfs://nn1/accumulo/tables/5a/t-0001/F0002.rf', this method returns 'F0002.rf'.\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": 30
                    },
                    {
                        "bodyText": "You are actually right, there's probably not a reason to have getFileName(). The caller can just use tabletFile.getPath().getName().\nIf I drop that method should I open a new PR or just do it here?",
                        "body": "You are actually right, there's probably not a reason to have getFileName(). The caller can just use tabletFile.getPath().getName().\r\n\r\nIf I drop that method should I open a new PR or just do it here?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": 30
                    },
                    {
                        "bodyText": "I would just fix the javadoc here. If you decide we don't need the other method, it can be done in a separate PR, after some experimentation with it to see what that would look like. I'm not sure if there might be undesirable consequences with that change or not.",
                        "body": "I would just fix the javadoc here. If you decide we don't need the other method, it can be done in a separate PR, after some experimentation with it to see what that would look like. I'm not sure if there might be undesirable consequences with that change or not.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": 30
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 34,
                "originalStartLine": 30,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFile.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4uq3UN",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * `hdfs://nn1/accumulo/tables/5a/t-0001/F0002.rf`\n          \n          \n            \n               * 'hdfs://nn1/accumulo/tables/5a/t-0001/F0002.rf'",
                        "body": "```suggestion\r\n   * 'hdfs://nn1/accumulo/tables/5a/t-0001/F0002.rf'\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 41,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 41,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFile.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "cshannon",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": null,
        "description": {
            "bodyText": "This improves the javadocs a bit for the new TableFile tInterface. I'm not the best at wording/descriptions so if anyone else has any ideas for improving the wording feel free to suggest changes."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1611,
        "title": {
            "body": "Eliminate redundant job context writes",
            "bodyHTML": "Eliminate redundant job context writes"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc1OTY3NzA2Ng==",
                "body": "This PR is ready to be merged.\r\n\r\nFinal commit message:\r\n\r\nEliminate redundant job context writes\r\n\r\nIn this commit, the job context will only be written to ZK if \r\nit has been modified. Otherwise, there is no need to update \r\nthe context information in the ZK.",
                "bodyText": "This PR is ready to be merged.\nFinal commit message:\nEliminate redundant job context writes\nIn this commit, the job context will only be written to ZK if\nit has been modified. Otherwise, there is no need to update\nthe context information in the ZK.",
                "createdAt": "2021-01-13T19:32:35Z",
                "author": "alirezazamani"
            }
        ],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDk4MDExOnYy",
                "comments": [
                    {
                        "bodyText": "Is there a behavior change involved here?",
                        "body": "Is there a behavior change involved here? ",
                        "startLine": null,
                        "line": 326,
                        "originalLine": 327,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Basically, getExecutionStartTime() does the same thing that I removed. getExecutionStartTime() returns No_STARTED if _record.getSimpleField(ContextProperties.EXECUTION_START_TIME.toString()) is null. I used this method for simplicity and better style.",
                        "body": "Basically, getExecutionStartTime() does the same thing that I removed. getExecutionStartTime() returns No_STARTED if _record.getSimpleField(ContextProperties.EXECUTION_START_TIME.toString()) is null. I used this method for simplicity and better style.",
                        "startLine": null,
                        "line": 326,
                        "originalLine": 327,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Also, I followed the comment above this method that says \"Only set the execution start time when it hasn't already been set.\"",
                        "body": "Also, I followed the comment above this method that says \"Only set the execution start time when it hasn't already been set.\"",
                        "startLine": null,
                        "line": 326,
                        "originalLine": 327,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The may cause issue? I cannot remember the details. But would there be a scenario, the job is retrying and execution time has been setup before just need another update?",
                        "body": "The may cause issue? I cannot remember the details. But would there be a scenario, the job is retrying and execution time has been setup before just need another update?",
                        "startLine": null,
                        "line": 326,
                        "originalLine": 327,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the review. Since we do not have a retry behavior for jobs and since here we are not changing the behavior, this change should be fine. Also, I just searched through the code base and didn't find such a case. We can also refer to the comment above this method,\n\n/**\n\n\nOnly set the execution start time when it hasn't already been set.\nNOTE: This method is not thread-safe. However, it is okay because even if this does get written\ntwice due to a race condition, that means the timestamps will be close enough to get a fairly\ngood estimate for the execution start time. We do not want to affect the task status update\nperformance and ultimately, this execution start time is an estimate in and of itself anyways.\n@param t\n*/\n\nAnyways, I think it is pretty safe to do this change.",
                        "body": "Thanks for the review. Since we do not have a retry behavior for jobs and since here we are not changing the behavior, this change should be fine. Also, I just searched through the code base and didn't find such a case. We can also refer to the comment above this method,\r\n\r\n>   /**\r\n   * Only set the execution start time when it hasn't already been set.\r\n   * NOTE: This method is not thread-safe. However, it is okay because even if this does get written\r\n   * twice due to a race condition, that means the timestamps will be close enough to get a fairly\r\n   * good estimate for the execution start time. We do not want to affect the task status update\r\n   * performance and ultimately, this execution start time is an estimate in and of itself anyways.\r\n   * @param t\r\n   */\r\n\r\nAnyways, I think it is pretty safe to do this change.",
                        "startLine": null,
                        "line": 326,
                        "originalLine": 327,
                        "originalStartLine": null
                    }
                ],
                "line": 326,
                "startLine": 326,
                "originalLine": 327,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/JobContext.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTAzNzIwOnYy",
                "comments": [
                    {
                        "bodyText": "nit: no need to create this variable. You can just do:\ntargetPName.equals(getTargetForPartition(p));",
                        "body": "nit: no need to create this variable. You can just do:\r\n\r\ntargetPName.equals(getTargetForPartition(p));",
                        "startLine": null,
                        "line": null,
                        "originalLine": 195,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done.",
                        "body": "Done.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 195,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 195,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/JobContext.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "alirezazamani",
            "junkaixue",
            "NealSun96"
        ],
        "tdv": 30.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #1608\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn this PR, the job context will only be written to ZK if it has been modified. Otherwise, there is no need to update the context information in the ZK.\n\nTests\n\n\n The following tests are written for this issue:\nTestContextRedundantUpdates. testRunningJobContextNoUpdate\nTestContextRedundantUpdates. testCompletedJobContextNoUpdate\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\nHelix-core:\n\n\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR] org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack.testLackEnoughInstances(org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack)\n[ERROR]   Run 1: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:281 ¬ª Helix Failed to dr...\n[ERROR]   Run 2: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:273 ¬ª Helix Cluster CLUS...\n[INFO]\n[INFO]\n[ERROR] Tests run: 1257, Failures: 1, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:30 h\n[INFO] Finished at: 2021-01-12T22:31:26-08:00\n[INFO] ------------------------------------------------------------------------\n\nThe failed test passed when I run it individually.\nmvn test -Dtest=\"TestCrushAutoRebalanceNonRack\"\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 32.54 s - in org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  38.523 s\n[INFO] Finished at: 2021-01-13T09:25:26-08:00\n[INFO] ------------------------------------------------------------------------\n\nHelix-rest:\n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 104.468 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:50 min\n[INFO] Finished at: 2021-01-13T09:28:57-08:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2225,
        "title": {
            "body": "Update Upgrader interface comments to include expected system state.",
            "bodyHTML": "Update Upgrader interface comments to include expected system state."
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM41gWT3",
                "body": "@EdColeman you read my mind with these comments and beat me to the punch. :1st_place_medal:  Thanks for getting these in.",
                "bodyText": "@EdColeman you read my mind with these comments and beat me to the punch. ü•á  Thanks for getting these in.",
                "createdAt": "2021-08-12T14:10:14Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MDI5MDY0OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * Update entries in ZooKeeper - normally runs before the root tablet is loaded.\n          \n          \n            \n               * Update entries in ZooKeeper - called before the root tablet is loaded.",
                        "body": "```suggestion\r\n   * Update entries in ZooKeeper - called before the root tablet is loaded.\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 35,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 35,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/Upgrader.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MDI5MTYxOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * Update the root tablet - normally runs after the root tablet is loaded and before the metadata\n          \n          \n            \n               * Update the root tablet - called after the root tablet is loaded and before the metadata",
                        "body": "```suggestion\r\n   * Update the root tablet - called after the root tablet is loaded and before the metadata\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 43,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 43,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/Upgrader.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MDI5MjUxOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * Update the metadata table - normally runs after the metadata table is loaded and before loading\n          \n          \n            \n               * Update the metadata table - called after the metadata table is loaded and before loading",
                        "body": "```suggestion\r\n   * Update the metadata table - called after the metadata table is loaded and before loading\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 52,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 52,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/Upgrader.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "milleruntime",
            "keith-turner",
            "ctubbsii"
        ],
        "tdv": null,
        "description": {
            "bodyText": "Capture discussion on PR #2185 to update javadoc comments.\nDoc update only - contains no code changes."
        }
    },
    {
        "repo": "struts",
        "pr_number": 867,
        "title": {
            "body": "WW-5391 Add interface for VelocityManager extension point",
            "bodyHTML": "WW-5391 Add interface for VelocityManager extension point"
        },
        "comments": [
            {
                "id": "IC_kwDOAPMNSs5yor90",
                "body": "@lukaszlenart Sonar results don't make any sense, it's been misconfigured ever since the 7.0 branch was introduced",
                "bodyText": "@lukaszlenart Sonar results don't make any sense, it's been misconfigured ever since the 7.0 branch was introduced",
                "createdAt": "2024-02-02T07:54:52Z",
                "author": "kusalk"
            },
            {
                "id": "IC_kwDOAPMNSs5yo8rv",
                "body": "Should be fixed",
                "bodyText": "Should be fixed",
                "createdAt": "2024-02-02T08:42:26Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5yvYbs",
                "body": "@lukaszlenart Thanks! Looks like it's just complaining about deprecations, serialisation and code coverage. I've fixed the serialisation warnings. The code coverage I don't think it makes sense for me to rectify as I've just done a find and replace on injection methods. Adding coverage to those injection methods alone won't add much value, and it's out of scope for me to add coverage to the whole class.",
                "bodyText": "@lukaszlenart Thanks! Looks like it's just complaining about deprecations, serialisation and code coverage. I've fixed the serialisation warnings. The code coverage I don't think it makes sense for me to rectify as I've just done a find and replace on injection methods. Adding coverage to those injection methods alone won't add much value, and it's out of scope for me to add coverage to the whole class.",
                "createdAt": "2024-02-03T02:18:32Z",
                "author": "kusalk"
            },
            {
                "id": "IC_kwDOAPMNSs5yvYzC",
                "body": "## [![Quality Gate Failed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-failed-20px.png 'Quality Gate Failed')](https://sonarcloud.io/dashboard?id=apache_struts&pullRequest=867) **Quality Gate failed**  \nFailed conditions\n\n[8.3% Coverage on New Code](https://sonarcloud.io/component_measures?id=apache_struts&pullRequest=867&metric=new_coverage&view=list) (required ‚â• 80%)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=apache_struts&pullRequest=867)\n\n",
                "bodyText": "Quality Gate failed\nFailed conditions\n8.3% Coverage on New Code (required ‚â• 80%)\nSee analysis details on SonarCloud",
                "createdAt": "2024-02-03T02:24:03Z",
                "author": "sonarcloud"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs44MGEj",
                "comments": [
                    {
                        "bodyText": "Didn't bother with a marker interface here as this plugin is deprecated anyway",
                        "body": "Didn't bother with a marker interface here as this plugin is deprecated anyway",
                        "startLine": null,
                        "line": 259,
                        "originalLine": 259,
                        "originalStartLine": null
                    }
                ],
                "line": 259,
                "startLine": 259,
                "originalLine": 259,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "plugins/osgi/src/main/java/org/apache/struts2/osgi/OsgiConfigurationProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs44MGHB",
                "comments": [
                    {
                        "bodyText": "Standardised line endings to LF",
                        "body": "Standardised line endings to `LF`",
                        "startLine": null,
                        "line": null,
                        "originalLine": null,
                        "originalStartLine": null
                    }
                ],
                "line": 1,
                "startLine": null,
                "originalLine": 1,
                "originalStartLine": null,
                "subjectType": "FILE",
                "path": "plugins/portlet/src/main/java/org/apache/struts2/portlet/result/PortletVelocityResult.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs44MGLq",
                "comments": [
                    {
                        "bodyText": "Maybe in 7.0 we can consider renaming VelocityManager to StrutsVelocityManager and VelocityManagerInterface to VelocityManager",
                        "body": "Maybe in 7.0 we can consider renaming `VelocityManager` to `StrutsVelocityManager` and `VelocityManagerInterface` to `VelocityManager`",
                        "startLine": null,
                        "line": 32,
                        "originalLine": 32,
                        "originalStartLine": null
                    }
                ],
                "line": 32,
                "startLine": 32,
                "originalLine": 32,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "plugins/velocity/src/main/java/org/apache/struts2/views/velocity/VelocityManagerInterface.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kusalk",
            "lukaszlenart"
        ],
        "tdv": 20.0,
        "description": {
            "bodyText": "WW-5391\nAllows applications to provide a completely custom VelocityManager"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3843,
        "title": {
            "body": "improves ComprehensiveIT and adjust sunny ITs",
            "bodyHTML": "improves ComprehensiveIT and adjust sunny ITs"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5pCvTJ",
                "body": "Running all of the sunny ITs with this changes looks like the following.\r\n\r\n```\r\n[INFO] -------------------------------------------------------\r\n[INFO]  T E S T S\r\n[INFO] -------------------------------------------------------\r\n[INFO] Running org.apache.accumulo.test.rpc.ThriftBehaviorIT\r\n[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.544 s -- in org.apache.accumulo.test.rpc.ThriftBehaviorIT\r\n[INFO] Running org.apache.accumulo.test.InMemoryMapIT\r\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.911 s -- in org.apache.accumulo.test.InMemoryMapIT\r\n[INFO] Running org.apache.accumulo.test.functional.NativeMapIT\r\n[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.737 s -- in org.apache.accumulo.test.functional.NativeMapIT\r\n[INFO] Running org.apache.accumulo.test.functional.ReadWriteIT\r\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 65.15 s -- in org.apache.accumulo.test.functional.ReadWriteIT\r\n[INFO] Running org.apache.accumulo.test.functional.WALSunnyDayIT\r\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 89.27 s -- in org.apache.accumulo.test.functional.WALSunnyDayIT\r\n[INFO] Running org.apache.accumulo.test.ComprehensiveIT\r\n[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 44.19 s -- in org.apache.accumulo.test.ComprehensiveIT\r\n[INFO] Running org.apache.accumulo.test.start.KeywordStartIT\r\n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.436 s -- in org.apache.accumulo.test.start.KeywordStartIT\r\n[INFO] \r\n[INFO] Results:\r\n[INFO] \r\n[INFO] Tests run: 52, Failures: 0, Errors: 0, Skipped: 0\r\n```",
                "bodyText": "Running all of the sunny ITs with this changes looks like the following.\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running org.apache.accumulo.test.rpc.ThriftBehaviorIT\n[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.544 s -- in org.apache.accumulo.test.rpc.ThriftBehaviorIT\n[INFO] Running org.apache.accumulo.test.InMemoryMapIT\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.911 s -- in org.apache.accumulo.test.InMemoryMapIT\n[INFO] Running org.apache.accumulo.test.functional.NativeMapIT\n[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.737 s -- in org.apache.accumulo.test.functional.NativeMapIT\n[INFO] Running org.apache.accumulo.test.functional.ReadWriteIT\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 65.15 s -- in org.apache.accumulo.test.functional.ReadWriteIT\n[INFO] Running org.apache.accumulo.test.functional.WALSunnyDayIT\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 89.27 s -- in org.apache.accumulo.test.functional.WALSunnyDayIT\n[INFO] Running org.apache.accumulo.test.ComprehensiveIT\n[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 44.19 s -- in org.apache.accumulo.test.ComprehensiveIT\n[INFO] Running org.apache.accumulo.test.start.KeywordStartIT\n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.436 s -- in org.apache.accumulo.test.start.KeywordStartIT\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 52, Failures: 0, Errors: 0, Skipped: 0",
                "createdAt": "2023-10-13T22:37:52Z",
                "author": "keith-turner"
            }
        ],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4zvOSB",
                "comments": [
                    {
                        "bodyText": "@ctubbsii  I had to grant the SYSTEM permission for bulk import to work.  Curious if you know anything about this.  Have not had a chance to look into it yet, wondering if its a bug.",
                        "body": "@ctubbsii  I had to grant the SYSTEM permission for bulk import to work.  Curious if you know anything about this.  Have not had a chance to look into it yet, wondering if its a bug.",
                        "startLine": null,
                        "line": 610,
                        "originalLine": 610,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@keith-turner I think you could have granted just TablePermission.BULK_IMPORT for that specific user on that specific table. To bulk import, WRITE is insufficient. There's actually a BULK_IMPORT permission.",
                        "body": "@keith-turner I think you could have granted just `TablePermission.BULK_IMPORT` for that specific user on that specific table. To bulk import, `WRITE` is insufficient. There's actually a `BULK_IMPORT` permission.",
                        "startLine": null,
                        "line": 610,
                        "originalLine": 610,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@ctubbsii a few lines further down BULK_IMPORT is granted, but the SYSTEM permission also has to be granted for it to work.",
                        "body": "@ctubbsii a few lines further down BULK_IMPORT is granted, but the SYSTEM permission also has to be granted for it to work.",
                        "startLine": null,
                        "line": 610,
                        "originalLine": 610,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That seems strange to me. Might be a bug. Did you ever create a follow-on issue about this?",
                        "body": "That seems strange to me. Might be a bug. Did you ever create a follow-on issue about this?",
                        "startLine": null,
                        "line": 610,
                        "originalLine": 610,
                        "originalStartLine": null
                    }
                ],
                "line": 610,
                "startLine": 610,
                "originalLine": 610,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ComprehensiveIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4zvOa9",
                "comments": [
                    {
                        "bodyText": "everything in this IT was copied exactly from ReadWriteIT, so no new code here.  Just wanted to move these test out of the sunny profile.",
                        "body": "everything in this IT was copied exactly from ReadWriteIT, so no new code here.  Just wanted to move these test out of the sunny profile.",
                        "startLine": null,
                        "line": 62,
                        "originalLine": 62,
                        "originalStartLine": null
                    }
                ],
                "line": 62,
                "startLine": 62,
                "originalLine": 62,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/LocalityGroupIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "dlmarion",
            "ctubbsii"
        ],
        "tdv": 36.0,
        "description": {
            "bodyText": "This change adds a new security test to Comprehensive IT and moves some test from ReadWriteIT into comprehensive IT.  Each test in ReadWriteIT spins up a mini cluster, which takes a lot of time for really simple test.  Also remove the sunny tag from shell ITs as ComprehensiveIT now covers most of what thost test were covering, but using public API instead of shell."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3620,
        "title": {
            "body": "add feedback to zoo-prop-editor",
            "bodyHTML": "add feedback to zoo-prop-editor"
        },
        "comments": [],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4wonfa",
                "comments": [
                    {
                        "bodyText": "Negative exit codes are not standard. The numbers should be 0 for success, and positive, non-zero for failure. The negation of 0 in binary is 1, not -1. I know we have some existing code that uses negative one, but those should be fixed as well. Eventually all of these should be fixed. There's some discussion about this at https://stackoverflow.com/questions/47265667/return-code-on-failure-positive-or-negative\nIn particular, if you try to do this in Java, the process exit code is 255, not -1. Consider:\npublic class Test {\n  public static void main(String[] args) {\n    System.exit(Integer.parseInt(args[0]));\n  }\n} \nThen run it:\n$ for x in {-2..2}; do java Test.java $x; echo $?; done\n254\n255\n0\n1\n2\nThis means that when you use negative exit codes in Java, you get a positive exit code that is not the same value that you told it to use.\nAlso, I'm not sure why we're explicitly calling System.exit at all. The exception should just fall through the execute method into whatever main method called it.",
                        "body": "Negative exit codes are not standard. The numbers should be 0 for success, and positive, non-zero for failure. The negation of `0` in binary is `1`, not `-1`. I know we have some existing code that uses negative one, but those should be fixed as well. Eventually all of these should be fixed. There's some discussion about this at https://stackoverflow.com/questions/47265667/return-code-on-failure-positive-or-negative\r\n\r\nIn particular, if you try to do this in Java, the process exit code is 255, not `-1`. Consider:\r\n```java\r\npublic class Test {\r\n  public static void main(String[] args) {\r\n    System.exit(Integer.parseInt(args[0]));\r\n  }\r\n} \r\n```\r\n\r\nThen run it:\r\n```bash\r\n$ for x in {-2..2}; do java Test.java $x; echo $?; done\r\n254\r\n255\r\n0\r\n1\r\n2\r\n```\r\nThis means that when you use negative exit codes in Java, you get a positive exit code that is not the same value that you told it to use.\r\n\r\nAlso, I'm not sure why we're explicitly calling `System.exit` at all. The exception should just fall through the `execute` method into whatever `main` method called it.",
                        "startLine": null,
                        "line": 117,
                        "originalLine": 117,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The point of calling system exit was so that there was an explicit error return status - if some one were to write a script, I wanted to make sure that had an option to test the command return. I was not sure that throwing an exception would do that - and I wanted it to be explicit.",
                        "body": "The point of calling system exit was so that there was an explicit error return status - if some one were to write a script, I wanted to make sure that had an option to test the command return. I was not sure that throwing an exception would do that - and I wanted it to be explicit.",
                        "startLine": null,
                        "line": 117,
                        "originalLine": 117,
                        "originalStartLine": null
                    }
                ],
                "line": 117,
                "startLine": 117,
                "originalLine": 117,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/util/ZooPropEditor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4wonr_",
                "comments": [
                    {
                        "bodyText": "Remapping all Exceptions to IllegalStateException seems weird. Why do this? Can we narrow the catch a bit?",
                        "body": "Remapping all Exceptions to IllegalStateException seems weird. Why do this? Can we narrow the catch a bit?",
                        "startLine": 146,
                        "line": 148,
                        "originalLine": 148,
                        "originalStartLine": 146
                    },
                    {
                        "bodyText": "The called methods are throwing Runtime exceptions (Illegal Argument,...) The goal was to include what failed in the exception message to help troubleshoot what was being changed in the message.  It could be done with a log message and a re-throw, but catching any exception, wrapping with the IllegalStateException with the augmented exception message seemed the most comprehensive and likely to provide consistent feedback.",
                        "body": "The called methods are throwing Runtime exceptions (Illegal Argument,...) The goal was to include what failed in the exception message to help troubleshoot what was being changed in the message.  It could be done with a log message and a re-throw, but catching any exception, wrapping with the IllegalStateException with the augmented exception message seemed the most comprehensive and likely to provide consistent feedback.",
                        "startLine": 146,
                        "line": 148,
                        "originalLine": 148,
                        "originalStartLine": 146
                    },
                    {
                        "bodyText": "I don't know. Given the fact that the exception would immediately fall out from a command the user initiated, I think most of these kinds of errors are probably informative enough, and it's just cleaner to let them continue to fall through.",
                        "body": "I don't know. Given the fact that the exception would immediately fall out from a command the user initiated, I think most of these kinds of errors are probably informative enough, and it's just cleaner to let them continue to fall through.",
                        "startLine": 146,
                        "line": 148,
                        "originalLine": 148,
                        "originalStartLine": 146
                    }
                ],
                "line": 148,
                "startLine": 146,
                "originalLine": 148,
                "originalStartLine": 146,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/util/ZooPropEditor.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "EdColeman",
            "ctubbsii",
            "Manno15"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Updated zoo-prop-editor to provide feedback using log statements and improved exception messages as mentioned in PR #3445\n\nadds log statements showing success on set\nimproved exception messages.\ncommand exit with -1 on errors."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3960,
        "title": {
            "body": "Wire up majc queued and running metrics in Manager/CompactionCoordinator",
            "bodyHTML": "Wire up majc queued and running metrics in Manager/CompactionCoordinator"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM41SzbY",
                "comments": [
                    {
                        "bodyText": "Instead of throwing an NoSuchElement exception, can we just return zero instead?\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                    .reduce(Long::sum).orElseThrow();\n          \n          \n            \n                    .reduce(Long.valueOf(0), (Long::sum));",
                        "body": "Instead of throwing an NoSuchElement exception, can we just return zero instead?\r\n```suggestion\r\n        .reduce(Long.valueOf(0), (Long::sum));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good catch, I didn't realize there was a two-arg version of reduce. On second thought, I'm going to get rid of the stream and replace it with a simple for-loop as it's likely faster.",
                        "body": "Good catch, I didn't realize there was a two-arg version of `reduce`. On second thought, I'm going to get rid of the stream and replace it with a simple for-loop as it's likely faster.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 96,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/compaction/queue/CompactionJobQueues.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "ddanielr"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Fixes #3619"
        }
    },
    {
        "repo": "wicket",
        "pr_number": 708,
        "title": {
            "body": "WICKET-7087: AjaxLazyLoadPanelTester not available in 10.0.0-M2",
            "bodyHTML": "WICKET-7087: AjaxLazyLoadPanelTester not available in 10.0.0-M2"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmTM41XjAh",
                "comments": [
                    {
                        "bodyText": "CRLF endline has been changed to LF. Otherwise Git was refusing to move the files.",
                        "body": "`CRLF` endline has been changed to `LF`. Otherwise Git was refusing to move the files.",
                        "startLine": null,
                        "line": 1,
                        "originalLine": 1,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Use https://github.com/apache/wicket/pull/708/files?diff=unified&w=1 to review without the whitespace changes",
                        "body": "Use https://github.com/apache/wicket/pull/708/files?diff=unified&w=1 to review without the whitespace changes",
                        "startLine": null,
                        "line": 1,
                        "originalLine": 1,
                        "originalStartLine": null
                    }
                ],
                "line": 1,
                "startLine": 1,
                "originalLine": 1,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "wicket-extensions-tester/src/test/java/org/apache/wicket/extensions/tester/AjaxLazyLoadPanelTesterTest.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "martin-g"
        ],
        "tdv": -25.0,
        "description": {
            "bodyText": "Introduce wicket-extensions-tester module that currently provides only AjaxLazyLoadPanelTester\nAdd all **-tester modules to wicket-common-tests for better OSGi compatibility."
        }
    },
    {
        "repo": "commons-lang",
        "pr_number": 965,
        "title": {
            "body": "Remove unnecessary statement in DurationFormatUtils",
            "bodyHTML": "Remove unnecessary statement in DurationFormatUtils"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmKs5L11Jp",
                "body": "# [Codecov](https://codecov.io/gh/apache/commons-lang/pull/965?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) Report\n> Merging [#965](https://codecov.io/gh/apache/commons-lang/pull/965?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (16cc08f) into [master](https://codecov.io/gh/apache/commons-lang/commit/b6d39a4257c46672e915098a156f63cd0a713a72?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (b6d39a4) will **increase** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n```diff\n@@             Coverage Diff              @@\n##             master     #965      +/-   ##\n============================================\n+ Coverage     91.99%   92.01%   +0.01%     \n- Complexity     7432     7433       +1     \n============================================\n  Files           189      189              \n  Lines         15664    15662       -2     \n  Branches       2907     2906       -1     \n============================================\n+ Hits          14410    14411       +1     \n+ Misses          677      676       -1     \n+ Partials        577      575       -2     \n```\n\n\n| [Impacted Files](https://codecov.io/gh/apache/commons-lang/pull/965?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) | Coverage Œî | |\n|---|---|---|\n| [...apache/commons/lang3/time/DurationFormatUtils.java](https://codecov.io/gh/apache/commons-lang/pull/965/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbGFuZzMvdGltZS9EdXJhdGlvbkZvcm1hdFV0aWxzLmphdmE=) | `91.10% <√∏> (+0.76%)` | :arrow_up: |\n| [...ommons/lang3/concurrent/AtomicSafeInitializer.java](https://codecov.io/gh/apache/commons-lang/pull/965/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbGFuZzMvY29uY3VycmVudC9BdG9taWNTYWZlSW5pdGlhbGl6ZXIuamF2YQ==) | `100.00% <0.00%> (+14.28%)` | :arrow_up: |\n\n:mega: We‚Äôre building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation)\n",
                "bodyText": "Codecov Report\n\nMerging #965 (16cc08f) into master (b6d39a4) will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n@@             Coverage Diff              @@\n##             master     #965      +/-   ##\n============================================\n+ Coverage     91.99%   92.01%   +0.01%     \n- Complexity     7432     7433       +1     \n============================================\n  Files           189      189              \n  Lines         15664    15662       -2     \n  Branches       2907     2906       -1     \n============================================\n+ Hits          14410    14411       +1     \n+ Misses          677      676       -1     \n+ Partials        577      575       -2     \n\n\n\nImpacted Files\nCoverage Œî\n\n\n\n\n\n...apache/commons/lang3/time/DurationFormatUtils.java\n91.10% <√∏> (+0.76%)\n‚¨ÜÔ∏è\n\n\n...ommons/lang3/concurrent/AtomicSafeInitializer.java\n100.00% <0.00%> (+14.28%)\n‚¨ÜÔ∏è\n\n\n\nüì£ We‚Äôre building smart automated test selection to slash your CI/CD build times. Learn more",
                "createdAt": "2022-10-08T21:48:09Z",
                "author": "codecov-commenter"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmKs4lybcC",
                "comments": [
                    {
                        "bodyText": "Or is it a bug? Maybe a copypasta bug where accidentally lines 190 and 192 were duplicated? Because there are replaceOne for \"hour\" and \"minute\", and this block that was removed has the part for \"seconds\".",
                        "body": "Or is it a bug? Maybe a copypasta bug where accidentally lines 190 and 192 were duplicated? Because there are `replaceOne` for \"hour\" and \"minute\", and this block that was removed has the part for \"seconds\".",
                        "startLine": null,
                        "line": 195,
                        "originalLine": 195,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Hi @kinow\nYes, could be a bug as well.  In any case we don't need that conditions.\nTY",
                        "body": "Hi @kinow \r\nYes, could be a bug as well.  In any case we don't need that conditions.\r\nTY",
                        "startLine": null,
                        "line": 195,
                        "originalLine": 195,
                        "originalStartLine": null
                    }
                ],
                "line": 195,
                "startLine": 195,
                "originalLine": 195,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "arturobernalg",
            "codecov-commenter",
            "kinow",
            "garydgregory"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "We don't need that conditions. Its always false and will never reach it.  And just because in the line 192 we assigns tmp to duration."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2297,
        "title": {
            "body": "Rework GC rest code in Monitor",
            "bodyHTML": "Rework GC rest code in Monitor"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM438aZs",
                "body": "@ctubbsii I was thinking more about our comments and was wondering what you think of renaming the classes in the Monitor that get turned into JSON?  I noticed that we have a lot of classes in the monitor with generic names, like `Compactions` and `Scans`. These classes contain the variable names for the JSON and if we change will break the front end code. It doesn't make sense to call them `Impl` as we do in other places. What do you think about renaming these classes to something like `CompactionsJSON` or `ScansJSON` to help differentiate it from other back-end classes.",
                "bodyText": "@ctubbsii I was thinking more about our comments and was wondering what you think of renaming the classes in the Monitor that get turned into JSON?  I noticed that we have a lot of classes in the monitor with generic names, like Compactions and Scans. These classes contain the variable names for the JSON and if we change will break the front end code. It doesn't make sense to call them Impl as we do in other places. What do you think about renaming these classes to something like CompactionsJSON or ScansJSON to help differentiate it from other back-end classes.",
                "createdAt": "2021-10-08T11:57:33Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM44CVm0",
                "body": "> @ctubbsii I was thinking more about our comments and was wondering what you think of renaming the classes in the Monitor that get turned into JSON? I noticed that we have a lot of classes in the monitor with generic names, like `Compactions` and `Scans`. These classes contain the variable names for the JSON and if we change will break the front end code. It doesn't make sense to call them `Impl` as we do in other places. What do you think about renaming these classes to something like `CompactionsJSON` or `ScansJSON` to help differentiate it from other back-end classes.\r\n\r\nJSON wouldn't make sense as part of the name. The objects can be returned as XML also. It's the responsibility of Jackson to decide the presentation format based on the HTTP request. I think the fact that these are data types in the `/rest/` package is sufficient to document the risk of breaking the REST endpoints.",
                "bodyText": "@ctubbsii I was thinking more about our comments and was wondering what you think of renaming the classes in the Monitor that get turned into JSON? I noticed that we have a lot of classes in the monitor with generic names, like Compactions and Scans. These classes contain the variable names for the JSON and if we change will break the front end code. It doesn't make sense to call them Impl as we do in other places. What do you think about renaming these classes to something like CompactionsJSON or ScansJSON to help differentiate it from other back-end classes.\n\nJSON wouldn't make sense as part of the name. The objects can be returned as XML also. It's the responsibility of Jackson to decide the presentation format based on the HTTP request. I think the fact that these are data types in the /rest/ package is sufficient to document the risk of breaking the REST endpoints.",
                "createdAt": "2021-10-11T15:35:00Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM44Fg11",
                "body": "> JSON wouldn't make sense as part of the name. The objects can be returned as XML also. It's the responsibility of Jackson to decide the presentation format based on the HTTP request. I think the fact that these are data types in the `/rest/` package is sufficient to document the risk of breaking the REST endpoints.\r\n\r\nGood point. I forgot about the XML.",
                "bodyText": "JSON wouldn't make sense as part of the name. The objects can be returned as XML also. It's the responsibility of Jackson to decide the presentation format based on the HTTP request. I think the fact that these are data types in the /rest/ package is sufficient to document the risk of breaking the REST endpoints.\n\nGood point. I forgot about the XML.",
                "createdAt": "2021-10-12T12:32:36Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4bZ-0-",
                "comments": [
                    {
                        "bodyText": "You're changing it in 2.1, but it the /gc endpoint was still introduced in 2.0. These aren't exactly public API, so it shouldn't matter, but it is a little strange to change this to an incorrect value.",
                        "body": "You're changing it in 2.1, but it the `/gc` endpoint was still introduced in 2.0. These aren't exactly public API, so it shouldn't matter, but it is a little strange to change this to an incorrect value.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 32,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I wasn't sure what to do cause I was changing the endpoint. They aren't public API but maybe we should treat them like API? I feel like we shouldn't be required since the Monitor is only an admin tool. I guess keeping the tag for when it was created is useful.",
                        "body": "I wasn't sure what to do cause I was changing the endpoint. They aren't public API but maybe we should treat them like API? I feel like we shouldn't be required since the Monitor is only an admin tool. I guess keeping the tag for when it was created is useful.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 32,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 32,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/monitor/src/main/java/org/apache/accumulo/monitor/rest/gc/GarbageCollectorResource.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4bZ-4f",
                "comments": [
                    {
                        "bodyText": "Seems like these should be final",
                        "body": "Seems like these should be final",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": 34
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 40,
                "originalStartLine": 34,
                "subjectType": "LINE",
                "path": "server/monitor/src/main/java/org/apache/accumulo/monitor/rest/gc/GarbageCollectorStats.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4berTb",
                "comments": [
                    {
                        "bodyText": "You reverted the other @since tag. Did you mean to leave this one? Not sure if you had different rationale for this one.",
                        "body": "You reverted the other `@since` tag. Did you mean to leave this one? Not sure if you had different rationale for this one.",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 28,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah, I renamed and changed the class so didn't think the old tag applied anymore. We probably should just remove some of these tags...",
                        "body": "Yeah, I renamed and changed the class so didn't think the old tag applied anymore. We probably should just remove some of these tags...",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 28,
                        "originalStartLine": null
                    }
                ],
                "line": 28,
                "startLine": 28,
                "originalLine": 28,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/monitor/src/main/java/org/apache/accumulo/monitor/rest/gc/GarbageCollectorStats.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "ctubbsii"
        ],
        "tdv": -30.0,
        "description": {
            "bodyText": "Make the GC rest code in Monitor return one list\nCreate GarbageCollectorStats object to replace GarbageCollectorCycle\nDrop unused rest endpoints\nMake GC page use datatables to display data\nCloses #2285"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2653,
        "title": {
            "body": "Fix partitionAssignment API failing due to NPE when no resource config",
            "bodyHTML": "Fix partitionAssignment API failing due to NPE when no resource config"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5pHX1O",
                "body": "Pull request approved by @xyuanlu \r\nCommit message: Fix partitionAssignment NPE when no resource configs",
                "bodyText": "Pull request approved by @xyuanlu\nCommit message: Fix partitionAssignment NPE when no resource configs",
                "createdAt": "2023-10-15T23:46:06Z",
                "author": "GrantPSpencer"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4zmtKM",
                "comments": [
                    {
                        "bodyText": "do we not check if the resource is WAGED enabled?",
                        "body": "do we not check if the resource is WAGED enabled?",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 362,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The check for WAGED resources happens in the function (computeOptimalAssignmentForResources) that calls this function (computeWagedAssignmentResult). My understanding is there is an assumption that the only resources passed to it are waged resources.\nThe calling function is computeOptimalAssignmentForResources() in ResourceAssignmentOptimizerAccessor line 254\n      // Compute all Waged resources in a batch later.\n      if (idealState.getRebalancerClassName() != null && idealState.getRebalancerClassName()\n          .equals(WagedRebalancer.class.getName())) {\n        wagedResourceIdealState.add(idealState);\n        continue;\n      }\n\nand then:\n    if (!wagedResourceIdealState.isEmpty()) {\n      computeWagedAssignmentResult(wagedResourceIdealState, inputFields, clusterState, clusterId,\n          result);\n    }",
                        "body": "The check for WAGED resources happens in the function (computeOptimalAssignmentForResources) that calls this function (computeWagedAssignmentResult). My understanding is there is an assumption that the only resources passed to it are waged resources.\r\n\r\nThe calling function is computeOptimalAssignmentForResources() in ResourceAssignmentOptimizerAccessor line 254\r\n```\r\n      // Compute all Waged resources in a batch later.\r\n      if (idealState.getRebalancerClassName() != null && idealState.getRebalancerClassName()\r\n          .equals(WagedRebalancer.class.getName())) {\r\n        wagedResourceIdealState.add(idealState);\r\n        continue;\r\n      }\r\n```\r\n\r\nand then:\r\n\r\n```\r\n    if (!wagedResourceIdealState.isEmpty()) {\r\n      computeWagedAssignmentResult(wagedResourceIdealState, inputFields, clusterState, clusterId,\r\n          result);\r\n    }\r\n```",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 362,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "aha, so in some way, user has configured resource as WAGED but hasn't provided WAGED resource config? isn't this user error?   we can prevent null pointer exception but shouldn't user know that the config is wrong too?",
                        "body": "aha, so in some way, user has configured resource as WAGED but hasn't provided WAGED resource config? isn't this user error?   we can prevent null pointer exception but shouldn't user know that the config is wrong too?",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 362,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Technically waged rebalance \"works\" for clusters without resource configs. This is actually the current set up of our super clusters. Using waged without any resource configs or relevant instance capacity configs.\nI'm not 100% on this part, but I believe if there are no resource configs then the score calculated for each node will be 0 and tiebreak will go to the node without any resources assigned to it. I don't think there's a guarantee of evenness if there's no resource and instance capacity configs, but it will guarantee that each node will have at least 1 replica assigned to it (given # replicas > # nodes)",
                        "body": "Technically waged rebalance \"works\" for clusters without resource configs. This is actually the current set up of our super clusters. Using waged without any resource configs or relevant instance capacity configs.\r\n\r\nI'm not 100% on this part, but I believe if there are no resource configs then the score calculated for each node will be 0 and tiebreak will go to the node without any resources assigned to it. I don't think there's a guarantee of evenness if there's no resource and instance capacity configs, but it will guarantee that each node will have at least 1 replica assigned to it (given # replicas > # nodes)",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 362,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The NPE only occurs for the partitionAssignment API, but the actual controller rebalance algorithm works fine in the same scenario",
                        "body": "The NPE only occurs for the partitionAssignment API, but the actual controller rebalance algorithm works fine in the same scenario",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 362,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "that means, we fill out the value using some default values in Waged workflow but not in this workflow.\nPlease look at: WagedValidationUtil::validateAndGetPartitionCapacity.\nBut your fix should be good too.",
                        "body": "that means, we fill out the value using some default values in Waged workflow but not in this workflow. \r\nPlease look at: WagedValidationUtil::validateAndGetPartitionCapacity.\r\n\r\nBut your fix should be good too.",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 362,
                        "originalStartLine": null
                    }
                ],
                "line": 362,
                "startLine": 362,
                "originalLine": 362,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ResourceAssignmentOptimizerAccessor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "GrantPSpencer",
            "xyuanlu",
            "desaikomal"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nThe PartitionAssignment API fails for waged clusters where a resource does not have a respective resource config defined for it in ZK.\nThis is the error that is shown to users:\n{\n  \"error\" : \"Failed to compute partition assignment: org.apache.helix.HelixException: getIdealAssignmentForWagedFullAuto(): Calculation failed: Failed to compute BestPossibleState!\"\n}\n\nThis is the error that is found in helix-rest logs (truncated)\n2023/10/11 03:20:59.336 ERROR [HelixUtil] [qtp1938380262-5394685] [helix-rest] [] getIdealAssignmentForWagedFullAuto(): Failed to compute ResourceAssignments!\njava.lang.NullPointerException: null\nat java.util.stream.Collectors.lambda$uniqKeysMapAccumulator$1(Collectors.java:177) ~[?:?]\nat java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169) ~[?:?]\nat java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655) ~[?:?]\nat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484) ~[?:?]\nat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) ~[?:?]\nat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913) ~[?:?]\nat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:?]\nat java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578) ~[?:?]\nat org.apache.helix.util.HelixUtil.getAssignmentForWagedFullAutoImpl(HelixUtil.java:318) ~[helix-core-1.1.1-dev-202303311728.jar:1.1.1-dev-202303311728]\nat org.apache.helix.util.HelixUtil.getTargetAssignmentForWagedFullAuto(HelixUtil.java:219) ~[helix-core-1.1.1-dev-202303311728.jar:1.1.1-dev-202303311728]\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\npartitionAssignment API fails for clusters where resource configs aren't set due to NPE. This NPE occurs because getResourceConfig() will return null if the resource config does not exist, which is then added into the wagedResourceConfigs list. The below code is where the NPE occurs as one of the items in the list is null.\n      dataProvider.setResourceConfigMap(resourceConfigs.stream()\n          .collect(Collectors.toMap(ResourceConfig::getResourceName, Function.identity())));\n\nTests\n\n\n The following tests are written for this issue:\nNo new unit tests. But I did test this by deploying helix-rest locally to confirm that the partitionAssignment API worked after the change\n\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n\n$mvn test -o -Dtest=TestResourceAssignmentOptimizerAccessor -pl=helix-rest\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-rest ---\n[INFO] Loading execution data file /Users/gspencer/Desktop/git-repos/helix/helix-rest/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 92 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  54.333 s\n[INFO] Finished at: 2023-10-10T21:11:40-07:00\n[INFO] ------------------------------------------------------------------------"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4120,
        "title": {
            "body": "Return non-merged view of System config",
            "bodyHTML": "Return non-merged view of System config"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5v6YML",
                "body": "Added since 3.1 tag to `getSystemProperties()` and added `Wait.waitFor()` in `getSystemPropertiesTest()`",
                "bodyText": "Added since 3.1 tag to getSystemProperties() and added Wait.waitFor() in getSystemPropertiesTest()",
                "createdAt": "2024-01-04T18:32:21Z",
                "author": "kevinrr888"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM425Qbs",
                "comments": [
                    {
                        "bodyText": "This will need a since tag",
                        "body": "This will need a since tag",
                        "startLine": null,
                        "line": 174,
                        "originalLine": 174,
                        "originalStartLine": null
                    }
                ],
                "line": 174,
                "startLine": 174,
                "originalLine": 174,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/admin/InstanceOperations.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM427EbY",
                "comments": [
                    {
                        "bodyText": "You may want to combine the assignment and test for expected size in Wait.waitFor() - the propagation of property changes occur asynchronously  through ZooKeeper and when running in a constrained environment (like the CI environment) can cause the test to fail if the set and then checks occur before the update is propagated.\nTesting for the size = expected, or wait a short period and then retry should be sufficient and then the values could be checked for the expected values.",
                        "body": "You may want to combine the assignment and test for expected size in Wait.waitFor() - the propagation of property changes occur asynchronously  through ZooKeeper and when running in a constrained environment (like the CI environment) can cause the test to fail if the set and then checks occur before the update is propagated.\r\n\r\nTesting for the size = expected, or wait a short period and then retry should be sufficient and then the values could be checked for the expected values.",
                        "startLine": null,
                        "line": 361,
                        "originalLine": 352,
                        "originalStartLine": null
                    }
                ],
                "line": 361,
                "startLine": 361,
                "originalLine": 352,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/conf/PropStoreConfigIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kevinrr888",
            "keith-turner",
            "EdColeman"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Closes #4095\n\nAdded getSystemProperties() to InstanceOperations which functions similary to getTableProperties() and getNamespaceProperties() from TableOperations and NamespaceOperations.\nAdded its implementation in InstanceOperationsImpl.\nAdded a test getSystemPropertiesTest() to PropStoreConfigIT to test that the new method functions as intended."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1764,
        "title": {
            "body": "Remove unused field in ZKHelixDataAccessor - code clean with no logic change",
            "bodyHTML": "Remove unused field in ZKHelixDataAccessor - code clean with no logic change"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg1MjQyMDYzOA==",
                "body": "This PR is ready to be merged. Approved by @jiajunwang \r\n\r\nFinal commit message:\r\nRemove unused field in ZKHelixDataAccessor.",
                "bodyText": "This PR is ready to be merged. Approved by @jiajunwang\nFinal commit message:\nRemove unused field in ZKHelixDataAccessor.",
                "createdAt": "2021-06-01T20:21:58Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2NDM5MTc1OnYy",
                "comments": [
                    {
                        "bodyText": "Although I agree with the change, this might break some users. Please note this PR as non-backward-compatible change.\nAnd maybe we need to talk with the team.",
                        "body": "Although I agree with the change, this might break some users. Please note this PR as non-backward-compatible change.\r\nAnd maybe we need to talk with the team.",
                        "startLine": null,
                        "line": 67,
                        "originalLine": 67,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. Good point. How about keep the public constructor, mark it as deprecated, and remove this field.",
                        "body": "TFTR. Good point. How about keep the public constructor, mark it as deprecated, and remove this field. ",
                        "startLine": null,
                        "line": 67,
                        "originalLine": 67,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Given the meaning of this parameter is not possible to clarify, I actually support removing it.",
                        "body": "Given the meaning of this parameter is not possible to clarify, I actually support removing it.",
                        "startLine": null,
                        "line": 67,
                        "originalLine": 67,
                        "originalStartLine": null
                    }
                ],
                "line": 67,
                "startLine": null,
                "originalLine": 67,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "jiajunwang"
        ],
        "tdv": 15.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1755\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\n _instanceType is never used in ZKHelixDataAccessor.\nTests\n\n The following tests are written for this issue:\n\nNA\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "zookeeper",
        "pr_number": 1992,
        "title": {
            "body": "ZOOKEEPER-4682. Make FileSnap.deserialize a static method",
            "bodyHTML": "ZOOKEEPER-4682. Make FileSnap.deserialize a static method"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAJ0584rdbp1",
                "comments": [
                    {
                        "bodyText": "RESOURCE_LEAK:  resource of type java.io.DataInputStream acquired by call to getArchive(...) at line 68 is not released after line 72.\n‚ùó‚ùó 2 similar findings have been found in this PR\nüîé Expand here to view all instances of this finding\n\n\n\n\nFile Path\nLine Number\n\n\n\n\nzookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java\n102\n\n\nzookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java\n268\n\n\n\nVisit the Lift Web Console to find more details in your report.\n\n‚ÑπÔ∏è Expand to see all @sonatype-lift commands\nYou can reply with the following commands. For example, reply with @sonatype-lift ignoreall to leave out all findings.\n\n\n\nCommand\nUsage\n\n\n\n\n@sonatype-lift ignore\nLeave out the above finding from this PR\n\n\n@sonatype-lift ignoreall\nLeave out all the existing findings from this PR\n\n\n@sonatype-lift exclude <file|issue|path|tool>\nExclude specified file|issue|path|tool from Lift findings by updating your config.toml file\n\n\n\nNote: When talking to LiftBot, you need to refresh the page to see its response.\nClick here to add LiftBot to another repo.\n\nHelp us improve LIFT! (Sonatype LiftBot external survey)\nWas this a good recommendation for you? Answering this survey will not impact your Lift settings.\n[‚ÄâüôÅ Not relevant‚Äâ] - [‚Äâüòï Won't fix‚Äâ] - [‚Äâüòë Not critical, will fix‚Äâ] - [‚ÄâüôÇ Critical, will fix‚Äâ] - [‚Äâüòä Critical, fixing now‚Äâ]",
                        "body": "<picture><img alt=\"12% of developers fix this issue\" src=\"https://lift.sonatype.com/api/commentimage/fixrate/12/display.svg\"></picture>\n\n<b>*RESOURCE_LEAK:</b>*  resource of type `java.io.DataInputStream` acquired by call to `getArchive(...)` at line 68 is not released after line 72.\n\n‚ùó‚ùó <b>2 similar findings have been found in this PR</b>\n\n<details><summary>üîé Expand here to view all instances of this finding</summary><br/>\n  \n  \n<div align=\\\"center\\\">\n\n\n| **File Path** | **Line Number** |\n| ------------- | ------------- |\n| zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java | [102](https://github.com/apache/zookeeper/blob/cd75eb4d4b71988eed374d2629e77e1d4a32642e/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java#L102) |\n| zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java | [268](https://github.com/apache/zookeeper/blob/cd75eb4d4b71988eed374d2629e77e1d4a32642e/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java#L268) |\n<p><a href=\"https://lift.sonatype.com/results/github.com/apache/zookeeper/01GVR5NRASBBX79A36JTAKBQC0?t=Infer|RESOURCE_LEAK\" target=\"_blank\">Visit the Lift Web Console</a> to find more details in your report.</p></div></details>\n\n\n\n---\n\n<details><summary>‚ÑπÔ∏è Expand to see all <b>@sonatype-lift</b> commands</summary>\n\nYou can reply with the following commands. For example, reply with ***@sonatype-lift ignoreall*** to leave out all findings.\n| **Command** | **Usage** |\n| ------------- | ------------- |\n| `@sonatype-lift ignore` | Leave out the above finding from this PR |\n| `@sonatype-lift ignoreall` | Leave out all the existing findings from this PR |\n| `@sonatype-lift exclude <file\\|issue\\|path\\|tool>` | Exclude specified `file\\|issue\\|path\\|tool` from Lift findings by updating your config.toml file |\n\n**Note:** When talking to LiftBot, you need to **refresh** the page to see its response.\n<sub>[Click here](https://github.com/apps/sonatype-lift/installations/new) to add LiftBot to another repo.</sub></details>\n\n\n\n---\n\n<b>Help us improve LIFT! (<i>Sonatype LiftBot external survey</i>)</b>\n\nWas this a good recommendation for you? <sub><small>Answering this survey will not impact your Lift settings.</small></sub>\n\n[‚Äâ[üôÅ Not relevant](https://www.sonatype.com/lift-comment-rating?comment=442472366&lift_comment_rating=1)‚Äâ] - [‚Äâ[üòï Won't fix](https://www.sonatype.com/lift-comment-rating?comment=442472366&lift_comment_rating=2)‚Äâ] - [‚Äâ[üòë Not critical, will fix](https://www.sonatype.com/lift-comment-rating?comment=442472366&lift_comment_rating=3)‚Äâ] - [‚Äâ[üôÇ Critical, will fix](https://www.sonatype.com/lift-comment-rating?comment=442472366&lift_comment_rating=4)‚Äâ] - [‚Äâ[üòä Critical, fixing now](https://www.sonatype.com/lift-comment-rating?comment=442472366&lift_comment_rating=5)‚Äâ]",
                        "startLine": null,
                        "line": 72,
                        "originalLine": 72,
                        "originalStartLine": null
                    }
                ],
                "line": 72,
                "startLine": 72,
                "originalLine": 72,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "tisonkun",
            "eolivelli"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "FileSnap.deserialize is effectively a static method. Change it to a static method so that we don't need to do some new FileSnap(null) hacks for workaround calling this method.\na.k.a. pay back some tech debt."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3987,
        "title": {
            "body": "Fixes compaction property log message bug",
            "bodyHTML": "Fixes compaction property log message bug"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM42GaLL",
                "comments": [
                    {
                        "bodyText": "Just to make sure I am understanding this correctly, is this ignoring the planner class when looking for planner options?",
                        "body": "Just to make sure I am understanding this correctly, is this ignoring the planner class when looking for planner options?",
                        "startLine": null,
                        "line": 136,
                        "originalLine": 136,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes, because we've already processed the planner property on line 96.\nhttps://github.com/apache/accumulo/pull/3987/files#diff-ba8ebe6daae5454d3fd92a0f328ed7a6b40a5796994831c314f5ad0a6dd5aa8aR96\nSince we aren't going to do anything with the planner option in this loop we just call return for this property and move on to the next property.",
                        "body": "Yes, because we've already processed the planner property on line 96. \r\n\r\nhttps://github.com/apache/accumulo/pull/3987/files#diff-ba8ebe6daae5454d3fd92a0f328ed7a6b40a5796994831c314f5ad0a6dd5aa8aR96\r\n\r\nSince we aren't going to do anything with the planner option in this loop we just call `return` for this property and move on to the next property. ",
                        "startLine": null,
                        "line": 136,
                        "originalLine": 136,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks, I wasn't completely sure.",
                        "body": "Thanks, I wasn't completely sure.",
                        "startLine": null,
                        "line": 136,
                        "originalLine": 136,
                        "originalStartLine": null
                    }
                ],
                "line": 136,
                "startLine": 136,
                "originalLine": 136,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/util/compaction/CompactionServicesConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ddanielr",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Fixes an incorrect logging statement from appearing during normal startup conditions when processing service.<service>.planner compaction properties.\nBug was introduced in #3915.\nLog message:\n[main] WARN  org.apache.accumulo.core.util.compaction.CompactionServicesConfig [] - Ignoring compaction property default.planner as does not match the prefix used by the referenced planner definition\n\nSteps to replicate bug:\n\ngit checkout main\nRun any of the tests in CompactionServicesConfigTest\nSee the log message in the output."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1834,
        "title": {
            "body": "Add TF Available Threads Metrics",
            "bodyHTML": "Add TF Available Threads Metrics"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc41Yodg",
                "body": "This PR is ready to be merged, approved by @junkaixue       \r\nFinal commit message:\r\n## Add TF Available Threads Metrics ##\r\nAdd metrics about Task Framework available threads in the cluster per job type. ",
                "bodyText": "This PR is ready to be merged, approved by @junkaixue\nFinal commit message:\nAdd TF Available Threads Metrics\nAdd metrics about Task Framework available threads in the cluster per job type.",
                "createdAt": "2021-08-10T00:58:26Z",
                "author": "NealSun96"
            }
        ],
        "total_comments_count": 16,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1NTk0NTYwOnYy",
                "comments": [
                    {
                        "bodyText": "Have we done this kind of update before? I remember we usually have the method in clusterStatusMonitor to have the metrics logic in that place. If we do like this, then we are distributing monitoring logic in different places. Could be a potential issue.",
                        "body": "Have we done this kind of update before? I remember we usually have the method in clusterStatusMonitor to have the metrics logic in that place. If we do like this, then we are distributing monitoring logic in different places. Could be a potential issue.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The reason why I did it this way is because AssignableInstanceManager already keeps a map of available threads per job type across the cluster, so if we have another place keeping track of the threads, it seems to be duplication.\nI want to draw parallel to how AbstractTaskDispatcher uses cluster status monitor: we set the monitor as its local variable, then the dispatcher uses the monitor. It's pretty similar to this use case in my opinion.",
                        "body": "The reason why I did it this way is because `AssignableInstanceManager` already keeps a map of available threads per job type across the cluster, so if we have another place keeping track of the threads, it seems to be duplication. \r\nI want to draw parallel to how `AbstractTaskDispatcher` uses cluster status monitor: we set the monitor as its local variable, then the dispatcher uses the monitor. It's pretty similar to this use case in my opinion. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Where to keep the data should be fine. But it depends on the where the logic is.\nYou can do the reserve way to update it. For example, you can pass in the cache AssignableInstanceManager as an argument for clusterStatusMonitor.updateQuota() (you can name it differently). But keep the logic of how you update the data inside the clusterStatusMonitor. You dont have to copy the data to clusterStatusMonitor.",
                        "body": "Where to keep the data should be fine. But it depends on the where the logic is. \r\nYou can do the reserve way to update it. For example, you can pass in the cache AssignableInstanceManager as an argument for clusterStatusMonitor.updateQuota() (you can name it differently). But keep the logic of how you update the data inside the clusterStatusMonitor. You dont have to copy the data to clusterStatusMonitor.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "For the sake of cutting down on redundant computation, is it possible at all to move this \"record\" (basically a few loops that count) logic to where the global quota calculation is done so we don't loop through things twice?",
                        "body": "For the sake of cutting down on redundant computation, is it possible at all to move this \"record\" (basically a few loops that count) logic to where the global quota calculation is done so we don't loop through things twice?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@junkaixue I see, let me try that.\n@narendly I considered that earlier: the global quota is updated in several methods; it's not just one computation at a central place. Plus, based on what @junkaixue said, we want to \"record\" inside ClusterStatusMonitor, instead of doing it in AssiganbleInstanceManager. Lastly, it's 1 loop through each job type, which I don't think is too computation heavy (it doesn't loop through all instances).",
                        "body": "@junkaixue I see, let me try that. \r\n@narendly I considered that earlier: the global quota is updated in several methods; it's not just one computation at a central place. Plus, based on what @junkaixue said, we want to \"record\" inside `ClusterStatusMonitor`, instead of doing it in `AssiganbleInstanceManager`. Lastly, it's 1 loop through each job type, which I don't think is too computation heavy (it doesn't loop through all instances).",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 93,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/task/TaskSchedulingStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1NTk1MDAzOnYy",
                "comments": [
                    {
                        "bodyText": "Question: Was this job type consistent with workflow type? I am not quite sure whether there could be some diverge of monitoring at job level against workflow level.",
                        "body": "Question: Was this job type consistent with workflow type? I am not quite sure whether there could be some diverge of monitoring at job level against workflow level.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 622,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "They are the same thing: if workflow has a type, it applies to all jobs, otherwise job can have their own types. Since each job can have a different type, would jobType make more sense? If we refer to it as workflowType and use WorkflowMonitor, then each workflow can have different types of jobs and affects different WorkflowMonitors, which is confusing.",
                        "body": "They are the same thing: if workflow has a type, it applies to all jobs, otherwise job can have their own types. Since each job can have a different type, would `jobType` make more sense? If we refer to it as `workflowType` and use WorkflowMonitor, then each workflow can have different types of jobs and affects different WorkflowMonitors, which is confusing. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 622,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I would suggest to use workflow type. We had the idea to hold different workflow type for different jobs, like a queue can handle some group of job types. Also make the workflow type could link it as the source of truth since the job type now is derived from workflow type. Logically, it could make more sense to let workflow level reporting.",
                        "body": "I would suggest to use workflow type. We had the idea to hold different workflow type for different jobs, like a queue can handle some group of job types. Also make the workflow type could link it as the source of truth since the job type now is derived from workflow type. Logically, it could make more sense to let workflow level reporting.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 622,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If I recall the API behavior correclty, if workflowType is defined, I believe all jobs inherit their parent workflow's type. Even if the user sets the job type (in addition to setting the workflow type), the parent workflow's type will override the job type.\nIf workflowType is not set, then users can set a different type for each individual jobType. meaning each job can have its own type.\nSince it's possible for jobs to have different types when the parent workflow's type is not defined, I don't think we can use the workflow type here?",
                        "body": "If I recall the API behavior correclty, if workflowType is defined, I believe all jobs inherit their parent workflow's type. Even if the user sets the job type (in addition to setting the workflow type), the parent workflow's type will override the job type.\r\n\r\nIf workflowType is not set, then users can set a different type for each individual jobType. meaning each job can have its own type.\r\n\r\nSince it's possible for jobs to have different types when the parent workflow's type is not defined, I don't think we can use the workflow type here?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 622,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@junkaixue I don't really understand your suggestion. Are you saying to not use _globalThreadBasedQuotaMap? Or are you saying to use workflowMonitor instead of jobMonitor?",
                        "body": "@junkaixue I don't really understand your suggestion. Are you saying to not use `_globalThreadBasedQuotaMap`? Or are you saying to use `workflowMonitor` instead of `jobMonitor`? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 622,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@NealSun96 No need for this. I think @narendly is right. There would be meaningless to have workflow level aggregation of metrics since assignment is happened at job level.",
                        "body": "@NealSun96 No need for this. I think @narendly is right. There would be meaningless to have workflow level aggregation of metrics since assignment is happened at job level. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 622,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 622,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/AssignableInstanceManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODE3NTY2OnYy",
                "comments": [
                    {
                        "bodyText": "Should we just do a null check here and remove null checks in other places (e.g. JobMonitor)?",
                        "body": "Should we just do a null check here and remove null checks in other places (e.g. JobMonitor)?",
                        "startLine": 84,
                        "line": 85,
                        "originalLine": 85,
                        "originalStartLine": 84
                    },
                    {
                        "bodyText": "Since @junkaixue also commented about doing the work in ClusterStatusMonitor instead, we should definitely do the null check here. Thanks for the suggestion.",
                        "body": "Since @junkaixue also commented about doing the work in `ClusterStatusMonitor` instead, we should definitely do the null check here. Thanks for the suggestion. ",
                        "startLine": 84,
                        "line": 85,
                        "originalLine": 85,
                        "originalStartLine": 84
                    }
                ],
                "line": 85,
                "startLine": 84,
                "originalLine": 85,
                "originalStartLine": 84,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/task/TaskSchedulingStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODE3NzMzOnYy",
                "comments": [
                    {
                        "bodyText": "This kind of null check should ideally be done before ClusterStatusMonitor is passed in to JobMonitor to make the code more concise to read. See comment above :)",
                        "body": "This kind of null check should ideally be done before `ClusterStatusMonitor` is passed in to `JobMonitor` to make the code more concise to read. See comment above :)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 619,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 619,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/AssignableInstanceManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "NealSun96",
            "junkaixue",
            "narendly"
        ],
        "tdv": 51.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1833\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThere is no existing metrics about Task Framework available threads. Certain production issues are caused by simple reasons such as out of threads, and in order to spot those reasons, developers have to spend time reading through logs.\nWith metrics for available threads, grouped by job types and aggregated on the cluster level, it's now easy for developers to find the thread availability of any cluster.\nTests\n\n The following tests are written for this issue:\n\nTestClusterStatusMonitor.testRecordAvailableThreadsPerType\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3322,
        "title": {
            "body": "Upgrader for version 4.0.0, set hosting goals on existing  tablets",
            "bodyHTML": "Upgrader for version 4.0.0, set hosting goals on existing  tablets"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5aTw56",
                "body": "@EdColeman - this seems pretty straightforward, would be interested in your thoughts on a test.",
                "bodyText": "@EdColeman - this seems pretty straightforward, would be interested in your thoughts on a test.",
                "createdAt": "2023-04-19T17:46:04Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4ssAf2",
                "comments": [
                    {
                        "bodyText": "Think the following will upgrade the root tablet metadata before it loaded and the metadata table metadata before its tablets are loaded\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              @Override\n          \n          \n            \n              public void upgradeZookeeper(ServerContext context) {\n          \n          \n            \n                LOG.info(\"upgrade root - skipping, nothing to do\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public void upgradeRoot(ServerContext context) {\n          \n          \n            \n                LOG.info(\"upgrade root - skipping, nothing to do\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public void upgradeMetadata(ServerContext context) {\n          \n          \n            \n                LOG.info(\"upgrade metadata entries\");\n          \n          \n            \n                addHostingGoalToRootTable(context);\n          \n          \n            \n                addHostingGoalToMetadataTable(context);\n          \n          \n            \n                addHostingGoalToUserTables(context);\n          \n          \n            \n              }\n          \n          \n            \n              @Override\n          \n          \n            \n              public void upgradeZookeeper(ServerContext context) {\n          \n          \n            \n                LOG.info(\"upgrading metadata stored in zookeeper\");\n          \n          \n            \n                addHostingGoalToRootTable(context);\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public void upgradeRoot(ServerContext context) {\n          \n          \n            \n                LOG.info(\"upgrading metadata stored in the root table\");\n          \n          \n            \n                addHostingGoalToMetadataTable(context);\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public void upgradeMetadata(ServerContext context) {\n          \n          \n            \n                LOG.info(\"upgrade metadata stored in metadata table\");\n          \n          \n            \n                addHostingGoalToUserTables(context);\n          \n          \n            \n              }",
                        "body": "Think the following will upgrade the root tablet metadata before it loaded and the metadata table metadata before its tablets are loaded\r\n\r\n```suggestion\r\n  @Override\r\n  public void upgradeZookeeper(ServerContext context) {\r\n    LOG.info(\"upgrading metadata stored in zookeeper\");\r\n    addHostingGoalToRootTable(context);\r\n  }\r\n\r\n  @Override\r\n  public void upgradeRoot(ServerContext context) {\r\n    LOG.info(\"upgrading metadata stored in the root table\");\r\n    addHostingGoalToMetadataTable(context);\r\n  }\r\n\r\n  @Override\r\n  public void upgradeMetadata(ServerContext context) {\r\n    LOG.info(\"upgrade metadata stored in metadata table\");\r\n    addHostingGoalToUserTables(context);\r\n  }\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": 37
                    },
                    {
                        "bodyText": "Thanks @keith-turner , that makes sense. Implemented in 911fe12.",
                        "body": "Thanks @keith-turner , that makes sense. Implemented in 911fe12.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": 37
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 53,
                "originalStartLine": 37,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/Upgrader11to12.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4suzil",
                "comments": [
                    {
                        "bodyText": "it looks like this is unused",
                        "body": "it looks like this is unused",
                        "startLine": null,
                        "line": null,
                        "originalLine": 21,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 4136c63",
                        "body": "Addressed in 4136c63",
                        "startLine": null,
                        "line": null,
                        "originalLine": 21,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 21,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/ServerContextTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4su1tr",
                "comments": [
                    {
                        "bodyText": "TabletMetadata - should be wrapped in try-with-resources (two places in this file)",
                        "body": "TabletMetadata - should be wrapped in try-with-resources (two places in this file)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 56,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 4136c63",
                        "body": "Addressed in 4136c63",
                        "startLine": null,
                        "line": null,
                        "originalLine": 56,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 56,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/upgrade/Upgrader11to12.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner",
            "EdColeman"
        ],
        "tdv": -41.0,
        "description": {
            "bodyText": "Closes #3305"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2752,
        "title": {
            "body": "Improve use of Futures in Gatherer",
            "bodyHTML": "Improve use of Futures in Gatherer"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5FqBLm",
                "body": "A full build including IT's passed. @keith-turner  - is there anything else for this PR or can we merge it?",
                "bodyText": "A full build including IT's passed. @keith-turner  - is there anything else for this PR or can we merge it?",
                "createdAt": "2022-06-28T12:13:19Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5Fvnmo",
                "body": "> A full build including IT's passed. @keith-turner - is there anything else for this PR or can we merge it?\r\n\r\nI think it's good to merge.  This is a very nice PR.  When I looked I asked myself two questions, is the new code correct and is the existing functionality preserved.  For both questions I concluded yes.  It does those two things with new code that easier to understand and has a unit test.",
                "bodyText": "A full build including IT's passed. @keith-turner - is there anything else for this PR or can we merge it?\n\nI think it's good to merge.  This is a very nice PR.  When I looked I asked myself two questions, is the new code correct and is the existing functionality preserved.  For both questions I concluded yes.  It does those two things with new code that easier to understand and has a unit test.",
                "createdAt": "2022-06-29T15:17:13Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5FwmWz",
                "body": "Thanks for the contribution @nosewings and welcome to the Apache Accumulo community. If you would like to be listed as a contributor on Accumulo's people page please make a website PR for [people.md](https://github.com/apache/accumulo-website/edit/main/pages/people.md).\r\nIf you intend to make more contributions, please consider subscribing to the dev list and introducing yourself. Also, you can use the dev list or slack to reach out if you have questions about anything. See https://accumulo.apache.org/contact-us/",
                "bodyText": "Thanks for the contribution @nosewings and welcome to the Apache Accumulo community. If you would like to be listed as a contributor on Accumulo's people page please make a website PR for people.md.\nIf you intend to make more contributions, please consider subscribing to the dev list and introducing yourself. Also, you can use the dev list or slack to reach out if you have questions about anything. See https://accumulo.apache.org/contact-us/",
                "createdAt": "2022-06-29T18:49:47Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4iGk59",
                "comments": [
                    {
                        "bodyText": "I think the answer to this question is yes. I'm not familiar with these objects, but from what I understand they will use the common ForkJoin pool. I'm not sure what happens when a failure happens in this pool while running a task. We have instrumented our Threads and ThreadPools class to take specific actions when tasks throw unhandled Exception and Error.",
                        "body": "I think the answer to this question is `yes`. I'm not familiar with these objects, but from what I understand they will use the common ForkJoin pool. I'm not sure what happens when a failure happens in this pool while running a task. We have instrumented our `Threads` and `ThreadPools` class to take specific actions when tasks throw unhandled `Exception` and `Error`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 72,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I thought so, too. I wasn't sure because the original implementation just used the default ForkJoinPool.",
                        "body": "I thought so, too. I wasn't sure because the original implementation just used the default ForkJoinPool.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 72,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Not needed anymore, since all the async calls are removed.",
                        "body": "Not needed anymore, since all the async calls are removed. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 72,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 72,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/util/CompletableFutureUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4iN771",
                "comments": [
                    {
                        "bodyText": "May be able to drop the Async here and a few lines later.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                    return step.apply(x).thenComposeAsync(this);\n          \n          \n            \n                    return step.apply(x).thenCompose(this);\n          \n      \n    \n    \n  \n\nElsewhere in the code there is a line like\n          futures.add(CompletableFuture\n              .supplyAsync(new FilesProcessor(tinfo, location, allFiles, cancelFlag), execSrv));\n\nI think conceptually the thenCompose is a follow on step and would execute in a thread from execSrv.  I was not sure about this so I pulled your branch and wrote the following test program.\npackage org.apache.accumulo.core.summary;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.function.Predicate;\nimport java.util.function.Function;\n\nimport org.apache.accumulo.core.util.CompletableFutureUtil;\n\npublic class Test {\n    public static void main(String args[]) throws Exception{\n        ExecutorService es = Executors.newFixedThreadPool(2);\n\n        Predicate<Long> test = num -> num >=10;\n\n        Function<Long, CompletableFuture<Long>> step = num -> {\n            System.out.println(num+\" Step thread \"+Thread.currentThread().getName());\n\n            var cf = CompletableFuture.supplyAsync(() ->{ \n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n                System.out.println(num+\" Supply async thread \"+Thread.currentThread().getName());\n                return num;\n            }, es);\n\n            cf = cf.thenApply(l -> {\n                System.out.println(l+\" Then apply thread \"+Thread.currentThread().getName());\n                return l+1;\n            });\n\n            return cf;\n        };\n\n\n        CompletableFuture<Long> result = CompletableFutureUtil.iterateWhileAsync(step, test, 5L);\n\n        System.out.println(result.get());\n    }\n}\nWithout modifying iterateWhileAsync I see the following output from this program.\n5 Step thread ForkJoinPool.commonPool-worker-3\n5 Supply async thread pool-1-thread-1\n5 Then apply thread pool-1-thread-1\n6 Step thread ForkJoinPool.commonPool-worker-3\n6 Supply async thread pool-1-thread-2\n6 Then apply thread pool-1-thread-2\n7 Step thread ForkJoinPool.commonPool-worker-3\n7 Supply async thread pool-1-thread-1\n7 Then apply thread pool-1-thread-1\n8 Step thread ForkJoinPool.commonPool-worker-3\n8 Supply async thread pool-1-thread-2\n8 Then apply thread pool-1-thread-2\n9 Step thread ForkJoinPool.commonPool-worker-3\n9 Supply async thread pool-1-thread-1\n9 Then apply thread pool-1-thread-1\n10\n\nWhen I modify iterateWhileAsync to use thenCompose instead of thenComposeAsync I see the following output.\n5 Step thread main\n5 Supply async thread pool-1-thread-1\n5 Then apply thread pool-1-thread-1\n6 Step thread pool-1-thread-1\n6 Supply async thread pool-1-thread-2\n6 Then apply thread pool-1-thread-2\n7 Step thread pool-1-thread-2\n7 Supply async thread pool-1-thread-2\n7 Then apply thread pool-1-thread-2\n8 Step thread pool-1-thread-2\n8 Supply async thread pool-1-thread-2\n8 Then apply thread pool-1-thread-2\n9 Step thread pool-1-thread-2\n9 Supply async thread pool-1-thread-2\n9 Then apply thread pool-1-thread-2\n10",
                        "body": "May be able to drop the Async here and a few lines later.\r\n\r\n```suggestion\r\n        return step.apply(x).thenCompose(this);\r\n```\r\n\r\nElsewhere in the code there is a line like \r\n\r\n```\r\n          futures.add(CompletableFuture\r\n              .supplyAsync(new FilesProcessor(tinfo, location, allFiles, cancelFlag), execSrv));\r\n```\r\n\r\nI think conceptually the thenCompose is a follow on step and would execute in a thread from execSrv.  I was not sure about this so I pulled your branch and wrote the following test program.\r\n\r\n```java\r\npackage org.apache.accumulo.core.summary;\r\n\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.function.Predicate;\r\nimport java.util.function.Function;\r\n\r\nimport org.apache.accumulo.core.util.CompletableFutureUtil;\r\n\r\npublic class Test {\r\n    public static void main(String args[]) throws Exception{\r\n        ExecutorService es = Executors.newFixedThreadPool(2);\r\n\r\n        Predicate<Long> test = num -> num >=10;\r\n\r\n        Function<Long, CompletableFuture<Long>> step = num -> {\r\n            System.out.println(num+\" Step thread \"+Thread.currentThread().getName());\r\n\r\n            var cf = CompletableFuture.supplyAsync(() ->{ \r\n                try {\r\n                    Thread.sleep(10);\r\n                } catch (InterruptedException e) {\r\n                    // TODO Auto-generated catch block\r\n                    e.printStackTrace();\r\n                }\r\n                System.out.println(num+\" Supply async thread \"+Thread.currentThread().getName());\r\n                return num;\r\n            }, es);\r\n\r\n            cf = cf.thenApply(l -> {\r\n                System.out.println(l+\" Then apply thread \"+Thread.currentThread().getName());\r\n                return l+1;\r\n            });\r\n\r\n            return cf;\r\n        };\r\n\r\n\r\n        CompletableFuture<Long> result = CompletableFutureUtil.iterateWhileAsync(step, test, 5L);\r\n\r\n        System.out.println(result.get());\r\n    }\r\n}\r\n```\r\n\r\nWithout modifying iterateWhileAsync I see the following output from this program.\r\n\r\n```\r\n5 Step thread ForkJoinPool.commonPool-worker-3\r\n5 Supply async thread pool-1-thread-1\r\n5 Then apply thread pool-1-thread-1\r\n6 Step thread ForkJoinPool.commonPool-worker-3\r\n6 Supply async thread pool-1-thread-2\r\n6 Then apply thread pool-1-thread-2\r\n7 Step thread ForkJoinPool.commonPool-worker-3\r\n7 Supply async thread pool-1-thread-1\r\n7 Then apply thread pool-1-thread-1\r\n8 Step thread ForkJoinPool.commonPool-worker-3\r\n8 Supply async thread pool-1-thread-2\r\n8 Then apply thread pool-1-thread-2\r\n9 Step thread ForkJoinPool.commonPool-worker-3\r\n9 Supply async thread pool-1-thread-1\r\n9 Then apply thread pool-1-thread-1\r\n10\r\n```\r\n\r\nWhen I modify `iterateWhileAsync` to use `thenCompose` instead of `thenComposeAsync` I see the following output.\r\n\r\n```\r\n5 Step thread main\r\n5 Supply async thread pool-1-thread-1\r\n5 Then apply thread pool-1-thread-1\r\n6 Step thread pool-1-thread-1\r\n6 Supply async thread pool-1-thread-2\r\n6 Then apply thread pool-1-thread-2\r\n7 Step thread pool-1-thread-2\r\n7 Supply async thread pool-1-thread-2\r\n7 Then apply thread pool-1-thread-2\r\n8 Step thread pool-1-thread-2\r\n8 Supply async thread pool-1-thread-2\r\n8 Then apply thread pool-1-thread-2\r\n9 Step thread pool-1-thread-2\r\n9 Supply async thread pool-1-thread-2\r\n9 Then apply thread pool-1-thread-2\r\n10\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 73,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 73,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/util/CompletableFutureUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4iN9l8",
                "comments": [
                    {
                        "bodyText": "Based on the little experiment I did, I don't think this is a potential problem.  In that experiment there were only two threads in the pool and it iterated 5 times w/o problem.",
                        "body": "Based on the little experiment I did, I don't think this is a potential problem.  In that experiment there were only two threads in the pool and it iterated 5 times w/o problem.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 70,
                        "originalStartLine": 68
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 70,
                "originalStartLine": 68,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/util/CompletableFutureUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4iTPhS",
                "comments": [
                    {
                        "bodyText": "A unit test for this would nice.  Could test 0,1,2,3, 1000 iterations and ensure the results are correct.  Could maybe also test an exception during iteration.",
                        "body": "A unit test for this would nice.  Could test 0,1,2,3, 1000 iterations and ensure the results are correct.  Could maybe also test an exception during iteration.",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 60,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The test added in 252a067 looks good.",
                        "body": "The test added in 252a067 looks good.",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 60,
                        "originalStartLine": null
                    }
                ],
                "line": 60,
                "startLine": 60,
                "originalLine": 60,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/util/CompletableFutureUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "nosewings",
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 38.0,
        "description": {
            "bodyText": "Attempt to fix #2696. This replaces the complicated mutation retry logic in Gatherer with a more structured/algebraic approach.\nThis new approach is recursive. Making the recursive call asynchronously should prevent a stack overflow (it does in the tests that I've run), since the task is submitted to the common ForkJoinPool rather than being called directly. This probably imposes a performance penalty, but I don't know how that compares to the cost of the I/O in this codepath."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1304,
        "title": {
            "body": "Fix #1281 Update TabletTime.maxMetatdataTime",
            "bodyHTML": "Fix #1281 Update TabletTime.maxMetatdataTime"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTkwMzExNDE5OnYy",
                "comments": [
                    {
                        "bodyText": "Seems like object like these could be created in MetadataTimeTest and that would make the test shorter.",
                        "body": "Seems like object like these could be created in MetadataTimeTest and that would make the test shorter.",
                        "startLine": null,
                        "line": 36,
                        "originalLine": 36,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "agree, I was being lazy.",
                        "body": "agree, I was being lazy.",
                        "startLine": null,
                        "line": 36,
                        "originalLine": 36,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Last commit includes MetadataTimeTest cleanup. :)",
                        "body": "Last commit includes MetadataTimeTest cleanup. :)",
                        "startLine": null,
                        "line": 36,
                        "originalLine": 36,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "agree, I was being lazy.\n\nI have written many hard to read test in the past.  Doing lots of code reviews has motivated me to spend more time making my test more readable.  My least favorite part of doing a code review is looking at the test, however I think a thorough review of the test pays future dividends so I do it.  When I saw how you made one test more readable I thought that would be nice in the other test.",
                        "body": "> agree, I was being lazy.\r\n\r\nI have written many hard to read test in the past.  Doing lots of code reviews has motivated me to spend more time making my test more readable.  My least favorite part of doing a code review is looking at the test, however I think a thorough review of the test pays future dividends so I do it.  When I saw how you made one test more readable I thought that would be nice in the other test.",
                        "startLine": null,
                        "line": 36,
                        "originalLine": 36,
                        "originalStartLine": null
                    }
                ],
                "line": 36,
                "startLine": 36,
                "originalLine": 36,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/tablets/TabletTimeTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "hkeebler",
            "keith-turner"
        ],
        "tdv": -169.0,
        "description": {
            "bodyText": "Replaced string processing with MetadataTime objects.\nRenamed MetadataTime class method valueOf(char) to getType(char) .  The valueOf was confusing and didn't really make sense once it was pulled from the ENUM TimeType class."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3244,
        "title": {
            "body": "Alternate time wait calculation using nanos",
            "bodyHTML": "Alternate time wait calculation using nanos"
        },
        "comments": [],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4rd0uo",
                "comments": [
                    {
                        "bodyText": "To avoid the loss of precision when dividing by 3, could convert to nanos before dividing. Could also convert from seconds instead of millis for the numeric literal:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                final long timeToWaitNanos = MILLISECONDS.toNanos(Math.max(10_000, rpcTimeout / 3));\n          \n          \n            \n                // wait at least 10 seconds\n          \n          \n            \n                final long timeToWaitNanos = Math.max(SECONDS.toNanos(10), MILLISECONDS.toNanos(rpcTimeout) / 3);",
                        "body": "To avoid the loss of precision when dividing by 3, could convert to nanos before dividing. Could also convert from seconds instead of millis for the numeric literal:\r\n\r\n```suggestion\r\n    // wait at least 10 seconds\r\n    final long timeToWaitNanos = Math.max(SECONDS.toNanos(10), MILLISECONDS.toNanos(rpcTimeout) / 3);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1027,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 4295d30",
                        "body": "Addressed in 4295d305ce",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1027,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't think you applied my change. It looks like a different, similar change was applied. The result is an unnecessary extra conversion that is incorrect.",
                        "body": "I don't think you applied my change. It looks like a different, similar change was applied. The result is an unnecessary extra conversion that is incorrect.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1027,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1027,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/Manager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4rd4lb",
                "comments": [
                    {
                        "bodyText": "These are already nanos.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                final long timeToWaitNanos =\n          \n          \n            \n                    MILLISECONDS.toNanos(Math.max(SECONDS.toNanos(10), MILLISECONDS.toNanos(rpcTimeout) / 3));\n          \n          \n            \n                final long timeToWaitNanos = Math.max(SECONDS.toNanos(10), MILLISECONDS.toNanos(rpcTimeout) / 3);",
                        "body": "These are already nanos.\r\n\r\n```suggestion\r\n    final long timeToWaitNanos = Math.max(SECONDS.toNanos(10), MILLISECONDS.toNanos(rpcTimeout) / 3);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1029,
                        "originalStartLine": 1028
                    },
                    {
                        "bodyText": "fixed in fa538b0",
                        "body": "fixed in fa538b0b3e",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1029,
                        "originalStartLine": 1028
                    },
                    {
                        "bodyText": "As you predicted, my formatting wasn't quite right. One thing that might work, to make the line shorter, is to rename the variable from timeToWaitNanos to nanosToWait. That might be enough to make it fit on one line.",
                        "body": "As you predicted, my formatting wasn't quite right. One thing that might work, to make the line shorter, is to rename the variable from `timeToWaitNanos` to `nanosToWait`. That might be enough to make it fit on one line.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1029,
                        "originalStartLine": 1028
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1029,
                "originalStartLine": 1028,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/Manager.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "EdColeman",
            "dlmarion",
            "ctubbsii",
            "Manno15"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Reworks time delay calculation to use delta between nano time samples.\nFollow-on to #3167"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2549,
        "title": {
            "body": "MultiThreading Stress Test Lattice - Puppy Logic and Skeleton (Part 1)",
            "bodyHTML": "MultiThreading Stress Test Lattice - Puppy Logic and Skeleton (Part 1)"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5hbcVu",
                "body": "PR approved by @xyuanlu and @qqu0127 \r\nCommit message: Multithreading Stress Test Lattice - Puppy Logic and Skeleton (Part 1)",
                "bodyText": "PR approved by @xyuanlu and @qqu0127\nCommit message: Multithreading Stress Test Lattice - Puppy Logic and Skeleton (Part 1)",
                "createdAt": "2023-07-13T16:54:57Z",
                "author": "Marcosrico"
            }
        ],
        "total_comments_count": 24,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4vjjFi",
                "comments": [
                    {
                        "bodyText": "sorry, may be few dumb questions - why would you make the member public ?",
                        "body": "sorry, may be few dumb questions - why would you make the member public ?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 33,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Not a dumb question! I intend to have the implementation of Lattice specific puppies in a separate package so for it to be accessed, it would need to be public.",
                        "body": "Not a dumb question! I intend to have the implementation of Lattice specific puppies in a separate package so for it to be accessed, it would need to be public.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 33,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 33,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/AbstractPuppy.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4vlE_z",
                "comments": [
                    {
                        "bodyText": "It seems like the difference is on the cleanup() part. Can we do the if branch for that only?",
                        "body": "It seems like the difference is on the cleanup() part. Can we do the if branch for that only?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 67,
                        "originalStartLine": 59
                    },
                    {
                        "bodyText": "True, i can simplify the if statement for just the cleanup. Thanks!",
                        "body": "True, i can simplify the if statement for just the cleanup. Thanks!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 67,
                        "originalStartLine": 59
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 67,
                "originalStartLine": 59,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/AbstractPuppy.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4vlFCc",
                "comments": [
                    {
                        "bodyText": "I don't believe you need a new random object each time. This can be a member variable.",
                        "body": "I don't believe you need a new random object each time. This can be a member variable.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 50,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "That makes sense, will fix. thanks!",
                        "body": "That makes sense, will fix. thanks!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 50,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 50,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/ExecDelay.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4vlFDE",
                "comments": [
                    {
                        "bodyText": "nit: you can do the initialization inline.",
                        "body": "nit: you can do the initialization inline.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 33,
                        "originalStartLine": 32
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 33,
                "originalStartLine": 32,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/PuppyManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4vlFTn",
                "comments": [
                    {
                        "bodyText": "Maybe a dump question, how is repeated puppy supposed to stop?",
                        "body": "Maybe a dump question, how is repeated puppy supposed to stop?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 75,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It's configured in the PuppyManager! The timeout of the puppies is indicates before executing the puppies through the PuppyManager",
                        "body": "It's configured in the PuppyManager! The timeout of the puppies is indicates before executing the puppies through the PuppyManager",
                        "startLine": null,
                        "line": null,
                        "originalLine": 75,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 75,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/AbstractPuppy.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4v96Q7",
                "comments": [
                    {
                        "bodyText": "I'd suggest try using getters instead of direct access. Besides, I think protected should be enough scope.",
                        "body": "I'd suggest try using getters instead of direct access. Besides, I think protected should be enough scope. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": 33
                    },
                    {
                        "bodyText": "I agree with protected security but what I am not quite sure I understand the use case for a getter method here. I can create a helper method that increments the counter but it would also be accessing the member variable the same way.",
                        "body": "I agree with protected security but what I am not quite sure I understand the use case for a getter method here. I can create a helper method that increments the counter but it would also be accessing the member variable the same way.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": 33
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 34,
                "originalStartLine": 33,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/AbstractPuppy.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4v96jy",
                "comments": [
                    {
                        "bodyText": "Have you updated? It still creates new Random instance every time.",
                        "body": "Have you updated? It still creates new Random instance every time. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 51,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You're right my bad, I've updated it now. I thinks this achieves it! Thanks for the catch!",
                        "body": "You're right my bad, I've updated it now. I thinks this achieves it! Thanks for the catch!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 51,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 51,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/ExecDelay.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4wEB02",
                "comments": [
                    {
                        "bodyText": "Please follow Enum naming pattern",
                        "body": "Please follow Enum naming pattern",
                        "startLine": null,
                        "line": null,
                        "originalLine": 26,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Enum pattern with capitalized correct?",
                        "body": "Enum pattern with capitalized correct?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 26,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 26,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/PuppyMode.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4wEYFk",
                "comments": [
                    {
                        "bodyText": "All  this can be dropped. Please follow the convention",
                        "body": "All  `this` can be dropped. Please follow the convention",
                        "startLine": null,
                        "line": null,
                        "originalLine": 44,
                        "originalStartLine": 40
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 44,
                "originalStartLine": 40,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/ExecDelay.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4wEYIN",
                "comments": [
                    {
                        "bodyText": "nit: can be declared inline",
                        "body": "nit: can be declared inline",
                        "startLine": null,
                        "line": null,
                        "originalLine": 36,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 36,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/PuppyManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4wEYLj",
                "comments": [
                    {
                        "bodyText": "Naming convention, use underscore and no need for this",
                        "body": "Naming convention, use underscore and no need for `this`",
                        "startLine": null,
                        "line": null,
                        "originalLine": 35,
                        "originalStartLine": 26
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 35,
                "originalStartLine": 26,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/PuppySpec.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4wHAEo",
                "comments": [
                    {
                        "bodyText": "I guess no need for 'this'?",
                        "body": " I guess no need for 'this'?\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 37,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "My bad I missed it! Thanks for the catch",
                        "body": "My bad I missed it! Thanks for the catch",
                        "startLine": null,
                        "line": null,
                        "originalLine": 37,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 37,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/AbstractPuppy.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Marcosrico",
            "xyuanlu",
            "qqu0127",
            "desaikomal"
        ],
        "tdv": 147.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#2237\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThe skeleton / logic of the multithreading stress testing. We are using a concept called \"puppies\" to add in chaos to stress testing. Each puppy that extends the AbstractPuppy class represents one action (i.e. zk.CreatePuppy will create nodes in zk at specified path). The PuppyManager manages puppys by executing them and stopping them when indicated time limit is reached.\nTests\n\n The following tests are written for this issue:\n\nn/a\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "struts",
        "pr_number": 323,
        "title": {
            "body": "Improve SecurityMemberAccess",
            "bodyHTML": "Improve SecurityMemberAccess"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDQ1OTQzODEwMg==",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/21383560/badge)](https://coveralls.io/builds/21383560)\n\nCoverage increased (+0.004%) to 48.562% when pulling **2bc2bbc0e0951961645e8fc021e4160140c524f6 on aleksandr-m:feature/improve_320** into **efd5a7c7abc0231bb0a96daab5fcde19916f5fa9 on apache:master**.\n",
                "bodyText": "Coverage increased (+0.004%) to 48.562% when pulling 2bc2bbc on aleksandr-m:feature/improve_320 into efd5a7c on apache:master.",
                "createdAt": "2019-01-31T17:45:19Z",
                "author": "coveralls"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDQ1OTg1NzkzNA==",
                "body": "@lukaszlenart \r\n> I'm not sure if it is permitted to inherit from this class.\r\n\r\nWhy not? I think it is valid to extend it.",
                "bodyText": "@lukaszlenart\n\nI'm not sure if it is permitted to inherit from this class.\n\nWhy not? I think it is valid to extend it.",
                "createdAt": "2019-02-01T20:30:32Z",
                "author": "aleksandr-m"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDQ2MDUyOTI1MQ==",
                "body": "I'm good, LGTM üëç ",
                "bodyText": "I'm good, LGTM üëç",
                "createdAt": "2019-02-05T06:35:02Z",
                "author": "lukaszlenart"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDQ2MDU2MzkyMg==",
                "body": "I see supporting for access static methods is deprecated long time ago (see [here](https://github.com/apache/struts/blob/e9d92f5000a827ac83b63aada624946854a77fef/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java#L65)). Let's drop supporting for access to any static (including method, field and etc) in 2.6. wdyt? I myself strongly like it to be more secure and clean code.",
                "bodyText": "I see supporting for access static methods is deprecated long time ago (see here). Let's drop supporting for access to any static (including method, field and etc) in 2.6. wdyt? I myself strongly like it to be more secure and clean code.",
                "createdAt": "2019-02-05T09:13:04Z",
                "author": "yasserzamani"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDQ2MDU3MjY2NQ==",
                "body": "@yasserzamani it's not that easy... a lot of app will break, also with did a lot of good work to improve security in case of accessing statics.",
                "bodyText": "@yasserzamani it's not that easy... a lot of app will break, also with did a lot of good work to improve security in case of accessing statics.",
                "createdAt": "2019-02-05T09:41:42Z",
                "author": "lukaszlenart"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDQ2MDU5NTQ5Mw==",
                "body": "Hmm you're right :) I explored it is deprecated starting from about 2.3.25. Usually we should wait for 2 or 3 versions for delete. So let's keep it maybe until 2.7. Thanks!",
                "bodyText": "Hmm you're right :) I explored it is deprecated starting from about 2.3.25. Usually we should wait for 2 or 3 versions for delete. So let's keep it maybe until 2.7. Thanks!",
                "createdAt": "2019-02-05T10:57:05Z",
                "author": "yasserzamani"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDQ2MDgwNDc3Nw==",
                "body": "@yasserzamani Access to static fields is pretty convenient, think about constants. I wouldn't remove this, but maybe we can restrict access to static fields based on type (primitives / strings are ok). ",
                "bodyText": "@yasserzamani Access to static fields is pretty convenient, think about constants. I wouldn't remove this, but maybe we can restrict access to static fields based on type (primitives / strings are ok).",
                "createdAt": "2019-02-05T21:10:17Z",
                "author": "aleksandr-m"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDQ2MTAwOTM1NQ==",
                "body": "I don't have a strict idea but just two comments: Sometimes changes to a string, boolean and etc primitive types can also cause DOS and etc attacks. And in above solution ognl blocks user also on access to a primitive type but inside a static class.\r\n\r\nAnyway I think it's OK to merge this one for now :) wdyt?",
                "bodyText": "I don't have a strict idea but just two comments: Sometimes changes to a string, boolean and etc primitive types can also cause DOS and etc attacks. And in above solution ognl blocks user also on access to a primitive type but inside a static class.\nAnyway I think it's OK to merge this one for now :) wdyt?",
                "createdAt": "2019-02-06T12:41:08Z",
                "author": "yasserzamani"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDQ2MjE2NTQ0Nw==",
                "body": "No objections/suggestions... let's merge :)",
                "bodyText": "No objections/suggestions... let's merge :)",
                "createdAt": "2019-02-10T19:47:05Z",
                "author": "yasserzamani"
            }
        ],
        "total_comments_count": 20,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTUzOTcyNDcyOnYy",
                "comments": [
                    {
                        "bodyText": "Should we warn users about that?",
                        "body": "Should we warn users about that?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Well, it is only trace level, and we log everything else. If you think it is not needed I can remove it.",
                        "body": "Well, it is only `trace` level, and we log everything else. If you think it is not needed I can remove it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Hello @lukaszlenart .\nI'm not sure what @aleksandr-m  thinks, but the log-level for failure due to non-public members might be a \"balancing act\".\nMy understanding is that prior to this the framework would just return false for non-public elements (so downstream processing would determine whether any logging happened in such cases) ?\nA warn for this condition might end up being noisy for some apps when migrating apps from 2.5.x to 2.6.  Maybe a level of debug (or even info) might be a better balance in this case ?",
                        "body": "Hello @lukaszlenart .\r\nI'm not sure what @aleksandr-m  thinks, but the log-level for failure due to non-public members might be a \"balancing act\".  \r\nMy understanding is that prior to this the framework would just return false for non-public elements (so downstream processing would determine whether any logging happened in such cases) ?\r\nA _warn_ for this condition might end up being noisy for some apps when migrating apps from 2.5.x to 2.6.  Maybe a level of _debug_ (or even _info_) might be a better balance in this case ?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I meant, accessing non-public methods/fields is a visible sign that something is wrong. And even before the change, access to non-publics was blocked so I see no problems with migrations.",
                        "body": "I meant, accessing non-public methods/fields is a visible sign that something is wrong. And even before the change, access to non-publics was blocked so I see no problems with migrations.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "OK ... I think I see your point.  So maybe a warn-level for 2.6 for failing the initial public member check (but if this check was back-ported to 2.5.x it would be trace or debug ...).",
                        "body": "OK ... I think I see your point.  So maybe a warn-level for 2.6 for failing the initial public member check (but if this check was back-ported to 2.5.x it would be trace or debug ...). ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Ok, but I still don't see a valid case, even in Struts 2.5.x you are not allowed to access non-public methods, you can only switch on/off access to static methods.",
                        "body": "Ok, but I still don't see a valid case, even in Struts 2.5.x you are not allowed to access non-public methods, you can only switch on/off access to static methods.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I prefer to warn i.e. a LOG.warn statement - it warns user about a misuse in underlying app or about an attack try on it.",
                        "body": "I prefer to warn i.e. a `LOG.warn` statement - it warns user about a misuse in underlying app or about an attack try on it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Let's make it simple. :)\n@lukaszlenart\n\nRemove log at this line\nChange log level to warn\nLeave as it is now\n\nChoose one.",
                        "body": "Let's make it simple. :)\r\n\r\n@lukaszlenart \r\n\r\n1. Remove log at this line\r\n2. Change log level to `warn`\r\n3. Leave as it is now\r\n\r\nChoose one.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": ":)",
                        "body": "2. :)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 111,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 111,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "aleksandr-m",
            "coveralls",
            "lukaszlenart",
            "yasserzamani",
            "JCgH4164838Gh792C124B5"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Move public member check to be the first performed\nRemove final-s from methods to allow overriding\nSplit check for statics into two separate methods"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2127,
        "title": {
            "body": "Add HelixEventHandlingUtil and use that util for cloud event - Add API",
            "bodyHTML": "Add HelixEventHandlingUtil and use that util for cloud event - Add API"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5ERUSK",
                "body": "This change is ready to be merged. Approved by @qqu0127\r\n\r\nFinal commit message:\r\n**Add HelixEventHandlingUtil and use that util for cloud event - API Only**\r\nPreviously helix event handling depends on batch enable/disable instance. We would like to move away the dependence on generic batch enable/disable instance and use a dedicated Util only for event handling use case. This change adds API signature for util functions/\r\n",
                "bodyText": "This change is ready to be merged. Approved by @qqu0127\nFinal commit message:\nAdd HelixEventHandlingUtil and use that util for cloud event - API Only\nPreviously helix event handling depends on batch enable/disable instance. We would like to move away the dependence on generic batch enable/disable instance and use a dedicated Util only for event handling use case. This change adds API signature for util functions/",
                "createdAt": "2022-06-02T22:05:38Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 17,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4h1JrE",
                "comments": [
                    {
                        "bodyText": "Is it class meant to be under org.apache.helix.cloud.event.helix?",
                        "body": "Is it class meant to be under `org.apache.helix.cloud.event.helix`?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 6,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. Updated",
                        "body": "TFTR. Updated",
                        "startLine": null,
                        "line": null,
                        "originalLine": 6,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 6,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/HelixEventHandlingUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4h1KZV",
                "comments": [
                    {
                        "bodyText": "Open for discussion. I think our intention is to hide away these APIs from users, maybe we can restrict the access to package-only?\nMaking a note on our \"return false\" or \"throw exception\" discussion when the action is failed\nShould we use the timestamp when the instance is actually enabled/disabled instead of when we initiate this move?",
                        "body": "1. Open for discussion. I think our intention is to hide away these APIs from users, maybe we can restrict the access to package-only?\r\n2. Making a note on our \"return false\" or \"throw exception\" discussion when the action is failed\r\n3. Should we use the timestamp when the instance is actually enabled/disabled instead of when we initiate this move?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 8,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Updated.",
                        "body": "Updated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 8,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 8,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/HelixEventHandlingUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4h1L6f",
                "comments": [
                    {
                        "bodyText": "I understand why you name it like that - so it's more clear that this check is \"for cloud event\". But it is a bit counter intuitive because we return true for disabled, and return false for enabled. I'm thinking maybe we could still name it \"enableInstance\", \"isInstanceEnabled\", etc. But stress that these methods are for use cases under the cloud event context only in the method java doc, and should not be used for other purposes. What do you think?",
                        "body": "I understand why you name it like that - so it's more clear that this check is \"for cloud event\". But it is a bit counter intuitive because we return true for disabled, and return false for enabled. I'm thinking maybe we could still name it \"enableInstance\", \"isInstanceEnabled\", etc. But stress that these methods are for use cases under the cloud event context only in the method java doc, and should not be used for other purposes. What do you think?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 13,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Based on our offline discussion, let's keep the current name..",
                        "body": "Based on our offline discussion, let's keep the current name..",
                        "startLine": null,
                        "line": null,
                        "originalLine": 13,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 13,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/HelixEventHandlingUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4h1MIT",
                "comments": [
                    {
                        "bodyText": "Is this timestamp for cloud event disable or for the general disable?",
                        "body": "Is this timestamp for cloud event disable or for the general disable?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 18,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Is intend to be the timestamp for cloud event. I updated the signature to take a message. It will be less ambiguous.",
                        "body": "Is intend to be the timestamp for cloud event. I updated the signature to take a message. It will be less ambiguous. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 18,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 18,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/HelixEventHandlingUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4h3RHo",
                "comments": [
                    {
                        "bodyText": "Let's add TODO for this and below methods.",
                        "body": "Let's add TODO for this and below methods.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 41,
                        "originalStartLine": 38
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 41,
                "originalStartLine": 38,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/HelixEventHandlingUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4h3Ryu",
                "comments": [
                    {
                        "bodyText": "nit: enabled or isEnabled would be better",
                        "body": "nit: enabled or isEnabled would be better ",
                        "startLine": null,
                        "line": 34,
                        "originalLine": 34,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This function will enable or disable an instance. would isEnable be better to indicate the operation type? I feel like \"enabled\" is used to describe the state if an instance, not the operation type.",
                        "body": "This function will enable or disable an instance. would `isEnable` be better to indicate the operation type? I feel like \"enabled\" is used to describe the state if an instance, not the operation type. ",
                        "startLine": null,
                        "line": 34,
                        "originalLine": 34,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'm fine either way. Feel free to resolve this.",
                        "body": "I'm fine either way. Feel free to resolve this.",
                        "startLine": null,
                        "line": 34,
                        "originalLine": 34,
                        "originalStartLine": null
                    }
                ],
                "line": 34,
                "startLine": 34,
                "originalLine": 34,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/HelixEventHandlingUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4h3Sg_",
                "comments": [
                    {
                        "bodyText": "With current implementation of IsInstanceDisabledForCloudEvent, it's always returning true, and we won't exit maintenance mode at all. Is this an issue?",
                        "body": "With current implementation of `IsInstanceDisabledForCloudEvent`, it's always returning true, and we won't exit maintenance mode at all. Is this an issue?",
                        "startLine": 93,
                        "line": 95,
                        "originalLine": 95,
                        "originalStartLine": 93
                    },
                    {
                        "bodyText": "This PR only adds a API signature. As cloud event handling feature is still under development, it is ok for this change.",
                        "body": "This PR only adds a API signature. As cloud event handling feature is still under development, it is ok for this change.",
                        "startLine": 93,
                        "line": 95,
                        "originalLine": 95,
                        "originalStartLine": 93
                    }
                ],
                "line": 95,
                "startLine": 93,
                "originalLine": 95,
                "originalStartLine": 93,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/cloud/event/helix/DefaultCloudEventCallbackImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "xyuanlu",
            "qqu0127",
            "mgao0",
            "zhangmeng916"
        ],
        "tdv": 40.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n#2133\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nPreviously helix event handling depends on batch enable/disable instance. We would like to move away the dependence on generic batch enable/disable instance and use a dedicated Util only for event handling use case.\nTests\n\n The following tests are written for this issue:\n\nThis change only adds PAI signature. Will add test in following PR for API impl.\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2597,
        "title": {
            "body": "Stabilize TestCardDealingAdjustmentAlgorithmV2 -  sequence all tests",
            "bodyHTML": "Stabilize TestCardDealingAdjustmentAlgorithmV2 -  sequence all tests"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5kq8gO",
                "body": "This PR is ready to be merged. Approved by @GrantPSpencer  and @MarkGaox // Thanks!\r\nCommit message: \r\nStabilize TestCardDealingAdjustmentAlgorithmV2 - sequence all tests",
                "bodyText": "This PR is ready to be merged. Approved by @GrantPSpencer  and @MarkGaox // Thanks!\nCommit message:\nStabilize TestCardDealingAdjustmentAlgorithmV2 - sequence all tests",
                "createdAt": "2023-08-22T21:52:50Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4xla-f",
                "comments": [
                    {
                        "bodyText": "Nit: we could use TestHelper to get method name for print statements",
                        "body": "Nit: we could use TestHelper to get method name for print statements",
                        "startLine": null,
                        "line": 196,
                        "originalLine": 196,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the suggestion. I think normally we just use the plan text test func name to reduce string append.",
                        "body": "Thanks for the suggestion. I think normally we just use the plan text test func name to reduce string append. ",
                        "startLine": null,
                        "line": 196,
                        "originalLine": 196,
                        "originalStartLine": null
                    }
                ],
                "line": 196,
                "startLine": 196,
                "originalLine": 196,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/controller/strategy/crushMapping/TestCardDealingAdjustmentAlgorithmV2.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "MarkGaox",
            "GrantPSpencer"
        ],
        "tdv": 120.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n#2227\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThere is a static object created by each tests in the test class. Some test changes this object. sequence all tests to Stabilize.\nThe test falls more often at metaclient branch.\nTests\n\n The following tests are written for this issue:\n\nNA\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3996,
        "title": {
            "body": "Add retry and logging to CloseScannerIT",
            "bodyHTML": "Add retry and logging to CloseScannerIT"
        },
        "comments": [],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM41yppW",
                "comments": [
                    {
                        "bodyText": "You can probably just return an integer here and make this method just return the total size. There doesn't seem to be much reason to return the actual scans as you just need the count.",
                        "body": "You can probably just return an integer here and make this method just return the total size. There doesn't seem to be much reason to return the actual scans as you just need the count. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 83,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I was returning the scans so that they could be logged in the error message when the wait condition is not met. I can get rid of that and return just the count if you think that would be better.",
                        "body": "I was returning the scans so that they could be logged in the error message when the wait condition is not met. I can get rid of that and return just the count if you think that would be better.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 83,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Well my point was that it's not really an error so I don't think it needs to be logged in that level of detail, it's expected since it's closed async so a count seems fine at the debug level since it's expected unless someone else disagrees",
                        "body": "Well my point was that it's not really an error so I don't think it needs to be logged in that level of detail, it's expected since it's closed async so a count seems fine at the debug level since it's expected unless someone else disagrees",
                        "startLine": null,
                        "line": null,
                        "originalLine": 83,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Gotcha. Makes sense. I addressed your comments in 7a87d5b",
                        "body": "Gotcha. Makes sense. I addressed your comments in 7a87d5b",
                        "startLine": null,
                        "line": null,
                        "originalLine": 83,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 83,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/CloseScannerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM41yprJ",
                "comments": [
                    {
                        "bodyText": "This should likely just be a debug message or info because this is expected as the scanners are closed async. If the helper method is updated to just return the count (as I mention in my other comment) then you can just log the count here as the actual scans found don't really matter.",
                        "body": "This should likely just be a debug message or info because this is expected as the scanners are closed async. If the helper method is updated to just return the count (as I mention in my other comment) then you can just log the count here as the actual scans found don't really matter.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 76,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 76,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/CloseScannerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM41ypvM",
                "comments": [
                    {
                        "bodyText": "I would change this to check for 0 as with the wait implemented and retry we should always eventually be at 0.",
                        "body": "I would change this to check for 0 as with the wait implemented and retry we should always eventually be at 0.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 73,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 73,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/CloseScannerIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "DomGarguilo",
            "cshannon"
        ],
        "tdv": 5.0,
        "description": {
            "bodyText": "This PR adds a retry to the condition we are testing for once all scanners are closed. I also added logs when the condition does not pass.\nI am not sure why the condition in the test is checking that the number of scans is less than 3. If anyone has insight on this maybe we can create a variable name for this number or a comment. I tried changing the condition to check that there are 0 scans and still could not get it to fail locally.\nThis IT has failed twice recently:\n\nhttps://ci-builds.apache.org/job/Accumulo/job/main/org.apache.accumulo$accumulo-test/611/testReport/junit/org.apache.accumulo.test/CloseScannerIT/testManyScans/\nhttps://ci-builds.apache.org/job/Accumulo/job/main/org.apache.accumulo$accumulo-test/605/testReport/junit/org.apache.accumulo.test/CloseScannerIT/testManyScans/\n\nError Message\nexpected: <true> but was: <false>\nStacktrace\norg.opentest4j.AssertionFailedError: expected: <true> but was: <false>\n\tat org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n\tat org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n\tat org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)\n\tat org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)\n\tat org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)\n\tat org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:180)\n\tat org.apache.accumulo.test.CloseScannerIT.testManyScans(CloseScannerIT.java:70)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.api.AssertTimeoutPreemptively.lambda$submitTask$3(AssertTimeoutPreemptively.java:95)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:829)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2112,
        "title": {
            "body": "Improve LocalityGroupUtil.java",
            "bodyHTML": "Improve LocalityGroupUtil.java"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDg0MzQwNTc1OA==",
                "body": "GitHub Actions seems to be having issues right now. I checked the build manually and it was fine.",
                "bodyText": "GitHub Actions seems to be having issues right now. I checked the build manually and it was fine.",
                "createdAt": "2021-05-18T17:58:28Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyMjI1NTAxOnYy",
                "comments": [
                    {
                        "bodyText": "Is it possible to have null keys in the first place? If not, that check is probably redundant, and we could just stream the values. Something like localityGroupCF.values().stream().forEach(nonDefaultFamilies::addAll);\nIf it is possible to have null keys, then your current code is probably fine.",
                        "body": "Is it possible to have null keys in the first place? If not, that check is probably redundant, and we could just stream the values. Something like `localityGroupCF.values().stream().forEach(nonDefaultFamilies::addAll);`\r\n\r\nIf it is possible to have null keys, then your current code is probably fine.",
                        "startLine": 380,
                        "line": 384,
                        "originalLine": 384,
                        "originalStartLine": 380
                    },
                    {
                        "bodyText": "Looking at the code that calls this, it looks like the key can be null.\n\n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/file/rfile/PrintInfo.java\n    \n    \n         Line 260\n      in\n      0781550\n    \n  \n  \n    \n\n        \n          \n           LocalityGroupUtil.seek(dataIter, new Range(), lgName, localityGroupCF); \n        \n    \n  \n\n\nIt pulls lgname from the Map and then passes it in with the map. Based on the check before the loop, if (lgName == null) there will be at least one key that is definitely null.",
                        "body": "Looking at the code that calls this, it looks like the key can be null. \r\nhttps://github.com/apache/accumulo/blob/0781550076f04d12716650fd64881d8b9d041afa/core/src/main/java/org/apache/accumulo/core/file/rfile/PrintInfo.java#L260\r\n\r\nIt pulls `lgname` from the Map and then passes it in with the map. Based on the check before the loop, `if (lgName == null)` there will be at least one key that is definitely null.",
                        "startLine": 380,
                        "line": 384,
                        "originalLine": 384,
                        "originalStartLine": 380
                    },
                    {
                        "bodyText": "Thanks for the analysis, @milleruntime . HashMap does support a single null key and multiple null values, but that doesn't necessarily mean it's a good idea. However, if there's any improvements needed to avoid a null key, it's unrelated to this PR.",
                        "body": "Thanks for the analysis, @milleruntime . HashMap does support a single null key and multiple null values, but that doesn't necessarily mean it's a good idea. However, if there's any improvements needed to avoid a null key, it's unrelated to this PR.",
                        "startLine": 380,
                        "line": 384,
                        "originalLine": 384,
                        "originalStartLine": 380
                    }
                ],
                "line": 384,
                "startLine": 380,
                "originalLine": 384,
                "originalStartLine": 380,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/util/LocalityGroupUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "slackwinner",
            "ctubbsii",
            "milleruntime"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "To address issue #2041, this commit contains minor changes to utilize Map.forEach() method instead of Map.entrySet()."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2641,
        "title": {
            "body": "CUSTOM_INSTANCE_CHECK and(or) CUSTOM_PARTITION_CHECK optional for stoppable APIs",
            "bodyHTML": "CUSTOM_INSTANCE_CHECK and(or) CUSTOM_PARTITION_CHECK optional for stoppable APIs"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5oX457",
                "body": "> one suggestion if possible - there is code formatting related changes and actual logic changes. my preference is to separate out 2, so we can review the core logic change properly. just a suggestion. LGTM overall.\r\n\r\n@desaikomal, Will take note of this and make sure to avoid formatting changes in the next PR. Thank you for the review.",
                "bodyText": "one suggestion if possible - there is code formatting related changes and actual logic changes. my preference is to separate out 2, so we can review the core logic change properly. just a suggestion. LGTM overall.\n\n@desaikomal, Will take note of this and make sure to avoid formatting changes in the next PR. Thank you for the review.",
                "createdAt": "2023-10-06T16:43:04Z",
                "author": "zpinto"
            },
            {
                "id": "IC_kwDOAPIHxc5oYXm_",
                "body": "This PR is ready to be merged.\r\n\r\nFinal Commit Message:\r\nAllow for callers to helix-rest stoppable APIs to skip running CUSTOM_INSTANCE_CHECK and(or) CUSTOM_PARTITION_CHECK, as they may not have the need to implement additional custom checks.",
                "bodyText": "This PR is ready to be merged.\nFinal Commit Message:\nAllow for callers to helix-rest stoppable APIs to skip running CUSTOM_INSTANCE_CHECK and(or) CUSTOM_PARTITION_CHECK, as they may not have the need to implement additional custom checks.",
                "createdAt": "2023-10-06T18:19:29Z",
                "author": "zpinto"
            }
        ],
        "total_comments_count": 14,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4zU8j3",
                "comments": [
                    {
                        "bodyText": "can you please clarify why are we changing each method to pass wrapper where as the earlier implementation had just one implementation which converted HelixDataAccessor to HelixDataAccessorWrapper?",
                        "body": "can you please clarify why are we changing each method to pass wrapper where as the earlier implementation had just one implementation which converted HelixDataAccessor to HelixDataAccessorWrapper? ",
                        "startLine": null,
                        "line": 99,
                        "originalLine": 99,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This makes it possible to mock HelixDataAccessorWrapper in tests. If you create the object in the final constructor, you cannot mock it.",
                        "body": "This makes it possible to mock HelixDataAccessorWrapper in tests. If you create the object in the final constructor, you cannot mock it.",
                        "startLine": null,
                        "line": 99,
                        "originalLine": 99,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "this makes sense. thanks",
                        "body": "this makes sense. thanks",
                        "startLine": null,
                        "line": 99,
                        "originalLine": 99,
                        "originalStartLine": null
                    }
                ],
                "line": 99,
                "startLine": 99,
                "originalLine": 99,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4zVFBl",
                "comments": [
                    {
                        "bodyText": "wondering if want to have one generic -skipAllHealthCheck ?",
                        "body": "wondering if want to have one generic -skipAllHealthCheck ?",
                        "startLine": null,
                        "line": 156,
                        "originalLine": 156,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't think it makes since to support skipAllHealthChecks otherwise there would be no point to call the stoppable API.",
                        "body": "I don't think it makes since to support skipAllHealthChecks otherwise there would be no point to call the stoppable API.",
                        "startLine": null,
                        "line": 156,
                        "originalLine": 156,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "i thought we had many but looks like we only have 3 in total and 2 you are already allowing to specify",
                        "body": "i thought we had many but looks like we only have 3 in total and 2 you are already allowing to specify",
                        "startLine": null,
                        "line": 156,
                        "originalLine": 156,
                        "originalStartLine": null
                    }
                ],
                "line": 156,
                "startLine": 156,
                "originalLine": 156,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/InstancesAccessor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4zVOVQ",
                "comments": [
                    {
                        "bodyText": "Why add instances that are stoppable to the finalStoppableCheckByInstance list? Wouldn't this change stop filtering instances for the next check?",
                        "body": "Why add instances that are stoppable to the finalStoppableCheckByInstance list? Wouldn't this change stop filtering instances for the next check?",
                        "startLine": null,
                        "line": 563,
                        "originalLine": 563,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You can add all the stoppableChecks because isStoppable only checks for checks that are failed.\nThis does not affect if the instances are filtered out.\nThat logic remains the same here: https://github.com/apache/helix/pull/2641/files#diff-423574b747e8866eced6d0352a1a8ac244158359f4ecaefca3e0a57af68203c6R567",
                        "body": "You can add all the stoppableChecks because isStoppable only checks for checks that are failed.\r\n\r\nThis does not affect if the instances are filtered out.\r\n\r\nThat logic remains the same here: https://github.com/apache/helix/pull/2641/files#diff-423574b747e8866eced6d0352a1a8ac244158359f4ecaefca3e0a57af68203c6R567",
                        "startLine": null,
                        "line": 563,
                        "originalLine": 563,
                        "originalStartLine": null
                    }
                ],
                "line": 563,
                "startLine": 563,
                "originalLine": 563,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4zX-gj",
                "comments": [
                    {
                        "bodyText": "Totally there are 3 categories, Helix and then instance check and partition-check. So we will allow them to skip either or both. Helix is non-skippable. is that correct?",
                        "body": "Totally there are 3 categories, Helix and then instance check and partition-check. So we will allow them to skip either or both. Helix is non-skippable. is that correct?",
                        "startLine": null,
                        "line": 85,
                        "originalLine": 85,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes, that is correct üòÑ",
                        "body": "Yes, that is correct üòÑ ",
                        "startLine": null,
                        "line": 85,
                        "originalLine": 85,
                        "originalStartLine": null
                    }
                ],
                "line": 85,
                "startLine": 85,
                "originalLine": 85,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4zX-3L",
                "comments": [
                    {
                        "bodyText": "or user didn't have any custom checks",
                        "body": "or user didn't have any custom checks",
                        "startLine": null,
                        "line": 499,
                        "originalLine": 499,
                        "originalStartLine": null
                    }
                ],
                "line": 499,
                "startLine": 499,
                "originalLine": 499,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/clusterMaintenanceService/MaintenanceManagementService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "zpinto",
            "xyuanlu",
            "MarkGaox",
            "desaikomal"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Allow for callers to helix-rest stoppable APIs to skip running CUSTOM_INSTANCE_CHECK and(or) CUSTOM_PARTITION_CHECK, as they may not have the need to implement additional custom checks.\nDescription\nCustomers are required to implement custom stoppable checks to use helix-rest stoppable APIs. Making these skippable removes that requirement.\nTests\n\n testGetInstanceStoppableCheckWhenCustomInstanceCheckAndCustomPartitionCheckDisabled\n\nVerifies none of the custom checks cause stoppable to be false\n\n\n testGetInstanceStoppableCheckWhenCustomPartitionCheckDisabled\n\nVerifies instance custom check causes stoppable to be false\n\n\n testGetInstanceStoppableCheckWhenCustomInstanceCheckDisabled\n\nVerifies partition custom check causes stoppable to be false\n\n\n Update TestPerInstanceAccessor and TestInstanceAccessor to make sure they can parse skipHealthCheckCategories\n\n‚ûú  helix git:(custom_stoppable_checks_optional) ‚úó mvn clean install -Dmaven.test.skip.exec=true && mvn test -o -Dtest=TestMaintenanceManagementService,TestInstancesAccessor,TestPerInstanceAccessor -pl=helix-rest\n\n...\n\n[INFO] Tests run: 37, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 127.184 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 37, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-rest ---\n[INFO] Loading execution data file /Users/zapinto/Documents/git/zpinto/helix/helix-rest/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 92 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  02:19 min\n[INFO] Finished at: 2023-10-04T18:59:33-07:00\n[INFO] ------------------------------------------------------------------------\n\nChanges that Break Backward Compatibility (Optional)\n\nChanges are backwards compatible\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2612,
        "title": {
            "body": "Minor cleanup of ThriftTransportPool",
            "bodyHTML": "Minor cleanup of ThriftTransportPool"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5BBC_4",
                "body": "This is the follow-up from the discussion in https://github.com/apache/accumulo/pull/2590#discussion_r835559945",
                "bodyText": "This is the follow-up from the discussion in #2590 (comment)",
                "createdAt": "2022-04-06T20:57:28Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5BF1jg",
                "body": "GH Actions test seems like it was interrupted. Not sure what's going on. Doesn't seem related to my code change... but possibly the result of the increased timeout. I'll rerun in GH Actions. If it doesn't work still, I'll do a full IT build and try to track down which tests are sensitive to the idle transport timeout default change.",
                "bodyText": "GH Actions test seems like it was interrupted. Not sure what's going on. Doesn't seem related to my code change... but possibly the result of the increased timeout. I'll rerun in GH Actions. If it doesn't work still, I'll do a full IT build and try to track down which tests are sensitive to the idle transport timeout default change.",
                "createdAt": "2022-04-07T18:03:40Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5BTy0t",
                "body": "Okay, I fixed the issue with the test breaking. The problem was that the test timed out while waiting for the checker thread to terminate, which it wasn't going to do quickly, because I had the loop time based on the max age time. I changed it in f96d34e62c6bc8aba087af3c12df2d943c10cbc1 so that it loops more frequently, so it can more easily detect when shutdown has occurred and can exit, but it doesn't run the check every loop... it only runs the check at intervals half way to the max age, but no more frequently than 4 times a second, and no less frequently than once a minute.",
                "bodyText": "Okay, I fixed the issue with the test breaking. The problem was that the test timed out while waiting for the checker thread to terminate, which it wasn't going to do quickly, because I had the loop time based on the max age time. I changed it in f96d34e so that it loops more frequently, so it can more easily detect when shutdown has occurred and can exit, but it doesn't run the check every loop... it only runs the check at intervals half way to the max age, but no more frequently than 4 times a second, and no less frequently than once a minute.",
                "createdAt": "2022-04-11T23:55:28Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4gNlM-",
                "comments": [
                    {
                        "bodyText": "I think this is great. In fact, if we can make it configurable via a client property (ClientProperty.GENERAL_RPC_TIMEOUT ?), then we can likely close ACCUMULO-2069. I remember when I submitted that issue that I did some testing and the overhead of closing and recreating connections was significant.",
                        "body": "I think this is great. In fact, if we can make it configurable via a client property (ClientProperty.GENERAL_RPC_TIMEOUT ?), then we can likely close [ACCUMULO-2069](https://issues.apache.org/jira/browse/ACCUMULO-2069). I remember when I submitted that issue that I did some testing and the overhead of closing and recreating connections was significant.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1019,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I can definitely change this so it uses the normal Property.GENERAL_RPC_TIMEOUT. I didn't do it before because we have a default value of 2 minutes for our general RPC timeouts, and that seemed to be very far from the 3 second hard-coded value previously used. So, I went with a change that left the current value in place.\nHowever, I think it's probably okay to increase it to 2 minutes by default, after reading the comment on ACCUMULO-2069 (comment). I think the value of 3 seconds was probably used so clients were more responsive in the absence of a close method. However, that is no longer necessary, since there is a proper close method on clients now, and all the transports get closed when the client is closed. So, it's okay that they are left around longer.",
                        "body": "I can definitely change this so it uses the normal `Property.GENERAL_RPC_TIMEOUT`. I didn't do it before because we have a default value of 2 minutes for our general RPC timeouts, and that seemed to be very far from the 3 second hard-coded value previously used. So, I went with a change that left the current value in place.\r\n\r\nHowever, I think it's probably okay to increase it to 2 minutes by default, after reading the comment on [ACCUMULO-2069 (comment)](https://issues.apache.org/jira/browse/ACCUMULO-2069?focusedCommentId=13861091&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13861091). I think the value of 3 seconds was probably used so clients were more responsive in the absence of a close method. However, that is no longer necessary, since there is a proper close method on clients now, and all the transports get closed when the client is closed. So, it's okay that they are left around longer.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1019,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 410bd68",
                        "body": "Addressed in 410bd68ce668287f4a5f18d313318bdf899e5927",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1019,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1019,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/ClientContext.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "dlmarion"
        ],
        "tdv": -28.0,
        "description": {
            "bodyText": "Remove unnecessary memoization of the checker thread\nInline the Closer Runnable type and make it a lambda\nUse primitive long for ERROR_THRESHOLD\nReorder all the class members before all the inner-classes, and place\nthe fields above the methods to make it easier to navigate the class\nMake constructor private and use a static method to construct and\nstart the checker thread after construction, then return the instance\nMake ThriftTransportPool immutable by passing in the maximum age of\nidle transports, rather than setting it after it is constructed; this\nalso changes the default to the general purpose RPC timeout config\nvalue for all servers, rather than just the manager; clients continue\nto use the hard-coded 3 seconds, just as before this change"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2374,
        "title": {
            "body": "Cache the credentials because they are expensive to fetch",
            "bodyHTML": "Cache the credentials because they are expensive to fetch"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM46uvbt",
                "body": "I've moved the initialization to the constructors!",
                "bodyText": "I've moved the initialization to the constructors!",
                "createdAt": "2021-12-03T08:59:40Z",
                "author": "markjens"
            },
            {
                "id": "IC_kwDOACaFSM46vZTe",
                "body": "@markjens your changes look good. Can you run \"mvn clean verify -DskipTests -Dspotbugs.skip\" and push another update? There are some automated QA checks that are failing. ",
                "bodyText": "@markjens your changes look good. Can you run \"mvn clean verify -DskipTests -Dspotbugs.skip\" and push another update? There are some automated QA checks that are failing.",
                "createdAt": "2021-12-03T13:05:33Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM46yIYt",
                "body": "Running an a large instance with 16 cores / 32 threads, 128G memory and using SSDs I see some improvement, but not as drastic as reported by others. \r\n\r\nThere seems to be two modes that occur with some runs being ~90 seconds faster on my instance. In 10 runs on the current main branch, the faster runs occurred twice with an average run time of 162.7 seconds, and eight runs with an average of 252.8 seconds.\r\n\r\nUsing this PR and 20 runs, the faster runs occurred five times with an average of 83.3 seconds (5.7 seconds faster). The slower runs occurred 15 times with an average of 240.3 seconds (12.5 seconds faster)\r\n\r\n# Run time details\r\n<details>\r\n  <summary>Click to expand!</summary>\r\n  \r\n  ## Run details main branch vs PR with cached credentials\r\n\r\n![run_times](https://user-images.githubusercontent.com/7047700/144745401-40a29820-1987-455e-9855-df70a8e28499.png)\r\n\r\n| run | main | cached |\r\n|-----|---------|-----|\r\n| 1 | 256.651 | 242.218 |\r\n| 2 | 164.723 | 155.704 |\r\n| 3 | 250.717 | 241.091 | \r\n| 4 | 250.772 | 239.305 |\r\n| 5 | 160.739 | 245.015 |\r\n| 6 | 253.339 | 155.78 |\r\n| 7 | 253.828 | 238.795 |\r\n| 8 | 254.756 | 241.777 |\r\n| 9 | 250.276 | 236.324 |\r\n| 10 | 251.828 | 160.737 |\r\n| 11 | | 241.228 |\r\n| 12 | | 238.235 |\r\n| 13 | | 160.254 |\r\n| 14 | | 239.816 |\r\n| 15 | | 242.269 |\r\n| 16 | | 152.27 |\r\n| 17 | | 239.339 |\r\n| 18 | | 240.57  |\r\n| 19 | | 239.227 |\r\n| 20 | | 239.218 |\r\n\r\n\r\n</details>\r\n\r\n\r\n",
                "bodyText": "Running an a large instance with 16 cores / 32 threads, 128G memory and using SSDs I see some improvement, but not as drastic as reported by others.\nThere seems to be two modes that occur with some runs being ~90 seconds faster on my instance. In 10 runs on the current main branch, the faster runs occurred twice with an average run time of 162.7 seconds, and eight runs with an average of 252.8 seconds.\nUsing this PR and 20 runs, the faster runs occurred five times with an average of 83.3 seconds (5.7 seconds faster). The slower runs occurred 15 times with an average of 240.3 seconds (12.5 seconds faster)\nRun time details\n\n  Click to expand!\nRun details main branch vs PR with cached credentials\n\n\n\n\nrun\nmain\ncached\n\n\n\n\n1\n256.651\n242.218\n\n\n2\n164.723\n155.704\n\n\n3\n250.717\n241.091\n\n\n4\n250.772\n239.305\n\n\n5\n160.739\n245.015\n\n\n6\n253.339\n155.78\n\n\n7\n253.828\n238.795\n\n\n8\n254.756\n241.777\n\n\n9\n250.276\n236.324\n\n\n10\n251.828\n160.737\n\n\n11\n\n241.228\n\n\n12\n\n238.235\n\n\n13\n\n160.254\n\n\n14\n\n239.816\n\n\n15\n\n242.269\n\n\n16\n\n152.27\n\n\n17\n\n239.339\n\n\n18\n\n240.57\n\n\n19\n\n239.227\n\n\n20\n\n239.218",
                "createdAt": "2021-12-05T12:19:09Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM47DGle",
                "body": "Thanks for the PR @markjens . I see you aren't listed on our \"people\" page, which acknowledges our contributors. If you wish to be added as a contributor to https://accumulo.apache.org/people/ , please open a pull request to add yourself at https://github.com/apache/accumulo-website/edit/main/pages/people.md and leave a reference to `apache/accumulo#2374` in your commit log.\r\n\r\nIf you intend to be a regular contributor to Accumulo projects, please consider subscribing to our developer mailing list (https://accumulo.apache.org/contact-us/) and introducing yourself. :smiley_cat:",
                "bodyText": "Thanks for the PR @markjens . I see you aren't listed on our \"people\" page, which acknowledges our contributors. If you wish to be added as a contributor to https://accumulo.apache.org/people/ , please open a pull request to add yourself at https://github.com/apache/accumulo-website/edit/main/pages/people.md and leave a reference to apache/accumulo#2374 in your commit log.\nIf you intend to be a regular contributor to Accumulo projects, please consider subscribing to our developer mailing list (https://accumulo.apache.org/contact-us/) and introducing yourself. üò∫",
                "createdAt": "2021-12-10T07:04:24Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM47DKT6",
                "body": "Thanks for improving and merging the PR, @ctubbsii !\r\n\r\nI may add myself to people.md with my next contribution! :-)\r\nI am already subscribed to dev@. Same Mark Jens who advocates for ARM64 architecture! :-)",
                "bodyText": "Thanks for improving and merging the PR, @ctubbsii !\nI may add myself to people.md with my next contribution! :-)\nI am already subscribed to dev@. Same Mark Jens who advocates for ARM64 architecture! :-)",
                "createdAt": "2021-12-10T07:33:52Z",
                "author": "markjens"
            },
            {
                "id": "IC_kwDOACaFSM47DTPE",
                "body": "> I am already subscribed to dev@.\r\n\r\nYeah, I know... it was mostly copy/paste. I should have tailored the message more. :smiley_cat:",
                "bodyText": "I am already subscribed to dev@.\n\nYeah, I know... it was mostly copy/paste. I should have tailored the message more. üò∫",
                "createdAt": "2021-12-10T08:11:41Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4c_JnQ",
                "comments": [
                    {
                        "bodyText": "This probably needs sync, volatile, or an AtomicReference to be thread safe.\nThis comment may be moot because of the other comment @ctubbsii  made about moving this to the constructor which would make it thread safe.",
                        "body": "This probably needs sync, volatile, or an AtomicReference to be thread safe.\r\n\r\nThis comment may be moot because of the other comment @ctubbsii  made about moving this to the constructor which would make it thread safe.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 181,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 181,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/ServerInfo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4dLLdN",
                "comments": [
                    {
                        "bodyText": "This loadCredentials method should be inline'd into the constructor, and use the instanceId and siteConfig variables available in those constructors, to avoid calling instance methods on a half-constructed object. Since that change is trivial, I can go ahead and do it and merge this in.",
                        "body": "This `loadCredentials` method should be inline'd into the constructor, and use the instanceId and siteConfig variables available in those constructors, to avoid calling instance methods on a half-constructed object. Since that change is trivial, I can go ahead and do it and merge this in.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 184,
                        "originalStartLine": 182
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 184,
                "originalStartLine": 182,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/ServerInfo.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "markjens",
            "milleruntime",
            "EdColeman",
            "ctubbsii",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "See the discussion and the thread dumps at https://lists.apache.org/thread/rwt4nomkmhty1dy4tsp620sf49o3qnbx\nWithout this improvement  org.apache.accumulo.test.functional.ConcurrentDeleteTableIT takes 785.503 s on my machine, and I need to use -Dtimeout.factor=3 to pass.\nWith this improvement the test now passes in 127.771 s, i.e. almost 6 times faster!\n\"tablet migration-Worker-1\" #4380 daemon prio=5 os_prio=0 cpu=68425.44ms elapsed=75.42s tid=0x0000fffeac074800 nid=0x33077e runnable  [0x0000fffe8f3fd000]\n   java.lang.Thread.State: RUNNABLE\n        at sun.security.provider.SHA5.implCompressCheck(java.base@11.0.11/SHA5.java:232)\n        at sun.security.provider.SHA5.implCompress(java.base@11.0.11/SHA5.java:221)\n        at sun.security.provider.DigestBase.engineUpdate(java.base@11.0.11/DigestBase.java:124)\n        at java.security.MessageDigest$Delegate.engineUpdate(java.base@11.0.11/MessageDigest.java:623)\n        at java.security.MessageDigest.update(java.base@11.0.11/MessageDigest.java:345)\n        at org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(Sha2Crypt.java:421)\n        at org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(Sha2Crypt.java:585)\n        at org.apache.commons.codec.digest.Crypt.crypt(Crypt.java:78)\n        at org.apache.commons.codec.digest.Crypt.crypt(Crypt.java:167)\n        at org.apache.accumulo.server.security.SystemCredentials$SystemToken.hashInstanceConfigs(SystemCredentials.java:120)\n        at org.apache.accumulo.server.security.SystemCredentials$SystemToken.generate(SystemCredentials.java:125)\n        at org.apache.accumulo.server.security.SystemCredentials.get(SystemCredentials.java:66)\n        at org.apache.accumulo.server.ServerInfo.getCredentials(ServerInfo.java:179)\n        at org.apache.accumulo.server.ServerInfo.getPrincipal(ServerInfo.java:148)\n        at org.apache.accumulo.server.ServerInfo.getProperties(ServerInfo.java:169)\n        at org.apache.accumulo.core.clientImpl.ClientContext.getProperties(ClientContext.java:236)\n        at org.apache.accumulo.core.clientImpl.ClientContext.createScanner(ClientContext.java:635)\n        at org.apache.accumulo.core.metadata.schema.TabletsMetadata$Builder.buildNonRoot(TabletsMetadata.java:177)\n        at org.apache.accumulo.core.metadata.schema.TabletsMetadata$Builder.build(TabletsMetadata.java:125)\n        at org.apache.accumulo.core.metadata.schema.AmpleImpl.readTablet(AmpleImpl.java:46)\n        at org.apache.accumulo.core.metadata.schema.Ample.readTablet(Ample.java:141)\n        at org.apache.accumulo.tserver.tablet.Tablet.closeConsistencyCheck(Tablet.java:1379)\n        at org.apache.accumulo.tserver.tablet.Tablet.completeClose(Tablet.java:1331)\n        - locked <0x00000000f1585830> (a org.apache.accumulo.tserver.tablet.Tablet)\n        at org.apache.accumulo.tserver.tablet.Tablet.close(Tablet.java:1221)\n        at org.apache.accumulo.tserver.UnloadTabletHandler.run(UnloadTabletHandler.java:92)\n        at io.opentelemetry.context.Context.lambda$wrap$1(Context.java:207)\n        at io.opentelemetry.context.Context$$Lambda$209/0x000000010035c840.run(Unknown Source)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.11/ThreadPoolExecutor.java:1128)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@11.0.11/ThreadPoolExecutor.java:628)\n        at io.opentelemetry.context.Context.lambda$wrap$1(Context.java:207)\n        at io.opentelemetry.context.Context$$Lambda$209/0x000000010035c840.run(Unknown Source)\n        at java.lang.Thread.run(java.base@11.0.11/Thread.java:829)"
        }
    },
    {
        "repo": "opennlp",
        "pr_number": 502,
        "title": {
            "body": "OPENNLP-1468 Simplify test assertions in JUnit tests",
            "bodyHTML": "OPENNLP-1468 Simplify test assertions in JUnit tests"
        },
        "comments": [],
        "total_comments_count": 1,
        "review_threads": [
            {
                "id": "PRRT_kwDOACnPtM4qXLhe",
                "comments": [
                    {
                        "bodyText": "üòÑ that was definitely one way to make the test fail",
                        "body": ":smile: that was definitely one way to make the test fail",
                        "startLine": null,
                        "line": 66,
                        "originalLine": 66,
                        "originalStartLine": null
                    }
                ],
                "line": 66,
                "startLine": 66,
                "originalLine": 66,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "opennlp-tools/src/test/java/opennlp/tools/util/VersionTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "mawiesne",
            "kinow",
            "rzo1"
        ],
        "tdv": -50.0,
        "description": {
            "bodyText": "Thank you for contributing to Apache OpenNLP.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with OPENNLP-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically main)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn clean install at the root opennlp folder?\n Have you written or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file in opennlp folder?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found in opennlp folder?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check GitHub Actions for build issues and submit an update to your PR as soon as possible."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2588,
        "title": {
            "body": "Add API for Instance evacuation",
            "bodyHTML": "Add API for Instance evacuation"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5kH41u",
                "body": "This change has been approved by @junkaixue // Thanks!!\r\n\r\nCommit message: Add API for Instance evacuation",
                "bodyText": "This change has been approved by @junkaixue // Thanks!!\nCommit message: Add API for Instance evacuation",
                "createdAt": "2023-08-16T00:16:14Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 16,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4xRz4p",
                "comments": [
                    {
                        "bodyText": "Just curious, do you think this might create confusion with Instance config HELIX_ENABLED.\nI remember you mentioned SWAPED_IN, this transitioning to instanceConfig.setInstanceEnabled also looks good.\nEnable is quite  common term and maybe this way, from the name itself its clear that which state lifecycle we are talking about.",
                        "body": "Just curious, do you think this might create confusion with Instance config HELIX_ENABLED. \r\nI remember you mentioned SWAPED_IN, this transitioning to `instanceConfig.setInstanceEnabled` also looks good.   \r\n\r\n`Enable` is quite  common term and maybe this way, from the name itself its clear that which state lifecycle we are talking about.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 16,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This field is an Union of all operation. Including enable and disable. We will also update  HELIX_ENABLED  when operation is set to enable/disable.\nWe decide not to introduce life cycle as it adds more complexity.",
                        "body": "This field is an Union of all operation. Including enable and disable. We will also update  `HELIX_ENABLED ` when operation is set to enable/disable.\r\nWe decide not to introduce life cycle as it adds more complexity. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 16,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sounds good, thanks @xyuanlu!",
                        "body": "Sounds good, thanks @xyuanlu!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 16,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 16,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-common/src/main/java/org/apache/helix/constants/InstanceConstants.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4xR0AE",
                "comments": [
                    {
                        "bodyText": "nit: extra lines.",
                        "body": "nit: extra lines.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 382,
                        "originalStartLine": 381
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 382,
                "originalStartLine": 381,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4xR7Z0",
                "comments": [
                    {
                        "bodyText": "Suggest to add a case when the instanceOperation QueryParam is null. E.x, \"clusters/{}/instances/{}?command=setInstanceOperation\"",
                        "body": "Suggest to add a case when the `instanceOperation` QueryParam is null. E.x, \"clusters/{}/instances/{}?command=setInstanceOperation\"",
                        "startLine": null,
                        "line": null,
                        "originalLine": 514,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 514,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4xR7ag",
                "comments": [
                    {
                        "bodyText": "nit: empty line.",
                        "body": "nit: empty line.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 332,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 332,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/mock/MockHelixAdmin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4xR7bA",
                "comments": [
                    {
                        "bodyText": "nit: looks like there is an extra space at the front.",
                        "body": "nit: looks like there is an extra space at the front.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 390,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 390,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4xSLRl",
                "comments": [
                    {
                        "bodyText": "Why we need both enable/disable... Suggest just have disable.",
                        "body": "Why we need both enable/disable... Suggest just have disable.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 17,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. I suppose user can enable and disabled instance?",
                        "body": "TFTR. I suppose user can `enable` and disabled instance?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 17,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Had an offline discussion.  We will keep enable and disable for backward compatibility.  When user set HELIX_ENABLED from false to true, we will set OPERATION to be enabled if the field is non empty and vice versa.",
                        "body": "Had an offline discussion.  We will keep `enable` and `disable` for backward compatibility.  When user set HELIX_ENABLED from false to true, we will set OPERATION to be `enabled` if the field is non empty and vice versa. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 17,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 17,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-common/src/main/java/org/apache/helix/constants/InstanceConstants.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4xSLUf",
                "comments": [
                    {
                        "bodyText": "use InstanceConfigProperty.INSTANCE_OPERATION.name().\nNot use toString anymore. It is not consistent with line 341",
                        "body": "use InstanceConfigProperty.INSTANCE_OPERATION.name(). \r\n\r\nNot use toString anymore. It is not consistent with line 341",
                        "startLine": null,
                        "line": null,
                        "originalLine": 336,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 336,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/model/InstanceConfig.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4xSLfM",
                "comments": [
                    {
                        "bodyText": "nit: This is not used anywhere. If this function cannot be verified , why not just print a log instead of having this large code.",
                        "body": "nit: This is not used anywhere. If this function cannot be verified , why not just print a log instead of having this large code.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 329,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 329,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/mock/MockHelixAdmin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4xSLhO",
                "comments": [
                    {
                        "bodyText": "Pls remove them if they are not be part of official code.",
                        "body": "Pls remove them if they are not be part of official code.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 501,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 501,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "himanshukandwal",
            "junkaixue",
            "MarkGaox"
        ],
        "tdv": 51.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n#2589\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nThis change adds API only for to-be-removed host.\n\nTests\n\n\n The following tests are written for this issue:\nEdit TestPerInstanceAccessor.updateInstance\n\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2727,
        "title": {
            "body": "Simplify config handling for compaction tests",
            "bodyHTML": "Simplify config handling for compaction tests"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4hk5Kc",
                "comments": [
                    {
                        "bodyText": "if aconf is no longer referenced outside of the constructor, then could remove the class variable and only use it locally. I'm not sure if this is the case.",
                        "body": "if `aconf` is no longer referenced outside of the constructor, then could remove the class variable and only use it locally. I'm not sure if this is the case.",
                        "startLine": null,
                        "line": 131,
                        "originalLine": 131,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It's used in a getter I added, to ensure that it overrides super.getConfiguration() if it is passed in explicitly.\nI would like to remove it entirely, so it's not passed into the constructor at all, instead relying on overriding it in getter in a test subclass, but it is needed in the constructor, so it needs to be passed in. The places we use it in the constructor could call this.getConfiguration(), but they'd have to be lazily-loaded with a Supplier, like we've done in ServerContext and elsewhere, so that the these objects that read the configuration are instantiated after the server itself is fully constructed. Then, we can get rid of the second constructor. But, that seemed like a lot of effort for now.",
                        "body": "It's used in a getter I added, to ensure that it overrides super.getConfiguration() if it is passed in explicitly.\r\nI would like to remove it entirely, so it's not passed into the constructor at all, instead relying on overriding it in getter in a test subclass, but it is needed in the constructor, so it needs to be passed in. The places we use it in the constructor could call `this.getConfiguration()`, but they'd have to be lazily-loaded with a Supplier, like we've done in ServerContext and elsewhere, so that the these objects that read the configuration are instantiated after the server itself is fully constructed. Then, we can get rid of the second constructor. But, that seemed like a lot of effort for now.",
                        "startLine": null,
                        "line": 131,
                        "originalLine": 131,
                        "originalStartLine": null
                    }
                ],
                "line": 131,
                "startLine": 131,
                "originalLine": 131,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/compaction-coordinator/src/main/java/org/apache/accumulo/coordinator/CompactionCoordinator.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4hk5rR",
                "comments": [
                    {
                        "bodyText": "same comment about aconf variable applies here",
                        "body": "same comment about `aconf` variable applies here",
                        "startLine": null,
                        "line": 165,
                        "originalLine": 165,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "For completeness, same reply üò∫",
                        "body": "For completeness, same reply :smiley_cat: ",
                        "startLine": null,
                        "line": 165,
                        "originalLine": 165,
                        "originalStartLine": null
                    }
                ],
                "line": 165,
                "startLine": 165,
                "originalLine": 165,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/compactor/src/main/java/org/apache/accumulo/compactor/Compactor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "dlmarion"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "In pom.xml files:\n\nensure unit tests configured to run without reusing forks explicitly\noverride any other includes\n\nIn compaction tests:\n\navoid use of mock object for AccumuloConfiguration when\nDefaultConfiguration or ConfigurationCopy will suffice\nuse static import for EasyMock\nRemove unnecessary parameter in test class for AccumuloConfiguration\n(retrieve from mocked context object instead)\nuse var in a few places where it made sense\n\nAvoid UnsupportedOperationException in AccumuloConfiguration:\n\nMake AccumuloConfiguration.isPropertySet abstract and add missing\nimplementation\nRemove unnecessary anonymous inner class subclass instances of\nAccumuloConfiguration when ConfigurationCopy initialized with\nDefaultConfiguration would suffice\n\nSmall Compaction constructor improvements:\n\nRemove redundant constructor code in Compactor and\nCompactionCoordinator and ensure code uses the provided\nAccumuloConfiguration from tests for all tasks"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3297,
        "title": {
            "body": "fix metrics tags, tserver hostname, remove tags from thrift metrics",
            "bodyHTML": "fix metrics tags, tserver hostname, remove tags from thrift metrics"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5Z7mOI",
                "body": "What was the reason for removing the thread tag?",
                "bodyText": "What was the reason for removing the thread tag?",
                "createdAt": "2023-04-14T15:28:40Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5Z71yA",
                "body": "Over-all it seemed that it was not providing information that was not already there - its a thrift metric, the process is identified so repeating that it was in the client server handler could be inferred.  From the samples seen, the tag was appearing as either `thread=Thrift Client Server` or `Manager Client Service Handler`\r\n\r\nIf it could take on different values, it also seemed unlikely that it would be something that end-users would need to trend / watch by specific thread.  Monitoring thift times could provide a view into the health of the processes - knowing it was a specific thread seemed like something that would be needed by developers that were profiling specific code sections and metrics may not be the best way to determine that specific thrift thread timing. \r\n\r\nEach different tag value increase the number of time-series that need to be tracked. It did not seem necessary to potentially increase the number of time-series than need to be tracked (assuming it could take different values) - but I can restore it if there is a use-case that I am unaware of.\r\n",
                "bodyText": "Over-all it seemed that it was not providing information that was not already there - its a thrift metric, the process is identified so repeating that it was in the client server handler could be inferred.  From the samples seen, the tag was appearing as either thread=Thrift Client Server or Manager Client Service Handler\nIf it could take on different values, it also seemed unlikely that it would be something that end-users would need to trend / watch by specific thread.  Monitoring thift times could provide a view into the health of the processes - knowing it was a specific thread seemed like something that would be needed by developers that were profiling specific code sections and metrics may not be the best way to determine that specific thrift thread timing.\nEach different tag value increase the number of time-series that need to be tracked. It did not seem necessary to potentially increase the number of time-series than need to be tracked (assuming it could take different values) - but I can restore it if there is a use-case that I am unaware of.",
                "createdAt": "2023-04-14T15:53:00Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5Z-LnT",
                "body": "Overall the changes look good! Thanks for including my changes from #3296. \r\n\r\n> If it could take on different values, it also seemed unlikely that it would be something that end-users would need to trend / watch by specific thread. Monitoring thift times could provide a view into the health of the processes - knowing it was a specific thread seemed like something that would be needed by developers that were profiling specific code sections and metrics may not be the best way to determine that specific thrift thread timing.\r\n\r\nAgreed! If profiling specific code sections is required then we should focus on adding traceability support as a separate feature vs attempting to combine that data into the existing metrics store.",
                "bodyText": "Overall the changes look good! Thanks for including my changes from #3296.\n\nIf it could take on different values, it also seemed unlikely that it would be something that end-users would need to trend / watch by specific thread. Monitoring thift times could provide a view into the health of the processes - knowing it was a specific thread seemed like something that would be needed by developers that were profiling specific code sections and metrics may not be the best way to determine that specific thrift thread timing.\n\nAgreed! If profiling specific code sections is required then we should focus on adding traceability support as a separate feature vs attempting to combine that data into the existing metrics store.",
                "createdAt": "2023-04-15T02:31:55Z",
                "author": "ddanielr"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4sfFUp",
                "comments": [
                    {
                        "bodyText": "Nit: Use a named variable like maxTagLength=128 for readability and future troubleshooting of test failures.",
                        "body": "Nit: Use a named variable like `maxTagLength=128` for readability and future troubleshooting of test failures. \r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 194,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "addressed in aed77f8",
                        "body": "addressed in aed77f8e67",
                        "startLine": null,
                        "line": null,
                        "originalLine": 194,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 194,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/metrics/MetricsIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4sfFlr",
                "comments": [
                    {
                        "bodyText": "Use a nested if statement since both checks rely on the same primary condition.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  if (address != null && !address.getHost().isEmpty()) {\n          \n          \n            \n                    tags.add(Tag.of(\"host\", address.getHost()));\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  if (address != null && address.getPort() > 0) {\n          \n          \n            \n                    tags.add(Tag.of(\"port\", Integer.toString(address.getPort())));\n          \n          \n            \n                  }\n          \n          \n            \n                  if (address != null) {\n          \n          \n            \n                    if (!address.getHost().isEmpty()) {\n          \n          \n            \n                      tags.add(Tag.of(\"host\", address.getHost()));\n          \n          \n            \n                    }\n          \n          \n            \n                    if (address.getPort() > 0) {\n          \n          \n            \n                      tags.add(Tag.of(\"port\", Integer.toString(address.getPort())));\n          \n          \n            \n                    }\n          \n          \n            \n                 }",
                        "body": "Use a nested if statement since both checks rely on the same primary condition. \r\n\r\n```suggestion\r\n      if (address != null) {\r\n        if (!address.getHost().isEmpty()) {\r\n          tags.add(Tag.of(\"host\", address.getHost()));\r\n        }\r\n        if (address.getPort() > 0) {\r\n          tags.add(Tag.of(\"port\", Integer.toString(address.getPort())));\r\n        }\r\n     } \r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 89,
                        "originalStartLine": 82
                    },
                    {
                        "bodyText": "addressed in aed77f8",
                        "body": "addressed in aed77f8e67",
                        "startLine": null,
                        "line": null,
                        "originalLine": 89,
                        "originalStartLine": 82
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 89,
                "originalStartLine": 82,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metrics/MetricsUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "EdColeman",
            "dlmarion",
            "ddanielr",
            "Manno15"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Fixes tserver initialization so host name and port are reported in metrics\nremove extra tags from thrift metrics\nUpdate opentelemetry and micrometer versions\nupdate test to check tag length is sane.\nIncludes fix for tag length submitted as PR #3296\n\nCurrently, tserver metrics tags do not include the host and there are extra tags on the thrift metrics.  Currently the tags are reported as:\nMETRICS, name: 'accumulo.thrift.idle' num tags: 4, tags: {process.name=tserver, server=TabletServer, Address=0.0.0.0, thread=Thrift Client Server}\nMETRICS, name: 'accumulo.thrift.idle' num tags: 4, tags: {process.name=tserver, server=TabletServer, Address=0.0.0.0, thread=Thrift Client Server}\nMETRICS, name: 'accumulo.thrift.idle' num tags: 4, tags: {process.name=manager, server=Manager, Address=server1 thread=Manager Client Service Handler}\nMETRICS, name: 'accumulo.tserver.scans.files.open' num tags: 3, tags: {process.name=tserver, statistic=value, Address=0.0.0.0}\nMETRICS, name: 'accumulo.tserver.compactions.majc.queued' num tags: 4, tags: {process.name=tserver, statistic=value, Address=0.0.0.0, id=i.meta.huge}\n\n\n\nThis update changes the global tags to always include the host and the port number:\nMETRICS, name: 'accumulo.thrift.idle' num tags: 3, tags: {process.name=tserver, port=32779, host=server1}\nMETRICS, name: 'accumulo.thrift.idle' num tags: 3, tags: {process.name=tserver, port=39729, host=server1}\nMETRICS, name: 'accumulo.thrift.idle' num tags: 3, tags: {process.name=manager, port=43165, host=server1}\nMETRICS, name: 'accumulo.tserver.scans.files.open' num tags: 4, tags: {process.name=tserver, statistic=value, port=32779, host=server1}\nMETRICS, name: 'accumulo.tserver.compactions.majc.running' num tags: 5, tags: {process.name=tserver, statistic=value, port=32779, host=server1, id=i.root.huge}\n\nCo-authored-by: NAME @ddanielr"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1925,
        "title": {
            "body": "Move String intern code and make it generic",
            "bodyHTML": "Move String intern code and make it generic"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYyMTM5MDQ0OnYy",
                "comments": [
                    {
                        "bodyText": "If you have to add the timeout, doesn't this mean the test is potentially flaky? Would it be better to have the test pass in the unlikely event that System.gc doesn't eventually cause garbage collection to occur?",
                        "body": "If you have to add the timeout, doesn't this mean the test is potentially flaky? Would it be better to have the test pass in the unlikely event that System.gc doesn't eventually cause garbage collection to occur?",
                        "startLine": null,
                        "line": 96,
                        "originalLine": 96,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If you have to add the timeout, doesn't this mean the test is potentially flaky?\n\nHaving a timeout doesn't mean it's flaky... it just makes it easier to catch if it becomes flaky, and won't hold up the build indefinitely if it does. I ran this test dozens of times and it always finished successfully in less than a second.\n\nWould it be better to have the test pass in the unlikely event that System.gc doesn't eventually cause garbage collection to occur?\n\nIf we did that, then this test wouldn't be useful at all, because it would never detect an incorrect implementation (such as one that kept a strong reference to the key) that would prevent garbage collection.",
                        "body": "> If you have to add the timeout, doesn't this mean the test is potentially flaky?\r\n\r\nHaving a timeout doesn't mean it's flaky... it just makes it easier to catch if it becomes flaky, and won't hold up the build indefinitely if it does. I ran this test dozens of times and it always finished successfully in less than a second.\r\n\r\n> Would it be better to have the test pass in the unlikely event that System.gc doesn't eventually cause garbage collection to occur?\r\n\r\nIf we did that, then this test wouldn't be useful at all, because it would never detect an incorrect implementation (such as one that kept a strong reference to the key) that would prevent garbage collection.",
                        "startLine": null,
                        "line": 96,
                        "originalLine": 96,
                        "originalStartLine": null
                    }
                ],
                "line": 96,
                "startLine": 96,
                "originalLine": 96,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/test/java/org/apache/accumulo/core/util/InternerTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "brianloss"
        ],
        "tdv": 32.0,
        "description": {
            "bodyText": "Create an Interner class that implements a deduplicating intern\nfunction for any object type. Add corresponding unit test, and\nconvert TabletLocator's custom WeakHashMap over to use this\ninstead."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2407,
        "title": {
            "body": "Correct user-facing misspellings (Part 2)",
            "bodyHTML": "Correct user-facing misspellings (Part 2)"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM473IPB",
                "body": ":+1: to 'constructible'\n\nOn Mon, Jan 3, 2022 at 2:23 PM Dom G. ***@***.***> wrote:\n\n> ***@***.**** commented on this pull request.\n> ------------------------------\n>\n> In\n> start/src/main/java/org/apache/accumulo/start/spi/KeywordExecutable.java\n> <https://github.com/apache/accumulo/pull/2407#discussion_r777661535>:\n>\n> > @@ -28,7 +28,7 @@\n>   * All implementing classes who have an entry in\n>   * ***@***.*** org.apache.accumulo.start.spi.KeywordExecutable} on the classpath will\n>   * be constructed by the ***@***.*** ServiceLoader}, so they should be lightweight and quickly\n> - * constructible with a mandatory no-argument constructor. Because of this, implementing classes\n>\n> Looks like its debatable but \"constructible\" might be the correct US-en\n> spelling.\n>\n> ‚Äî\n> Reply to this email directly, view it on GitHub\n> <https://github.com/apache/accumulo/pull/2407#pullrequestreview-842982779>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AHASSV2TNXOWHEURZV7SWQ3UUHZUBANCNFSM5LFZZUWA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n",
                "bodyText": "üëç to 'constructible'\n‚Ä¶\nOn Mon, Jan 3, 2022 at 2:23 PM Dom G. ***@***.***> wrote:\n ***@***.**** commented on this pull request.\n ------------------------------\n\n In\n start/src/main/java/org/apache/accumulo/start/spi/KeywordExecutable.java\n <#2407 (comment)>:\n\n > @@ -28,7 +28,7 @@\n   * All implementing classes who have an entry in\n   * ***@***.*** org.apache.accumulo.start.spi.KeywordExecutable} on the classpath will\n   * be constructed by the ***@***.*** ServiceLoader}, so they should be lightweight and quickly\n - * constructible with a mandatory no-argument constructor. Because of this, implementing classes\n\n Looks like its debatable but \"constructible\" might be the correct US-en\n spelling.\n\n ‚Äî\n Reply to this email directly, view it on GitHub\n <#2407 (review)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AHASSV2TNXOWHEURZV7SWQ3UUHZUBANCNFSM5LFZZUWA>\n .\n Triage notifications on the go with GitHub Mobile for iOS\n <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n or Android\n <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n\n You are receiving this because you are subscribed to this thread.Message\n ID: ***@***.***>",
                "createdAt": "2022-01-03T19:28:30Z",
                "author": "Manno15"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4doz8H",
                "comments": [
                    {
                        "bodyText": "Looks like its debatable but \"constructible\" might be the correct US-en spelling.\nEdit: source: https://www.lexico.com/search?filter=en_dictionary&query=constructable",
                        "body": "Looks like its debatable but \"constructible\" might be the correct US-en spelling.\r\n\r\nEdit: source: https://www.lexico.com/search?filter=en_dictionary&query=constructable",
                        "startLine": null,
                        "line": null,
                        "originalLine": 31,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I will go ahead and revert this change.",
                        "body": "I will go ahead and revert this change.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 31,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 31,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "start/src/main/java/org/apache/accumulo/start/spi/KeywordExecutable.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "foster33",
            "Manno15",
            "dlmarion",
            "DomGarguilo"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "This pull request serves to correct more mistakes in potential user-facing areas.\nIn my first PR regarding misspellings (#2400), I did not include mistakes found in Javadocs. Most of the corrections in this PR focus on Javadoc as well as a few other mistakes that were overlooked in the original.\nThis will be my final PR that focuses on misspellings."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3392,
        "title": {
            "body": "fixes race condition in metadata consistency check",
            "bodyHTML": "fixes race condition in metadata consistency check"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5cDaFI",
                "body": "Best to ignore whitespace when looking at the diffs",
                "bodyText": "Best to ignore whitespace when looking at the diffs",
                "createdAt": "2023-05-11T17:24:30Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5cDgSS",
                "body": "I am trying to trigger the false positive with the following test.\r\n\r\nI set the following properties.\r\n\r\n```\r\ntserver.compaction.minor.concurrent.max=20\r\ntserver.health.check.interval=1ms\r\n```\r\n\r\nThen I run the following code in jshell\r\n\r\n```java\r\n    client.tableOperations().create(\"foo\");\r\n    \r\n    var bw = client.createBatchWriter(\"foo\");\r\n\r\n    SortedSet<Text> splits = new TreeSet<>();\r\n\r\n    IntStream.range(1, 100).mapToObj(i -> String.format(\"%03d\", i)).map(Text::new)\r\n        .forEach(splits::add);\r\n\r\n    client.tableOperations().addSplits(\"foo\", splits);\r\n\r\n    while (true) {\r\n      IntStream.range(1, 100).mapToObj(i -> String.format(\"%03d\", i)).forEach(row -> {\r\n        Mutation mutation = new Mutation(row);\r\n        mutation.put(\"f1\", \"q1\", \"v1\");\r\n        try {\r\n          bw.addMutation(mutation);\r\n        } catch (Exception e) {\r\n          throw new RuntimeException(e);\r\n        }\r\n      });\r\n      bw.flush();\r\n      client.tableOperations().flush(\"foo\", null, null, true);\r\n    }\r\n```\r\n\r\nI am seeing around 40 minor compactions per second while this test is running against 2.1.0.  Not seeing it run into the race condition yet.  I think I need to more tservers doing more checks against more tablets to increase the probability of bumping into it.  I am running it under Uno.\r\n",
                "bodyText": "I am trying to trigger the false positive with the following test.\nI set the following properties.\ntserver.compaction.minor.concurrent.max=20\ntserver.health.check.interval=1ms\n\nThen I run the following code in jshell\n    client.tableOperations().create(\"foo\");\n    \n    var bw = client.createBatchWriter(\"foo\");\n\n    SortedSet<Text> splits = new TreeSet<>();\n\n    IntStream.range(1, 100).mapToObj(i -> String.format(\"%03d\", i)).map(Text::new)\n        .forEach(splits::add);\n\n    client.tableOperations().addSplits(\"foo\", splits);\n\n    while (true) {\n      IntStream.range(1, 100).mapToObj(i -> String.format(\"%03d\", i)).forEach(row -> {\n        Mutation mutation = new Mutation(row);\n        mutation.put(\"f1\", \"q1\", \"v1\");\n        try {\n          bw.addMutation(mutation);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      bw.flush();\n      client.tableOperations().flush(\"foo\", null, null, true);\n    }\nI am seeing around 40 minor compactions per second while this test is running against 2.1.0.  Not seeing it run into the race condition yet.  I think I need to more tservers doing more checks against more tablets to increase the probability of bumping into it.  I am running it under Uno.",
                "createdAt": "2023-05-11T17:41:42Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5cDzjD",
                "body": "Looking at the code I noticed the increment for the bulk import code is also in the wrong place.  Going to push a fix for that.",
                "bodyText": "Looking at the code I noticed the increment for the bulk import code is also in the wrong place.  Going to push a fix for that.",
                "createdAt": "2023-05-11T18:40:15Z",
                "author": "keith-turner"
            }
        ],
        "total_comments_count": 12,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4tadQa",
                "comments": [
                    {
                        "bodyText": "What happens if this call fails, but fails after the metadata table is updated?  For example, this call updates the metadata table and the write succeeds in the remote tablet server, but something happens after that that throws an error. Won't it be the case that the metadata table is updated, but the in memory datafilesizes is not?\nEdit: This question is in the context of #3386, not this PR.",
                        "body": "What happens if this call fails, but fails after the metadata table is updated?  For example, this call updates the metadata table and the write succeeds in the remote tablet server, but something happens after that that throws an error. Won't it be the case that the metadata table is updated, but the in memory datafilesizes is not?\r\n\r\nEdit: This question is in the context of #3386, not this PR.",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 363,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah if that throws an exception after successfully making the metadata update then it would leave things in a bad state until the tablet is unloaded.",
                        "body": "Yeah if that throws an exception after successfully making the metadata update then it would leave things in a bad state until the tablet is unloaded.",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 363,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "So, in the context of #3386, maybe we need some error handling around this (and other like cases)?",
                        "body": "So, in the context of #3386, maybe we need some error handling around this (and other like cases)?",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 363,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Analyzing the code, it seems like the following log message should trigger\n\n  \n    \n      accumulo/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactionTask.java\n    \n    \n         Line 135\n      in\n      fdabdc5\n    \n  \n  \n    \n\n        \n          \n           log.error(\"Unknown error during minor compaction for extent: {}\", tablet.getExtent(), e); \n        \n    \n  \n\n\nAlso it rethrows the exception on the next line, so it seems like that should go to the uncaught exception handler in a thread pool.\nThe exception takes an interesting path from being thrown till the log stmt referenced above.  Things catch it and rethrow it and do tracing stuff multiple times.  Something also wraps it another exception and adds the extent.",
                        "body": "Analyzing the code, it seems like the following log message should trigger\r\n\r\nhttps://github.com/apache/accumulo/blob/fdabdc5133dd262316bac5d71a832f332831a61a/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactionTask.java#L135\r\n\r\nAlso it rethrows the exception on the next line, so it seems like that should go to the uncaught exception handler in a thread pool.\r\n\r\nThe exception takes an interesting path from being thrown till the log stmt referenced above.  Things catch it and rethrow it and do tracing stuff multiple times.  Something also wraps it another exception and adds the extent.",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 363,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "How do you think we should handle an Exception being raised here? The minc thread would die and leave DatafileManager.datafileSizes in an inconsistent state.",
                        "body": "How do you think we should handle an Exception being raised here? The `minc` thread would die and leave `DatafileManager.datafileSizes` in an inconsistent state.",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 363,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I noticed the write to the walog code a bit below catches an IOException and retries.  But that seems iffy, don't always get IOException (could be thrift exception or a wrapped exception).",
                        "body": "I noticed the write to the walog code a bit below catches an IOException and retries.  But that seems iffy, don't always get IOException (could be thrift exception or a wrapped exception).",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 363,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Lower down in the code, there are already things that retry writes on known thrift exceptions.   So should not need to worry about that at this level.  An exception in this code is likely a bug.",
                        "body": "Lower down in the code, there are already things that retry writes on known thrift exceptions.   So should not need to worry about that at this level.  An exception in this code is likely a bug.",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 363,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The more I think about it not sure we want to do anything other than log at error.  Unexpected bugs can happen anywhere in the code an hopefully they are logged.  If there is an exception that we should be retrying on and are not then we should address that specific case when we encounter it.",
                        "body": "The more I think about it not sure we want to do anything other than log at error.  Unexpected bugs can happen anywhere in the code an hopefully they are logged.  If there is an exception that we should be retrying on and are not then we should address that specific case when we encounter it.",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 363,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Based on the code path analysis, that should happen already.",
                        "body": "Based on the code path analysis, that should happen already.",
                        "startLine": null,
                        "line": 362,
                        "originalLine": 363,
                        "originalStartLine": null
                    }
                ],
                "line": 362,
                "startLine": 362,
                "originalLine": 363,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/DatafileManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "dlmarion"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "While looking into #3386 I noticed the Accumulo metadata consistency check was incrementing a counter in the incorrect place.  It should increment before writing to the metadata table, but it does not. This could cause the check to report false postives.  The false positive in the case would be transient and should not repeat on subsequent checks.\nAlso noticed a redundant check when deciding if the file should be added to the set of in memory files.  AFICT this redundant check is harmless, but it could cause problems for future changes."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4011,
        "title": {
            "body": "Move code from Manager class to compaction coordinator",
            "bodyHTML": "Move code from Manager class to compaction coordinator"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5tpWYE",
                "body": "In 243640d I removed the interface.  The reason for this was that I may not pursue making other functional services in the manager use an interface in the short term and I did not want one thing following a pattern that nothing else does.  So deferring the change to use an interface for now.  However, attempting to use an interface highlighted code that was in the Manager class that should have been in the CompactionCoordinator class, so I am keeping those changes in this PR. I think the change to using interfaces for functional service in the manager will be nice, but I think its confusing if its partially done and the purpose of the changes is clean up the manager code not make it more confusing.",
                "bodyText": "In 243640d I removed the interface.  The reason for this was that I may not pursue making other functional services in the manager use an interface in the short term and I did not want one thing following a pattern that nothing else does.  So deferring the change to use an interface for now.  However, attempting to use an interface highlighted code that was in the Manager class that should have been in the CompactionCoordinator class, so I am keeping those changes in this PR. I think the change to using interfaces for functional service in the manager will be nice, but I think its confusing if its partially done and the purpose of the changes is clean up the manager code not make it more confusing.",
                "createdAt": "2023-12-04T22:00:44Z",
                "author": "keith-turner"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM41yoS3",
                "comments": [
                    {
                        "bodyText": "This doesn't need to be done now but looking at this I'm thinking it might be nice if we also get rid of the Manager having to instantiate the Compaction coordinator impl directly with the constructor as it still has to know about the specific impl. If the goal here is to decouple everything into services than maybe we should go ahead and use ServiceLoader and make things like CompactionCoordinator pluggable in some way. The main use case I'm thinking of is to make it easier to test as in unit tests you could easily swap out for a dummy implementation but it would also allow plugging in other CompactionCoordinator impls in the future.\nThe main challenge with using something like ServiceLoader is that obviously in this case CompactionCoordinatorImpl() is taking 4 arguments. So we could define a factory class API instead. This could look something like:\n// possible interface, this could also be more generic and just take an arbitary list of args\ninterface CompactionCoordinatorFactory {\n CompactionCoordinator create(ServerContext ctx, LiveTServerSet tservers,\n                    SecurityOperation security, EventCoordinator eventCoordinator);\n}\n\n// sample default impl\nclass CompactionCoordinatorFactorImpl implements CompactionCoordinatorFactory {\n  public CompactionCoordinator create(ServerContext ctx, LiveTServerSet tservers,\n                             SecurityOperation security, EventCoordinator eventCoordinator) {\n    return new CompactionCoordinatorImpl(ctx, tserverSet, security, nextEvent);\n  }\n}\n\n// Inside Manager where we create the impl in the run() method\nServiceLoader<CompactionCoordinatorFactory> factory = ServiceLoader.load(CompactionCoordinatorFactory.class);\ncompactionCoordinator = factory.findFirst().orElseThrow().create(context, tserverSet, security, nextEvent);",
                        "body": "This doesn't need to be done now but looking at this I'm thinking it might be nice if we also get rid of the Manager having to instantiate the Compaction coordinator impl directly with the constructor as it still has to know about the specific impl. If the goal here is to decouple everything into services than maybe we should go ahead and use `ServiceLoader` and make things like `CompactionCoordinator` pluggable in some way. The main use case I'm thinking of is to make it easier to test as in unit tests you could easily swap out for a dummy implementation but it would also allow plugging in other `CompactionCoordinator` impls in the future. \r\n\r\nThe main challenge with using something like `ServiceLoader` is that obviously in this case `CompactionCoordinatorImpl() `is taking 4 arguments. So we could define a factory class API instead. This could look something like:\r\n\r\n```java\r\n// possible interface, this could also be more generic and just take an arbitary list of args\r\ninterface CompactionCoordinatorFactory {\r\n CompactionCoordinator create(ServerContext ctx, LiveTServerSet tservers,\r\n                    SecurityOperation security, EventCoordinator eventCoordinator);\r\n}\r\n\r\n// sample default impl\r\nclass CompactionCoordinatorFactorImpl implements CompactionCoordinatorFactory {\r\n  public CompactionCoordinator create(ServerContext ctx, LiveTServerSet tservers,\r\n                             SecurityOperation security, EventCoordinator eventCoordinator) {\r\n    return new CompactionCoordinatorImpl(ctx, tserverSet, security, nextEvent);\r\n  }\r\n}\r\n\r\n// Inside Manager where we create the impl in the run() method\r\nServiceLoader<CompactionCoordinatorFactory> factory = ServiceLoader.load(CompactionCoordinatorFactory.class);\r\ncompactionCoordinator = factory.findFirst().orElseThrow().create(context, tserverSet, security, nextEvent);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 938,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If the goal here is to decouple everything into services than maybe we should go ahead and use ServiceLoader and make things like CompactionCoordinator pluggable in some way.\n\nI did not have a goal of being able to swap out the impls at runtime.  I was more trying to wrangle the code into something that is easier to maintain.  The manager has distinct functionality, but some of the manager code is not well aligned with the functionality.  I thought the interfaces would help re align the code with the functionality by making dependencies between these functional service in the manager explicit in the code via using interfaces.\nAs a secondary bonus, I thought this reorg may help make the code more testable.  However for the testing I was thinking of doing it would still be compile time switching of impls and not run time.",
                        "body": ">  If the goal here is to decouple everything into services than maybe we should go ahead and use ServiceLoader and make things like CompactionCoordinator pluggable in some way. \r\n\r\nI did not have a goal of being able to swap out the impls at runtime.  I was more trying to wrangle the code into something that is easier to maintain.  The manager has distinct functionality, but some of the manager code is not well aligned with the functionality.  I thought the interfaces would help re align the code with the functionality by making dependencies between these functional service in the manager explicit in the code via using interfaces.  \r\n\r\nAs a secondary bonus, I thought this reorg may help make the code more testable.  However for the testing I was thinking of doing it would still be compile time switching of impls and not run time.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 938,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 938,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/Manager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "cshannon",
            "ddanielr"
        ],
        "tdv": 32.0,
        "description": {
            "bodyText": "As an initial step for #4005, introduces an interface for the compaction coordination service in the manager.  Everything in the manager uses this interface to interact with the compaction coordinator.  In order to make this change metrics and compaction queues were moved from manager code to the compaction coordinator code.  Both of these changes were\ngood for encapsulation.   Hopefully further changes for #4005 lead to\nmore encapsulation and less code in the Manager class."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2580,
        "title": {
            "body": "Lattice LockClient LockInfoSerializer Implementation",
            "bodyHTML": "Lattice LockClient LockInfoSerializer Implementation"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5i3u4C",
                "body": "PR Approved by @xyuanlu \r\nCommit message: Lattice LockClient LockInfoSerializer Implementation",
                "bodyText": "PR Approved by @xyuanlu\nCommit message: Lattice LockClient LockInfoSerializer Implementation",
                "createdAt": "2023-07-31T17:00:11Z",
                "author": "Marcosrico"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4wopee",
                "comments": [
                    {
                        "bodyText": "Could be exception here? Shall we throw it or catch it?",
                        "body": "Could be exception here? Shall we throw it or catch it?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 29,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes you're right, deserializing bytes if errors will return null which will throw an exception when creating the DataRecord. Will catch and log and return null. Thanks for the catch!",
                        "body": "Yes you're right, deserializing bytes if errors will return null which will throw an exception when creating the DataRecord. Will catch and log and return null. Thanks for the catch!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 29,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 29,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/lock/LockInfoSerializer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Marcosrico",
            "xyuanlu",
            "junkaixue"
        ],
        "tdv": -34.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nLockClient currently uses ZNRecord serializer. Abstracting away any zookeeper specifics and keeping the code easier to understand, LockInfoSerializer is created to serialize and deserialize the LockInfo object used in LockClient.\nFurthermore, the old LockInfo structure would show the simplefields as their own separate fields in ZooKeeper. Changing that so the ZNRecord represents all parameters of the lock in ZooKeeper as a field in SimpleFields.\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nCreated the LockInfoSerializer which extends the ZNRecordSerializer. Modified LockClient to use this serializer and updated the LockClient test case to show that it works.\nModified the LockInfo object so that all fields appear as fields in simplefield in Zookeeper as opposed to it's own separate field.\nTests\n\n The following tests are written for this issue:\n\nLockClientTest.java\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1534,
        "title": {
            "body": "Fix several tests with resource leakage",
            "bodyHTML": "Fix several tests with resource leakage"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcyOTMwNDgzOA==",
                "body": "This PR is approved, please help to merge in.\r\n\r\n> Fix several tests with resource leakage\r\n\r\n",
                "bodyText": "This PR is approved, please help to merge in.\n\nFix several tests with resource leakage",
                "createdAt": "2020-11-18T00:51:03Z",
                "author": "kaisun2000"
            }
        ],
        "total_comments_count": 12,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDIxOTExOnYy",
                "comments": [
                    {
                        "bodyText": "nit, shutdown the controller first would be safer.",
                        "body": "nit, shutdown the controller first would be safer.",
                        "startLine": 87,
                        "line": 88,
                        "originalLine": 88,
                        "originalStartLine": 87
                    },
                    {
                        "bodyText": "changed.",
                        "body": "changed.",
                        "startLine": 87,
                        "line": 88,
                        "originalLine": 88,
                        "originalStartLine": 87
                    }
                ],
                "line": 88,
                "startLine": 87,
                "originalLine": 88,
                "originalStartLine": 87,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDIyMjU0OnYy",
                "comments": [
                    {
                        "bodyText": "Same here.",
                        "body": "Same here.",
                        "startLine": null,
                        "line": 106,
                        "originalLine": 106,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "changed.",
                        "body": "changed.",
                        "startLine": null,
                        "line": 106,
                        "originalLine": 106,
                        "originalStartLine": null
                    }
                ],
                "line": 106,
                "startLine": 106,
                "originalLine": 106,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDIyNzE5OnYy",
                "comments": [
                    {
                        "bodyText": "How about the managers? Please disconnect them too.",
                        "body": "How about the managers? Please disconnect them too.",
                        "startLine": null,
                        "line": 254,
                        "originalLine": 254,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "good point. added.",
                        "body": "good point. added.",
                        "startLine": null,
                        "line": 254,
                        "originalLine": 254,
                        "originalStartLine": null
                    }
                ],
                "line": 254,
                "startLine": 254,
                "originalLine": 254,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDIzMzAyOnYy",
                "comments": [
                    {
                        "bodyText": "nit, you probably want to extract a private method for this section to reduce duplication.",
                        "body": "nit, you probably want to extract a private method for this section to reduce duplication.",
                        "startLine": null,
                        "line": 98,
                        "originalLine": 103,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "added an test helper to reduce duplicated code.",
                        "body": "added an test helper to reduce duplicated code.",
                        "startLine": null,
                        "line": 98,
                        "originalLine": 103,
                        "originalStartLine": null
                    }
                ],
                "line": 98,
                "startLine": 98,
                "originalLine": 103,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTUzNzg4OnYy",
                "comments": [
                    {
                        "bodyText": "nit: Can we do\nAssert.assertTrue(_clusterVerifier.verify()); ?",
                        "body": "nit: Can we do \r\nAssert.assertTrue(_clusterVerifier.verify()); ?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 435,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Changed.",
                        "body": "Changed. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 435,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 435,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/controller/changedetector/TestResourceChangeDetector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kaisun2000",
            "jiajunwang",
            "xyuanlu"
        ],
        "tdv": -16.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nfix #1226\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nFix several tests with resource leakage\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n The following is the result of the \"mvn test\" command on the appropriate module:\ngithub run pending\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4063,
        "title": {
            "body": "Remove active FateTx constraint for bulk import",
            "bodyHTML": "Remove active FateTx constraint for bulk import"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM42RcbL",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    \"# constraint violations : \"\n          \n          \n            \n                    \"constraint violation codes : \"",
                        "body": "```suggestion\r\n        \"constraint violation codes : \"\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 63,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 63,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/MutationsRejectedException.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM42Rcdp",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    \"# constraint violations : \"\n          \n          \n            \n                    \"constraint violation codes : \"",
                        "body": "```suggestion\r\n        \"constraint violation codes : \"\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 90,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/MutationsRejectedException.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ddanielr",
            "keith-turner"
        ],
        "tdv": -40.0,
        "description": {
            "bodyText": "Removes the active FateTx ID constraint for metadata mutations when creating bulk import file markers.\nAlso changes the MutationsRejectedException to return the violation type code.\ncloses #4047"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2408,
        "title": {
            "body": "Attempt to verify that MAC processes are up and running in start",
            "bodyHTML": "Attempt to verify that MAC processes are up and running in start"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM476dn8",
                "body": "Checkout `LateLastContactIT` cause it starts its own `ZombieTServer` so your verify method may not work.",
                "bodyText": "Checkout LateLastContactIT cause it starts its own ZombieTServer so your verify method may not work.",
                "createdAt": "2022-01-04T21:24:57Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM476eTK",
                "body": "Another check that you may be able to use is `InstanceOperations.ping()`",
                "bodyText": "Another check that you may be able to use is InstanceOperations.ping()",
                "createdAt": "2022-01-04T21:29:24Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM478Ps7",
                "body": "I ran all of the ITs yesterday using GitHub Actions. All succeeded except one in ExternalCompaction3_IT that timed out during a restart of the CompactionCoordinator. The test passes locally.\r\n\r\n> Another check that you may be able to use is InstanceOperations.ping()\r\n\r\nI'm wondering if I should use `InstanceOperations.waitForBalance()` instead. This would mean that the Manager and TabletServers are  up, communicating with each other, and the `root` and `metadata` tables are hosted.\r\n\r\nAlso, I looked at the ITs that you mentioned. In most cases MAC is started and then these tests are stopping and starting single processes (Monitor, Manager, etc). Calling `verifyUp` after each one may be pretty costly in terms of time and may not provide much value given that the tests are currently succeeding. I think the current implementation meets the initial ask of failing if MAC fails to start at the beginning of the test.",
                "bodyText": "I ran all of the ITs yesterday using GitHub Actions. All succeeded except one in ExternalCompaction3_IT that timed out during a restart of the CompactionCoordinator. The test passes locally.\n\nAnother check that you may be able to use is InstanceOperations.ping()\n\nI'm wondering if I should use InstanceOperations.waitForBalance() instead. This would mean that the Manager and TabletServers are  up, communicating with each other, and the root and metadata tables are hosted.\nAlso, I looked at the ITs that you mentioned. In most cases MAC is started and then these tests are stopping and starting single processes (Monitor, Manager, etc). Calling verifyUp after each one may be pretty costly in terms of time and may not provide much value given that the tests are currently succeeding. I think the current implementation meets the initial ask of failing if MAC fails to start at the beginning of the test.",
                "createdAt": "2022-01-05T12:35:12Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM478VM-",
                "body": "I added the following to the bottom of `verifyUp`:\r\n\r\n```\r\n    try (AccumuloClient client = Accumulo.newClient().from(getClientProperties()).build()) {\r\n      client.instanceOperations().waitForBalance();\r\n    }\r\n```\r\n\r\nand it causes this:\r\n\r\n```\r\n...\r\nCaused by: org.apache.accumulo.fate.zookeeper.ZooSession$ZooSessionShutdownException: The Accumulo singleton that that tracks zookeeper session is disabled.  This is likely caused by all AccumuloClients being closed or garbage collected.\r\n\tat org.apache.accumulo.fate.zookeeper.ZooSession.getSession(ZooSession.java:195)\r\n\tat org.apache.accumulo.fate.zookeeper.ZooSession.getAuthenticatedSession(ZooSession.java:184)\r\n\tat org.apache.accumulo.fate.zookeeper.ZooReaderWriter.getZooKeeper(ZooReaderWriter.java:58)\r\n\tat org.apache.accumulo.fate.zookeeper.ZooReader.retryLoopMutator(ZooReader.java:165)\r\n\tat org.apache.accumulo.fate.zookeeper.ZooReader.retryLoop(ZooReader.java:144)\r\n\tat org.apache.accumulo.fate.zookeeper.ZooReader.retryLoop(ZooReader.java:131)\r\n\tat org.apache.accumulo.fate.zookeeper.ZooReader.getChildren(ZooReader.java:87)\r\n\tat org.apache.accumulo.miniclusterImpl.MiniAccumuloClusterImpl.verifyUp(MiniAccumuloClusterImpl.java:640)\r\n\tat org.apache.accumulo.miniclusterImpl.MiniAccumuloClusterImpl.start(MiniAccumuloClusterImpl.java:606)\r\n\t... 31 more\r\n```\r\n\r\nI'm not sure I understand why.",
                "bodyText": "I added the following to the bottom of verifyUp:\n    try (AccumuloClient client = Accumulo.newClient().from(getClientProperties()).build()) {\n      client.instanceOperations().waitForBalance();\n    }\n\nand it causes this:\n...\nCaused by: org.apache.accumulo.fate.zookeeper.ZooSession$ZooSessionShutdownException: The Accumulo singleton that that tracks zookeeper session is disabled.  This is likely caused by all AccumuloClients being closed or garbage collected.\n\tat org.apache.accumulo.fate.zookeeper.ZooSession.getSession(ZooSession.java:195)\n\tat org.apache.accumulo.fate.zookeeper.ZooSession.getAuthenticatedSession(ZooSession.java:184)\n\tat org.apache.accumulo.fate.zookeeper.ZooReaderWriter.getZooKeeper(ZooReaderWriter.java:58)\n\tat org.apache.accumulo.fate.zookeeper.ZooReader.retryLoopMutator(ZooReader.java:165)\n\tat org.apache.accumulo.fate.zookeeper.ZooReader.retryLoop(ZooReader.java:144)\n\tat org.apache.accumulo.fate.zookeeper.ZooReader.retryLoop(ZooReader.java:131)\n\tat org.apache.accumulo.fate.zookeeper.ZooReader.getChildren(ZooReader.java:87)\n\tat org.apache.accumulo.miniclusterImpl.MiniAccumuloClusterImpl.verifyUp(MiniAccumuloClusterImpl.java:640)\n\tat org.apache.accumulo.miniclusterImpl.MiniAccumuloClusterImpl.start(MiniAccumuloClusterImpl.java:606)\n\t... 31 more\n\nI'm not sure I understand why.",
                "createdAt": "2022-01-05T13:08:42Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM478Ve3",
                "body": "> I ran all of the ITs yesterday using GitHub Actions. All succeeded except one in ExternalCompaction3_IT that timed out during a restart of the CompactionCoordinator. The test passes locally.\r\n> \r\n> > Another check that you may be able to use is InstanceOperations.ping()\r\n> \r\n> I'm wondering if I should use `InstanceOperations.waitForBalance()` instead. This would mean that the Manager and TabletServers are up, communicating with each other, and the `root` and `metadata` tables are hosted.\r\n\r\nThat is a good one too but would definitely add overhead time to the tests that we might not want.",
                "bodyText": "I ran all of the ITs yesterday using GitHub Actions. All succeeded except one in ExternalCompaction3_IT that timed out during a restart of the CompactionCoordinator. The test passes locally.\n\nAnother check that you may be able to use is InstanceOperations.ping()\n\nI'm wondering if I should use InstanceOperations.waitForBalance() instead. This would mean that the Manager and TabletServers are up, communicating with each other, and the root and metadata tables are hosted.\n\nThat is a good one too but would definitely add overhead time to the tests that we might not want.",
                "createdAt": "2022-01-05T13:10:14Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM478WYl",
                "body": "> That is a good one too but would definitely add overhead time to the tests that we might not want.\r\n\r\nOk, then I don't think I have any other changes for this PR at this time.",
                "bodyText": "That is a good one too but would definitely add overhead time to the tests that we might not want.\n\nOk, then I don't think I have any other changes for this PR at this time.",
                "createdAt": "2022-01-05T13:15:19Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM478Xuo",
                "body": "Were you able to reproduce an IT failure due to missing native map?",
                "bodyText": "Were you able to reproduce an IT failure due to missing native map?",
                "createdAt": "2022-01-05T13:23:11Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM478ZQM",
                "body": "Re missing native map - not sure if it applies in this case, but if you have a build fail and then try to run mini it will fail because the native map is missing,  It has to do with the build order / dependencies and  the desire to make sure mini is using native maps during testing.\r\n\r\nIf I recall, to reproduce - run a build with mvn that fails because of  something like a check-style or formatting error. Run mini in the ide - it will build and run, but not have the native maps and the error shows up in a tserver log, \r\n",
                "bodyText": "Re missing native map - not sure if it applies in this case, but if you have a build fail and then try to run mini it will fail because the native map is missing,  It has to do with the build order / dependencies and  the desire to make sure mini is using native maps during testing.\nIf I recall, to reproduce - run a build with mvn that fails because of  something like a check-style or formatting error. Run mini in the ide - it will build and run, but not have the native maps and the error shows up in a tserver log,",
                "createdAt": "2022-01-05T13:31:50Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM479DDd",
                "body": "Ran `mvn clean` on command line, then attempted to run `ExternalCompaction1_IT.testExternalCompaction()` in Eclipse. It failed with the following error in 18s:\r\n\r\n```\r\njava.lang.RuntimeException: Timed out waiting for TServer information in ZooKeeper\r\n\tat org.apache.accumulo.miniclusterImpl.MiniAccumuloClusterImpl.verifyUp(MiniAccumuloClusterImpl.java:668)\r\n\tat org.apache.accumulo.miniclusterImpl.MiniAccumuloClusterImpl.start(MiniAccumuloClusterImpl.java:605)\r\n\tat org.apache.accumulo.harness.AccumuloClusterHarness.setupCluster(AccumuloClusterHarness.java:167)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n\tat org.junit.internal.runners.statements.RunBefores.invokeMethod(RunBefores.java:33)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)\r\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.lang.Thread.run(Thread.java:829)\r\n```\r\n\r\nBoth TServers logs showed that they failed to load the native map and exited:\r\n\r\n```\r\n2022-01-05T16:02:50,957 [tserver.NativeMap] ERROR: FATAL! Accumulo native libraries were requested but could not be be loaded. Either set 'tserver.memory.maps.native.enabled' to false in accumulo.properties or make sure native libraries are created in directories set by the JVM system property 'accumulo.native.lib.path' in accumulo-env.sh!\r\n```\r\n\r\n",
                "bodyText": "Ran mvn clean on command line, then attempted to run ExternalCompaction1_IT.testExternalCompaction() in Eclipse. It failed with the following error in 18s:\njava.lang.RuntimeException: Timed out waiting for TServer information in ZooKeeper\n\tat org.apache.accumulo.miniclusterImpl.MiniAccumuloClusterImpl.verifyUp(MiniAccumuloClusterImpl.java:668)\n\tat org.apache.accumulo.miniclusterImpl.MiniAccumuloClusterImpl.start(MiniAccumuloClusterImpl.java:605)\n\tat org.apache.accumulo.harness.AccumuloClusterHarness.setupCluster(AccumuloClusterHarness.java:167)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\tat org.junit.internal.runners.statements.RunBefores.invokeMethod(RunBefores.java:33)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n\nBoth TServers logs showed that they failed to load the native map and exited:\n2022-01-05T16:02:50,957 [tserver.NativeMap] ERROR: FATAL! Accumulo native libraries were requested but could not be be loaded. Either set 'tserver.memory.maps.native.enabled' to false in accumulo.properties or make sure native libraries are created in directories set by the JVM system property 'accumulo.native.lib.path' in accumulo-env.sh!",
                "createdAt": "2022-01-05T16:06:34Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM479tAy",
                "body": "FWIW, our multi-module build creates the native maps in a module that the test module depends on. So, the native maps are always built and ready for the ITs that use them in the test module when building from the command-line. However, Eclipse (and likely other IDEs) don't execute all the build tasks in the native map module when building. Specifically, they don't execute the `exec-maven-plugin` that calls `make`, because the IDE doesn't know how to execute the `exec-maven-plugin`, as it doesn't map to an action that the IDE can do. So, you have to do something like `mvn package -DskipTests` to ensure `exec-maven-plugin` builds the native maps in the `server/native` module, and then load the project into Eclipse. At that point, the ITs should be able to find the native maps without any problems. This is just a quirk of how the IDE can't do everything the command-line can.\r\n\r\nIn any case, checking that the processes are up is a nice fast-fail, so the test doesn't hang in the IDE because of this.",
                "bodyText": "FWIW, our multi-module build creates the native maps in a module that the test module depends on. So, the native maps are always built and ready for the ITs that use them in the test module when building from the command-line. However, Eclipse (and likely other IDEs) don't execute all the build tasks in the native map module when building. Specifically, they don't execute the exec-maven-plugin that calls make, because the IDE doesn't know how to execute the exec-maven-plugin, as it doesn't map to an action that the IDE can do. So, you have to do something like mvn package -DskipTests to ensure exec-maven-plugin builds the native maps in the server/native module, and then load the project into Eclipse. At that point, the ITs should be able to find the native maps without any problems. This is just a quirk of how the IDE can't do everything the command-line can.\nIn any case, checking that the processes are up is a nice fast-fail, so the test doesn't hang in the IDE because of this.",
                "createdAt": "2022-01-05T19:53:28Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM47_APK",
                "body": "@dlmarion This change broke a bunch of ITs, and the numerous crashing ITs caused my Jenkins server to fall over from OOM due to zombie background MAC processes:\r\n\r\n```\r\n139 Failed Tests:\r\n    AccumuloFileOutputFormatIT.testRealWrite after 7.9 sec\r\n    AccumuloFileOutputFormatIT.writeBadVisibility after 8.1 sec\r\n    AccumuloInputFormatIT.testCorrectRangeInputSplits after 8 sec\r\n    AccumuloInputFormatIT.testSample after 8 sec\r\n    AccumuloOutputFormatIT.testMapred after 6.8 sec\r\n    AccumuloFileOutputFormatIT.testRealWrite after 7.9 sec\r\n    AccumuloFileOutputFormatIT.writeBadVisibility after 7.9 sec\r\n    AccumuloInputFormatIT.testCorrectRangeInputSplits after 7 sec\r\n    AccumuloInputFormatIT.testMapWithBatchScanner after 6.8 sec\r\n    AccumuloInputFormatIT.testGetSplits after 6.9 sec\r\n    AccumuloInputFormatIT.testSample after 7 sec\r\n    AccumuloInputFormatIT.testPartialInputSplitDelegationToConfiguration after 6.8 sec\r\n    AuditMessageIT.testDataOperationsAudits after 6.9 sec\r\n    AuditMessageIT.testImportExportOperationsAudits after 7 sec\r\n    AuditMessageIT.testDeniedAudits after 6.8 sec\r\n    AuditMessageIT.testTableOperationsAudits after 6.9 sec\r\n    AuditMessageIT.testUserOperationsAudits after 6.8 sec\r\n    BatchWriterInTabletServerIT.testNormalWrite after 8.1 sec\r\n    ClientSideIteratorIT.testIntersect after 7.9 sec\r\n    CloneIT.testClonedMarker after 7.9 sec\r\n    CloneIT.testFilesChange after 7.9 sec\r\n    CloneIT.testNoFiles after 8.1 sec\r\n    CloneIT.testSplit1 after 7.9 sec\r\n    CloneIT.testSplit2 after 7.9 sec\r\n    CloneIT.testSplit3 after 8.1 sec\r\n    ExistingMacIT.testExistingInstance after 34 sec\r\n    LargeSplitRowIT.automaticSplitLater after 6.9 sec\r\n    LargeSplitRowIT.automaticSplitWithGaps after 6.8 sec\r\n    LargeSplitRowIT.automaticSplitWith250Same after 6.9 sec\r\n    LargeSplitRowIT.automaticSplitWithoutGaps after 6.8 sec\r\n    MetaSplitIT.testRootTableSplit after 7.9 sec\r\n    MetaSplitIT.testMetadataTableSplit after 7.8 sec\r\n    MissingWalHeaderCompletesRecoveryIT.testPartialHeaderWalRecoveryCompletes after 7.7 sec\r\n    MultiTableBatchWriterIT.testOfflineTable after 8.1 sec\r\n    MultiTableBatchWriterIT.testTableRenameDataValidation after 8 sec\r\n    MultiT‚Ä¶\r\n```",
                "bodyText": "@dlmarion This change broke a bunch of ITs, and the numerous crashing ITs caused my Jenkins server to fall over from OOM due to zombie background MAC processes:\n139 Failed Tests:\n    AccumuloFileOutputFormatIT.testRealWrite after 7.9 sec\n    AccumuloFileOutputFormatIT.writeBadVisibility after 8.1 sec\n    AccumuloInputFormatIT.testCorrectRangeInputSplits after 8 sec\n    AccumuloInputFormatIT.testSample after 8 sec\n    AccumuloOutputFormatIT.testMapred after 6.8 sec\n    AccumuloFileOutputFormatIT.testRealWrite after 7.9 sec\n    AccumuloFileOutputFormatIT.writeBadVisibility after 7.9 sec\n    AccumuloInputFormatIT.testCorrectRangeInputSplits after 7 sec\n    AccumuloInputFormatIT.testMapWithBatchScanner after 6.8 sec\n    AccumuloInputFormatIT.testGetSplits after 6.9 sec\n    AccumuloInputFormatIT.testSample after 7 sec\n    AccumuloInputFormatIT.testPartialInputSplitDelegationToConfiguration after 6.8 sec\n    AuditMessageIT.testDataOperationsAudits after 6.9 sec\n    AuditMessageIT.testImportExportOperationsAudits after 7 sec\n    AuditMessageIT.testDeniedAudits after 6.8 sec\n    AuditMessageIT.testTableOperationsAudits after 6.9 sec\n    AuditMessageIT.testUserOperationsAudits after 6.8 sec\n    BatchWriterInTabletServerIT.testNormalWrite after 8.1 sec\n    ClientSideIteratorIT.testIntersect after 7.9 sec\n    CloneIT.testClonedMarker after 7.9 sec\n    CloneIT.testFilesChange after 7.9 sec\n    CloneIT.testNoFiles after 8.1 sec\n    CloneIT.testSplit1 after 7.9 sec\n    CloneIT.testSplit2 after 7.9 sec\n    CloneIT.testSplit3 after 8.1 sec\n    ExistingMacIT.testExistingInstance after 34 sec\n    LargeSplitRowIT.automaticSplitLater after 6.9 sec\n    LargeSplitRowIT.automaticSplitWithGaps after 6.8 sec\n    LargeSplitRowIT.automaticSplitWith250Same after 6.9 sec\n    LargeSplitRowIT.automaticSplitWithoutGaps after 6.8 sec\n    MetaSplitIT.testRootTableSplit after 7.9 sec\n    MetaSplitIT.testMetadataTableSplit after 7.8 sec\n    MissingWalHeaderCompletesRecoveryIT.testPartialHeaderWalRecoveryCompletes after 7.7 sec\n    MultiTableBatchWriterIT.testOfflineTable after 8.1 sec\n    MultiTableBatchWriterIT.testTableRenameDataValidation after 8 sec\n    MultiT‚Ä¶",
                "createdAt": "2022-01-06T08:27:34Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM47_P7A",
                "body": "Fixed the issue identified above in #2410 ",
                "bodyText": "Fixed the issue identified above in #2410",
                "createdAt": "2022-01-06T10:06:41Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM48ABFo",
                "body": "@ctubbsii - That's interesting. A few of the tests passed locally and all but two passed when run using GitHub Actions. I wonder what the difference is/was. Anyway, thanks for the assist. ",
                "bodyText": "@ctubbsii - That's interesting. A few of the tests passed locally and all but two passed when run using GitHub Actions. I wonder what the difference is/was. Anyway, thanks for the assist.",
                "createdAt": "2022-01-06T14:33:13Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 33,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4dqii-",
                "comments": [
                    {
                        "bodyText": "Maybe differentiate between the two error conditions?  Guessing on how the difference between the two messages should read.\n    Objects.requireNonNull(getClusterControl().managerProcess, \"Error starting manager - no process\");\n\nand\nObjects.requireNonNull(getClusterControl().managerProcess.info().startInstant().get(),\n        \"Error starting Manager - instance not started\");",
                        "body": "Maybe differentiate between the two error conditions?  Guessing on how the difference between the two messages should read.\r\n```\r\n    Objects.requireNonNull(getClusterControl().managerProcess, \"Error starting manager - no process\");\r\n```\r\nand\r\n```\r\nObjects.requireNonNull(getClusterControl().managerProcess.info().startInstant().get(),\r\n        \"Error starting Manager - instance not started\");\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 612,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 35efd1c",
                        "body": "Addressed in 35efd1c",
                        "startLine": null,
                        "line": null,
                        "originalLine": 612,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 612,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4dqiuV",
                "comments": [
                    {
                        "bodyText": "Should this read\n\"Error starting tserver\"\n\nand maybe add \"instance not started\" ?",
                        "body": "Should this read\r\n``` \r\n\"Error starting tserver\"\r\n```\r\nand maybe add \"instance not started\" ?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 624,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 35efd1c",
                        "body": "Addressed in 35efd1c",
                        "startLine": null,
                        "line": null,
                        "originalLine": 624,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 624,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4dqi8_",
                "comments": [
                    {
                        "bodyText": "maybe\nthrow new RuntimeException(\"TServer \" + child + \" not present in ZooKeeper\");",
                        "body": "maybe\r\n```\r\nthrow new RuntimeException(\"TServer \" + child + \" not present in ZooKeeper\");\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 656,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 35efd1c",
                        "body": "Addressed in 35efd1c",
                        "startLine": null,
                        "line": null,
                        "originalLine": 656,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 656,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4dqjQI",
                "comments": [
                    {
                        "bodyText": "Is instanceID only expected to be found once? If so, can we break out of the loop after it is found?\nAlso, is it possible that it is never found and instanceID stays null? If so, would that cause issues with ZooUtil.getRoot(instanceId)?",
                        "body": "Is `instanceID` only expected to be found once? If so, can we break out of the loop after it is found? \r\n\r\nAlso, is it possible that it is never found and `instanceID` stays null? If so, would that cause issues with `ZooUtil.getRoot(instanceId)`?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 645,
                        "originalStartLine": 633
                    },
                    {
                        "bodyText": "Addressed in 35efd1c",
                        "body": "Addressed in 35efd1c",
                        "startLine": null,
                        "line": null,
                        "originalLine": 645,
                        "originalStartLine": 633
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 645,
                "originalStartLine": 633,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4dqjVh",
                "comments": [
                    {
                        "bodyText": "It might be useful to make this public (and available outside of the impl) so tests can use it as well. I am pretty sure there are a few tests doing this already, maybe this could replace duplicate code.",
                        "body": "It might be useful to make this public (and available outside of the impl) so tests can use it as well. I am pretty sure there are a few tests doing this already, maybe this could replace duplicate code.",
                        "startLine": null,
                        "line": 609,
                        "originalLine": 610,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Do you know which tests?",
                        "body": "Do you know which tests?",
                        "startLine": null,
                        "line": 609,
                        "originalLine": 610,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I couldn't think of any off the top of my head but I did a quick search of ITs that look for ZK locks and found: RestartIT, ReadWriteIT, ThriftServerBindsBeforeZooKeeperLockIT, TabletStateChangeIteratorIT",
                        "body": "I couldn't think of any off the top of my head but I did a quick search of ITs that look for ZK locks and found: RestartIT, ReadWriteIT, ThriftServerBindsBeforeZooKeeperLockIT, TabletStateChangeIteratorIT",
                        "startLine": null,
                        "line": 609,
                        "originalLine": 610,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "And this could be a follow on task since its probably a lot of work.",
                        "body": "And this could be a follow on task since its probably a lot of work.",
                        "startLine": null,
                        "line": 609,
                        "originalLine": 610,
                        "originalStartLine": null
                    }
                ],
                "line": 609,
                "startLine": 609,
                "originalLine": 610,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4dqj3M",
                "comments": [
                    {
                        "bodyText": "I think this will always be true according to the while loop condition above.",
                        "body": "I think this will always be true according to the while loop condition above.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 667,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 35efd1c",
                        "body": "Addressed in 35efd1c",
                        "startLine": null,
                        "line": null,
                        "originalLine": 667,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 667,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4dqknO",
                "comments": [
                    {
                        "bodyText": "This (and other places) - could use a relational operator > or >= rather that equality - makes it harder to make a mistake, but likely a style preference. Some checkers would flag it in a for loop termination - which is essential what this is doing here.",
                        "body": "This (and other places) - could use a relational operator > or >= rather that equality - makes it harder to make a mistake, but likely a style preference. Some checkers would flag it in a for loop termination - which is essential what this is doing here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 661,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 35efd1c",
                        "body": "Addressed in 35efd1c",
                        "startLine": null,
                        "line": null,
                        "originalLine": 661,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 661,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4dsT6J",
                "comments": [
                    {
                        "bodyText": "requireNonNull could be a static import, so these lines are shorter and slightly easier to read everywhere.",
                        "body": "`requireNonNull` could be a static import, so these lines are shorter and slightly easier to read everywhere.",
                        "startLine": null,
                        "line": 611,
                        "originalLine": 611,
                        "originalStartLine": null
                    }
                ],
                "line": 611,
                "startLine": 611,
                "originalLine": 611,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4dsUCE",
                "comments": [
                    {
                        "bodyText": "all these occurrences of throw new RuntimeException could use a more specific RTE that is applicable, rather than the generic parent of all RTEs. IllegalStateException might be appropriate.",
                        "body": "all these occurrences of `throw new RuntimeException` could use a more specific RTE that is applicable, rather than the generic parent of all RTEs. `IllegalStateException` might be appropriate.",
                        "startLine": null,
                        "line": 646,
                        "originalLine": 646,
                        "originalStartLine": null
                    }
                ],
                "line": 646,
                "startLine": 646,
                "originalLine": 646,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "milleruntime",
            "EdColeman",
            "ctubbsii",
            "DomGarguilo"
        ],
        "tdv": 253.0,
        "description": {
            "bodyText": "Closes #1897"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3047,
        "title": {
            "body": "Log the client address when FrameBuffer read or write methods return false",
            "bodyHTML": "Log the client address when FrameBuffer read or write methods return false"
        },
        "comments": [],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4mXZxA",
                "comments": [
                    {
                        "bodyText": "I don't think we need to reference the issue, because it doesn't really help the user get more information at all about this. If you do provide a reference, though, might as well just provide a URL to the issue.\nAlso, I'm not sure we need to have these in here, commented out at all. This is one of many many possible trace logs that the user might be interested in, and I don't think we should comment them all out in the example log4j properties file.",
                        "body": "I don't think we need to reference the issue, because it doesn't really help the user get more information at all about this. If you do provide a reference, though, might as well just provide a URL to the issue.\r\n\r\nAlso, I'm not sure we need to have these in here, commented out at all. This is one of many many possible trace logs that the user might be interested in, and I don't think we should comment them all out in the example log4j properties file.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't think we need to reference the issue, because it doesn't really help the user get more information at all about this.\n\nDoesn't it provide more context, for example the possibility that it could be something external to the Accumulo cluster that is just connecting to open ports and sending data?\n\nAlso, I'm not sure we need to have these in here, commented out at all. This is one of many many possible trace logs that the user might be interested in, and I don't think we should comment them all out in the example log4j properties file.\n\nIn general, I agree with this. The problem here is that the user has to read the source code to find out all the places where trace logging may be available. I guess the solution here is to just change the root log level to trace ?",
                        "body": "> I don't think we need to reference the issue, because it doesn't really help the user get more information at all about this.\r\n\r\nDoesn't it provide more context, for example the possibility that it could be something external to the Accumulo cluster that is just connecting to open ports and sending data?\r\n\r\n> Also, I'm not sure we need to have these in here, commented out at all. This is one of many many possible trace logs that the user might be interested in, and I don't think we should comment them all out in the example log4j properties file.\r\n\r\nIn general, I agree with this. The problem here is that the user has to read the source code to find out all the places where trace logging may be available. I guess the solution here is to just change the root log level to `trace` ?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'll revert the commit that changed this file.",
                        "body": "I'll revert the commit that changed this file.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "In general, I agree with this. The problem here is that the user has to read the source code to find out all the places where trace logging may be available. I guess the solution here is to just change the root log level to trace\n\nThat's kinda true of any log statement at any log level. But, I especially don't think this is a burden for trace level. I'm hoping this is going to be something that isn't going to be needed very often once we watch it and figure out what's going on for ourselves.",
                        "body": "> In general, I agree with this. The problem here is that the user has to read the source code to find out all the places where trace logging may be available. I guess the solution here is to just change the root log level to trace\r\n\r\nThat's kinda true of any log statement at any log level. But, I especially don't think this is a burden for trace level. I'm hoping this is going to be something that isn't going to be needed very often once we watch it and figure out what's going on for ourselves.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "In general, I agree with this. The problem here is that the user has to read the source code to find out all the places where trace logging may be available.\n\nThe following package is the beginning of an attempt to centralize important logging in the source code and make it discoverable by users.  I would like to move more logging to that package.\nhttps://github.com/apache/accumulo/blob/main/core/src/main/java/org/apache/accumulo/core/logging/package-info.java",
                        "body": "> In general, I agree with this. The problem here is that the user has to read the source code to find out all the places where trace logging may be available.\r\n\r\nThe following package is the beginning of an attempt to centralize important logging in the source code and make it discoverable by users.  I would like to move more logging to that package.\r\n\r\nhttps://github.com/apache/accumulo/blob/main/core/src/main/java/org/apache/accumulo/core/logging/package-info.java",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I would like to move more logging to that package.\n\nYou mean as a task for a future release?",
                        "body": "> I would like to move more logging to that package.\r\n\r\nYou mean as a task for a future release?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "You mean as a task for a future release?\n\nyeah, for a future release would be nice to get the log messages better organized and cleaned up.",
                        "body": "> You mean as a task for a future release?\r\n\r\nyeah, for a future release would be nice to get the log messages better organized and cleaned up.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 82,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 82,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "assemble/conf/log4j2-service.properties",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "When FrameBuffer read and write methods return false it MAY be due to an error. Log at trace level the client address that it was trying to read from or write to. This will allow the user to modify the log level at runtime when they are seeing FrameBuffer errors being logged to try and identify the client.\nCloses #3042"
        }
    },
    {
        "repo": "commons-lang",
        "pr_number": 634,
        "title": {
            "body": "NumberUtilsTest - incorrect types in min/max tests",
            "bodyHTML": "NumberUtilsTest - incorrect types in min/max tests"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcxNjE1NDIzMQ==",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/34440090/badge)](https://coveralls.io/builds/34440090)\n\nCoverage increased (+0.2%) to 94.915% when pulling **d46f06e73ebf6cdb911855bbf1e6abcb8f9f1243 on HubertWo:numberUtilsTests** into **110b4c021e4901efab91499fedcdfb43c564ebdf on apache:master**.\n",
                "bodyText": "Coverage increased (+0.2%) to 94.915% when pulling d46f06e on HubertWo:numberUtilsTests into 110b4c0 on apache:master.",
                "createdAt": "2020-10-25T14:08:55Z",
                "author": "coveralls"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTExMDYwOnYy",
                "comments": [
                    {
                        "bodyText": "Please don't use star imports.",
                        "body": "Please don't use star imports.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 27,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Fixed.",
                        "body": "Fixed. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 27,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 27,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "HubertWo",
            "coveralls",
            "garydgregory"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Some of the tests related to finding min and max values does not have types declared. As a result min/max of value int methods are being tested multiple times without invoking target methods byte, long etc.\nI fixed types and added casting where required."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1761,
        "title": {
            "body": "Refactor TabletGroupWatcher",
            "bodyHTML": "Refactor TabletGroupWatcher"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTE0MDM4OnYy",
                "comments": [
                    {
                        "bodyText": "Introducing this class is really nice, really reduces a lot of methods parameters.",
                        "body": "Introducing this class is really nice, really reduces a lot of methods parameters.",
                        "startLine": null,
                        "line": 140,
                        "originalLine": 140,
                        "originalStartLine": null
                    }
                ],
                "line": 140,
                "startLine": 140,
                "originalLine": 140,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQxNDkxOnYy",
                "comments": [
                    {
                        "bodyText": "I think this method can be static now.",
                        "body": "I think this method can be static now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1678,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TabletGroupWatcher was the only thing using this method so I moved it from Master and made it private static.",
                        "body": "`TabletGroupWatcher` was the only thing using this method so I moved it from Master and made it private static.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1678,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "In 7355894",
                        "body": "In 73558943033d1a0e0167424e9f06cf834cfb0f39",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1678,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1678,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "keith-turner",
            "ctubbsii"
        ],
        "tdv": -10.0,
        "description": {
            "bodyText": "Create TabletLists to hold the many different data structures being\ntracked in the run method of TabletGroupWatcher\nCreate methods for some of the logic in the switch case\nPass TabletLists to the flush method and break flush into methods\nRename TabletLocationState.getServer() to getLocation() as location is\na more meaningful name instead of server"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2579,
        "title": {
            "body": "Lattice Puppy Stress Test Race Condition Fix and Code Cleanup",
            "bodyHTML": "Lattice Puppy Stress Test Race Condition Fix and Code Cleanup"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5ilKz0",
                "body": "PR approved by @xyuanlu \r\nCommit message: Lattice Puppy Stress Test Race Condition Fix and Code Cleanup",
                "bodyText": "PR approved by @xyuanlu\nCommit message: Lattice Puppy Stress Test Race Condition Fix and Code Cleanup",
                "createdAt": "2023-07-27T16:01:18Z",
                "author": "Marcosrico"
            }
        ],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4wnqmy",
                "comments": [
                    {
                        "bodyText": "just wondering, do you want to add 'finally' and make sure that cleanup() is executed in every code path properly?",
                        "body": "just wondering, do you want to add 'finally' and make sure that cleanup() is executed in every code path properly?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good catch, will add a finally statement - thanks!",
                        "body": "Good catch, will add a finally statement - thanks!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 69,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 69,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/AbstractPuppy.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4wnq6s",
                "comments": [
                    {
                        "bodyText": "just wondering, where will you be deleting recurively? as I don't see that in this change being called.",
                        "body": "just wondering, where will you be deleting recurively? as I don't see that in this change being called.",
                        "startLine": null,
                        "line": 66,
                        "originalLine": 66,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The cleanup is done in the individual tests (the deletion of the parent path)",
                        "body": "The cleanup is done in the individual tests (the deletion of the parent path)",
                        "startLine": null,
                        "line": 66,
                        "originalLine": 66,
                        "originalStartLine": null
                    }
                ],
                "line": 66,
                "startLine": 66,
                "originalLine": 66,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/impl/zk/TestMultiThreadStressTest/UpdatePuppy.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4wopCV",
                "comments": [
                    {
                        "bodyText": "NIT: would suggest to have style, refactor based PR a separate one. It can distract the review from core logic.",
                        "body": "NIT: would suggest to have style, refactor based PR a separate one. It can distract the review from core logic.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 234,
                        "originalStartLine": 233
                    },
                    {
                        "bodyText": "Sounds good, I'll remove style fixes from this PR, thanks!",
                        "body": "Sounds good, I'll remove style fixes from this PR, thanks!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 234,
                        "originalStartLine": 233
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 234,
                "originalStartLine": 233,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/impl/zk/TestMultiThreadStressTest/TestMultiThreadStressZKClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4wopNp",
                "comments": [
                    {
                        "bodyText": "Was this main thread set daemon? If yes, we don't have check the interrupted here.",
                        "body": "Was this main thread set daemon? If yes, we don't have check the interrupted here.",
                        "startLine": null,
                        "line": 58,
                        "originalLine": 58,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "No the thread is not a daemon thread.",
                        "body": "No the thread is not a daemon thread.",
                        "startLine": null,
                        "line": 58,
                        "originalLine": 58,
                        "originalStartLine": null
                    }
                ],
                "line": 58,
                "startLine": 58,
                "originalLine": 58,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/puppy/AbstractPuppy.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Marcosrico",
            "xyuanlu",
            "junkaixue",
            "desaikomal"
        ],
        "tdv": -27.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nThere was a race condition where the threads running the specific puppies would terminate, leading to the created znodes to be deleted. Because there were listeners on those nodes, they would increase the event change counter when the threads had already finished, causing the tests to fail.\nCode cleanup stems from bug: #2577\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nRemoved the cleanup section of the CRUD puppies (as cleanup will happen in the test case). Many of the cleanups weren't necessary and the ones that were (for CreatePuppy) was what caused the race condition.\nRe-structured code in AbstractPuppy for less redundancy and modified some print statements for easier readability.\nTests\n\n The following tests are written for this issue:\n\nTestMultiThreadStressZKClient.java\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2608,
        "title": {
            "body": "Accumulo Start JUnit5 conversion",
            "bodyHTML": "Accumulo Start JUnit5 conversion"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5A12To",
                "body": "It looks like some of the changed tests use both JUnit4 and JUnit5 imports. I think we might have to keep some tests as JUnit4 as long as we are using Powermock. For those tests, it is probably best to not mix imports and just keep those tests as JUnit4. It looks files were created outside of temporary directories (possibly due to the mix of JUnit4 and 5).",
                "bodyText": "It looks like some of the changed tests use both JUnit4 and JUnit5 imports. I think we might have to keep some tests as JUnit4 as long as we are using Powermock. For those tests, it is probably best to not mix imports and just keep those tests as JUnit4. It looks files were created outside of temporary directories (possibly due to the mix of JUnit4 and 5).",
                "createdAt": "2022-04-04T18:06:51Z",
                "author": "DomGarguilo"
            },
            {
                "id": "IC_kwDOACaFSM5A2toZ",
                "body": "Would moving the tests that use power mock to a separate file make sense? One the plus side all power mocks would be isolated and might be easier to identify and only those files would need junit4 - on the negative side testing would be split across multiple files which might require duplication in set-up, or just be confusing.  Something like \r\n```\r\norg.apache.accumulo.testing.powermock.foo - or whatever make sense\r\n```",
                "bodyText": "Would moving the tests that use power mock to a separate file make sense? One the plus side all power mocks would be isolated and might be easier to identify and only those files would need junit4 - on the negative side testing would be split across multiple files which might require duplication in set-up, or just be confusing.  Something like\norg.apache.accumulo.testing.powermock.foo - or whatever make sense",
                "createdAt": "2022-04-04T22:45:49Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5A3Zmo",
                "body": "> Would moving the tests that use power mock to a separate file make sense?\r\n\r\nThere's only one class that uses PowerMock in this module, and it's deprecated, to be removed in 3.0. I don't think it's worth spending too much time trying to get it working when it's being removed anyway. If necessary, we can keep this entire module using the vintage engine, and we can migrate to jupiter later. However... from what I've read, if you have both the vintage and jupiter engines on the class path, then the surefire plugin will run both kinds of tests anyway. So, we can keep just the one test class using the vintage stuff, and everything else can be migrated to jupiter. At least, I think that would work.",
                "bodyText": "Would moving the tests that use power mock to a separate file make sense?\n\nThere's only one class that uses PowerMock in this module, and it's deprecated, to be removed in 3.0. I don't think it's worth spending too much time trying to get it working when it's being removed anyway. If necessary, we can keep this entire module using the vintage engine, and we can migrate to jupiter later. However... from what I've read, if you have both the vintage and jupiter engines on the class path, then the surefire plugin will run both kinds of tests anyway. So, we can keep just the one test class using the vintage stuff, and everything else can be migrated to jupiter. At least, I think that would work.",
                "createdAt": "2022-04-05T04:47:56Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5BZbSS",
                "body": "This is looking good. Just had the one comment. Also, I was only able to get these tests to run with surefire version M6 so if you could merge main (which is on version M6) into this branch that would be good.\r\n\r\nAfter manually switching to M6 though, these tests pass in my IDE and when run with maven.",
                "bodyText": "This is looking good. Just had the one comment. Also, I was only able to get these tests to run with surefire version M6 so if you could merge main (which is on version M6) into this branch that would be good.\nAfter manually switching to M6 though, these tests pass in my IDE and when run with maven.",
                "createdAt": "2022-04-12T20:28:22Z",
                "author": "DomGarguilo"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4gUU7w",
                "comments": [
                    {
                        "bodyText": "This test can't use Jupiter APIs, because it uses PowerMock. It needs to stick to the vintage APIs, which we might need to keep in the pom.xml alongside the jupiter API.",
                        "body": "This test can't use Jupiter APIs, because it uses PowerMock. It needs to stick to the vintage APIs, which we might need to keep in the pom.xml alongside the jupiter API.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 37,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 37,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "start/src/test/java/org/apache/accumulo/start/classloader/vfs/AccumuloVFSClassLoaderTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4gXGov",
                "comments": [
                    {
                        "bodyText": "It looks like the tests pass fine like this but it might be a good idea to create a unique sub-directory within the private static File tempFolder for each test like you did in AccumuloReloadingVFSClassLoaderTest with folder1 and tmpDir and then create these folders within that sub-directory.",
                        "body": "It looks like the tests pass fine like this but it might be a good idea to create a unique sub-directory within the `private static File tempFolder` for each test like you did in AccumuloReloadingVFSClassLoaderTest with `folder1` and `tmpDir` and then create these folders within that sub-directory.",
                        "startLine": 65,
                        "line": 66,
                        "originalLine": 66,
                        "originalStartLine": 65
                    },
                    {
                        "bodyText": "The current code used these folder names. It's probably best to just leave them as-is, since everything still works as expected, and such a change would be unrelated to the actual conversion to the jupiter engine.",
                        "body": "The current code used these folder names. It's probably best to just leave them as-is, since everything still works as expected, and such a change would be unrelated to the actual conversion to the jupiter engine.",
                        "startLine": 65,
                        "line": 66,
                        "originalLine": 66,
                        "originalStartLine": 65
                    },
                    {
                        "bodyText": "The current way that these folders are created is different from before these changes were made. Before, a Junit4 TemporaryFolder was created for each test method and folder1 and folder2 were created inside that per-test-method directory giving them a unique path. Now, with the static TempDir, a single folder is created for all test methods and each test method will create these folders with the same path which may cause problems in certain situations. I guess its fine for now since these tests pass. I was just thinking that it could potentially cause issues in the future if more test methods are added that use these folders.",
                        "body": "The current way that these folders are created is different from before these changes were made. Before, a Junit4 TemporaryFolder was created for each test method and folder1 and folder2 were created inside that per-test-method directory giving them a unique path. Now, with the static TempDir, a single folder is created for all test methods and each test method will create these folders with the same path which may cause problems in certain situations. I guess its fine for now since these tests pass. I was just thinking that it could potentially cause issues in the future if more test methods are added that use these folders. ",
                        "startLine": 65,
                        "line": 66,
                        "originalLine": 66,
                        "originalStartLine": 65
                    }
                ],
                "line": 66,
                "startLine": 65,
                "originalLine": 66,
                "originalStartLine": 65,
                "subjectType": "LINE",
                "path": "start/src/test/java/org/apache/accumulo/start/classloader/vfs/ContextManagerTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "AlbertWhitlock",
            "DomGarguilo",
            "EdColeman",
            "ctubbsii"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Converts Accumulo-start module from JUnit4 to JUnit5."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4024,
        "title": {
            "body": "Fix MemoryStarved ITs",
            "bodyHTML": "Fix MemoryStarved ITs"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5tzHB4",
                "body": "These changes finished a build with the full ITs, and these tests did not fail... they didn't even flake. They seem to pass consistently now with these changes.",
                "bodyText": "These changes finished a build with the full ITs, and these tests did not fail... they didn't even flake. They seem to pass consistently now with these changes.",
                "createdAt": "2023-12-06T05:31:01Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5t1l8e",
                "body": "As I mentioned [here](https://github.com/apache/accumulo/pull/3977#issuecomment-1841970891), I think the deprecation changes should be removed from this PR and included in a new PR that also includes the `forRemoval` annotations on the Deprecated annotations in the Property class. Having this a separate PR would allow us to discuss the merits of `forRemoval` and hopefully put this issue to rest.",
                "bodyText": "As I mentioned here, I think the deprecation changes should be removed from this PR and included in a new PR that also includes the forRemoval annotations on the Deprecated annotations in the Property class. Having this a separate PR would allow us to discuss the merits of forRemoval and hopefully put this issue to rest.",
                "createdAt": "2023-12-06T12:25:32Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5t49bQ",
                "body": "I created #4032 for the forRemoval stuff.",
                "bodyText": "I created #4032 for the forRemoval stuff.",
                "createdAt": "2023-12-06T20:34:37Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM41--UN",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  @SuppressWarnings(\"deprecation\")\n          \n          \n            \n                  @SuppressWarnings(\"removal\")",
                        "body": "```suggestion\r\n      @SuppressWarnings(\"removal\")\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 334,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 334,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/balancer/SimpleLoadBalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM41--Yb",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              @Deprecated(since = \"3.1\")\n          \n          \n            \n              @Deprecated(since = \"3.1\", forRemoval = true)",
                        "body": "```suggestion\r\n  @Deprecated(since = \"3.1\", forRemoval = true)\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 31,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 31,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/balancer/data/TabletStatistics.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM41--fN",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              @Deprecated\n          \n          \n            \n              @SuppressWarnings(\"removal\")",
                        "body": "```suggestion\r\n  @SuppressWarnings(\"removal\")\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 49,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 49,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/manager/balancer/TabletStatisticsImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "dlmarion"
        ],
        "tdv": -2.0,
        "description": {
            "bodyText": "Rewrite MemoryConsumingIterator's method to compute the amount of memory to consume, so that:\n\nThe implementation is more comprehensible\nReplace exception with bounds checking\nAvoid allocating more than necessary (a single byte is sufficient)\nThe log message includes the amount of used memory detected\nThe waiting message appears, even when memory was allocated, because that's the behavior\nGive the GC more time to detect the changed GC condition before trying to detect the low memory condition\n\nAlso, remove hard-coded comments for size of heap and incorrect interval frequency, and increase the configured free memory threshold, so that the memory percentage isn't so low, it doesn't get lower than the minimum that G1GC needs to do its job by default on a 256K VM.\nThis fixes #3868\nAlso include trivial fixes:\n\nFix deprecation warning issues for getSplitCreationTime by making impl class deprecated instead of suppressing the interface deprecation, and use regular deprecations, not forRemoval=true, which complicates the way deprecations get inherited (see comments on #3977)\nRemove unused Logger"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2496,
        "title": {
            "body": "Modify ZooKeeperTestingServer to use Junit TemporaryFolder",
            "bodyHTML": "Modify ZooKeeperTestingServer to use Junit TemporaryFolder"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM4-Aim8",
                "body": "> LGTM - maybe @DomGarguilo can give a once over to see if there would be changes w.r.t. junit 5.\r\n\r\nThere will be changes since TemporaryFolder was removed in junit 5 but these changes look good and it wont be a difficult transition in these cases that were changed.",
                "bodyText": "LGTM - maybe @DomGarguilo can give a once over to see if there would be changes w.r.t. junit 5.\n\nThere will be changes since TemporaryFolder was removed in junit 5 but these changes look good and it wont be a difficult transition in these cases that were changed.",
                "createdAt": "2022-02-15T14:19:36Z",
                "author": "DomGarguilo"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4eukMm",
                "comments": [
                    {
                        "bodyText": "This should not accept the TemporaryFolder type, because that is a JUnit specific Rule type. It should instead accept a normal File directory, and TEMP.newFolder() be called prior to constructing this.",
                        "body": "This should not accept the TemporaryFolder type, because that is a JUnit specific Rule type. It should instead accept a normal `File` directory, and `TEMP.newFolder()` be called prior to constructing this.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 50,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This should not accept the TemporaryFolder type\n\nWhy? ZooKeeperTestingServer is a test class and this enforces that a TemporaryFolder is being used as part of the test.  I don't understand the logic here.",
                        "body": "> This should not accept the TemporaryFolder type\r\n\r\nWhy? ZooKeeperTestingServer is a test class and this enforces that a TemporaryFolder is being used as part of the test.  I don't understand the logic here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 50,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Because there's no reason to leak JUnit object types outside of JUnit test cases. It makes it harder to update JUnit test cases when we update JUnit-related things, and harder to reuse the utility code for situations where JUnit isn't on the class path (like an IT, inside a server, or inside accumulo-maven-plugin, etc.). We also try to avoid using JUnit assert methods in test utilities for the same reason (though I'm sure we have a few). It's not a strict rule or anything, just a general best practice to keep the code more maintainable and reusable.",
                        "body": "Because there's no reason to leak JUnit object types outside of JUnit test cases. It makes it harder to update JUnit test cases when we update JUnit-related things, and harder to reuse the utility code for situations where JUnit isn't on the class path (like an IT, inside a server, or inside accumulo-maven-plugin, etc.). We also try to avoid using JUnit assert methods in test utilities for the same reason (though I'm sure we have a few). It's not a strict rule or anything, just a general best practice to keep the code more maintainable and reusable.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 50,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The JUnit5 conversion was something that was on my radar for this, because I am aware that they got rid of TemporaryFolder. So, I was hoping to limit how much needed to be changed for migrating to JUnit5 regarding this code. If it's not done now, it'll need to be done later, so I figured let's avoid the churn and set ourselves up by using File instead of TemporaryFolder now.\n(Also, spotbugs is failing, but I assume you saw that already)",
                        "body": "The JUnit5 conversion was something that was on my radar for this, because I am aware that they got rid of TemporaryFolder. So, I was hoping to limit how much needed to be changed for migrating to JUnit5 regarding this code. If it's not done now, it'll need to be done later, so I figured let's avoid the churn and set ourselves up by using File instead of TemporaryFolder now.\r\n\r\n(Also, spotbugs is failing, but I assume you saw that already)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 50,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Removed TemporaryFolder in f9ed9a8",
                        "body": "Removed TemporaryFolder in f9ed9a8",
                        "startLine": null,
                        "line": null,
                        "originalLine": 50,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 50,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/zookeeper/ZooKeeperTestingServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4ewYQW",
                "comments": [
                    {
                        "bodyText": "I wonder if adding a check here that tmpDir is indeed a directory would be good. Not sure if its needed but we could add something like:\nPreconditions.checkArgument(tmpDir.isDirectory());\n\nor\nPreconditions.checkArgument(tmpDir.isDirectory() || tmpDir.mkdir());",
                        "body": "I wonder if adding a check here that tmpDir is indeed a directory would be good. Not sure if its needed but we could add something like:\r\n```\r\nPreconditions.checkArgument(tmpDir.isDirectory());\r\n```\r\nor\r\n```\r\nPreconditions.checkArgument(tmpDir.isDirectory() || tmpDir.mkdir());\r\n```",
                        "startLine": null,
                        "line": 56,
                        "originalLine": 54,
                        "originalStartLine": null
                    }
                ],
                "line": 56,
                "startLine": 56,
                "originalLine": 54,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/zookeeper/ZooKeeperTestingServer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "DomGarguilo",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": -50.0,
        "description": {
            "bodyText": "Modify ZooKeeperTestingServer to use Junit TemporaryFolder\nfor creating the ZooKeeper data directory instead of /tmp.\nRelated to #2474"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3154,
        "title": {
            "body": "Modify FilePrefix.fromPrefix to be more dynamic",
            "bodyHTML": "Modify FilePrefix.fromPrefix to be more dynamic"
        },
        "comments": [],
        "total_comments_count": 1,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4olK0m",
                "comments": [
                    {
                        "bodyText": "When I proposed this on #3148, I did not test it. The FilePrefix class should have a unit test that verifies this works correctly.",
                        "body": "When I proposed this on #3148, I did not test it. The FilePrefix class should have a unit test that verifies this works correctly.",
                        "startLine": 34,
                        "line": 35,
                        "originalLine": 35,
                        "originalStartLine": 34
                    }
                ],
                "line": 35,
                "startLine": 34,
                "originalLine": 35,
                "originalStartLine": 34,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/file/FilePrefix.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "dlmarion",
            "ctubbsii",
            "DomGarguilo"
        ],
        "tdv": null,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1945,
        "title": {
            "body": "Create readTablets method in Ample. Closes #1473",
            "bodyHTML": "Create readTablets method in Ample. Closes #1473"
        },
        "comments": [],
        "total_comments_count": 12,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2NjEzMjUzOnYy",
                "comments": [
                    {
                        "bodyText": "I wish we could enforce that there's no blank line between a method and its linked javadoc in the formatter, but I haven't found such a config.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n               */\n          \n          \n            \n            \n          \n          \n            \n              TabletsMetadata.TableOptions readTablets();\n          \n          \n            \n               */\n          \n          \n            \n              TabletsMetadata.TableOptions readTablets();",
                        "body": "I wish we could enforce that there's no blank line between a method and its linked javadoc in the formatter, but I haven't found such a config.\r\n```suggestion\r\n   */\r\n  TabletsMetadata.TableOptions readTablets();\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 163,
                        "originalStartLine": 161
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 163,
                "originalStartLine": 161,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/Ample.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2NjE0MDYzOnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              public TabletsMetadata.TableOptions readTablets() {\n          \n          \n            \n                TabletsMetadata.TableOptions builder = TabletsMetadata.builder(this.client);\n          \n          \n            \n                return builder;\n          \n          \n            \n              }\n          \n          \n            \n              public TabletsMetadata.TableOptions readTablets() {\n          \n          \n            \n                return TabletsMetadata.builder(this.client);\n          \n          \n            \n              }",
                        "body": "```suggestion\r\n  public TabletsMetadata.TableOptions readTablets() {\r\n    return TabletsMetadata.builder(this.client);\r\n  }\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 53,
                        "originalStartLine": 50
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 53,
                "originalStartLine": 50,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/AmpleImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2NjE2NDEyOnYy",
                "comments": [
                    {
                        "bodyText": "This precondition should have an accompanying description.",
                        "body": "This precondition should have an accompanying description.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'm not sure what this is guarding against... only one can be null and only one set? I feel like this would be less confusing as two separate checks.",
                        "body": "I'm not sure what this is guarding against... only one can be null and only one set? I feel like this would be less confusing as two separate checks.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "For description: \"Only the table or the level can be set\" ? I am not sure that makes sense in the context of the builder.",
                        "body": "For description: \"Only the table or the level can be set\" ? I am not sure that makes sense in the context of the builder.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Maybe \"scanTable() cannot be used in conjunction with forLevel() or forTable()\". I didn't look too deep into why these can't be used together, but that seems to be the restriction that is being enforced.",
                        "body": "Maybe \"scanTable() cannot be used in conjunction with forLevel() or forTable()\". I didn't look too deep into why these can't be used together, but that seems to be the restriction that is being enforced.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Also looks like forTablet() as well. I will include it in your suggestion.",
                        "body": "Also looks like `forTablet()` as well. I will include it in your suggestion.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I also just attempted to write a test for this error and it would be difficult since the builder interfaces protect against this condition.",
                        "body": "I also just attempted to write a test for this error and it would be difficult since the builder interfaces protect against this condition.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 96,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 96,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletsMetadata.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2NjE4MDI4OnYy",
                "comments": [
                    {
                        "bodyText": "This seems to be a new logger, but I don't see any new log messages in this PR. Is this unused?",
                        "body": "This seems to be a new logger, but I don't see any new log messages in this PR. Is this unused?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 56,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Dropped.",
                        "body": "Dropped.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 56,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 56,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/AccumuloClientIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2ODE4OTIwOnYy",
                "comments": [
                    {
                        "bodyText": "Would it improve readability if one of context or ctx was used consistently? The first two files reviewed used context, some of the rest seem to be using ctx - don't have a strong preference for either - context takes less mental translation, but ctx is almost as clear, and shorter.",
                        "body": "Would it improve readability if one of context or ctx was used consistently? The first two files reviewed used context, some of the rest seem to be using ctx - don't have a strong preference for either - context takes less mental translation, but ctx is almost as clear, and shorter.  ",
                        "startLine": null,
                        "line": 86,
                        "originalLine": 86,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Possibly but I think that is unrelated to this change.",
                        "body": "Possibly but I think that is unrelated to this change.",
                        "startLine": null,
                        "line": 86,
                        "originalLine": 86,
                        "originalStartLine": null
                    }
                ],
                "line": 86,
                "startLine": 86,
                "originalLine": 86,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/ConcurrentKeyExtentCache.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": 3.0,
        "description": {
            "bodyText": "Modify TabletsMetadata to impl readTablets in Ample\nModify classes calling TabletsMetadata to pass the client object as\npart of the builder init, instead of the final build method\nAdd testAmpleReadTablets to MetadataIT\n\nCo-authored-by: cradal 20303105+cradal@users.noreply.github.com\nUpdated version of #1651"
        }
    },
    {
        "repo": "commons-collections",
        "pr_number": 317,
        "title": {
            "body": "moved IndexFilter to its own file.",
            "bodyHTML": "moved IndexFilter to its own file."
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmGs5FuKbq",
                "body": "# [Codecov](https://codecov.io/gh/apache/commons-collections/pull/317?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) Report\n> Merging [#317](https://codecov.io/gh/apache/commons-collections/pull/317?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (57b5be9) into [master](https://codecov.io/gh/apache/commons-collections/commit/a79ea005b1ec4ad228067a9c5f2e10dcfb324c5e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (a79ea00) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n```diff\n@@             Coverage Diff              @@\n##             master     #317      +/-   ##\n============================================\n+ Coverage     86.07%   86.09%   +0.01%     \n- Complexity     4673     4685      +12     \n============================================\n  Files           287      287              \n  Lines         13511    13524      +13     \n  Branches       1983     1988       +5     \n============================================\n+ Hits          11630    11643      +13     \n  Misses         1321     1321              \n  Partials        560      560              \n```\n\n\n| [Impacted Files](https://codecov.io/gh/apache/commons-collections/pull/317?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) | Coverage Œî | |\n|---|---|---|\n| [.../commons/collections4/bloomfilter/IndexFilter.java](https://codecov.io/gh/apache/commons-collections/pull/317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L2Jsb29tZmlsdGVyL0luZGV4RmlsdGVyLmphdmE=) | `100.00% <100.00%> (√∏)` | |\n| [...commons/collections4/bloomfilter/SimpleHasher.java](https://codecov.io/gh/apache/commons-collections/pull/317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L2Jsb29tZmlsdGVyL1NpbXBsZUhhc2hlci5qYXZh) | `100.00% <100.00%> (√∏)` | |\n| [...ections4/bloomfilter/ArrayCountingBloomFilter.java](https://codecov.io/gh/apache/commons-collections/pull/317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L2Jsb29tZmlsdGVyL0FycmF5Q291bnRpbmdCbG9vbUZpbHRlci5qYXZh) | `100.00% <0.00%> (√∏)` | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/apache/commons-collections/pull/317?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation)\n> `Œî = absolute <relative> (impact)`, `√∏ = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/apache/commons-collections/pull/317?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation). Last update [a79ea00...57b5be9](https://codecov.io/gh/apache/commons-collections/pull/317?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation).\n",
                "bodyText": "Codecov Report\n\nMerging #317 (57b5be9) into master (a79ea00) will increase coverage by 0.01%.\nThe diff coverage is 100.00%.\n\n@@             Coverage Diff              @@\n##             master     #317      +/-   ##\n============================================\n+ Coverage     86.07%   86.09%   +0.01%     \n- Complexity     4673     4685      +12     \n============================================\n  Files           287      287              \n  Lines         13511    13524      +13     \n  Branches       1983     1988       +5     \n============================================\n+ Hits          11630    11643      +13     \n  Misses         1321     1321              \n  Partials        560      560              \n\n\n\nImpacted Files\nCoverage Œî\n\n\n\n\n\n.../commons/collections4/bloomfilter/IndexFilter.java\n100.00% <100.00%> (√∏)\n\n\n\n...commons/collections4/bloomfilter/SimpleHasher.java\n100.00% <100.00%> (√∏)\n\n\n\n...ections4/bloomfilter/ArrayCountingBloomFilter.java\n100.00% <0.00%> (√∏)\n\n\n\n\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\nŒî = absolute <relative> (impact), √∏ = not affected, ? = missing data\nPowered by Codecov. Last update a79ea00...57b5be9. Read the comment docs.",
                "createdAt": "2022-06-29T09:12:29Z",
                "author": "codecov-commenter"
            },
            {
                "id": "IC_kwDOAAMmGs5FuMb2",
                "body": "I believe my original idea was to move the entire `IndexFilter` class out of the `Hasher` interface. The public API should be:\r\n\r\n```Java\r\npublic final class IndexFilter {\r\n    /** No instances. */\r\n    private IndexFilter() {}\r\n\r\n    // ...\r\n    public static IntPredicate create(Shape shape, IntPredicate consumer);\r\n}\r\n```\r\n\r\nThen the workings of the returned predicate can be hidden. The two classes `ArrayTracker` and `BitMapTracker` should be inner classes and private (or package-private for testing). The implementations can be updated in the future without any change to the public API.\r\n",
                "bodyText": "I believe my original idea was to move the entire IndexFilter class out of the Hasher interface. The public API should be:\npublic final class IndexFilter {\n    /** No instances. */\n    private IndexFilter() {}\n\n    // ...\n    public static IntPredicate create(Shape shape, IntPredicate consumer);\n}\nThen the workings of the returned predicate can be hidden. The two classes ArrayTracker and BitMapTracker should be inner classes and private (or package-private for testing). The implementations can be updated in the future without any change to the public API.",
                "createdAt": "2022-06-29T09:18:33Z",
                "author": "aherbert"
            },
            {
                "id": "IC_kwDOAAMmGs5GFXnD",
                "body": "@aherbert if there is no objection I will merge this change.",
                "bodyText": "@aherbert if there is no objection I will merge this change.",
                "createdAt": "2022-07-06T05:57:18Z",
                "author": "Claudenw"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmGs4i4Bm2",
                "comments": [
                    {
                        "bodyText": "I do not think this needs to return an IndexFilter. It is more flexible for the implementation to return an IntPredicate:\npublic final class IndexFilter  /* not required - implements IntPredicate */ {\n\npublic static IntPredicate create(Shape shape, IntPredicate consumer) {\n    return new IndexFilter(shape, consumer)::test;\n}\nAll the documentation from the test method can be moved to the static constructor method.",
                        "body": "I do not think this needs to return an IndexFilter. It is more flexible for the implementation to return an `IntPredicate`:\r\n```Java\r\npublic final class IndexFilter  /* not required - implements IntPredicate */ {\r\n\r\npublic static IntPredicate create(Shape shape, IntPredicate consumer) {\r\n    return new IndexFilter(shape, consumer)::test;\r\n}\r\n```\r\n\r\nAll the documentation from the `test` method can be moved to the static constructor method.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Changing to returning the IntPredicate means that the test code can not test the selection of the tracker type.  Is this acceptable?",
                        "body": "Changing to returning the IntPredicate means that the test code can not test the selection of the tracker type.  Is this acceptable?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I do not think this matters. The current choice is an optimisation is based on memory usage. It could be changed in the future, for example based on a JMH benchmark test for performance. All that matters is that the test code exercises all paths and the returned predicate functions as expected.",
                        "body": "I do not think this matters. The current choice is an optimisation is based on memory usage. It could be changed in the future, for example based on a JMH benchmark test for performance. All that matters is that the test code exercises all paths and the returned predicate functions as expected.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "OK. It is changed now.",
                        "body": "OK. It is changed now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 40,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/collections4/bloomfilter/IndexFilter.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Claudenw",
            "codecov-commenter",
            "aherbert"
        ],
        "tdv": -31.0,
        "description": {
            "bodyText": "Partial fix for Collections 821"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2392,
        "title": {
            "body": "check connnect only called once",
            "bodyHTML": "check connnect only called once"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5XM6Ui",
                "body": "This change is ready to be merged. Approved by @rahulrane50 \r\n\r\nCommit message:\r\nAdd check in ZkClient.connect so it only called once. \r\n\r\nThis change adds an extra check in ZkClient.connect so that it will only be invoked once.\r\nAlso avoid close called in between of isclosed check and connection establishment in connect().\r\n",
                "bodyText": "This change is ready to be merged. Approved by @rahulrane50\nCommit message:\nAdd check in ZkClient.connect so it only called once.\nThis change adds an extra check in ZkClient.connect so that it will only be invoked once.\nAlso avoid close called in between of isclosed check and connection establishment in connect().",
                "createdAt": "2023-03-09T23:46:40Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4rAoqo",
                "comments": [
                    {
                        "bodyText": "Why do we need the lock at the beginning?",
                        "body": "Why do we need the lock at the beginning?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2521,
                        "originalStartLine": 2512
                    },
                    {
                        "bodyText": "_currentState and _isClosed are set in critical section in close().\nWe need to check these 2 state and create connection in critical section as well.",
                        "body": "`_currentState` and `_isClosed` are set in critical section in `close()`. \r\nWe need to check these 2 state and create connection in critical section as well.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2521,
                        "originalStartLine": 2512
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 2521,
                "originalStartLine": 2512,
                "subjectType": "LINE",
                "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4rApAy",
                "comments": [
                    {
                        "bodyText": "If I understand correctly, we should be releasing the lock",
                        "body": "If I understand correctly, we should be releasing the lock",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2519,
                        "originalStartLine": 2515
                    },
                    {
                        "bodyText": "+1",
                        "body": "+1",
                        "startLine": null,
                        "line": null,
                        "originalLine": 2519,
                        "originalStartLine": 2515
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 2519,
                "originalStartLine": 2515,
                "subjectType": "LINE",
                "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOAPIHxc4rEh9y",
                "comments": [
                    {
                        "bodyText": "@xyuanlu can you please help me in understanding how this gonna change current gap? Here is my understanding :\n\nCurrent isClosed() method also tries to take a zk event lock. But after your change we would try to acquire same zk event lock \"interruptibly\". I don't think there is much difference between these two right?\nI didn't understand why did we resolve old comment about not releasing lock in case of _currentState being null.",
                        "body": "@xyuanlu can you please help me in understanding how this gonna change current gap? Here is my understanding : \r\n1. Current isClosed() method also tries to take a zk event lock. But after your change we would try to acquire same zk event lock \"interruptibly\". I don't think there is much difference between these two right? \r\n2. I didn't understand why did we resolve old comment about not releasing lock in case of _currentState being null.",
                        "startLine": null,
                        "line": 2517,
                        "originalLine": 2517,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the comment.\n\nHaving state check and operation in the same critical section is a common practice. Taking the following flow char as example. In the code logic before this change, we do acquire lock before check if state is closed and release lock after that. The actual connection and close operation is also protected by this event lock. However, the close() operation can happen in between of 2 release lock and acquire lock. So generally we put when doing state check and operation in the same critical section.\n\nlock.release() in the final block will be executed when try block finishes smoothly or throw exceptions. The lock is released there.\n\nI always find the java doc for ReentrantLock is the best place to refer to. It has the most accurate explanation and solid examples. :D (https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html#lockInterruptibly())",
                        "body": "Thanks for the comment.\r\n1. Having state check and operation in the same critical section is a common practice. Taking the following flow char as example. In the code logic before this change, we do acquire lock before check if state is closed and release lock after that. The actual connection and close operation is also protected by this event lock. However, the `close()` operation can happen in between of 2 release lock and acquire lock. So generally we put when doing state check and operation in the same critical section.\r\n![Screenshot 2023-03-08 at 1 37 55 PM](https://user-images.githubusercontent.com/6392021/223856523-b686bad8-a69c-4540-9b8b-cc99f2760359.png)\r\n2. lock.release() in the final block will be executed when try block finishes smoothly or throw exceptions. The lock is released there. \r\n\r\nI always find the java doc for ReentrantLock is the best place to refer to. It has the most accurate explanation and solid examples. :D (https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html#lockInterruptibly())\r\n",
                        "startLine": null,
                        "line": 2517,
                        "originalLine": 2517,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Oh ok now I understand about this change! Thanks a lot @xyuanlu for explaining it patiently. Can we change the description for PR to this detailed explanation. I was wondering how are we adding extra check previously.",
                        "body": "Oh ok now I understand about this change! Thanks a lot @xyuanlu for explaining it patiently. Can we change the description for PR to this detailed explanation. I was wondering how are we adding extra check previously. ",
                        "startLine": null,
                        "line": 2517,
                        "originalLine": 2517,
                        "originalStartLine": null
                    }
                ],
                "line": 2517,
                "startLine": 2517,
                "originalLine": 2517,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "qqu0127",
            "rahulrane50"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#2393\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nThis change adds an extra check in ZkClient.connect so that it will only be invoked once.\nAlso avoid close called in between of isclosed check and connection establishment in connect().\n\nTests\n\n The following tests are written for this issue:\n\nNA\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 337.691 s - in org.apache.helix.rest.server.TestResourceAssignmentOptimizerAccessor\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n\n\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2490,
        "title": {
            "body": "Changes to ExternalCompaction ITs",
            "bodyHTML": "Changes to ExternalCompaction ITs"
        },
        "comments": [],
        "total_comments_count": 19,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4eto4q",
                "comments": [
                    {
                        "bodyText": "Some of this could be tightened up for readability:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                CompactionCoordinatorService.Client client = ThriftUtil.getClient(\n          \n          \n            \n                    new CompactionCoordinatorService.Client.Factory(), coordinatorHost.get(), context);\n          \n          \n            \n                try {\n          \n          \n            \n                  TExternalCompactionList running =\n          \n          \n            \n                      client.getRunningCompactions(TraceUtil.traceInfo(), context.rpcCreds());\n          \n          \n            \n                  return running;\n          \n          \n            \n                var client = ThriftUtil.getClient(new CompactionCoordinatorService.Client.Factory(), coordinatorHost.get(), context);\n          \n          \n            \n                try {\n          \n          \n            \n                  return client.getRunningCompactions(TraceUtil.traceInfo(), context.rpcCreds());",
                        "body": "Some of this could be tightened up for readability:\r\n```suggestion\r\n    var client = ThriftUtil.getClient(new CompactionCoordinatorService.Client.Factory(), coordinatorHost.get(), context);\r\n    try {\r\n      return client.getRunningCompactions(TraceUtil.traceInfo(), context.rpcCreds());\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 142,
                        "originalStartLine": 137
                    },
                    {
                        "bodyText": "I tightened this up a bit in [851c2c3]",
                        "body": "I tightened this up a bit in [851c2c3]",
                        "startLine": null,
                        "line": null,
                        "originalLine": 142,
                        "originalStartLine": 137
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 142,
                "originalStartLine": 137,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterControl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4etpJJ",
                "comments": [
                    {
                        "bodyText": "Awhile back, somebody (I think @jmark99) went through and standardized all our code on x == null instead of null == x. It'd be good to try to preserve that consistency going forward. We don't currently have an automated way to enforce this, but I think you might be one of the few who use this pattern.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  while (null == metrics) {\n          \n          \n            \n                  while (metrics == null) {",
                        "body": "Awhile back, somebody (I think @jmark99) went through and standardized all our code on `x == null` instead of `null == x`. It'd be good to try to preserve that consistency going forward. We don't currently have an automated way to enforce this, but I think you might be one of the few who use this pattern.\r\n\r\n```suggestion\r\n      while (metrics == null) {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 156,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I updated this in [851c2c3]",
                        "body": "I updated this in [851c2c3]",
                        "startLine": null,
                        "line": null,
                        "originalLine": 156,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 156,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterControl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4etpbM",
                "comments": [
                    {
                        "bodyText": "Sleeping for an arbitrary amount of time tends to result in very flaky tests, especially on slower test environments. Is it possible we can try to make this wait on a resulting condition, up to a max timeout, rather than hope that it's ready after 1 second?",
                        "body": "Sleeping for an arbitrary amount of time tends to result in very flaky tests, especially on slower test environments. Is it possible we can try to make this wait on a resulting condition, up to a max timeout, rather than hope that it's ready after 1 second?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 153,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I removed the sleep in [851c2c3]",
                        "body": "I removed the sleep in [851c2c3]",
                        "startLine": null,
                        "line": null,
                        "originalLine": 153,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 153,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterControl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4etprr",
                "comments": [
                    {
                        "bodyText": "Do all exceptions warrant merely sleeping and retrying? It seems to me that some exceptions might result in this never being able to succeed, and us leaving this thread waiting and retrying indefinitely.\nAlso, it'd be good to log the exception, at least at debug.",
                        "body": "Do all exceptions warrant merely sleeping and retrying? It seems to me that some exceptions might result in this never being able to succeed, and us leaving this thread waiting and retrying indefinitely.\r\n\r\nAlso, it'd be good to log the exception, at least at debug.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 160,
                        "originalStartLine": 159
                    },
                    {
                        "bodyText": "I modified this to only catch TException in [851c2c3].",
                        "body": "I modified this to only catch TException in [851c2c3]. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 160,
                        "originalStartLine": 159
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 160,
                "originalStartLine": 159,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterControl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4etrFz",
                "comments": [
                    {
                        "bodyText": "This isn't shorter, but I have found the IntStream semantics to be more readable in some cases. The following might be a suitable replacement, but it is a bit longer. It'd be shorter if there weren't any checked exceptions thrown.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  int count = 0;\n          \n          \n            \n                  for (int i = compactorProcesses.size();\n          \n          \n            \n                      count < limit && i < cluster.getConfig().getNumCompactors(); i++, ++count) {\n          \n          \n            \n                    compactorProcesses.add(cluster.exec(compactor, \"-q\", queueName).getProcess());\n          \n          \n            \n                  }\n          \n          \n            \n                  IntStream.range(compactorProcesses.size(), cluster.getConfig().getNumCompactors()).limit(limit).forEach(i -> {\n          \n          \n            \n                    try {\n          \n          \n            \n                      compactorProcesses.add(cluster.exec(compactor, \"-q\", queueName).getProcess());\n          \n          \n            \n                    } catch (IOException e) {\n          \n          \n            \n                      throw new UncheckedIOException(e);\n          \n          \n            \n                    }\n          \n          \n            \n                  });",
                        "body": "This isn't shorter, but I have found the IntStream semantics to be more readable in some cases. The following might be a suitable replacement, but it is a bit longer. It'd be shorter if there weren't any checked exceptions thrown.\r\n```suggestion\r\n      IntStream.range(compactorProcesses.size(), cluster.getConfig().getNumCompactors()).limit(limit).forEach(i -> {\r\n        try {\r\n          compactorProcesses.add(cluster.exec(compactor, \"-q\", queueName).getProcess());\r\n        } catch (IOException e) {\r\n          throw new UncheckedIOException(e);\r\n        }\r\n      });\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 173,
                        "originalStartLine": 169
                    },
                    {
                        "bodyText": "I left this as-is in [851c2c3]. The old style for loop is well-known. The new stream-style is only more readable if you are familiar with it.",
                        "body": "I left this as-is in [851c2c3]. The old style for loop is well-known. The new stream-style is only more readable if you are familiar with it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 173,
                        "originalStartLine": 169
                    },
                    {
                        "bodyText": "That's fine. I think the main issue is comprehensibility around the juggling of multiple loop variables. Here's another way this could be made more intuitive:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  int count = 0;\n          \n          \n            \n                  for (int i = compactorProcesses.size();\n          \n          \n            \n                      count < limit && i < cluster.getConfig().getNumCompactors(); i++, ++count) {\n          \n          \n            \n                    compactorProcesses.add(cluster.exec(compactor, \"-q\", queueName).getProcess());\n          \n          \n            \n                  }\n          \n          \n            \n                  int count = Math.min(limit, cluster.getConfig().getNumCompactors() - compactorProcesses.size());\n          \n          \n            \n                  for (int i = 0; i < count; i++) {\n          \n          \n            \n                    compactorProcesses.add(cluster.exec(compactor, \"-q\", queueName).getProcess());\n          \n          \n            \n                  }",
                        "body": "That's fine. I think the main issue is comprehensibility around the juggling of multiple loop variables. Here's another way this could be made more intuitive:\r\n\r\n```suggestion\r\n      int count = Math.min(limit, cluster.getConfig().getNumCompactors() - compactorProcesses.size());\r\n      for (int i = 0; i < count; i++) {\r\n        compactorProcesses.add(cluster.exec(compactor, \"-q\", queueName).getProcess());\r\n      }\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 173,
                        "originalStartLine": 169
                    },
                    {
                        "bodyText": "Applied change in 47981eb",
                        "body": "Applied change in 47981eb",
                        "startLine": null,
                        "line": null,
                        "originalLine": 173,
                        "originalStartLine": 169
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 173,
                "originalStartLine": 169,
                "subjectType": "LINE",
                "path": "minicluster/src/main/java/org/apache/accumulo/miniclusterImpl/MiniAccumuloClusterControl.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4etrmb",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  // TODO: Uncomment this if other tests are added.\n          \n          \n            \n                  // Uncomment this if other tests are added.",
                        "body": "```suggestion\r\n      // Uncomment this if other tests are added.\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 177,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Removed the todo in [851c2c3]",
                        "body": "Removed the todo in [851c2c3]",
                        "startLine": null,
                        "line": null,
                        "originalLine": 177,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 177,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/compaction/ExternalCompactionMetricsIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4etr1w",
                "comments": [
                    {
                        "bodyText": "Is the casting to MiniAccumuloClusterImpl still necessary here, or is it reachable from the IT superclass without that? I don't recall this being done in other tests. It might not be necessary anymore.",
                        "body": "Is the casting to `MiniAccumuloClusterImpl` still necessary here, or is it reachable from the IT superclass without that? I don't recall this being done in other tests. It might not be necessary anymore.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added startCoordinator and startCompactors to ClusterControl interface in [851c2c3] to remove casting. Throw UnsupportedOperationException for these methods in StandaloneClusterControl as they are not implemented yet.",
                        "body": "Added startCoordinator and startCompactors to ClusterControl interface in [851c2c3] to remove casting. Throw UnsupportedOperationException for these methods in StandaloneClusterControl as they are not implemented yet.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Cool. I think there were a few other casts like this, including the commented out one.",
                        "body": "Cool. I think there were a few other casts like this, including the commented out one.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I saw the one that was in comments. Fixed in 47981eb. Some of the other casts required more work to add the missing methods to the ClusterControl interface.",
                        "body": "I saw the one that was in comments. Fixed in 47981eb. Some of the other casts required more work to add the missing methods to the ClusterControl interface.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 90,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/compaction/ExternalCompactionProgressIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "ctubbsii"
        ],
        "tdv": 51.0,
        "description": {
            "bodyText": "Added CompactionCoordinator and Compactor to MiniAccumuloCluster. Modified ITs\nto extend SharedMiniClusterBase so that MAC was not being restarted for each\ntest method."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4201,
        "title": {
            "body": "fixes periodic failure with CompactionIT",
            "bodyHTML": "fixes periodic failure with CompactionIT"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM43_bXZ",
                "comments": [
                    {
                        "bodyText": "A comment here explaining why waitFor will not work could help prevent someone from seeing this and thinking that it could be converted back. (applies in two places)",
                        "body": "A comment here explaining why waitFor will not work could help prevent someone from seeing this and thinking that it could be converted back. (applies in two places)",
                        "startLine": null,
                        "line": 480,
                        "originalLine": 477,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Updated in 8a71feb",
                        "body": "Updated in 8a71feb",
                        "startLine": null,
                        "line": 480,
                        "originalLine": 477,
                        "originalStartLine": null
                    }
                ],
                "line": 480,
                "startLine": 480,
                "originalLine": 477,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/CompactionIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "EdColeman"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "The test CompactionIT.testConcurrentSplit() would periodically fail because it relied on the old behavior of WaitFor.  Changed the test to use custom code that waits up to three seconds for a condition to be met and then continues."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1620,
        "title": {
            "body": "Per Replica Throttle -- 1st: Skeleton implementation with output message same as input",
            "bodyHTML": "Per Replica Throttle -- 1st: Skeleton implementation with output message same as input"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc2NTU3MjY0NA==",
                "body": "Can we make the PR title more meaningful, what is PR1 here mean?  I know it is your first PR on this feature, but that does not really make much sense as the PR title. ",
                "bodyText": "Can we make the PR title more meaningful, what is PR1 here mean?  I know it is your first PR on this feature, but that does not really make much sense as the PR title.",
                "createdAt": "2021-01-22T17:32:40Z",
                "author": "lei-xia"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc2ODcwODUyNQ==",
                "body": "> I see the new classes are not licensed. Please do so.\r\n> \r\n> Moreover, I guess you didn't get my point of adding the test. Sorry that I should have made it clearer.\r\n> Overall, we want the PR to be small for reviewing. And it against our original goal that you add more logic back just to make the test complete. The test should cover whatever the code logic has, but the reverse way. For example, as I mentioned that the original logic only generates the empty result. This is hard to test. But you can just copy-paste whatever in the MessageOutput into the new throttling stage's result. In this case, I don't think you will need to add all the logic in [4d452e7](https://github.com/apache/helix/commit/4d452e76497d713e86acccc1d05e99d48c6ddac0).\r\n> And the test will verify 2 things only: 1. the stage can run without exception. 2. the output contains all the messages.\r\n\r\nChanged.",
                "bodyText": "I see the new classes are not licensed. Please do so.\nMoreover, I guess you didn't get my point of adding the test. Sorry that I should have made it clearer.\nOverall, we want the PR to be small for reviewing. And it against our original goal that you add more logic back just to make the test complete. The test should cover whatever the code logic has, but the reverse way. For example, as I mentioned that the original logic only generates the empty result. This is hard to test. But you can just copy-paste whatever in the MessageOutput into the new throttling stage's result. In this case, I don't think you will need to add all the logic in 4d452e7.\nAnd the test will verify 2 things only: 1. the stage can run without exception. 2. the output contains all the messages.\n\nChanged.",
                "createdAt": "2021-01-28T01:35:12Z",
                "author": "kaisun2000"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc3Mjc3MTg5Nw==",
                "body": "This PR is approved, please help to merge in\r\n> First part of Per Replica throttling, skeleton only output the input messages.\r\n\r\nPer replica throttling replacing intermediate stage which is partition based. The finer granularity\r\nwould skip boosting unnecessary replica in a recovery partition.",
                "bodyText": "This PR is approved, please help to merge in\n\nFirst part of Per Replica throttling, skeleton only output the input messages.\n\nPer replica throttling replacing intermediate stage which is partition based. The finer granularity\nwould skip boosting unnecessary replica in a recovery partition.",
                "createdAt": "2021-02-03T19:41:09Z",
                "author": "kaisun2000"
            }
        ],
        "total_comments_count": 95,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg0NDc3OnYy",
                "comments": [
                    {
                        "bodyText": "What is this? I think the default constructor is not necessary in a normal case.",
                        "body": "What is this? I think the default constructor is not necessary in a normal case.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 29,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 29,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 29,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg0ODUzOnYy",
                "comments": [
                    {
                        "bodyText": "If it is going to be output as the \"intermediate states\", then we do have a way to configure persisting this value, right? In this case, we can debug with the IdealState map field. So the debug log is not necessary here.",
                        "body": "If it is going to be output as the \"intermediate states\", then we do have a way to configure persisting this value, right? In this case, we can debug with the IdealState map field. So the debug log is not necessary here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 60,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Debug message is way better than persisting the value in ZK. The persist values only reflect the current snapshot of pipeline running. Debug messages give historically time series value. Also this is \"debug\" level. Normally without enabling it, it will not go out anyway. In time we really need to trouble shoot something, it would be much easier to enable it than examining persisted value or make a new build.\nIf you really think this is not that necessary, we can also remove this line.",
                        "body": "Debug message is way better than persisting the value in ZK. The persist values only reflect the current snapshot of pipeline running. Debug messages give historically time series value. Also this is \"debug\" level. Normally without enabling it, it will not go out anyway. In time we really need to trouble shoot something, it would be much easier to enable it than examining persisted value or make a new build. \r\n\r\nIf you really think this is not that necessary, we can also remove this line.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 60,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Your point is valid. I think it would help in general.\nBut in reality, I guess the raw data would be very hard to check if the cluster is very large. It would be best if we have some abstraction.",
                        "body": "Your point is valid. I think it would help in general.\r\nBut in reality, I guess the raw data would be very hard to check if the cluster is very large. It would be best if we have some abstraction.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 60,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "any proposal?",
                        "body": "any proposal?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 60,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Chatted offline. Feel free to reopen or with some psyudo code to illustrate the idea of abstraction.",
                        "body": "Chatted offline. Feel free to reopen or with some psyudo code to illustrate the idea of abstraction.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 60,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 60,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg1MzkxOnYy",
                "comments": [
                    {
                        "bodyText": "Please abstract these re-ordering logic to a private method. The output of the method would be prioritizedResourceList.",
                        "body": "Please abstract these re-ordering logic to a private method. The output of the method would be prioritizedResourceList.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is good idea. However, this code is carried from intermedidate stage.  is just to keep it the same as IntermediateStage to help people to understand this is not real change here. Let me know what is your take? Do we want to change?",
                        "body": "This is good idea. However, this code is carried from intermedidate stage.  is just to keep it the same as IntermediateStage to help people to understand this is not real change here. Let me know what is your take? Do we want to change?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "What is intermedidate stage? Just kidding.\nThis is a new code. Please assume that the intermedidate stage does not exist.",
                        "body": "What is intermedidate stage? Just kidding.\r\n\r\nThis is a new code. Please assume that the intermedidate stage does not exist.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done. Abstracted this logic to new private method getResourcePriorityList.",
                        "body": "Done. Abstracted this logic to new private method `getResourcePriorityList`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 90,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 90,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg1NTY5OnYy",
                "comments": [
                    {
                        "bodyText": "I suggest splitting the monitor functions to another PR. It should be added together with the corresponding unit tests.",
                        "body": "I suggest splitting the monitor functions to another PR. It should be added together with the corresponding unit tests.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 121,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed for now.",
                        "body": "removed for now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 121,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 121,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg2MTAyOnYy",
                "comments": [
                    {
                        "bodyText": "Shouldn't it be prioritizedResourceList, instead of output.resourceSet()?",
                        "body": "Shouldn't it be prioritizedResourceList, instead of output.resourceSet()?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 167,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think this should be output.\nNote input resources are basically prioritizedResourceList.  But some resource may be failed and no messages throttled or for whatever reason.  All the resources ends up in the  output are resources going out.\nOr you think we should use just prioritizedResourceList?",
                        "body": "I think this should be `output`.\r\n\r\nNote input resources are basically `prioritizedResourceList`.  But some resource may be failed and no messages throttled or for whatever reason.  All the resources ends up in the  `output` are resources going out. \r\n\r\nOr you think we should use just `prioritizedResourceList`?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 167,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I see. I agree with the logic. But I suggest making a new local resource name set to track the non-failure resources.\nThe resourceSet() method added to the output is not necessary, IMHO.",
                        "body": "I see. I agree with the logic. But I suggest making a new local resource name set to track the non-failure resources.\r\nThe resourceSet() method added to the output is not necessary, IMHO.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 167,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Will add monitoring in a separate PR, delete these code for now.",
                        "body": "Will add monitoring in a separate PR, delete these code for now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 167,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 167,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg2NDAxOnYy",
                "comments": [
                    {
                        "bodyText": "As commented below, I think this method is not necessary.",
                        "body": "As commented below, I think this method is not necessary.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "usage is like this:\nclusterStatusMonitor.setResourceRebalanceStates(output.resourceSet(), ResourceMonitor.RebalanceStatus.NORMAL);\notherwise, we will need to have a lot of code like the following:\nSet<String> normalResources  = new HashSet();\nfor (Resource res : resourceToBalance.valueSet()) {\n   Iterator<Partition> it  = resource.getPartitions().iterator();\n   Partition first = it.hasNext()? it.next(): null;\n   if (first == null) {\n      continue;\n   }\n   if (output.getMessages(resource, first) != null) {\n       normalResources.add(resource.getName());\n   }\n}\n\n\nNote due to MessageOutput only having getMessages(resource, partition). To test if a resource is there, we need to go through the trouble to test if a partition of a resource are there or not.\nAgain, this is not essential. If you think this way is better, we can use it. Or please draw some code to illustrate your idea here. If it works, we can also use that way.",
                        "body": "usage is like this:\r\n\r\n `clusterStatusMonitor.setResourceRebalanceStates(output.resourceSet(),\r\n          ResourceMonitor.RebalanceStatus.NORMAL);`\r\n\r\notherwise, we will need to have a lot of code like the following:\r\n\r\n```\r\nSet<String> normalResources  = new HashSet();\r\nfor (Resource res : resourceToBalance.valueSet()) {\r\n   Iterator<Partition> it  = resource.getPartitions().iterator();\r\n   Partition first = it.hasNext()? it.next(): null;\r\n   if (first == null) {\r\n      continue;\r\n   }\r\n   if (output.getMessages(resource, first) != null) {\r\n       normalResources.add(resource.getName());\r\n   }\r\n}\r\n\r\n```\r\n\r\nNote due to MessageOutput only having getMessages(resource, partition). To test if a resource is there, we need to go through the trouble to test if a partition of a resource are there or not. \r\n\r\nAgain, this is not essential. If you think this way is better, we can use it. Or please draw some code to illustrate your idea here. If it works, we can also use that way.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed for now as we will have another PR for monitoring.",
                        "body": "removed for now as we will have another PR for monitoring.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 40,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 40,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageOutput.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg2NzM3OnYy",
                "comments": [
                    {
                        "bodyText": "This method could be costly since it needs to read and create an unmodifiable view for all the messages for a resource. I think getMessages with resource name and partition shall be working fine. Can we use that instead?",
                        "body": "This method could be costly since it needs to read and create an unmodifiable view for all the messages for a resource. I think getMessages with resource name and partition shall be working fine. Can we use that instead?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 72,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "We talked about this before.\nThe usage is selectedMessage.getResourceMessages(resourceName). Without adding this new API, how can we  construct Map<Partition, List<Message>>?\nI think one has to do something like this:\nMap<Partition, List<Message>> partitonMsgMap = new HashMap();\nfor (Partition partition : resource.getPartitions()) {\n   List<Message> msgList = selectedMessage.getMessage( resource, parttiton);\n   partitionMsgMap.put(partition, messages);\n}\n\n\nThis would loop against all partition for resource. From CPU cycle, it won't save anything.\nAlso the code seems to be bloated to me.\nThis is not essential. If you think this way is better, we can also do it this way. Or there is another way in your mind, please draw the code out. If it works, we can also use it that way.",
                        "body": "We talked about this before. \r\nThe usage is `selectedMessage.getResourceMessages(resourceName)`. Without adding this new API, how can we  construct `Map<Partition, List<Message>>`? \r\n\r\nI think one has to do something like this:\r\n\r\n```\r\nMap<Partition, List<Message>> partitonMsgMap = new HashMap();\r\nfor (Partition partition : resource.getPartitions()) {\r\n   List<Message> msgList = selectedMessage.getMessage( resource, parttiton);\r\n   partitionMsgMap.put(partition, messages);\r\n}\r\n\r\n```\r\nThis would loop against all partition for resource. From CPU cycle, it won't save anything. \r\nAlso the code seems to be bloated to me.\r\n\r\nThis is not essential. If you think this way is better, we can also do it this way. Or there is another way in your mind, please draw the code out. If it works, we can also use it that way. \r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 72,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "We don't need to get the whole map. I think you can just pass the output to the user method and then call the existing method to fetch the list for each resource/partition.",
                        "body": "We don't need to get the whole map. I think you can just pass the output to the user method and then call the existing method to fetch the list for each resource/partition.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 72,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed getResourceMessages.",
                        "body": "removed getResourceMessages.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 72,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 72,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageOutput.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg3MjcxOnYy",
                "comments": [
                    {
                        "bodyText": "Let's add a TODO here since we discussed enabling throttling for the other rebalance modes as well. For this PR, I agree that we keep the current behavior. But since this will be treated as a new class technically, the condition here is not quite self-explaining. So some comments like TODO would make sense.",
                        "body": "Let's add a TODO here since we discussed enabling throttling for the other rebalance modes as well. For this PR, I agree that we keep the current behavior. But since this will be treated as a new class technically, the condition here is not quite self-explaining. So some comments like TODO would make sense.",
                        "startLine": 188,
                        "line": 189,
                        "originalLine": 194,
                        "originalStartLine": 193
                    },
                    {
                        "bodyText": "TODO added.\nThis one we need to be careful, as current intermediateCalcStage based throttling does not extend beyond full_auto.",
                        "body": "TODO added. \r\nThis one we need to be careful, as current intermediateCalcStage based throttling does not extend beyond full_auto.",
                        "startLine": 188,
                        "line": 189,
                        "originalLine": 194,
                        "originalStartLine": 193
                    }
                ],
                "line": 189,
                "startLine": 188,
                "originalLine": 194,
                "originalStartLine": 193,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg3NTAwOnYy",
                "comments": [
                    {
                        "bodyText": "Can you use the formal java doc format?\n@param output .....",
                        "body": "Can you use the formal java doc format?\r\n@param output .....",
                        "startLine": null,
                        "line": null,
                        "originalLine": 180,
                        "originalStartLine": 179
                    },
                    {
                        "bodyText": "fixed.",
                        "body": "fixed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 180,
                        "originalStartLine": 179
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 180,
                "originalStartLine": 179,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg3OTcwOnYy",
                "comments": [
                    {
                        "bodyText": "So this PR will throttle all the messages, right? How are we going to unit test it?\nI suggest that we let all messages pass first. Then the test can simply check if the output contains all the messages and if the retraced state is expected.",
                        "body": "So this PR will throttle all the messages, right? How are we going to unit test it?\r\nI suggest that we let all messages pass first. Then the test can simply check if the output contains all the messages and if the retraced state is expected.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 201,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This really boils down to where we should cut the line. Currently I am thinking let us first have skeleton in. Next PR, let us add these TODO steps and add the stage test in.\nDo do you want to have these steps and stage test in one PR? This could be a lot larger then. Several hundreds more lines.",
                        "body": "This really boils down to where we should cut the line. Currently I am thinking let us first have skeleton in. Next PR, let us add these TODO steps and add the stage test in. \r\n\r\nDo do you want to have these steps and stage test in one PR? This could be a lot larger then. Several hundreds more lines.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 201,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Either way works. 1. Only add the skeleton (which is not the only thing in this PR), 2. add the simple logic with some tests.",
                        "body": "Either way works. 1. Only add the skeleton (which is not the only thing in this PR), 2. add the simple logic with some tests.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 201,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added one recovery stage test and minimal code to make it pass for now. We can start from here.",
                        "body": "Added one recovery stage test and minimal code to make it pass for now. We can start from here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 201,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 201,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg4MzExOnYy",
                "comments": [
                    {
                        "bodyText": "If it is just calling compareTo(), do we need a special class as the comparator?",
                        "body": "If it is just calling compareTo(), do we need a special class as the comparator?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 242,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "see line 118 prioritizedResourceList.sort(new ResourcePriorityComparator());\nThe other thing is that these code (ResourcePriorityComparator etc)  is copied from intermediate stage. I think it is a good idea to keep it the same way. Otherwise, it may confuse people that we are implementing some new logic.",
                        "body": "see line 118 `prioritizedResourceList.sort(new ResourcePriorityComparator());`\r\n\r\nThe other thing is that these code (ResourcePriorityComparator etc)  is copied from intermediate stage. I think it is a good idea to keep it the same way. Otherwise, it may confuse people that we are implementing some new logic. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 242,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Intermediate stage has been patched too much now. Please don't refer to it. By splitting, we do expect every line to be reviewed as new code.\nAlso about the code style, I think Lambda is simpler. But no strong preference. If you can have a try and see which one do you prefer : )",
                        "body": "Intermediate stage has been patched too much now. Please don't refer to it. By splitting, we do expect every line to be reviewed as new code.\r\n\r\nAlso about the code style, I think Lambda is simpler. But no strong preference. If you can have a try and see which one do you prefer : )",
                        "startLine": null,
                        "line": null,
                        "originalLine": 242,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Let us Collection.sort() to get rid of ResourcePriorityComparator class.",
                        "body": "Let us Collection.sort() to get rid of `ResourcePriorityComparator` class.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 242,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "changed.",
                        "body": "changed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 242,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 242,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDg4OTE3OnYy",
                "comments": [
                    {
                        "bodyText": "If we just input the clusterConfig and resouceConfig as 2 parameters to the ResourcePriority constructor, then we can put all the above logic into the ResourcePriority class, right?\nIt would be a cleaner OO design.",
                        "body": "If we just input the clusterConfig and resouceConfig as 2 parameters to the ResourcePriority constructor, then we can put all the above logic into the ResourcePriority class, right?\r\nIt would be a cleaner OO design.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 119,
                        "originalStartLine": 97
                    },
                    {
                        "bodyText": "these code (ResourcePriorityComparator etc) is copied from intermediate stage. I think it is a good idea to keep it the same way. Otherwise, it may confuse people that we are implementing some new logic.\nWhat is your take here?",
                        "body": "these code (ResourcePriorityComparator etc) is copied from intermediate stage. I think it is a good idea to keep it the same way. Otherwise, it may confuse people that we are implementing some new logic. \r\n\r\nWhat is your take here?\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 119,
                        "originalStartLine": 97
                    },
                    {
                        "bodyText": "Please assume intermediate stage does not exist. I will review with this assumption at least.",
                        "body": "Please assume intermediate stage does not exist. I will review with this assumption at least.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 119,
                        "originalStartLine": 97
                    },
                    {
                        "bodyText": "Moved these logic to constructor of resource priority.",
                        "body": "Moved these logic to constructor of resource priority.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 119,
                        "originalStartLine": 97
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 119,
                "originalStartLine": 97,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MjM0MzY1OnYy",
                "comments": [
                    {
                        "bodyText": "Still as discussed before, we should avoid this kind of code just for testing purpose. If you need the info, we can log it where throttling happens.",
                        "body": "Still as discussed before, we should avoid this kind of code just for testing purpose. If you need the info, we can log it where throttling happens.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": 54
                    },
                    {
                        "bodyText": "I understand you would like to see these lists hold messages only for testing purpose to be separated from the production logic. I will try to address this concern.\nFor now, I would first make simple (only 1) test pass. Will using the test as an example, I will propose some ways to achieve the goal next in this same discussion thread, with some psudo-codes. If you agree with the proposal, I will make the change subsequently. Or you can draw some psudo-codes to illustrate a better idea.",
                        "body": "I understand you would like to see these lists hold messages only for testing purpose to be separated from the production logic. I will try to address this concern.\r\n\r\nFor now, I would first make simple (only 1) test pass. Will using the test as an example, I will propose some ways to achieve the goal next in this same discussion thread, with some psudo-codes. If you agree with the proposal, I will make the change subsequently. Or you can draw some psudo-codes to illustrate a better idea.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": 54
                    },
                    {
                        "bodyText": "Capture the test related messages into MsgRecordingPerReplicaThrottleStage now. Production code does not use event to store the throttled messages anymore.",
                        "body": "Capture the test related messages into `MsgRecordingPerReplicaThrottleStage` now. Production code does not use `event` to store the throttled messages anymore.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 55,
                        "originalStartLine": 54
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 55,
                "originalStartLine": 54,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MjcyNTk2OnYy",
                "comments": [
                    {
                        "bodyText": "It is a question instead of a change request. Shall we just reuse INTERMEDIATE_STATE?\nSo here are 2 options,\n\nWe keep the old behavior, and add a configuration to switch. In this case, we need to keep INTERMEDIATE_STATE and add this new one.\nWe replace the INTERMEDIATE stage with the new logic. Then we don't need to add the new field. We can just reuse INTERMEDIATE_STATE.",
                        "body": "It is a question instead of a change request. Shall we just reuse INTERMEDIATE_STATE?\r\n\r\nSo here are 2 options,\r\n1. We keep the old behavior, and add a configuration to switch. In this case, we need to keep INTERMEDIATE_STATE and add this new one.\r\n2. We replace the INTERMEDIATE stage with the new logic. Then we don't need to add the new field. We can just reuse INTERMEDIATE_STATE.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 59,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Let use option 1. This is more flexible.\nOption 2 can also be very confusing.",
                        "body": "Let use option 1. This is more flexible.\r\n\r\nOption 2 can also be very confusing.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 59,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 59,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MjcyNjgwOnYy",
                "comments": [
                    {
                        "bodyText": "Please remove unnecessary change.",
                        "body": "Please remove unnecessary change.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 27,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 27,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 27,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageOutput.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MjczMTIzOnYy",
                "comments": [
                    {
                        "bodyText": "nit, the name should fit the stage name, PER_REPLICA_THROTTLE_CAL_FAILED",
                        "body": "nit, the name should fit the stage name, PER_REPLICA_THROTTLE_CAL_FAILED",
                        "startLine": null,
                        "line": null,
                        "originalLine": 51,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "changed.",
                        "body": "changed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 51,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 51,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ResourceMonitor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2Mjc3MzEyOnYy",
                "comments": [
                    {
                        "bodyText": "Any comment about what is this class for? Why we need a child class of PerReplicaThrottleStage instead of just adding the logic there?",
                        "body": "Any comment about what is this class for? Why we need a child class of PerReplicaThrottleStage instead of just adding the logic there? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 19,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "See JK's comment #1620 (comment). This is to address his concern over there.",
                        "body": "See JK's comment https://github.com/apache/helix/pull/1620#discussion_r564007432. This is to address his concern over there. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 19,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "JK's point in sum is this: Basically the test need to know the throttled msgs and their type. This logic is not needed in PerReplicaThrottleStage.java",
                        "body": "JK's point in sum is this: Basically the test need to know the throttled msgs and their type. This logic is not needed in PerReplicaThrottleStage.java",
                        "startLine": null,
                        "line": null,
                        "originalLine": 19,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Anyway, for this diff, I already removed this file. We will add them back later.",
                        "body": "Anyway, for this diff, I already removed this file. We will add them back later.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 19,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I thought we need these 2 lists for the metric reporting, no? Anyway, we can defer the discussion.",
                        "body": "I thought we need these 2 lists for the metric reporting, no? Anyway, we can defer the discussion.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 19,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 19,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/controller/stages/MsgRecordingPerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzM5NzE3OnYy",
                "comments": [
                    {
                        "bodyText": "@kaisun2000 As I commented in the previous review, please add the license here.",
                        "body": "@kaisun2000 As I commented in the previous review, please add the license here.",
                        "startLine": null,
                        "line": 22,
                        "originalLine": 3,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "added. Got confused with another file that was removed.",
                        "body": "added. Got confused with another file that was removed.",
                        "startLine": null,
                        "line": 22,
                        "originalLine": 3,
                        "originalStartLine": null
                    }
                ],
                "line": 22,
                "startLine": 22,
                "originalLine": 3,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzQ1MjEzOnYy",
                "comments": [
                    {
                        "bodyText": "I thought it has been commented on, so I did not comment in the previous review.\nThe names of these 2 fields are very misleading. Please try to make it understandable even without reading the comment.\nAlso please check the other namings in the PR. Although I don't like to be strict on the naming, we shall avoid confusing names. Please double check.",
                        "body": "I thought it has been commented on, so I did not comment in the previous review.\r\nThe names of these 2 fields are very misleading. Please try to make it understandable even without reading the comment.\r\n\r\nAlso please check the other namings in the PR. Although I don't like to be strict on the naming, we shall avoid confusing names. Please double check.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 59,
                        "originalStartLine": 55
                    },
                    {
                        "bodyText": "You mean \"PER_REPLICA_THROTTLED_OUTPUT_MESSAGES\"? The previous review comment about another enum. thanks for pointing this out. Just checked, these two are the only left two.",
                        "body": "You mean \"PER_REPLICA_THROTTLED_OUTPUT_MESSAGES\"? The previous review comment about another enum. thanks for pointing this out. Just checked, these two are the only left two.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 59,
                        "originalStartLine": 55
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 59,
                "originalStartLine": 55,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzQ1OTc4OnYy",
                "comments": [
                    {
                        "bodyText": "nit, please remove the extra line.",
                        "body": "nit, please remove the extra line.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 212,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 212,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 212,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzQ2MDEzOnYy",
                "comments": [
                    {
                        "bodyText": "nit, please remove the extra line.",
                        "body": "nit, please remove the extra line.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 269,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 269,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 269,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzQ4MTY3OnYy",
                "comments": [
                    {
                        "bodyText": "nit, these codes could be improved a little bit, IMHO. Note the \"dataCache.getResourceConfig(resourceName)\" call is made 3 times.\nI suggest changing to the following,\nResourceConfig config = dataCache.getResourceConfig(resourceName)\nif (config != null) {\nString priority = dataCache.getResourceConfig(resourceName).getSimpleConfig(priorityField);\nthis.setPriority(priority == null ? DEFAULT_PRIORITY : priority);\n}\nThe other condition branch can be simplified in the same way.",
                        "body": "nit, these codes could be improved a little bit, IMHO. Note the \"dataCache.getResourceConfig(resourceName)\" call is made 3 times.\r\n\r\nI suggest changing to the following,\r\nResourceConfig config = dataCache.getResourceConfig(resourceName)\r\nif (config != null) {\r\n  String priority = dataCache.getResourceConfig(resourceName).getSimpleConfig(priorityField);\r\n  this.setPriority(priority == null ? DEFAULT_PRIORITY : priority);\r\n}\r\n\r\nThe other condition branch can be simplified in the same way.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 236,
                        "originalStartLine": 232
                    },
                    {
                        "bodyText": "This way it does not work. There is not such string as \"DEFAULT_PRIORITY\". What is more, defining another string like this and do the conversion to int would also waste CPU cycle.\nThere are many ways to write this kind of logic and they work equally well. How about let us just keep it this way?",
                        "body": "This way it does not work. There is not such string as \"DEFAULT_PRIORITY\". What is more, defining another string like this and do the conversion to int would also waste CPU cycle.\r\n\r\nThere are many ways to write this kind of logic and they work equally well. How about let us just keep it this way? ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 236,
                        "originalStartLine": 232
                    },
                    {
                        "bodyText": "We can always add the string.\nThe conversion is happening anyway. The value you get from the Map is also a String. This is a different topic.\nWhy not make this small change to simplify code without any side-effect?",
                        "body": "1. We can always add the string.\r\n2. The conversion is happening anyway. The value you get from the Map is also a String. This is a different topic.\r\n3. Why not make this small change to simplify code without any side-effect?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 236,
                        "originalStartLine": 232
                    },
                    {
                        "bodyText": "Changed to\n private final String DEFAULT_PRIORITY = Integer.valueOf(Integer.MIN_VALUE).toString();\n\n      _priority = Integer.valueOf(DEFAULT_PRIORITY);\n      _resourceName = resourceName;\n      String priorityField = dataCache.getClusterConfig().getResourcePriorityField();\n\n      if (priorityField != null) {\n        // Will take the priority from ResourceConfig first\n        // If ResourceConfig does not exist or does not have this field.\n        // Try to load it from the resource's IdealState. Otherwise, keep it at the lowest priority\n        ResourceConfig config = dataCache.getResourceConfig(resourceName);\n        IdealState idealState = dataCache.getIdealState(resourceName);\n        if (config != null) {\n          String priority = dataCache.getResourceConfig(resourceName).getSimpleConfig(priorityField);\n          this.setPriority(priority == null ? DEFAULT_PRIORITY : priority);\n        } else if (idealState != null) {\n          String priority = idealState.getRecord().getSimpleField(priorityField);\n          this.setPriority(priority == null ? DEFAULT_PRIORITY : priority);\n        }\n      }",
                        "body": "Changed to \r\n\r\n```\r\n private final String DEFAULT_PRIORITY = Integer.valueOf(Integer.MIN_VALUE).toString();\r\n\r\n      _priority = Integer.valueOf(DEFAULT_PRIORITY);\r\n      _resourceName = resourceName;\r\n      String priorityField = dataCache.getClusterConfig().getResourcePriorityField();\r\n\r\n      if (priorityField != null) {\r\n        // Will take the priority from ResourceConfig first\r\n        // If ResourceConfig does not exist or does not have this field.\r\n        // Try to load it from the resource's IdealState. Otherwise, keep it at the lowest priority\r\n        ResourceConfig config = dataCache.getResourceConfig(resourceName);\r\n        IdealState idealState = dataCache.getIdealState(resourceName);\r\n        if (config != null) {\r\n          String priority = dataCache.getResourceConfig(resourceName).getSimpleConfig(priorityField);\r\n          this.setPriority(priority == null ? DEFAULT_PRIORITY : priority);\r\n        } else if (idealState != null) {\r\n          String priority = idealState.getRecord().getSimpleField(priorityField);\r\n          this.setPriority(priority == null ? DEFAULT_PRIORITY : priority);\r\n        }\r\n      }\r\n```\r\n\r\n\r\n\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 236,
                        "originalStartLine": 232
                    },
                    {
                        "bodyText": "On a second thought, @jiajunwang , I think there is a bug in your new proposed code. They are not equivalent to the original code.\nAssuming the above is what you suggested. The case that if resourceConfig having priorityField, but retrieved value priority is null, we have priority as min_int (DEFAULT_PRIORITY). However, in the original code, in the original code (previously from intermediate stage), we should check idealstate priorityField value.\nThis is kind of tricky, as simplifying the original code has chance to introduce new bug.  since the above code is pushed to  this PR now. Shall we use the original code or shall we use following?\n private final String DEFAULT_PRIORITY = Integer.valueOf(Integer.MIN_VALUE).toString();\n\n      _priority = Integer.valueOf(DEFAULT_PRIORITY);\n      _resourceName = resourceName;\n      String priorityField = dataCache.getClusterConfig().getResourcePriorityField();\n\n      if (priorityField != null) {\n        // Will take the priority from ResourceConfig first\n        // If ResourceConfig does not exist or does not have this field.\n        // Try to load it from the resource's IdealState. Otherwise, keep it at the lowest priority\n        ResourceConfig config = dataCache.getResourceConfig(resourceName);\n        IdealState idealState = dataCache.getIdealState(resourceName);\n        if (config != null) {\n          String priority = dataCache.getResourceConfig(resourceName).getSimpleConfig(priorityField);\n          if (priority != null) {\n             this.setPriority(priority);\n          }\n        } \n        if (idealState != null) {\n          String priority = idealState.getRecord().getSimpleField(priorityField);\n          this.setPriority(priority == null ? DEFAULT_PRIORITY : priority);\n        }\n      }",
                        "body": "On a second thought, @jiajunwang , I think there is a bug in your new proposed code. They are not equivalent to the original code. \r\n\r\nAssuming the above is what you suggested. The case that if resourceConfig having priorityField, but retrieved value priority is null, we have priority as min_int (DEFAULT_PRIORITY). However, in the original code, in the original code (previously from intermediate stage), we should check idealstate priorityField value. \r\n\r\nThis is kind of tricky, as simplifying the original code has chance to introduce new bug.  since the above code is pushed to  this PR now. Shall we use the original code or shall we use following?\r\n\r\n```\r\n private final String DEFAULT_PRIORITY = Integer.valueOf(Integer.MIN_VALUE).toString();\r\n\r\n      _priority = Integer.valueOf(DEFAULT_PRIORITY);\r\n      _resourceName = resourceName;\r\n      String priorityField = dataCache.getClusterConfig().getResourcePriorityField();\r\n\r\n      if (priorityField != null) {\r\n        // Will take the priority from ResourceConfig first\r\n        // If ResourceConfig does not exist or does not have this field.\r\n        // Try to load it from the resource's IdealState. Otherwise, keep it at the lowest priority\r\n        ResourceConfig config = dataCache.getResourceConfig(resourceName);\r\n        IdealState idealState = dataCache.getIdealState(resourceName);\r\n        if (config != null) {\r\n          String priority = dataCache.getResourceConfig(resourceName).getSimpleConfig(priorityField);\r\n          if (priority != null) {\r\n             this.setPriority(priority);\r\n          }\r\n        } \r\n        if (idealState != null) {\r\n          String priority = idealState.getRecord().getSimpleField(priorityField);\r\n          this.setPriority(priority == null ? DEFAULT_PRIORITY : priority);\r\n        }\r\n      }\r\n\r\n```\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 236,
                        "originalStartLine": 232
                    },
                    {
                        "bodyText": "Sync-ed with JJ offline, the main concern is getResourceConfig is used three time, better to use once. Same for getIdealState.\nReduce to using once would work, still keeping the original code logic.",
                        "body": "Sync-ed with JJ offline, the main concern is `getResourceConfig` is used three time, better to use once. Same for `getIdealState`. \r\nReduce to using once would work, still keeping the original code logic.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 236,
                        "originalStartLine": 232
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 236,
                "originalStartLine": 232,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzQ5MzIxOnYy",
                "comments": [
                    {
                        "bodyText": "This is not used in this PR, right? Can we defer adding it and re-evaluate in the future PR when it is consumed?",
                        "body": "This is not used in this PR, right? Can we defer adding it and re-evaluate in the future PR when it is consumed?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 203,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 203,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 203,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzQ5NjM5OnYy",
                "comments": [
                    {
                        "bodyText": "Instead of adding an \"output\" parameter, please return the message output.",
                        "body": "Instead of adding an \"output\" parameter, please return the message output.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 165,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "changed.",
                        "body": "changed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 165,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 165,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzUwMzIyOnYy",
                "comments": [
                    {
                        "bodyText": "There are some inputs not used in the logic, currentStateOutput for example. Please remove them in this PR. We will re-evaluate them whenever they are really used.",
                        "body": "There are some inputs not used in the logic, currentStateOutput for example. Please remove them in this PR. We will re-evaluate them whenever they are really used.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 170,
                        "originalStartLine": 166
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 170,
                        "originalStartLine": 166
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 170,
                "originalStartLine": 166,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTcyMDE1OnYy",
                "comments": [
                    {
                        "bodyText": "I think we can use stream() to simplify the code here. But it is not a must.",
                        "body": "I think we can use stream() to simplify the code here. But it is not a must.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": 82
                    },
                    {
                        "bodyText": "changed to\nresourceMap.keySet().stream().forEach(\n        resourceName -> prioritizedResourceList.add(new ResourcePriority(resourceName, dataCache)));",
                        "body": "changed to \r\n```\r\nresourceMap.keySet().stream().forEach(\r\n        resourceName -> prioritizedResourceList.add(new ResourcePriority(resourceName, dataCache)));\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": 82
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 86,
                "originalStartLine": 82,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTcyMzA0OnYy",
                "comments": [
                    {
                        "bodyText": "Again, as I commented before, this is not used. Please remove.\nI know we want to accelerate the PR review, but it won't be fast with this kind of small problem here and there. And if a reviewer can see it in 5 mins, I don't see why the author cannot fix it in advance to avoid back and forth conversation, which definitely prolongs the review process significantly.",
                        "body": "Again, as I commented before, this is not used. Please remove.\r\n\r\nI know we want to accelerate the PR review, but it won't be fast with this kind of small problem here and there. And if a reviewer can see it in 5 mins, I don't see why the author cannot fix it in advance to avoid back and forth conversation, which definitely prolongs the review process significantly.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 103,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 103,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 103,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTk0NTAwOnYy",
                "comments": [
                    {
                        "bodyText": "I think the resource parameter is not necessary. It is used for 2 purposes. 1. get resource name (which is available in idealState), 2. get the partition list (which can be got from selectedResourceMessages). Let's remove it to simplify the code, and to avoid potential bugs that can be introduced by the possible conflicting parameters.",
                        "body": "I think the resource parameter is not necessary. It is used for 2 purposes. 1. get resource name (which is available in idealState), 2. get the partition list (which can be got from selectedResourceMessages). Let's remove it to simplify the code, and to avoid potential bugs that can be introduced by the possible conflicting parameters.",
                        "startLine": 205,
                        "line": 208,
                        "originalLine": 216,
                        "originalStartLine": 213
                    },
                    {
                        "bodyText": "changed to\nfor (Partition partition : selectedResourceMessages.keySet()) {\n}",
                        "body": "changed to\r\n```\r\nfor (Partition partition : selectedResourceMessages.keySet()) {\r\n}\r\n```",
                        "startLine": 205,
                        "line": 208,
                        "originalLine": 216,
                        "originalStartLine": 213
                    }
                ],
                "line": 208,
                "startLine": 205,
                "originalLine": 216,
                "originalStartLine": 213,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTk1MjAxOnYy",
                "comments": [
                    {
                        "bodyText": "Is this constructor used anywhere?",
                        "body": "Is this constructor used anywhere?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 261,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 261,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 261,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4OTcyNTU3OnYy",
                "comments": [
                    {
                        "bodyText": "nit, but please fix it before merging. Here, return what output???",
                        "body": "nit, but please fix it before merging. Here, return what output???",
                        "startLine": null,
                        "line": null,
                        "originalLine": 178,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Let me remove it, the same way as the other one.",
                        "body": "Let me remove it, the same way as the other one.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 178,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 178,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4OTcyODkwOnYy",
                "comments": [
                    {
                        "bodyText": "nit, not sure if you can just return a Map<Partition, List> instead of the MessageOutput? It seems to be overkill. But the logic is fine, obviously.",
                        "body": "nit, not sure if you can just return a Map<Partition, List<Message>> instead of the MessageOutput? It seems to be overkill. But the logic is fine, obviously.",
                        "startLine": null,
                        "line": 149,
                        "originalLine": 150,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "As you said, logic is obviously right, let us keep it this way",
                        "body": "As you said, logic is obviously right, let us keep it this way",
                        "startLine": null,
                        "line": 149,
                        "originalLine": 150,
                        "originalStartLine": null
                    }
                ],
                "line": 149,
                "startLine": 149,
                "originalLine": 150,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4OTczMjM4OnYy",
                "comments": [
                    {
                        "bodyText": "Please add something here about what is returned. Or just remove @return.",
                        "body": "Please add something here about what is returned. Or just remove @return.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 99,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed.",
                        "body": "removed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 99,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 99,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/stages/PerReplicaThrottleStage.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kaisun2000",
            "lei-xia",
            "jiajunwang",
            "junkaixue"
        ],
        "tdv": 48.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nenhance #343; first part skeleton.\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nFirst part of Per Replica throttling, skeleton.\nPer replica throttling replacing intermediate stage which is partition based. The finer granularity\nwould skip boosting unnecessary replica in a recovery partition.\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2987,
        "title": {
            "body": "Fixes for new Admin fate command",
            "bodyHTML": "Fixes for new Admin fate command"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5LU2rU",
                "body": "Another advantage to have the fate command run in Admin is that it doesn't require Accumulo to be running. So an admin can shut the cluster down and perform actions using the new command. The only exception is cancel requires the Manager to be running.",
                "bodyText": "Another advantage to have the fate command run in Admin is that it doesn't require Accumulo to be running. So an admin can shut the cluster down and perform actions using the new command. The only exception is cancel requires the Manager to be running.",
                "createdAt": "2022-09-30T16:07:04Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 12,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4ljomd",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                @Parameter(description = \"[<txId> <txId>...]\")\n          \n          \n            \n                @Parameter(description = \"<txId> { <txId> ... }\")\n          \n      \n    \n    \n  \n\nIt looks like for other parameters that accept a list we use this format",
                        "body": "```suggestion\r\n    @Parameter(description = \"<txId> { <txId> ... }\")\r\n```\r\nIt looks like for other parameters that accept a list we use this format",
                        "startLine": null,
                        "line": null,
                        "originalLine": 228,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I was trying to show that the txId is not always required.",
                        "body": "I was trying to show that the `txId` is not always required.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 228,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Ah gotcha",
                        "body": "Ah gotcha",
                        "startLine": null,
                        "line": null,
                        "originalLine": 228,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I was trying to base it on git sytnax guidelines and actually found them here. After reading through their guidelines, I think I could make the list for 0 or more shorter, like [<txId>...] and 1 or more like <txId>....\n[<patch>...]\n   (Zero or more of <patch>.  Note that the dots are inside, not\n   outside the brackets.)",
                        "body": "I was trying to base it on `git` sytnax guidelines and actually found them [here](https://github.com/git/git/blob/master/Documentation/CodingGuidelines#L639). After reading through their guidelines, I think I could make the list for 0 or more shorter, like `[<txId>...]` and 1 or more like `<txId>...`.\r\n\r\n```\r\n[<patch>...]\r\n   (Zero or more of <patch>.  Note that the dots are inside, not\r\n   outside the brackets.)\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 228,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 228,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/util/Admin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4lj3S7",
                "comments": [
                    {
                        "bodyText": "I still don't think we need this filtering. Users can filter by piping the output to grep, or whatever they like. We can put the list of states elsewhere in the help/description. The output should be easily computer-readable, to make parsing the output easy... but otherwise, we don't need to bake in too many filtering/display options. Let's keep it simple.",
                        "body": "I still don't think we need this filtering. Users can filter by piping the output to grep, or whatever they like. We can put the list of states elsewhere in the help/description. The output should be easily computer-readable, to make parsing the output easy... but otherwise, we don't need to bake in too many filtering/display options. Let's keep it simple.",
                        "startLine": null,
                        "line": 254,
                        "originalLine": 254,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Except that its just carrying over functionality from when it was a shell command - but either way....",
                        "body": "Except that its just carrying over functionality from when it was a shell command - but either way....",
                        "startLine": null,
                        "line": 254,
                        "originalLine": 254,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Okay. I don't know that we need to be tied to that same flag in the new tool, as long as we preserve all the same functionality, and filtering functionality is still easy and convenient, regardless of whether we carry over this flag. I'm not a big fan of carrying it over, but I'm not strongly opposed either... I just think it's unnecessary and redundant, and I'd prefer to delete it.",
                        "body": "Okay. I don't know that we need to be tied to that same flag in the new tool, as long as we preserve all the same functionality, and filtering functionality is still easy and convenient, regardless of whether we carry over this flag. I'm not a big fan of carrying it over, but I'm not strongly opposed either... I just think it's unnecessary and redundant, and I'd prefer to delete it.",
                        "startLine": null,
                        "line": 254,
                        "originalLine": 254,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Be sure to check FateSummaryIT",
                        "body": "Be sure to check FateSummaryIT",
                        "startLine": null,
                        "line": 254,
                        "originalLine": 254,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the reminder. FateSummaryIT is passing.\nThe functionality of the filtering is pretty simple and just calls the same methods as FateCommand. It is only a few lines of code to make the option available in the new command.",
                        "body": "Thanks for the reminder. FateSummaryIT is passing.\r\n\r\nThe functionality of the filtering is pretty simple and just calls the same methods as FateCommand. It is only a few lines of code to make the option available in the new command.",
                        "startLine": null,
                        "line": 254,
                        "originalLine": 254,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I tried removing it but the FateSummaryReport is using it as well. And it prints other information so doesn't really work with grep.",
                        "body": "I tried removing it but the FateSummaryReport is using it as well. And it prints other information so doesn't really work with grep.",
                        "startLine": null,
                        "line": 254,
                        "originalLine": 254,
                        "originalStartLine": null
                    }
                ],
                "line": 254,
                "startLine": 254,
                "originalLine": 254,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/util/Admin.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "dlmarion",
            "ctubbsii",
            "EdColeman",
            "DomGarguilo"
        ],
        "tdv": -8.0,
        "description": {
            "bodyText": "Closes #2974"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2895,
        "title": {
            "body": "Improvements to AESCryptoService",
            "bodyHTML": "Improvements to AESCryptoService"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5JLG-q",
                "body": "@dlmarion I noticed you ignored this error in the change you made against my branch:\r\n<pre>\r\n[ERROR] High: The cipher does not provide data integrity [org.apache.accumulo.core.spi.crypto.AESCryptoService] At AESCryptoService.java:[line 95] CIPHER_INTEGRITY\r\n</pre>\r\n\r\nDo you know why this is being flagged for the use in `ThreadLocal`?",
                "bodyText": "@dlmarion I noticed you ignored this error in the change you made against my branch:\n[ERROR] High: The cipher does not provide data integrity [org.apache.accumulo.core.spi.crypto.AESCryptoService] At AESCryptoService.java:[line 95] CIPHER_INTEGRITY\n\nDo you know why this is being flagged for the use in ThreadLocal?",
                "createdAt": "2022-08-25T19:01:16Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM5JLIIA",
                "body": "> @dlmarion I noticed you ignored this error in the change you made against my branch:\r\n> \r\n> [ERROR] High: The cipher does not provide data integrity [org.apache.accumulo.core.spi.crypto.AESCryptoService] At AESCryptoService.java:[line 95] CIPHER_INTEGRITY\r\n> Do you know why this is being flagged for the use in `ThreadLocal`?\r\n\r\nI resolved that [here](https://github.com/milleruntime/accumulo/pull/19/commits/d798f29009fb96fc25a688481ddbf9ce5ba5152d)",
                "bodyText": "@dlmarion I noticed you ignored this error in the change you made against my branch:\n[ERROR] High: The cipher does not provide data integrity [org.apache.accumulo.core.spi.crypto.AESCryptoService] At AESCryptoService.java:[line 95] CIPHER_INTEGRITY\nDo you know why this is being flagged for the use in ThreadLocal?\n\nI resolved that here",
                "createdAt": "2022-08-25T19:06:31Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5JOZrg",
                "body": "Tested encryption using Uno and CI.",
                "bodyText": "Tested encryption using Uno and CI.",
                "createdAt": "2022-08-26T13:47:08Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4kbt7Q",
                "comments": [
                    {
                        "bodyText": "I don't think this needs the synchronized modifier. This may have been included with an earlier change of mine and then not removed when I changed the code to use a ThreadLocal.",
                        "body": "I don't think this needs the `synchronized` modifier. This may have been included with an earlier change of mine and then not removed when I changed the code to use a ThreadLocal.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 562,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Fixed in 5aba179",
                        "body": "Fixed in https://github.com/apache/accumulo/pull/2895/commits/5aba17923c94b184cfe6fb3b428339ad6ce6d59b",
                        "startLine": null,
                        "line": null,
                        "originalLine": 562,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 562,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/crypto/AESCryptoService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4kbt9J",
                "comments": [
                    {
                        "bodyText": "Same comment here.",
                        "body": "Same comment here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 572,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Fixed in 5aba179",
                        "body": "Fixed in https://github.com/apache/accumulo/pull/2895/commits/5aba17923c94b184cfe6fb3b428339ad6ce6d59b",
                        "startLine": null,
                        "line": null,
                        "originalLine": 572,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 572,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/crypto/AESCryptoService.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "dlmarion"
        ],
        "tdv": 40.0,
        "description": {
            "bodyText": "Reduce Cipher.getInstance calls to once per file vs once per block\nMove wrap cipher to ThreadLocal thread\nAdd flush at the end of createCryptoParameters() before returning the byte array\nAdd logger and init checks"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2352,
        "title": {
            "body": "Refactoring MetaClient Exceptions",
            "bodyHTML": "Refactoring MetaClient Exceptions"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5T2Hh_",
                "body": "This PR is ready to merge, approved by @qqu0127 and @desaikomal \r\nCommit message:\r\nRefactoring MetaClient Exception. Creating separate exception directory.",
                "bodyText": "This PR is ready to merge, approved by @qqu0127 and @desaikomal\nCommit message:\nRefactoring MetaClient Exception. Creating separate exception directory.",
                "createdAt": "2023-01-27T15:59:53Z",
                "author": "Marcosrico"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4pin2r",
                "comments": [
                    {
                        "bodyText": "nit: typically this is not a good practice but for now, don't change as it was just existing code.",
                        "body": "nit: typically this is not a good practice but for now, don't change as it was just existing code.",
                        "startLine": null,
                        "line": 24,
                        "originalLine": 24,
                        "originalStartLine": null
                    }
                ],
                "line": 24,
                "startLine": 24,
                "originalLine": 24,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/impl/zk/util/ZkMetaClientUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "Marcosrico",
            "qqu0127",
            "desaikomal",
            "xyuanlu"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nN/A\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nMoving exception classes into a separate package: org.apache.helix.metaclient.exception\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2555,
        "title": {
            "body": "ZkClient - only register one time watcher for read data when not using persist listener.",
            "bodyHTML": "ZkClient - only register one time watcher for read data when not using persist listener."
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5hbm9I",
                "body": "This pr is ready to be merged. Approved by @desaikomal \r\nCommit message: [ZkClient - only register one time watcher for read data when not using persist listener.]\r\n\r\n",
                "bodyText": "This pr is ready to be merged. Approved by @desaikomal\nCommit message: [ZkClient - only register one time watcher for read data when not using persist listener.]",
                "createdAt": "2023-07-13T17:24:59Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4wDBeC",
                "comments": [
                    {
                        "bodyText": "can we also have test case where persistent watcher is not set, and the test still passes.",
                        "body": "can we also have test case where persistent watcher is not set, and the test still passes.",
                        "startLine": null,
                        "line": 520,
                        "originalLine": 520,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR! Good point. Added.",
                        "body": "TFTR! Good point. Added. ",
                        "startLine": null,
                        "line": 520,
                        "originalLine": 520,
                        "originalStartLine": null
                    }
                ],
                "line": 520,
                "startLine": 520,
                "originalLine": 520,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/test/java/org/apache/helix/metaclient/impl/zk/TestZkMetaClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "desaikomal"
        ],
        "tdv": 50.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#2554\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nFix issue 2554.\nZkClient tries to resubscribe one time watcher when reading an entry that has listener subscribed. In metaclient use case, we do not need to resubscribe as we are using persist watcher.\nThis change checks is persist watcher label is true. Only resubscribe if not using persist watcher.\nTests\n\n\n The following tests are written for this issue:\nTestZkMetaclient.testChangeListener()\nThis new test was constantly failing before the fix.\n\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3659,
        "title": {
            "body": "make option exclude-parent-properties, other minor clean-up",
            "bodyHTML": "make option exclude-parent-properties, other minor clean-up"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5im-gI",
                "body": "This PR doesn't seem to be triggering the GitHub Actions CI checks for some reason. Not really sure what's going on there.",
                "bodyText": "This PR doesn't seem to be triggering the GitHub Actions CI checks for some reason. Not really sure what's going on there.",
                "createdAt": "2023-07-27T19:21:24Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5in0t7",
                "body": "I manually triggered a re-run just to double check (https://github.com/apache/accumulo/actions/runs/5662956604)",
                "bodyText": "I manually triggered a re-run just to double check (https://github.com/apache/accumulo/actions/runs/5662956604)",
                "createdAt": "2023-07-27T21:24:43Z",
                "author": "EdColeman"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4wok1p",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                // exclude parent properties only valid with copy config\n          \n          \n            \n                // exclude parent properties; only valid with copy config",
                        "body": "```suggestion\r\n    // exclude parent properties; only valid with copy config\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 47,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CreateNamespaceCommand.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4wok5q",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                // exclude parent properties only valid with copy config\n          \n          \n            \n                // exclude parent properties; only valid with copy config",
                        "body": "```suggestion\r\n    // exclude parent properties; only valid with copy config\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 104,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 104,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CreateTableCommand.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "ctubbsii",
            "jmark99"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Change command option from exclude-parent to exclude-parent-properties for clarity.\nclarify command description present to uses\ncomment clean-up\n\nFrom additional comment in PR #3562 made after merge."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2333,
        "title": {
            "body": "Prepare zkclient for meta-client DataChangeListener implementation",
            "bodyHTML": "Prepare zkclient for meta-client DataChangeListener implementation"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5SBAhM",
                "body": "Thanks @desaikomal for the review and comments. \r\nThis PR is for new features, and it blocks https://github.com/apache/helix/pull/2327. So let's try to merge this soon if possible. \r\nI'll keep it noted for other PRs. Thanks again.",
                "bodyText": "Thanks @desaikomal for the review and comments.\nThis PR is for new features, and it blocks #2327. So let's try to merge this soon if possible.\nI'll keep it noted for other PRs. Thanks again.",
                "createdAt": "2023-01-09T17:30:53Z",
                "author": "qqu0127"
            },
            {
                "id": "IC_kwDOAPIHxc5SBHPm",
                "body": "This PR is ready to merge, commit message: \r\nNew features and improvement in zookeeper-api to prepare meta-client implementation.",
                "bodyText": "This PR is ready to merge, commit message:\nNew features and improvement in zookeeper-api to prepare meta-client implementation.",
                "createdAt": "2023-01-09T17:53:08Z",
                "author": "qqu0127"
            }
        ],
        "total_comments_count": 13,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4ojR9F",
                "comments": [
                    {
                        "bodyText": "May I ask why we need this class? Can zkMetaCLient implement IZkDataListener?",
                        "body": "May I ask why we need this class? Can zkMetaCLient implement IZkDataListener? ",
                        "startLine": null,
                        "line": 256,
                        "originalLine": 256,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This converter will be eventually added as IZkDataListener to zkclient. I don't think we want to make zkMetaCLient itself an listener.",
                        "body": "This converter will be eventually added as IZkDataListener to zkclient. I don't think we want to make zkMetaCLient itself an listener.",
                        "startLine": null,
                        "line": 256,
                        "originalLine": 256,
                        "originalStartLine": null
                    }
                ],
                "line": 256,
                "startLine": 256,
                "originalLine": 256,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/impl/zk/ZkMetaClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4olexB",
                "comments": [
                    {
                        "bodyText": "new to code base, so we have a new branch created for just metaclient?",
                        "body": "new to code base, so we have a new branch created for just metaclient?",
                        "startLine": null,
                        "line": 4,
                        "originalLine": 4,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes, this is going to merge to a feature branch, you can see that on under the PR title.",
                        "body": "Yes, this is going to merge to a feature branch, you can see that on under the PR title.",
                        "startLine": null,
                        "line": 4,
                        "originalLine": 4,
                        "originalStartLine": null
                    }
                ],
                "line": 4,
                "startLine": 4,
                "originalLine": 4,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": ".github/workflows/Helix-PR-CI.yml",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4olhFr",
                "comments": [
                    {
                        "bodyText": "why do we need this?",
                        "body": "why do we need this?",
                        "startLine": null,
                        "line": 288,
                        "originalLine": 288,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Because this is a converter class, as wrapper for the old listener interface. This is to make sure the JVM can recognize the underlying listener when we add/remove the listener.",
                        "body": "Because this is a converter class, as wrapper for the old listener interface. This is to make sure the JVM can recognize the underlying listener when we add/remove the listener.",
                        "startLine": null,
                        "line": 288,
                        "originalLine": 288,
                        "originalStartLine": null
                    }
                ],
                "line": 288,
                "startLine": 288,
                "originalLine": 288,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/impl/zk/ZkMetaClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4olhbd",
                "comments": [
                    {
                        "bodyText": "since this is during init, will this method be of any use?",
                        "body": "since this is during init, will this method be of any use?",
                        "startLine": null,
                        "line": 206,
                        "originalLine": 206,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sorry, I don't get it. This is the builder class, not zkclient itself.",
                        "body": "Sorry, I don't get it. This is the builder class, not zkclient itself.",
                        "startLine": null,
                        "line": 206,
                        "originalLine": 206,
                        "originalStartLine": null
                    }
                ],
                "line": 206,
                "startLine": 206,
                "originalLine": 206,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/ZkClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4olhg-",
                "comments": [
                    {
                        "bodyText": "why monitoring related code removed?",
                        "body": "why monitoring related code removed?",
                        "startLine": null,
                        "line": 245,
                        "originalLine": 245,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is moved to inside connect(), you can look at the code below. Those two things should be combined and always happen together.",
                        "body": "This is moved to inside `connect()`, you can look at the code below. Those two things should be combined and always happen together. ",
                        "startLine": null,
                        "line": 245,
                        "originalLine": 245,
                        "originalStartLine": null
                    }
                ],
                "line": 245,
                "startLine": 245,
                "originalLine": 245,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "qqu0127",
            "xyuanlu",
            "desaikomal"
        ],
        "tdv": 6.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nN.A.\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nSome new features and improve in zookeeper-api to prepare meta-client implementation.\n\n\nAdd a new method in IZkDataListener and a converter class in ZkMetaClient so that it's easier to reuse existing zkclient.\nImplement connectOnInit flag (backward compatible) to control whether zkclient should connect during initialization. (Meta-client API will require a separate connect() method to be called explicitly to connect.)\nMinor change in the code flow, constructor and ZkClientMonitor.\n\nTests\n\n\n The following tests are written for this issue:\n\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n[INFO] Reactor Summary for Apache Helix 1.0.5-SNAPSHOT:\n[INFO]\n[INFO] Apache Helix ....................................... SUCCESS [  3.743 s]\n[INFO] Apache Helix :: Metrics Common ..................... SUCCESS [  4.606 s]\n[INFO] Apache Helix :: Metadata Store Directory Common .... SUCCESS [  3.312 s]\n[INFO] Apache Helix :: ZooKeeper API ...................... SUCCESS [  6.523 s]\n[INFO] Apache Helix :: Helix Common ....................... SUCCESS [  2.037 s]\n[INFO] Apache Helix :: Core ............................... SUCCESS [ 18.894 s]\n[INFO] Apache Helix :: Admin Webapp ....................... SUCCESS [  2.963 s]\n[INFO] Apache Helix :: Restful Interface .................. SUCCESS [  6.143 s]\n[INFO] Apache Helix :: Distributed Lock ................... SUCCESS [  1.735 s]\n[INFO] Apache Helix :: HelixAgent ......................... SUCCESS [  2.277 s]\n[INFO] Apache Helix :: Recipes ............................ SUCCESS [  0.043 s]\n[INFO] Apache Helix :: Recipes :: Rabbitmq Consumer Group . SUCCESS [  2.419 s]\n[INFO] Apache Helix :: Recipes :: Rsync Replicated File Store SUCCESS [  2.026 s]\n[INFO] Apache Helix :: Recipes :: distributed lock manager  SUCCESS [  2.317 s]\n[INFO] Apache Helix :: Recipes :: distributed task execution SUCCESS [  2.331 s]\n[INFO] Apache Helix :: Recipes :: service discovery ....... SUCCESS [  2.548 s]\n[INFO] Apache Helix :: View Aggregator .................... SUCCESS [  1.638 s]\n[INFO] Apache Helix :: Meta Client ........................ SUCCESS [  1.241 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:08 min\n[INFO] Finished at: 2023-01-05T13:18:08-05:00\n[INFO] ------------------------------------------------------------------------\n\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "wicket",
        "pr_number": 604,
        "title": {
            "body": "[WICKET-7070] quickstart should be fixed",
            "bodyHTML": "[WICKET-7070] quickstart should be fixed"
        },
        "comments": [],
        "total_comments_count": 1,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmTM4xvX-V",
                "comments": [
                    {
                        "bodyText": "This commented out code could be removed now.",
                        "body": "This commented out code could be removed now.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 103,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 103,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "archetypes/quickstart/src/main/resources/archetype-resources/src/test/java/Start.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "solomax",
            "martin-g"
        ],
        "tdv": null,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "helix",
        "pr_number": 2488,
        "title": {
            "body": "add leader election API and dummy class",
            "bodyHTML": "add leader election API and dummy class"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5ctcwz",
                "body": "This PR is ready to be merged. Approved by @junkaixue and @desaikomal \r\nCommit message:\r\nAdd leader election API and dummy class",
                "bodyText": "This PR is ready to be merged. Approved by @junkaixue and @desaikomal\nCommit message:\nAdd leader election API and dummy class",
                "createdAt": "2023-05-20T01:43:55Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 34,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4tkTeo",
                "comments": [
                    {
                        "bodyText": "Going by the comment since either curLeader/prevLeader will be null on acquire/relinquish, I feel it's better to modify the signature of the function to use onLeadershipChange(String leaderPath, String leader, Enum EVENT( RELINQUISH/ACQUIRE) event.\nIn case I misunderstood, can you rename noLeader/ hasLeader to match the context of prevLeader/cureLeader",
                        "body": "Going by the comment since either curLeader/prevLeader will be null on acquire/relinquish, I feel it's better to modify the signature of the function to use `onLeadershipChange(String leaderPath, String leader, Enum EVENT( RELINQUISH/ACQUIRE) event`. \r\n\r\nIn case I misunderstood, can you rename `noLeader/ hasLeader` to match the context of `prevLeader/cureLeader`",
                        "startLine": null,
                        "line": 31,
                        "originalLine": 31,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "As discussed offline. This API is more aligned with current use case.",
                        "body": "As discussed offline. This API is more aligned with current use case. ",
                        "startLine": null,
                        "line": 31,
                        "originalLine": 31,
                        "originalStartLine": null
                    }
                ],
                "line": 31,
                "startLine": 31,
                "originalLine": 31,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionListenerInterface.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkUTn",
                "comments": [
                    {
                        "bodyText": "Is it like if the participant is able to acquire leadership return true else false, if so can we rename this to acquireLeadership",
                        "body": "Is it like if the participant is able to acquire leadership return true else false, if so can we rename this to `acquireLeadership` ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This client maintains an active leader from pool of participants. There is no explicit elect leader call.\n(Please refer to the comment part. )\nI will update the comment as this is ambiguous.",
                        "body": "This client maintains an active leader from pool of participants. There is no explicit elect leader call.\r\n(Please refer to the comment part. )\r\n\r\nI will update the comment as this is ambiguous. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah, the comment made me think like it's acquiring leadership, so an update would be helpful.\nWhen you say there is no explicit elect leader call, do you mean joinLeaderElectionParticipantPool() will trigger a leader election for that path if there isn't a leader elected? If so can you update the description of the method.",
                        "body": "Yeah, the comment made me think like it's acquiring leadership, so an update would be helpful. \r\n\r\nWhen you say there is no explicit elect leader call, do you mean `joinLeaderElectionParticipantPool()` will trigger a leader election for that path if there isn't a leader elected? If so can you update the description of the method.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. Updated.",
                        "body": "TFTR. Updated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 64,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 64,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkUcP",
                "comments": [
                    {
                        "bodyText": "nit: Can we add a comment returns true if participant is able to join the pool else false and also the descriptions for the parameters of the function. (Sorry but I couldn't get what is the purpose of userInfo).",
                        "body": "nit: Can we add a comment `returns true if participant is able to join the pool else false` and also the descriptions for the parameters of the function. (Sorry but I couldn't get what is the purpose of `userInfo`).",
                        "startLine": null,
                        "line": 95,
                        "originalLine": 71,
                        "originalStartLine": null
                    }
                ],
                "line": 95,
                "startLine": 95,
                "originalLine": 71,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkVDS",
                "comments": [
                    {
                        "bodyText": "nit:  May be If the participant is not the current leader, it leaves the pool and thus won't be able to participate in the leader election process moving forward. cause won't be elected as next leader sounds like this participant was going to be the next leader üòÖ",
                        "body": "nit:  May be `If the participant is not the current leader, it leaves the pool and thus won't be able to participate in the leader election process moving forward.` cause `won't be elected as next leader sounds like this participant was going to be the next leader` üòÖ ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 79,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. Will update comments.",
                        "body": "TFTR. Will update comments. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 79,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 79,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkVRz",
                "comments": [
                    {
                        "bodyText": "nit: If you want you can rename this to leave instead of exit cause when you join something you leave üòÇ",
                        "body": "nit: If you want you can rename this to `leave` instead of `exit` cause when you join something you leave üòÇ ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 83,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 83,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkWh3",
                "comments": [
                    {
                        "bodyText": "One question for my understanding, do we want the LeaderElectionClient to be for a specific path or is it like this is one single stop for all the leadership related stuff for multiple paths. I feel that we should make it specific to a path, and sort of have a manager that manages multiple paths if wanted. In this way we keep the LeaderElectionClient clean.\nCan you also add that to the description if possible.",
                        "body": "One question for my understanding, do we want the `LeaderElectionClient` to be for a specific `path` or is it like this is one single stop for all the leadership related stuff for multiple paths. I feel that we should make it specific to a path, and sort of have a manager that manages multiple paths if wanted. In this way we keep the `LeaderElectionClient` clean. \r\n\r\nCan you also add that to the description if possible.",
                        "startLine": null,
                        "line": 45,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for raising the question.\nThis client is designed to be used for\n\nEnd user that need to leader ship election or coordination. There may be one leader election group or more than one leader election group on each app or JVM.\nPotentially an leader election service that hosts distributed leader election service.\n\nIn either case, more than one path may co-exist. Having one client is more efficient.",
                        "body": "Thanks for raising the question. \r\nThis client is designed to be used for \r\n1. End user that need to leader ship election or coordination. There may be one leader election group or more than one leader election group on each app or JVM.\r\n2. Potentially an leader election service that hosts distributed leader election service.\r\n\r\nIn either case, more than one path may co-exist. Having one client is more efficient. ",
                        "startLine": null,
                        "line": 45,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Gotcha! I agree that we should have one client. It's more from a naming perspective where I feel there should a LeaderElectionManager that manages LeaderElectionClient which only deals with one single path and consumers interact with the manager and not the client.",
                        "body": "Gotcha! I agree that we should have one client. It's more from a naming perspective where I feel there should a `LeaderElectionManager` that manages `LeaderElectionClient which only deals with one single path` and consumers interact with the manager and not the client.",
                        "startLine": null,
                        "line": 45,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "LeaderElectionManager  sounds like a centralized service. It is still a client.",
                        "body": "`LeaderElectionManager ` sounds like a centralized service. It is still a client.",
                        "startLine": null,
                        "line": 45,
                        "originalLine": 40,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Ok. Thanks!",
                        "body": "Ok. Thanks!",
                        "startLine": null,
                        "line": 45,
                        "originalLine": 40,
                        "originalStartLine": null
                    }
                ],
                "line": 45,
                "startLine": 45,
                "originalLine": 40,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkWuo",
                "comments": [
                    {
                        "bodyText": "nit: node and not nodes üòÖ",
                        "body": "nit: `node` and not `nodes` üòÖ ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 95,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 95,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkXIy",
                "comments": [
                    {
                        "bodyText": "Can we add some description related to this class. Also should we return LeaderInfo when you do LeaderElectionClient.getLeader()?",
                        "body": "Can we add some description related to this class. Also should we return `LeaderInfo` when you do `LeaderElectionClient.getLeader()`?",
                        "startLine": null,
                        "line": 28,
                        "originalLine": 25,
                        "originalStartLine": null
                    }
                ],
                "line": 28,
                "startLine": 28,
                "originalLine": 25,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderInfo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkao5",
                "comments": [
                    {
                        "bodyText": "nit: all sentences can end with '.' at the end. just a nit.",
                        "body": "nit: all sentences can end with '.' at the end. just a nit.",
                        "startLine": null,
                        "line": 33,
                        "originalLine": 33,
                        "originalStartLine": null
                    }
                ],
                "line": 33,
                "startLine": 33,
                "originalLine": 33,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkbKk",
                "comments": [
                    {
                        "bodyText": "getParticipants sounds appropriate. this is not master/follower correct?",
                        "body": "getParticipants sounds appropriate. this is not master/follower correct?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 105,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 105,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkbQv",
                "comments": [
                    {
                        "bodyText": "what is the contract - when leaderPath doesn't exist? will we create and wait for others to participate?",
                        "body": "what is the contract - when leaderPath doesn't exist? will we create and wait for others to participate?",
                        "startLine": null,
                        "line": 167,
                        "originalLine": 116,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "subscribe for change is not a blocking call. If there is no leaderPath we still allow user to register listener and will notify if any change.",
                        "body": "subscribe for change is not a blocking call. If there is no leaderPath we still allow user to register listener and will notify if any change.  ",
                        "startLine": null,
                        "line": 167,
                        "originalLine": 116,
                        "originalStartLine": null
                    }
                ],
                "line": 167,
                "startLine": 167,
                "originalLine": 116,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tkbcs",
                "comments": [
                    {
                        "bodyText": "Are these meta data which will be persisted?",
                        "body": "Are these meta data which will be persisted?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 38,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes. These will be written into the leader ZNode.",
                        "body": "Yes. These will be written into the leader ZNode. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 38,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 38,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderInfo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4toCNF",
                "comments": [
                    {
                        "bodyText": "does this mean anyone can call this and release leader",
                        "body": "does this mean anyone can call this and release leader",
                        "startLine": null,
                        "line": null,
                        "originalLine": 125,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the review. Not essentially. Only leader acquired through this client can be released through the client.\n* @throws RuntimeException if the leadership is not owned by this participant, or if the\n*                          participant did not join participant pool via this client. // TODO: define exp type",
                        "body": "Thanks for the review. Not essentially. Only leader acquired through this client can be released through the client. \r\n\r\n```\r\n* @throws RuntimeException if the leadership is not owned by this participant, or if the\r\n*                          participant did not join participant pool via this client. // TODO: define exp type\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 125,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Had an offline discussion.\nOne leadership election client is mapped to one host or participant. A participant may join multiple leader election group.  Updated the client API.",
                        "body": "Had an offline discussion. \r\nOne leadership election client is mapped to one host or participant. A participant may join multiple leader election group.  Updated the client API. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 125,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 125,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4ttToa",
                "comments": [
                    {
                        "bodyText": "Since this is a descriptive class for APIs. It can be either interface or abstract class. To my understand, abstract class should be better. wdyt?",
                        "body": "Since this is a descriptive class for APIs. It can be either interface or abstract class. To my understand, abstract class should be better. wdyt?",
                        "startLine": null,
                        "line": 1,
                        "originalLine": 1,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. We had an offline discussion. This class will be a solid class to use directly. Will add impl in following change.",
                        "body": "TFTR. We had an offline discussion. This class will be a solid class to use directly. Will add impl in following change. ",
                        "startLine": null,
                        "line": 1,
                        "originalLine": 1,
                        "originalStartLine": null
                    }
                ],
                "line": 1,
                "startLine": 1,
                "originalLine": 1,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionClient.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4ttT2T",
                "comments": [
                    {
                        "bodyText": "Question: does this mean the leader history will be persisted? Because if the leader is gone, usually we dont know which was prev leader.",
                        "body": "Question: does this mean the leader history will be persisted? Because if the leader is gone, usually we dont know which was prev leader.",
                        "startLine": null,
                        "line": 29,
                        "originalLine": 29,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes. We will present leader info in memory.",
                        "body": "Yes. We will present leader info in memory. ",
                        "startLine": null,
                        "line": 29,
                        "originalLine": 29,
                        "originalStartLine": null
                    }
                ],
                "line": 29,
                "startLine": 29,
                "originalLine": 29,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "meta-client/src/main/java/org/apache/helix/metaclient/recipes/leaderelection/LeaderElectionListenerInterface.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "junkaixue",
            "parakhnr",
            "desaikomal"
        ],
        "tdv": 69.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n#2237\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis change adds leader election API and dummy class\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2470,
        "title": {
            "body": "code clean up - debug log format",
            "bodyHTML": "code clean up - debug log format"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5cJwro",
                "body": "This PR is ready to be merged. Approved by @qqu0127 and @desaikomal ",
                "bodyText": "This PR is ready to be merged. Approved by @qqu0127 and @desaikomal",
                "createdAt": "2023-05-12T17:27:25Z",
                "author": "xyuanlu"
            }
        ],
        "total_comments_count": 13,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4tDDVp",
                "comments": [
                    {
                        "bodyText": "you need to remove this line.",
                        "body": "you need to remove this line.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 150,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 150,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-agent/src/main/java/org/apache/helix/agent/AgentStateModel.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tDDXX",
                "comments": [
                    {
                        "bodyText": "this is not required",
                        "body": "this is not required",
                        "startLine": null,
                        "line": null,
                        "originalLine": 132,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 132,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tNZ_d",
                "comments": [
                    {
                        "bodyText": "nit: alignment may be off. please fix it if possible.",
                        "body": "nit: alignment may be off. please fix it if possible.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 132,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. Updated",
                        "body": "TFTR. Updated",
                        "startLine": null,
                        "line": null,
                        "originalLine": 132,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 132,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tNaBt",
                "comments": [
                    {
                        "bodyText": "nit: alignment.",
                        "body": "nit: alignment.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 63,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 63,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tNaDn",
                "comments": [
                    {
                        "bodyText": "nit: alignment",
                        "body": "nit: alignment",
                        "startLine": null,
                        "line": null,
                        "originalLine": 182,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 182,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tNaI-",
                "comments": [
                    {
                        "bodyText": "nit: alignment",
                        "body": "nit: alignment",
                        "startLine": null,
                        "line": null,
                        "originalLine": 77,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 77,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheEventThread.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tUscZ",
                "comments": [
                    {
                        "bodyText": "nit : can remove this?",
                        "body": "nit : can remove this?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 134,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks for the suggestion. This is an accidental change and i changed it back. Let's keep this PR only for log formatting.",
                        "body": "Thanks for the suggestion. This is an accidental change and i changed it back. Let's keep this PR only for log formatting. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 134,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 134,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingDataCache.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4tUsks",
                "comments": [
                    {
                        "bodyText": "May be we want to keep this because if debug mode is not enabled then we won't even iterate on _sourceDataTypeMap below.",
                        "body": "May be we want to keep this because if debug mode is not enabled then we won't even iterate on _sourceDataTypeMap below.",
                        "startLine": null,
                        "line": 142,
                        "originalLine": 142,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "TFTR. Good call. Updated.",
                        "body": "TFTR. Good call. Updated.",
                        "startLine": null,
                        "line": 142,
                        "originalLine": 142,
                        "originalStartLine": null
                    }
                ],
                "line": 142,
                "startLine": null,
                "originalLine": 142,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingDataCache.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "xyuanlu",
            "qqu0127",
            "rahulrane50",
            "desaikomal"
        ],
        "tdv": -35.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1521\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nWe no longer need to do isDebugEnabled check in slf4j.Logger. It is already had performance improvement integrated.\nTests\n\n The following tests are written for this issue:\n\nNA\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "struts",
        "pr_number": 477,
        "title": {
            "body": "[WW-5119] Fix: remove contention during localized text lookup (JDK 1.7+)",
            "bodyHTML": "[WW-5119] Fix: remove contention during localized text lookup (JDK 1.7+)"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc5OTM0NjIzOQ==",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/37940077/badge)](https://coveralls.io/builds/37940077)\n\nCoverage remained the same at 47.305% when pulling **69669d6cf76d25daa529324bd5bd0db81c8b4cd3 on davoustp:contention-in-localized-resources-2.5.x** into **39d70e394417a2a41c5fccccfcd1b2a9f15ad19a on apache:struts-2-5-x**.\n",
                "bodyText": "Coverage remained the same at 47.305% when pulling 69669d6 on davoustp:contention-in-localized-resources-2.5.x into 39d70e3 on apache:struts-2-5-x.",
                "createdAt": "2021-03-15T11:31:11Z",
                "author": "coveralls"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDgwMzkxODM3NQ==",
                "body": "nice üëè \r\nLGTM üëç ",
                "bodyText": "nice üëè\nLGTM üëç",
                "createdAt": "2021-03-22T09:40:40Z",
                "author": "lukaszlenart"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3ODM0NjEzOnYy",
                "comments": [
                    {
                        "bodyText": "Minor formatting suggestion:  Add a space before Boolean for: ConcurrentMap<String, Boolean>.",
                        "body": "Minor formatting suggestion:  Add a space before `Boolean` for: `ConcurrentMap<String, Boolean>`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 62,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 62,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/util/AbstractLocalizedTextProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3ODM1MDE1OnYy",
                "comments": [
                    {
                        "bodyText": "Consider changing put() to putIfAbsent() as the closest behaviour match to the previous add() method usage:\nmissingBundles.putIfAbsent(key, Boolean.TRUE);",
                        "body": "Consider changing `put()` to `putIfAbsent()` as the closest behaviour match to the previous `add()` method usage:\r\n`missingBundles.putIfAbsent(key, Boolean.TRUE);`",
                        "startLine": null,
                        "line": null,
                        "originalLine": 414,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Not sure that it makes any difference, but let's stick to the closest behaviour as mentioned.",
                        "body": "Not sure that it makes any difference, but let's stick to the closest behaviour as mentioned.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 414,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 414,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/util/AbstractLocalizedTextProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3ODM1MDE2OnYy",
                "comments": [
                    {
                        "bodyText": "And the same missingBundles.putIfAbsent(key, Boolean.TRUE); consideration here.",
                        "body": "And the same `missingBundles.putIfAbsent(key, Boolean.TRUE);` consideration here.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 418,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Same as above.",
                        "body": "Same as above.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 418,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 418,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/util/AbstractLocalizedTextProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "davoustp",
            "coveralls",
            "lukaszlenart",
            "JCgH4164838Gh792C124B5"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Backport of pull request #476 for Struts 2.5.x (JDK 1.7 still supported in this branch).\nThe ConcurrentHashMap.newKeySet() usage (available only in JDK 1.8+) is replaced by a ConcurrentHashMap<String,Boolean> to guarantee JDK 1.7 compatibility.\nFixes WW-5119"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3723,
        "title": {
            "body": "increases max wait time for ZK update retry",
            "bodyHTML": "increases max wait time for ZK update retry"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5k4T7e",
                "body": "It may be desirable to have the MAX_WAIT default to something greater than 2x the client timeout - that way the client timeout should trigger and propitiate before the MAX_WAIT is reached.",
                "bodyText": "It may be desirable to have the MAX_WAIT default to something greater than 2x the client timeout - that way the client timeout should trigger and propitiate before the MAX_WAIT is reached.",
                "createdAt": "2023-08-24T22:13:39Z",
                "author": "EdColeman"
            }
        ],
        "total_comments_count": 11,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4xsWgf",
                "comments": [
                    {
                        "bodyText": "Just to be clear, this is the max time to wait between retries, not the maximum time to wait for all retries to finish. What are the risks with changing this so dramatically?",
                        "body": "Just to be clear, this is the max time to wait between retries, not the maximum time to wait for all retries to finish. What are the risks with changing this so dramatically?",
                        "startLine": null,
                        "line": 46,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "For reference, with a backoff factor of 1.5, we go from 250ms to 5 seconds in about 8 rounds, and to 2 minutes in about 16 rounds. If we want it to take longer to reach the upper limit, we could reduce the backoff factor with this change. If we change it to 1.3, it will take about 12 rounds to reach 5 seconds and 24 rounds to reach 2 minutes.",
                        "body": "For reference, with a backoff factor of 1.5, we go from 250ms to 5 seconds in about 8 rounds, and to 2 minutes in about 16 rounds. If we want it to take longer to reach the upper limit, we could reduce the backoff factor with this change. If we change it to 1.3, it will take about 12 rounds to reach 5 seconds and 24 rounds to reach 2 minutes.",
                        "startLine": null,
                        "line": 46,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah this is the max wait time that it will grow to.  Starts off sleeping 250 ms and then grows from there until getting to 2 minutes if it keeps failing.\nOne risk is  that single/few process that are failing when no other process is failing will not be as responsive as before.\nThe reason I am thinking of increasing the max is for the thundering heard case.  Like if there are 4K tservers all trying to mutate the same ZK node, backing off to 2 min would have on average 33 tservers per second trying to mutate when reaching max wait time.",
                        "body": "Yeah this is the max wait time that it will grow to.  Starts off sleeping 250 ms and then grows from there until getting to 2 minutes if it keeps failing.\r\n\r\nOne risk is  that single/few process that are failing when no other process is failing will not be as responsive as before.  \r\n\r\nThe reason I am thinking of increasing the max is for the thundering heard case.  Like if there are 4K tservers all trying to mutate the same ZK node, backing off to 2 min would have on average 33 tservers per second trying to mutate when reaching max wait time.",
                        "startLine": null,
                        "line": 46,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Well, I'm okay with these changes. Not sure what is optimal for the backoff factor with 2 minutes as the max wait, though.",
                        "body": "Well, I'm okay with these changes. Not sure what is optimal for the backoff factor with 2 minutes as the max wait, though.",
                        "startLine": null,
                        "line": 46,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Could also lower the increment amount instead of the backoff factor. It doesn't need to be 250ms. It could be 100ms with 1.5 backoff, or even 1.3 backoff.",
                        "body": "Could also lower the increment amount instead of the backoff factor. It doesn't need to be 250ms. It could be 100ms with 1.5 backoff, or even 1.3 backoff.",
                        "startLine": null,
                        "line": 46,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "yeah decreasing the increment and increasing the max wait makes a lot sense.  It will normally be responsive even when retrying a few times, and will only become less responsive when it has retried a lot which is acceptable.",
                        "body": "yeah decreasing the increment and increasing the max wait makes a lot sense.  It will normally be responsive even when retrying a few times, and will only become less responsive when it has retried a lot which is acceptable.",
                        "startLine": null,
                        "line": 46,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "One problem to consider when tweaking this, though is that it is also set to a max number of retries of 10... so with 100ms intervals and 1.5 backoff factor, you're maxing out around 5 seconds by the time it reaches the 10th retry anyway. This won't affect the case where one of the retries is not decremented, because it's an \"always retry\" case, like on #3720, but it might be worth tweaking the max number of retries as well for the other cases.",
                        "body": "One problem to consider when tweaking this, though is that it is also set to a max number of retries of 10... so with 100ms intervals and 1.5 backoff factor, you're maxing out around 5 seconds by the time it reaches the 10th retry anyway. This won't affect the case where one of the retries is not decremented, because it's an \"always retry\" case, like on #3720, but it might be worth tweaking the max number of retries as well for the other cases.",
                        "startLine": null,
                        "line": 46,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "good point, I was only thinking about the retry forever case.",
                        "body": "good point, I was only thinking about the retry forever case.",
                        "startLine": null,
                        "line": 46,
                        "originalLine": 46,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I put the increment back to 250ms so that the retries spread over a longer time like they used to be for the limited retry case",
                        "body": "I put the increment back to 250ms so that the retries spread over a longer time like they used to be for the limited retry case",
                        "startLine": null,
                        "line": 46,
                        "originalLine": 46,
                        "originalStartLine": null
                    }
                ],
                "line": 46,
                "startLine": 46,
                "originalLine": 46,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/fate/zookeeper/ZooReader.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "EdColeman",
            "ctubbsii"
        ],
        "tdv": null,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3870,
        "title": {
            "body": "Use prevEndRow from Extent in ConditionalTabletMutator",
            "bodyHTML": "Use prevEndRow from Extent in ConditionalTabletMutator"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5pkKp2",
                "body": "Errorprone failure is due to an issue in the `elasticity` branch, not this PR.",
                "bodyText": "Errorprone failure is due to an issue in the elasticity branch, not this PR.",
                "createdAt": "2023-10-19T14:17:57Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4z_Pt-",
                "comments": [
                    {
                        "bodyText": "Need to check the prevEndRow when its null.  The encodePrevEndRow() method handles null and is what is used to serialize the prev end row for writes.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                if (checkPrevEndRow && extent.prevEndRow() != null) {\n          \n          \n            \n                if (checkPrevEndRow) {",
                        "body": "Need to check the prevEndRow when its null.  The `encodePrevEndRow()` method handles null and is what is used to serialize the prev end row for writes.\r\n\r\n```suggestion\r\n    if (checkPrevEndRow) {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 244,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 244,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/metadata/ConditionalTabletMutatorImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "keith-turner"
        ],
        "tdv": -5.0,
        "description": {
            "bodyText": "Fixes #3356"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2646,
        "title": {
            "body": "Replace iterator usage",
            "bodyHTML": "Replace iterator usage"
        },
        "comments": [],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4grwEv",
                "comments": [
                    {
                        "bodyText": "Your change looks fine, but it looks like there's something weird with the existing bw.close(). It won't be closed if the assertion fails. The BatchWriter should be in a try-with-resources block of its own, wrapping this scanner block and other stuff above here. That way, it's always closed.",
                        "body": "Your change looks fine, but it looks like there's something weird with the existing `bw.close()`. It won't be closed if the assertion fails. The BatchWriter should be in a try-with-resources block of its own, wrapping this scanner block and other stuff above here. That way, it's always closed.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 110,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 110,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/RowDeleteIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4grwUW",
                "comments": [
                    {
                        "bodyText": "Expected should come first for the failure messages to be correct (saw this in several places throughout this PR).\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                    assertEquals(actual, 100);\n          \n          \n            \n                    assertEquals(100, actual);",
                        "body": "Expected should come first for the failure messages to be correct (saw this in several places throughout this PR).\r\n\r\n```suggestion\r\n        assertEquals(100, actual);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 237,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good catch, all should be addressed in cf5fb07",
                        "body": "Good catch, all should be addressed in cf5fb07",
                        "startLine": null,
                        "line": null,
                        "originalLine": 237,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 237,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/mapred/AccumuloOutputFormatIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4grwiz",
                "comments": [
                    {
                        "bodyText": "It's slightly shorter if you just call parseInt on the only element (some suggestion applies elsewhere in this PR):\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                    int actual = scanner.stream().map(Entry::getValue).map(Value::get).map(String::new)\n          \n          \n            \n                        .map(Integer::parseInt).collect(onlyElement());\n          \n          \n            \n                    int actual = Integer.parseInt(scanner.stream().map(Entry::getValue).map(Value::get).map(String::new).collect(onlyElement()));",
                        "body": "It's slightly shorter if you just call parseInt on the only element (some suggestion applies elsewhere in this PR):\r\n\r\n```suggestion\r\n        int actual = Integer.parseInt(scanner.stream().map(Entry::getValue).map(Value::get).map(String::new).collect(onlyElement()));\r\n```",
                        "startLine": 165,
                        "line": 166,
                        "originalLine": 166,
                        "originalStartLine": 165
                    },
                    {
                        "bodyText": "Personally, it seems to be a bit more intuitive or readable, when using multiple .map() operations, to just keep with that pattern and do the parseInt within a .map() as well, even if it is slightly longer.",
                        "body": "Personally, it seems to be a bit more intuitive or readable, when using multiple `.map()` operations, to just keep with that pattern and do the `parseInt` within a `.map()` as well, even if it is slightly longer.",
                        "startLine": 165,
                        "line": 166,
                        "originalLine": 166,
                        "originalStartLine": 165
                    },
                    {
                        "bodyText": "This reminds me of my comment in the description of this PR:\n\nI also wanted to see if anyone had an opinion on which of the following equivalent options is better:\n1. `scanner.stream().map(Entry::getValue).map(Value::get).map(String::new).map(Integer::parseInt).collect(onlyElement());`\n\n2. `scanner.stream().map(entry -> Integer.parseInt(new String(entry.getValue().get()))).collect(onlyElement());`\n\n\nI'm starting to think I prefer option 1 over option 2. It seems easier to read and keep track of what is happening especially with all the nested parentheses in option 2.",
                        "body": "This reminds me of my comment in the description of this PR:\r\n> I also wanted to see if anyone had an opinion on which of the following equivalent options is better:\r\n> \r\n>     1. `scanner.stream().map(Entry::getValue).map(Value::get).map(String::new).map(Integer::parseInt).collect(onlyElement());`\r\n> \r\n>     2. `scanner.stream().map(entry -> Integer.parseInt(new String(entry.getValue().get()))).collect(onlyElement());`\r\n\r\nI'm starting to think I prefer option 1 over option 2. It seems easier to read and keep track of what is happening especially with all the nested parentheses in option 2.",
                        "startLine": 165,
                        "line": 166,
                        "originalLine": 166,
                        "originalStartLine": 165
                    },
                    {
                        "bodyText": "I've used both. I prefer option 1, if all things are equal, but use option 2 on a case-by-case basis if it's shorter, more clear, or have reason to think it might perform better.",
                        "body": "I've used both. I prefer option 1, if all things are equal, but use option 2 on a case-by-case basis if it's shorter, more clear, or have reason to think it might perform better.",
                        "startLine": 165,
                        "line": 166,
                        "originalLine": 166,
                        "originalStartLine": 165
                    }
                ],
                "line": 166,
                "startLine": 165,
                "originalLine": 166,
                "originalStartLine": 165,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/mapreduce/AccumuloOutputFormatIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "DomGarguilo",
            "ctubbsii"
        ],
        "tdv": -30.0,
        "description": {
            "bodyText": "I was looking through places where the use of Scanner.Iterator might be improved by using the new Scanner.stream method and found a few patterns to replace that seemed worth-while.\n\nIn a lot of places, we create an interator, assert that the iterator hasNext, get the next entry, compare that entry to what we expect it to be, then assert that hasNext is false. All this to make sure there is just one entry. To simplify I changed these places to .stream().collect(onlyElement()) and then perform the assertEquals on the single returned value.\nConvert Iterators.size(s.iterator()) == 0 -> s.stream().findAny().isEmpty()\nConvert Iterators.size(s.iterator()) > 0 -> s.stream().findAny().isPresent()\n\nI also wanted to see if anyone had an opinion on which of the following equivalent options is better:\n\nscanner.stream().map(Entry::getValue).map(Value::get).map(String::new).map(Integer::parseInt).collect(onlyElement());\nscanner.stream().map(entry -> Integer.parseInt(new String(entry.getValue().get()))).collect(onlyElement());\n\nI have both in these changes. To me, one does not seem significantly, different/more readable than the other so I thought I would ask."
        }
    },
    {
        "repo": "struts",
        "pr_number": 861,
        "title": {
            "body": "[WW-5388] Uses the latest JakartaEE FileUpload Servlet 6 package",
            "bodyHTML": "[WW-5388] Uses the latest JakartaEE FileUpload Servlet 6 package"
        },
        "comments": [
            {
                "id": "IC_kwDOAPMNSs5yB9e6",
                "body": "/cc: @burtonrhodes ",
                "bodyText": "/cc: @burtonrhodes",
                "createdAt": "2024-01-27T11:01:35Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5yB9s0",
                "body": "/cc: @deki",
                "bodyText": "/cc: @deki",
                "createdAt": "2024-01-27T11:04:14Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5yCmHv",
                "body": "@lukaszlenart  Looks good. The current version of this PR works well in my initial testing (dev) environment.",
                "bodyText": "@lukaszlenart  Looks good. The current version of this PR works well in my initial testing (dev) environment.",
                "createdAt": "2024-01-27T18:20:56Z",
                "author": "burtonrhodes"
            },
            {
                "id": "IC_kwDOAPMNSs5yLUUB",
                "body": "Just FYI, I implemented this PR on a small subset of my server cluster and have been receiving the following ambiguous errors in some of the upload requests.  I can't duplicate it in any testing environment, but curious if you might have a clue as to why Struts is creating an actionError with no value in the error, instead it prints \"{0}\".  For this implementation, I am **_not_** using the stream parser\r\n\r\n_Error printed by the code below_\r\n\r\n```\r\nUnidentified ActionError present for file upload: [Error uploading: {0}!, Error uploading: {0}!]\r\n```\r\n\r\n_Code that quickly checks for any file upload errors_\r\n\r\n```\r\nif (hasActionErrors()) {\r\n    List<String> uploadErrors = (List<String>) getActionErrors();\r\n    log.error(\"Unidentified ActionError present for file upload: \" + uploadErrors);\r\n}\r\n```\r\n\r\n_A redacted version of the action_\r\n\r\n\r\n```\r\npublic class UploadLocalFileJsonAction extends ActionSupport implements Validateable, UploadedFilesAware<UploadedFile<File>> {\r\n\r\n    private FileAttachmentUpload fileAttachmentUpload;\r\n\r\n    @Override\r\n    public void withUploadedFiles(List<UploadedFile<UploadedFile<File>>> uploadedFiles) {\r\n        if (!uploadedFiles.isEmpty()) {\r\n            fileAttachmentUpload = UploadedFileHelper.createFromUploadedFile(uploadedFiles.get(0));\r\n        }\r\n    }\r\n\r\n    public void validate() {\r\n        // First check to see if there are any errors from the file upload\r\n        if (hasActionErrors()) {\r\n            List<String> uploadErrors = (List<String>) getActionErrors();\r\n            log.error(\"Unidentified ActionError present for file upload: \" + uploadErrors);\r\n        }\r\n    }\r\n\r\n    public String execute() throws Exception {\r\n        // Omitted for brevity\r\n    }\r\n}\r\n```\r\n",
                "bodyText": "Just FYI, I implemented this PR on a small subset of my server cluster and have been receiving the following ambiguous errors in some of the upload requests.  I can't duplicate it in any testing environment, but curious if you might have a clue as to why Struts is creating an actionError with no value in the error, instead it prints \"{0}\".  For this implementation, I am not using the stream parser\nError printed by the code below\nUnidentified ActionError present for file upload: [Error uploading: {0}!, Error uploading: {0}!]\n\nCode that quickly checks for any file upload errors\nif (hasActionErrors()) {\n    List<String> uploadErrors = (List<String>) getActionErrors();\n    log.error(\"Unidentified ActionError present for file upload: \" + uploadErrors);\n}\n\nA redacted version of the action\npublic class UploadLocalFileJsonAction extends ActionSupport implements Validateable, UploadedFilesAware<UploadedFile<File>> {\n\n    private FileAttachmentUpload fileAttachmentUpload;\n\n    @Override\n    public void withUploadedFiles(List<UploadedFile<UploadedFile<File>>> uploadedFiles) {\n        if (!uploadedFiles.isEmpty()) {\n            fileAttachmentUpload = UploadedFileHelper.createFromUploadedFile(uploadedFiles.get(0));\n        }\n    }\n\n    public void validate() {\n        // First check to see if there are any errors from the file upload\n        if (hasActionErrors()) {\n            List<String> uploadErrors = (List<String>) getActionErrors();\n            log.error(\"Unidentified ActionError present for file upload: \" + uploadErrors);\n        }\n    }\n\n    public String execute() throws Exception {\n        // Omitted for brevity\n    }\n}",
                "createdAt": "2024-01-29T21:07:25Z",
                "author": "burtonrhodes"
            },
            {
                "id": "IC_kwDOAPMNSs5yOID4",
                "body": "@kusalk sorry for that, I know it's a big change yet I wanted to fix all the issues I have discovered around Jakarta file upload at once. Also all the changes related to `UploadedFile` are mean to support other approaches as [struts2-gea-plugin](https://github.com/struts-community-plugins/struts2-gea-plugin).",
                "bodyText": "@kusalk sorry for that, I know it's a big change yet I wanted to fix all the issues I have discovered around Jakarta file upload at once. Also all the changes related to UploadedFile are mean to support other approaches as struts2-gea-plugin.",
                "createdAt": "2024-01-30T08:25:10Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5yONld",
                "body": "@burtonrhodes I tried to play with the Showcase app and right now there is a problem uploading large files - I get blank page, yet the app is using the new Action Upload Interceptor",
                "bodyText": "@burtonrhodes I tried to play with the Showcase app and right now there is a problem uploading large files - I get blank page, yet the app is using the new Action Upload Interceptor",
                "createdAt": "2024-01-30T08:38:57Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5yXE_B",
                "body": "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=apache_struts&pullRequest=861) **Quality Gate passed**  \nThe SonarCloud Quality Gate passed, but some issues were introduced.\n\n[1 New issue](https://sonarcloud.io/project/issues?id=apache_struts&pullRequest=861&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=apache_struts&pullRequest=861&resolved=false&inNewCodePeriod=true)  \n[87.2% Coverage on New Code](https://sonarcloud.io/component_measures?id=apache_struts&pullRequest=861&metric=new_coverage&view=list)  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=apache_struts&pullRequest=861&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=apache_struts&pullRequest=861)\n\n",
                "bodyText": "Quality Gate passed\nThe SonarCloud Quality Gate passed, but some issues were introduced.\n1 New issue\n0 Security Hotspots\n87.2% Coverage on New Code\n0.0% Duplication on New Code\nSee analysis details on SonarCloud",
                "createdAt": "2024-01-31T08:51:15Z",
                "author": "sonarcloud"
            },
            {
                "id": "IC_kwDOAPMNSs5yeuUZ",
                "body": "@burtonrhodes did you have a chance to re-test the latest changes? Everything works fine when testing with the Showcase app yet it uses the new action upload interceptor, but still the same MultiPartParser is used behind the scene. I even added a dedicated integration test to cover max files constraint.",
                "bodyText": "@burtonrhodes did you have a chance to re-test the latest changes? Everything works fine when testing with the Showcase app yet it uses the new action upload interceptor, but still the same MultiPartParser is used behind the scene. I even added a dedicated integration test to cover max files constraint.",
                "createdAt": "2024-02-01T07:19:46Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5ye76H",
                "body": "@lukaszlenart yes, all looks good on my end. ",
                "bodyText": "@lukaszlenart yes, all looks good on my end.",
                "createdAt": "2024-02-01T07:56:41Z",
                "author": "burtonrhodes"
            },
            {
                "id": "IC_kwDOAPMNSs5yfGCv",
                "body": "LGTM üíØ ",
                "bodyText": "LGTM üíØ",
                "createdAt": "2024-02-01T08:23:24Z",
                "author": "lukaszlenart"
            }
        ],
        "total_comments_count": 32,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs43xK2K",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    return before.replaceAll(\"[\\n\\r]\", \"_\");\n          \n          \n            \n                    return before.replaceAll(\"\\R\", \"_\");\n          \n      \n    \n    \n  \n\nmaybe use this as more concise way to represent line breaks?\n\nAny Unicode linebreak sequence, is equivalent to \\u000D\\u000A|[\\u000A\\u000B\\u000C\\u000D\\u0085\\u2028\\u2029]",
                        "body": "```suggestion\r\n        return before.replaceAll(\"\\R\", \"_\");\r\n```\r\n\r\nmaybe use this as more concise way to represent line breaks?\r\n\r\n>Any Unicode linebreak sequence, is equivalent to \\u000D\\u000A|[\\u000A\\u000B\\u000C\\u000D\\u0085\\u2028\\u2029]\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 175,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "done",
                        "body": "done",
                        "startLine": null,
                        "line": null,
                        "originalLine": 175,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 175,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/struts2/dispatcher/multipart/AbstractMultiPartRequest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs436myK",
                "comments": [
                    {
                        "bodyText": "Logging should not be vulnerable to injection attacks\nChange this code to not log user-controlled data. See more on SonarCloud\nShow more details",
                        "body": "## Logging should not be vulnerable to injection attacks\n\n<!--SONAR_ISSUE_KEY:AY1KAqt48H-R3IcxNTE6-->Change this code to not log user-controlled data. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=apache_struts&issues=AY1KAqt48H-R3IcxNTE6&open=AY1KAqt48H-R3IcxNTE6&pullRequest=861\">SonarCloud</a></p>\n\n[Show more details](https://github.com/apache/struts/security/code-scanning/424)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 75,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 75,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/struts2/dispatcher/multipart/JakartaMultiPartRequest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs436myL",
                "comments": [
                    {
                        "bodyText": "Logging should not be vulnerable to injection attacks\nChange this code to not log user-controlled data. See more on SonarCloud\nShow more details",
                        "body": "## Logging should not be vulnerable to injection attacks\n\n<!--SONAR_ISSUE_KEY:AY1KAquc8H-R3IcxNTE7-->Change this code to not log user-controlled data. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=apache_struts&issues=AY1KAquc8H-R3IcxNTE7&open=AY1KAquc8H-R3IcxNTE7&pullRequest=861\">SonarCloud</a></p>\n\n[Show more details](https://github.com/apache/struts/security/code-scanning/425)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 94,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 94,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/struts2/dispatcher/multipart/JakartaStreamMultiPartRequest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs436_uI",
                "comments": [
                    {
                        "bodyText": "@lukaszlenart Quick thought on the maxFiles setting: I still think it makes more sense that maxFiles would apply to only file fields and not all form fields in the request. However it appears that this logic is actually baked into the JakartaServletFileUpload class itself when calling servletFileUpload.parseRequest(). Wonder why they coded it this way??\nAnyway, if we ever wanted to change this, you could set the maxFiles to unlimited in the servletFileUpload object, and then perform the files count check in the if (item.isFormField()... logic below.  Just a thought.",
                        "body": "@lukaszlenart Quick thought on the maxFiles setting: I still think it makes more sense that maxFiles would apply to only file fields and not all form fields in the request. However it appears that this logic is actually baked into the JakartaServletFileUpload class itself when calling `servletFileUpload.parseRequest()`. Wonder why they coded it this way??\r\n\r\nAnyway, if we ever wanted to change this, you could set the maxFiles to unlimited in the servletFileUpload object, and then perform the files count check in the `if (item.isFormField()...` logic below.  Just a thought.",
                        "startLine": null,
                        "line": 50,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "In thinking about it more, that might be a security issue, as the serletFileUpload object would upload everything first (something that the setting is trying to prevent), only to perform the check after the processing is done. However, the maxSize / maxFileSize might offset that security risk??",
                        "body": "In thinking about it more, that might be a security issue, as the serletFileUpload object would upload everything first (something that the setting is trying to prevent), only to perform the check after the processing is done. However, the maxSize / maxFileSize might offset that security risk??\r\n",
                        "startLine": null,
                        "line": 50,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I assume so, this can be changed with a proper implementation of Streaming API which can then calculate the max size of uploaded files internally in Struts ... hm or maybe even right now, let me think this through ü§î",
                        "body": "I assume so, this can be changed with a proper implementation of Streaming API which can then calculate the max size of uploaded files internally in Struts ... hm or maybe even right now, let me think this through ü§î ",
                        "startLine": null,
                        "line": 50,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@burtonrhodes introduced a new constant maxSizeOfFiles which controls how many files you can upload based on their size - this works with JakartaStreamMultiPartRequest only.",
                        "body": "@burtonrhodes introduced a new constant `maxSizeOfFiles` which controls how many files you can upload based on their size - this works with `JakartaStreamMultiPartRequest` only.",
                        "startLine": null,
                        "line": 50,
                        "originalLine": 52,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah this is by design (see this comment), none of the other options mitigate against this as the risk is processing a very large amount of request parts, not necessarily large ones. Though we can probably raise our default limit from 256 to 1000 (used in latest Tomcat).",
                        "body": "Yeah this is by design (see [this comment](https://github.com/apache/commons-fileupload/pull/203#issuecomment-1438293083)), none of the other options mitigate against this as the risk is processing a very large amount of request parts, not necessarily large ones. Though we can probably raise our default limit from 256 to 1000 (used in latest Tomcat).",
                        "startLine": null,
                        "line": 50,
                        "originalLine": 52,
                        "originalStartLine": null
                    }
                ],
                "line": 50,
                "startLine": 50,
                "originalLine": 52,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/struts2/dispatcher/multipart/JakartaMultiPartRequest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs439ABe",
                "comments": [
                    {
                        "bodyText": "Not sure I understand the benefit of this generic type given this interface is coupled with the ActionFileUploadInterceptor. In what situation would an action implement UploadedFilesAware<NotFile>?",
                        "body": "Not sure I understand the benefit of this generic type given this interface is coupled with the `ActionFileUploadInterceptor`. In what situation would an action implement `UploadedFilesAware<NotFile>`?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 30,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is a preparation to support InputStream and allow to stream files directly into actions, yet I need to thinks this through as this change became huge :\\",
                        "body": "This is a preparation to support `InputStream` and allow to stream files directly into actions, yet I need to thinks this through as this change became huge :\\",
                        "startLine": null,
                        "line": null,
                        "originalLine": 30,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Oh okay - yeah I just don't know if it makes sense for a marker interface to have a generic type - might just need 2 marker interfaces instead",
                        "body": "Oh okay - yeah I just don't know if it makes sense for a marker interface to have a generic type - might just need 2 marker interfaces instead",
                        "startLine": null,
                        "line": null,
                        "originalLine": 30,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Reverted",
                        "body": "Reverted",
                        "startLine": null,
                        "line": null,
                        "originalLine": 30,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 30,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/struts2/action/UploadedFilesAware.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs439AN_",
                "comments": [
                    {
                        "bodyText": "Still not very consistent - shouldn't it be MAX_SIZE_OF_FILES?",
                        "body": "Still not very consistent - shouldn't it be `MAX_SIZE_OF_FILES`?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 147,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "IDEA doesn't complain about MAXSIZE that's why I left it, but you are right :)",
                        "body": "IDEA doesn't complain about `MAXSIZE` that's why I left it, but you are right :)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 147,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 147,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/struts2/StrutsConstants.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs439FfM",
                "comments": [
                    {
                        "bodyText": "This seems expensive to compute from scratch every time a file field is encountered, especially when the application might not have even configured a maxSizeOfFiles limit!",
                        "body": "This seems expensive to compute from scratch every time a file field is encountered, especially when the application might not have even configured a `maxSizeOfFiles` limit!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 202,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Tbh I'm not convinced this option adds much value in the first place - I think maxSize serves this need well enough. I'm trying to think in what situation would an application need to configure maxSizeOfFiles instead of or in addition to maxSize. They want to accepts lots of big form fields but want to limit the amount of data written to disk? I guess it's possible",
                        "body": "Tbh I'm not convinced this option adds much value in the first place - I think `maxSize` serves this need well enough. I'm trying to think in what situation would an application need to configure `maxSizeOfFiles` instead of or in addition to `maxSize`. They want to accepts lots of big form fields but want to limit the amount of data written to disk? I guess it's possible",
                        "startLine": null,
                        "line": null,
                        "originalLine": 202,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This seems expensive to compute from scratch every time a file field is encountered, especially when the application might not have even configured a maxSizeOfFiles limit!\n\nFixed!",
                        "body": "> This seems expensive to compute from scratch every time a file field is encountered, especially when the application might not have even configured a `maxSizeOfFiles` limit!\r\n\r\nFixed!",
                        "startLine": null,
                        "line": null,
                        "originalLine": 202,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 202,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/struts2/dispatcher/multipart/JakartaStreamMultiPartRequest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs43-1Iv",
                "comments": [
                    {
                        "bodyText": "You can just inline this right?\nif (maxSizeOfFiles != null && actualSizeOfUploadedFiles() + file.length() >= maxSizeOfFiles) {",
                        "body": "You can just inline this right?\r\n`if (maxSizeOfFiles != null && actualSizeOfUploadedFiles() + file.length() >= maxSizeOfFiles) {`",
                        "startLine": null,
                        "line": 199,
                        "originalLine": 202,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Not really as it is used inside the if clause in exceedsMaxSizeOfFiles",
                        "body": "Not really as it is used inside the `if` clause in `exceedsMaxSizeOfFiles`",
                        "startLine": null,
                        "line": 199,
                        "originalLine": 202,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Missed that, all good :)",
                        "body": "Missed that, all good :)",
                        "startLine": null,
                        "line": 199,
                        "originalLine": 202,
                        "originalStartLine": null
                    }
                ],
                "line": 199,
                "startLine": 199,
                "originalLine": 202,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/struts2/dispatcher/multipart/JakartaStreamMultiPartRequest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "lukaszlenart",
            "burtonrhodes",
            "sepe81",
            "kusalk"
        ],
        "tdv": -106.0,
        "description": {
            "bodyText": "Closes WW-5388"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1346,
        "title": {
            "body": "Java 11 improvements to ConditionalWriterImpl",
            "bodyHTML": "Java 11 improvements to ConditionalWriterImpl"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTk3MzQ0NzUyOnYy",
                "comments": [
                    {
                        "bodyText": "Could use var here too. üò∫",
                        "body": "Could use var here too. :smiley_cat:",
                        "startLine": null,
                        "line": null,
                        "originalLine": 732,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 732,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/ConditionalWriterImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "ctubbsii"
        ],
        "tdv": -5.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1404,
        "title": {
            "body": "Add example of client to javadoc",
            "bodyHTML": "Add example of client to javadoc"
        },
        "comments": [],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjEwMTU0NDQ3OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               * // Create client from java properties or properties file\n          \n          \n            \n               * // Create client using the instance name, zookeeper, and credentials  from java properties or properties file",
                        "body": "```suggestion\r\n   * // Create client using the instance name, zookeeper, and credentials  from java properties or properties file \r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 61,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 61,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/Accumulo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjEwMTU0NTc3OnYy",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n               *    // connect as the user configured in properties\n          \n          \n            \n               *    // use the client",
                        "body": "```suggestion\r\n   *    // use the client\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 65,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 65,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/Accumulo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjEwMTU1MzI2OnYy",
                "comments": [
                    {
                        "bodyText": "Personally, I would add an empty line after this block.",
                        "body": "Personally, I would add an empty line after this block.",
                        "startLine": null,
                        "line": 60,
                        "originalLine": 60,
                        "originalStartLine": null
                    }
                ],
                "line": 60,
                "startLine": 60,
                "originalLine": 60,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/client/Accumulo.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "mikewalch",
            "keith-turner"
        ],
        "tdv": null,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3977,
        "title": {
            "body": "Mark TabletStatistics.getSplitCreationTime as deprecated",
            "bodyHTML": "Mark TabletStatistics.getSplitCreationTime as deprecated"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5spPLd",
                "body": "#3959 removed TabletStatistics.getCreationTime in the elasticity branch.",
                "bodyText": "#3959 removed TabletStatistics.getCreationTime in the elasticity branch.",
                "createdAt": "2023-11-22T13:13:52Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5tyK_q",
                "body": "I suggested changes to the way it's marked as deprecated in #4024 as a trivial change in conjunction with the main point of that PR. I can separate it out if needed.",
                "bodyText": "I suggested changes to the way it's marked as deprecated in #4024 as a trivial change in conjunction with the main point of that PR. I can separate it out if needed.",
                "createdAt": "2023-12-06T00:21:42Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5tyPel",
                "body": "I keep getting conflicting advice on whether to use the 'forRemoval' attribute. As you can see from the comments above, I didn't use it at first, then it was suggested that I add it.  I do agree it seems redundant, but it must exist for some reason. Personally, I don't care whether we use it or not. Maybe we can decide at a project level?",
                "bodyText": "I keep getting conflicting advice on whether to use the 'forRemoval' attribute. As you can see from the comments above, I didn't use it at first, then it was suggested that I add it.  I do agree it seems redundant, but it must exist for some reason. Personally, I don't care whether we use it or not. Maybe we can decide at a project level?",
                "createdAt": "2023-12-06T00:42:07Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM5tyUgQ",
                "body": "> I keep getting conflicting advice on whether to use the 'forRemoval' attribute. \r\n\r\nI'm not sure who is in favor of it, but I imagine whoever is, it's because it's helpful to be explicit. I suspect Java added it because so many people mark things deprecated and then they stayed deprecated forever in some Java libraries. But that's not really necessary in a world where semantic versioning is used and major releases are expected for breaking changes. I have personally avoided it because of the problems that it causes but I haven't really objected to using it in principal. Any objections that I might have her purely practical.\r\n\r\n> Maybe we can decide at a project level?\r\n\r\nThe options would be to use it everywhere, use it nowhere, not care if it's used or not, or develop some criteria by which we decide when it should be used and when it shouldn't. Since semantic versioning drives us, I don't really think that last option is useful. The third option can lead to confusion. But I think for practical reasons using it everywhere isn't really viable. So that really only leaves use it nowhere. But we can discuss and decide on the mailing list.\r\n",
                "bodyText": "I keep getting conflicting advice on whether to use the 'forRemoval' attribute.\n\nI'm not sure who is in favor of it, but I imagine whoever is, it's because it's helpful to be explicit. I suspect Java added it because so many people mark things deprecated and then they stayed deprecated forever in some Java libraries. But that's not really necessary in a world where semantic versioning is used and major releases are expected for breaking changes. I have personally avoided it because of the problems that it causes but I haven't really objected to using it in principal. Any objections that I might have her purely practical.\n\nMaybe we can decide at a project level?\n\nThe options would be to use it everywhere, use it nowhere, not care if it's used or not, or develop some criteria by which we decide when it should be used and when it shouldn't. Since semantic versioning drives us, I don't really think that last option is useful. The third option can lead to confusion. But I think for practical reasons using it everywhere isn't really viable. So that really only leaves use it nowhere. But we can discuss and decide on the mailing list.",
                "createdAt": "2023-12-06T01:06:17Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM5tyj7L",
                "body": "> I suggested changes to the way it's marked as deprecated in #4024 as a trivial change in conjunction with the main point of that PR. I can separate it out if needed.\r\n\r\nThere are other Deprecated annotations in Propery.java using the forRemoval annotation in main at this point. It might make sense to remove these changes from #4024 and change them all in one PR. Maybe that's the appropriate place to have that conversation.",
                "bodyText": "I suggested changes to the way it's marked as deprecated in #4024 as a trivial change in conjunction with the main point of that PR. I can separate it out if needed.\n\nThere are other Deprecated annotations in Propery.java using the forRemoval annotation in main at this point. It might make sense to remove these changes from #4024 and change them all in one PR. Maybe that's the appropriate place to have that conversation.",
                "createdAt": "2023-12-06T02:11:26Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 10,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM41ZOPA",
                "comments": [
                    {
                        "bodyText": "Could add the forRemoval parameter to the deprecation annotation, it defaults to false.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              @Deprecated(since = \"3.1\")\n          \n          \n            \n              @Deprecated(since = \"3.1\", forRemoval=true)",
                        "body": "Could add the forRemoval parameter to the deprecation annotation, it defaults to false.\r\n```suggestion\r\n  @Deprecated(since = \"3.1\", forRemoval=true)\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 31,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added in 96d3853",
                        "body": "Added in 96d3853",
                        "startLine": null,
                        "line": null,
                        "originalLine": 31,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 31,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/balancer/data/TabletStatistics.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM417G6X",
                "comments": [
                    {
                        "bodyText": "Why was this warnings suppression added here? I don't think this is correct. You don't need to suppress the warning in the subclass for the deprecation in the interface. However, it may be necessary to mark the implementation as also deprecated, in case it's used directly instead of only via the interface.",
                        "body": "Why was this warnings suppression added here? I don't think this is correct. You don't need to suppress the warning in the subclass for the deprecation in the interface. However, it may be necessary to mark the implementation as also deprecated, in case it's used directly instead of only via the interface.",
                        "startLine": null,
                        "line": 49,
                        "originalLine": 49,
                        "originalStartLine": null
                    }
                ],
                "line": 49,
                "startLine": 49,
                "originalLine": 49,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/manager/balancer/TabletStatisticsImpl.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM417Rdv",
                "comments": [
                    {
                        "bodyText": "I'm still torn on whether we should bother marking things as \"forRemoval\" or not, at all. On the one hand, it's nice to be explicit, but on the other hand, all our deprecations are always subject to removal, causing a breaking change on a major release, in accordance with semver--so, it's kind of redundant, and kind of feels like we're just using it because it's there, when we don't really need to.\nThe other issue is this Eclipse bug that makes it hard to properly suppress \"removal\". See https://bugs.eclipse.org/bugs/show_bug.cgi?id=565271\nOther IDEs may also be affected by improperly handling this new annotation attribute.",
                        "body": "I'm still torn on whether we should bother marking things as \"forRemoval\" or not, at all. On the one hand, it's nice to be explicit, but on the other hand, all our deprecations are always subject to removal, causing a breaking change on a major release, in accordance with semver--so, it's kind of redundant, and kind of feels like we're just using it because it's there, when we don't really need to.\r\n\r\nThe other issue is this Eclipse bug that makes it hard to properly suppress \"removal\". See https://bugs.eclipse.org/bugs/show_bug.cgi?id=565271\r\nOther IDEs may also be affected by improperly handling this new annotation attribute.",
                        "startLine": null,
                        "line": 31,
                        "originalLine": 31,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I created #4032 for this.",
                        "body": "I created #4032 for this.",
                        "startLine": null,
                        "line": 31,
                        "originalLine": 31,
                        "originalStartLine": null
                    }
                ],
                "line": 31,
                "startLine": 31,
                "originalLine": 31,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/spi/balancer/data/TabletStatistics.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "ctubbsii",
            "keith-turner"
        ],
        "tdv": 15.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "commons-lang",
        "pr_number": 269,
        "title": {
            "body": "LANG-1337: Fix test failures in IBM JDK 8 for ToStringBuilderTest by specifying the ArrayList initial capacity.",
            "bodyHTML": "LANG-1337: Fix test failures in IBM JDK 8 for ToStringBuilderTest by specifying the ArrayList initial capacity."
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDMwNjQ2NzkzMw==",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/11847788/badge)](https://coveralls.io/builds/11847788)\n\nCoverage remained the same at 95.17% when pulling **65b08c4f91a4e5d78eb645b46d06d7a46f8c62dd on kinow:LANG-1337** into **551101299da7f75ea5478db1a6bc194963e0ac34 on apache:master**.\n",
                "bodyText": "Coverage remained the same at 95.17% when pulling 65b08c4 on kinow:LANG-1337 into 5511012 on apache:master.",
                "createdAt": "2017-06-06T12:14:58Z",
                "author": "coveralls"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDMwNjcwNDQ5Ng==",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/11862419/badge)](https://coveralls.io/builds/11862419)\n\nCoverage increased (+0.05%) to 95.221% when pulling **0344ca3f2d43e3732bf16370262303be8761a523 on kinow:LANG-1337** into **551101299da7f75ea5478db1a6bc194963e0ac34 on apache:master**.\n",
                "bodyText": "Coverage increased (+0.05%) to 95.221% when pulling 0344ca3 on kinow:LANG-1337 into 5511012 on apache:master.",
                "createdAt": "2017-06-07T06:56:01Z",
                "author": "coveralls"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDMwNjcwNDQ5Nw==",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/11862419/badge)](https://coveralls.io/builds/11862419)\n\nCoverage increased (+0.005%) to 95.175% when pulling **0344ca3f2d43e3732bf16370262303be8761a523 on kinow:LANG-1337** into **551101299da7f75ea5478db1a6bc194963e0ac34 on apache:master**.\n",
                "bodyText": "Coverage increased (+0.005%) to 95.175% when pulling 0344ca3 on kinow:LANG-1337 into 5511012 on apache:master.",
                "createdAt": "2017-06-07T06:56:01Z",
                "author": "coveralls"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDMwNjcxMDY5Mw==",
                "body": "Comments added, received some feedback, but would still be useful someone with the last IBM JDK 8 to give it a try and confirm it works for him/her :)",
                "bodyText": "Comments added, received some feedback, but would still be useful someone with the last IBM JDK 8 to give it a try and confirm it works for him/her :)",
                "createdAt": "2017-06-07T07:25:42Z",
                "author": "kinow"
            },
            {
                "id": "MDEyOklzc3VlQ29tbWVudDMwNjcxMjQwMg==",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/11862777/badge)](https://coveralls.io/builds/11862777)\n\nCoverage increased (+0.005%) to 95.175% when pulling **c68285bb3392665827595ac408a5fad828b0351f on kinow:LANG-1337** into **551101299da7f75ea5478db1a6bc194963e0ac34 on apache:master**.\n",
                "bodyText": "Coverage increased (+0.005%) to 95.175% when pulling c68285b on kinow:LANG-1337 into 5511012 on apache:master.",
                "createdAt": "2017-06-07T07:32:14Z",
                "author": "coveralls"
            }
        ],
        "total_comments_count": 13,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNzU4NDQ0NTE6djI=",
                "comments": [
                    {
                        "bodyText": "I think that needs a comment.\nIs the magic number 10 significant?\nIf so, what determines the value?\nCould it ever change?",
                        "body": "I think that needs a comment.\r\nIs the magic number 10 significant?\r\nIf so, what determines the value?\r\nCould it ever change?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 319,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "probably related to this?",
                        "body": "probably related to [this](https://stackoverflow.com/a/34250231)?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 319,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thanks!\nIf the test fails when the initial size arg is omitted, does that not also affect the behaviour of the method being tested? i.e. do apps also have to ensure that they specify the min size when using ToStringBuilder.reflectionToString() ?",
                        "body": "Thanks!\r\n\r\nIf the test fails when the initial size arg is omitted, does that not also affect the behaviour of the method being tested? i.e. do apps also have to ensure that they specify the min size when using ToStringBuilder.reflectionToString() ?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 319,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Fair enough on the magic number. I'd thought about that, then noticed a few other tests with numbers. But one broken window doesn't mean I can break another one :-) fixing in another commit.",
                        "body": "Fair enough on the magic number. I'd thought about that, then noticed a few other tests with numbers. But one broken window doesn't mean I can break another one :-) fixing in another commit.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 319,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If the test fails when the initial size arg is omitted, does that not also affect the behaviour of the method being tested?\n\nNot really. The test simply checks the string built for an arraylist through reflection. The issue was caused for believing that the lazy initialization (as @andyklimczak) would work in the same independent of the JVM.\nWhat the test is verifying is correct, the current approach could be improved to make the test less flaky.",
                        "body": ">If the test fails when the initial size arg is omitted, does that not also affect the behaviour of the method being tested?\r\n\r\nNot really. The test simply checks the string built for an arraylist through reflection. The issue was caused for believing that the lazy initialization (as @andyklimczak) would work in the same independent of the JVM.\r\n\r\nWhat the test is verifying is correct, the current approach could be improved to make the test less flaky.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 319,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 319,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNzU4NDQ0NTQ6djI=",
                "comments": [
                    {
                        "bodyText": "Sorry to be nitpicking, but this should be a constant and wie should add a comment referencing JIRA-1337 with an explanation why we need to pass the initial capacity.",
                        "body": "Sorry to be nitpicking, but this should be a constant and wie should add a comment referencing JIRA-1337 with an explanation why we need to pass the initial capacity.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 320,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Roger that. Will add a note to myself to fix the other final member variables later... trying to be concise, but I'm clearly missing the point here :-) was supposedly to be a very simple fix for this issue. Pushing a new commit in a few minutes, just finishing to review commons-fileupload vote.",
                        "body": "Roger that. Will add a note to myself to fix the other final member variables later... trying to be concise, but I'm clearly missing the point here :-) was supposedly to be a very simple fix for this issue. Pushing a new commit in a few minutes, just finishing to review commons-fileupload vote.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 320,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 320,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kinow",
            "coveralls",
            "britter",
            "andyklimczak",
            "sebbASF",
            "asfgit"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "See https://issues.apache.org/jira/browse/LANG-1337 for issue description and explanation of the changes here.\nIn summary, we specify the ArrayList's initial capacity, this way the String built through reflection has the expected value. Tested with Oracle JDK 7 and 8, and IBM JDK 8."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3599,
        "title": {
            "body": "Replace ConcurrentHashMap with Caffine cache for configs",
            "bodyHTML": "Replace ConcurrentHashMap with Caffine cache for configs"
        },
        "comments": [],
        "total_comments_count": 1,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4wVY5H",
                "comments": [
                    {
                        "bodyText": "I was wondering if adding a weigher would make sense.  Looking at the caffine docs the weight is only acquired when something is added to the cache.  So it would not really handle the case of configuration growing in size (like a user adds a large prop after its in the cache).  So a weigher probably does not makes sense for this case because Configuration objects have a dynamic size.",
                        "body": "I was wondering if adding a weigher would make sense.  Looking at the [caffine docs](https://github.com/ben-manes/caffeine/wiki/Eviction#size-based) the weight is only acquired when something is added to the cache.  So it would not really handle the case of configuration growing in size (like a user adds a large prop after its in the cache).  So a weigher probably does not makes sense for this case because Configuration objects have a dynamic size.",
                        "startLine": null,
                        "line": 83,
                        "originalLine": 83,
                        "originalStartLine": null
                    }
                ],
                "line": 83,
                "startLine": 83,
                "originalLine": 83,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/conf/ServerConfigurationFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Using a cache instead of a map to ensure that configs are eventually cleaned up on deletions. The issue was raised in PR #3588"
        }
    },
    {
        "repo": "commons-io",
        "pr_number": 468,
        "title": {
            "body": "Spelling",
            "bodyHTML": "Spelling"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmPM5iY05-",
                "body": "## [Codecov](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\n> Merging [#468](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) (5b6dfda) into [master](https://app.codecov.io/gh/apache/commons-io/commit/c511d15294d1a406a177368804014313948e2601?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) (c511d15) will **decrease** coverage by `0.08%`.\n> Report is 3 commits behind head on master.\n> The diff coverage is `100.00%`.\n\n```diff\n@@             Coverage Diff              @@\n##             master     #468      +/-   ##\n============================================\n- Coverage     84.85%   84.78%   -0.08%     \n+ Complexity     3367     3363       -4     \n============================================\n  Files           227      227              \n  Lines          8076     8076              \n  Branches        953      953              \n============================================\n- Hits           6853     6847       -6     \n- Misses          971      974       +3     \n- Partials        252      255       +3     \n```\n\n\n| [Files Changed](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Coverage Œî | |\n|---|---|---|\n| [...rc/main/java/org/apache/commons/io/FileSystem.java](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vRmlsZVN5c3RlbS5qYXZh) | `57.47% <√∏> (√∏)` | |\n| [src/main/java/org/apache/commons/io/FileUtils.java](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vRmlsZVV0aWxzLmphdmE=) | `94.69% <√∏> (√∏)` | |\n| [...apache/commons/io/build/AbstractStreamBuilder.java](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vYnVpbGQvQWJzdHJhY3RTdHJlYW1CdWlsZGVyLmphdmE=) | `87.17% <√∏> (√∏)` | |\n| [.../org/apache/commons/io/input/QueueInputStream.java](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vaW5wdXQvUXVldWVJbnB1dFN0cmVhbS5qYXZh) | `100.00% <√∏> (√∏)` | |\n| [...g/apache/commons/io/input/TimestampedObserver.java](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vaW5wdXQvVGltZXN0YW1wZWRPYnNlcnZlci5qYXZh) | `100.00% <√∏> (√∏)` | |\n| [.../apache/commons/io/output/ChunkedOutputStream.java](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vb3V0cHV0L0NodW5rZWRPdXRwdXRTdHJlYW0uamF2YQ==) | `100.00% <√∏> (√∏)` | |\n| [...a/org/apache/commons/io/input/XmlStreamReader.java](https://app.codecov.io/gh/apache/commons-io/pull/468?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvaW8vaW5wdXQvWG1sU3RyZWFtUmVhZGVyLmphdmE=) | `92.00% <100.00%> (√∏)` | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/apache/commons-io/pull/468/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache)\n\n:mega: We‚Äôre building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache)\n",
                "bodyText": "Codecov Report\n\nMerging #468 (5b6dfda) into master (c511d15) will decrease coverage by 0.08%.\nReport is 3 commits behind head on master.\nThe diff coverage is 100.00%.\n\n@@             Coverage Diff              @@\n##             master     #468      +/-   ##\n============================================\n- Coverage     84.85%   84.78%   -0.08%     \n+ Complexity     3367     3363       -4     \n============================================\n  Files           227      227              \n  Lines          8076     8076              \n  Branches        953      953              \n============================================\n- Hits           6853     6847       -6     \n- Misses          971      974       +3     \n- Partials        252      255       +3     \n\n\n\nFiles Changed\nCoverage Œî\n\n\n\n\n\n...rc/main/java/org/apache/commons/io/FileSystem.java\n57.47% <√∏> (√∏)\n\n\n\nsrc/main/java/org/apache/commons/io/FileUtils.java\n94.69% <√∏> (√∏)\n\n\n\n...apache/commons/io/build/AbstractStreamBuilder.java\n87.17% <√∏> (√∏)\n\n\n\n.../org/apache/commons/io/input/QueueInputStream.java\n100.00% <√∏> (√∏)\n\n\n\n...g/apache/commons/io/input/TimestampedObserver.java\n100.00% <√∏> (√∏)\n\n\n\n.../apache/commons/io/output/ChunkedOutputStream.java\n100.00% <√∏> (√∏)\n\n\n\n...a/org/apache/commons/io/input/XmlStreamReader.java\n92.00% <100.00%> (√∏)\n\n\n\n\n... and 1 file with indirect coverage changes\nüì£ We‚Äôre building smart automated test selection to slash your CI/CD build times. Learn more",
                "createdAt": "2023-07-25T22:56:30Z",
                "author": "codecov-commenter"
            }
        ],
        "total_comments_count": 13,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmPM4wihxC",
                "comments": [
                    {
                        "bodyText": "This file has a whole bunch of different local variables used for new BufferedInputStream(...). There does not appear to be a remotely good reason for so many different ways to spell the same variable name in a single file, but only this one bothered me enough to change it.\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 94\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           final BufferedInputStream bis = new BufferedInputStream(new ByteArrayInputStream(new byte[] { 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd' })); \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 112\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           try (BufferedInputStream buf = new BufferedInputStream(null, 5)) { \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 143\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           final BufferedInputStream bufin = new BufferedInputStream(in); \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 162\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           try (BufferedInputStream str = new BufferedInputStream(null)) { \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 172\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           try (BufferedInputStream str = new BufferedInputStream(null, 1)) { \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 216\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           InputStream in = new BufferedInputStream(new ByteArrayInputStream(bytes), 12); \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 230\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           BufferedInputStream buf = new BufferedInputStream(new ByteArrayInputStream(new byte[] { 0, 1, 2, 3, 4 }), 2); \n        \n    \n  \n\n\n-- this is in the same scope as the previous one, but the previous one is effectively dead, so there's no reason not to recycle it as the next two sites do...\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 281\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           final InputStream in = new BufferedInputStream(new ByteArrayInputStream(bytes), 12); \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 302\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           try (BufferedInputStream bufin = new BufferedInputStream(new InputStream() { \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 347\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           final BufferedInputStream bis = new BufferedInputStream(null); \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 390\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           final BufferedInputStream bis = new BufferedInputStream(null); \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 428\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           final BufferedInputStream bufin = new BufferedInputStream(new ByteArrayInputStream(input)); \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 441\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           try (BufferedInputStream buf = new BufferedInputStream(null, 5)) { \n        \n    \n  \n\n\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java\n    \n    \n         Line 461\n      in\n      318645f\n    \n  \n  \n    \n\n        \n          \n           try (BufferedInputStream buf = new BufferedInputStream(null, 5)) {",
                        "body": "This file has a whole bunch of different local variables used for `new BufferedInputStream(...)`. There does not appear to be a remotely good reason for so many different ways to spell the same variable name in a single file, but only this one bothered me enough to change it.\r\n\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L94\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L112\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L143\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L162\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L172\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L216\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L230\r\n-- this is in the same scope as the previous one, but the previous one is effectively dead, so there's no reason not to recycle it as the next two sites do...\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L281\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L302\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L347\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L390\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L428\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L441\r\nhttps://github.com/apache/commons-io/blob/318645fd97d6c31cfbce6f5a7fa83d5350e87708/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java#L461",
                        "startLine": 413,
                        "line": 417,
                        "originalLine": 417,
                        "originalStartLine": 413
                    }
                ],
                "line": 417,
                "startLine": 413,
                "originalLine": 417,
                "originalStartLine": 413,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": "LEFT"
            },
            {
                "id": "PRRT_kwDOAAMmPM4wil8M",
                "comments": [
                    {
                        "bodyText": "Let's not change this please, this is not a spelling error, both spellings are acceptable, one is clearer due to the hyphen.",
                        "body": "Let's not change this please, this is not a spelling error, both spellings are acceptable, one is clearer due to the hyphen.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sure, but do note that you're already using it in ‚Äésrc/main/java/org/apache/commons/io/FileUtils.java per https://github.com/search?q=repo%3Aapache%2Fcommons-io%20nonexistent&type=code",
                        "body": "Sure, but do note that you're already using it in [‚Äésrc/main/java/org/apache/commons/io/FileUtils.java](https://github.com/apache/commons-io/blob/06fde31494c279ad940149e1a3d4944040c73c0d/src/main/java/org/apache/commons/io/FileUtils.java#L1091) per https://github.com/search?q=repo%3Aapache%2Fcommons-io%20nonexistent&type=code",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I've dropped those changes, but I've thrown in some more existant -> existent changes.",
                        "body": "I've dropped those changes, but I've thrown in some more `existant` -> `existent` changes.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Thank you. I'd rather normalize that word on the hyphenated variant.",
                        "body": "Thank you. I'd rather normalize that word on the hyphenated variant.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Sorry, how would you do that? consider https://github.com/apache/commons-io/compare/318645fd97d6c31cfbce6f5a7fa83d5350e87708..810cf30344db9d3e5fffc8ea074d50fae136e558\n\n  \n    \n      commons-io/src/test/java/org/apache/commons/io/file/PathUtilsTest.java\n    \n    \n         Line 102\n      in\n      810cf30\n    \n  \n  \n    \n\n        \n          \n           private Path getNonExistentPath() {",
                        "body": "Sorry, how would you do that? consider https://github.com/apache/commons-io/compare/318645fd97d6c31cfbce6f5a7fa83d5350e87708..810cf30344db9d3e5fffc8ea074d50fae136e558\r\n\r\nhttps://github.com/apache/commons-io/blob/810cf30344db9d3e5fffc8ea074d50fae136e558/src/test/java/org/apache/commons/io/file/PathUtilsTest.java#L102",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Err... this is a PR, you edit the files? Use the hyphenated variant in comments and camel-case in code.",
                        "body": "Err... this is a PR, you edit the files? Use the hyphenated variant in comments and camel-case in code.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Then I think this PR has what you want.",
                        "body": "Then I think this PR has what you want. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It is not. Local vars should be \"nonexistentFoo\" -> \"nonExistentFoo\".",
                        "body": "It is not. Local vars should be \"nonexistentFoo\" -> \"nonExistentFoo\".",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "ok, I think this addresses your request",
                        "body": "ok, I think this addresses your request",
                        "startLine": null,
                        "line": null,
                        "originalLine": 47,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 47,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jsoref",
            "codecov-commenter",
            "garydgregory"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "https://issues.apache.org/jira/browse/IO-806\nThis PR corrects misspellings identified by the check-spelling action.\nThe misspellings have been reported at https://github.com/jsoref/commons-io/actions/runs/5662536320#summary-15342653080\nThe action reports that the changes in this PR would make it happy: https://github.com/jsoref/commons-io/actions/runs/5662536436#summary-15342654674\n\nI can fix the summaries to match the requested style, but at the moment I'm all out of available jobs and I'm waiting for the current jobs to finish."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3036,
        "title": {
            "body": "speed up test using shared cluster instance",
            "bodyHTML": "speed up test using shared cluster instance"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5Mtbqz",
                "body": "This is definitely a nice change to speed things up. I will just echo @ctubbsii here and say my main concern is just that the instance properties are modified in some tests and you don't know the order the tests will run so it's not really always testing the same thing potentially.\r\n\r\nMaybe when the integration test first starts up we capture the original properties/defaults for the instance and then after each test the original properties could be reset back so that when each test runs it always has the same starting point?",
                "bodyText": "This is definitely a nice change to speed things up. I will just echo @ctubbsii here and say my main concern is just that the instance properties are modified in some tests and you don't know the order the tests will run so it's not really always testing the same thing potentially.\nMaybe when the integration test first starts up we capture the original properties/defaults for the instance and then after each test the original properties could be reset back so that when each test runs it always has the same starting point?",
                "createdAt": "2022-10-21T13:41:13Z",
                "author": "cshannon"
            },
            {
                "id": "IC_kwDOACaFSM5Mu9oI",
                "body": "> Looks good to me, are we good to merge this in for 2.1.0 or are we waiting for 3.0.0 ?\r\n\r\nIt can be merged for 2.1. Whether or not it makes it into the next release candidate depends on timing, but for this, it doesn't really matter. The main concern for me is potential for the tests to interfere with each other if they run concurrently, rather than sequentially, or if one leaves it in an unexpected state before the next runs (if run sequentially).",
                "bodyText": "Looks good to me, are we good to merge this in for 2.1.0 or are we waiting for 3.0.0 ?\n\nIt can be merged for 2.1. Whether or not it makes it into the next release candidate depends on timing, but for this, it doesn't really matter. The main concern for me is potential for the tests to interfere with each other if they run concurrently, rather than sequentially, or if one leaves it in an unexpected state before the next runs (if run sequentially).",
                "createdAt": "2022-10-21T19:57:30Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4mNkia",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n              @BeforeEach\n          \n          \n            \n              public void clear() throws Exception {\n          \n          \n            \n                try (var client = Accumulo.newClient().from(getClientProps()).build()) {\n          \n          \n            \n                  client.instanceOperations().modifyProperties(Map::clear);\n          \n          \n            \n                }\n          \n          \n            \n              }",
                        "body": "```suggestion\r\n\r\n  @BeforeEach\r\n  public void clear() throws Exception {\r\n    try (var client = Accumulo.newClient().from(getClientProps()).build()) {\r\n      client.instanceOperations().modifyProperties(Map::clear);\r\n    }\r\n  }\r\n\r\n```",
                        "startLine": null,
                        "line": 84,
                        "originalLine": 84,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is what I mean, I think this should be sufficient. Each test already generally does this (clears out and tries to restore the previous state). The issue is that if a test fails that may not execute or future tests may not do that so I think it's best to add this just to make sure we are in a clean state otherwise this looks good to me.",
                        "body": "This is what I mean, I think this should be sufficient. Each test already generally does this (clears out and tries to restore the previous state). The issue is that if a test fails that may not execute or future tests may not do that so I think it's best to add this just to make sure we are in a clean state otherwise this looks good to me.",
                        "startLine": null,
                        "line": 84,
                        "originalLine": 84,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think I'd still be concerned that the tests could be running concurrently. Maybe it's not a problem. I'm not sure.",
                        "body": "I think I'd still be concerned that the tests could be running concurrently. Maybe it's not a problem. I'm not sure.",
                        "startLine": null,
                        "line": 84,
                        "originalLine": 84,
                        "originalStartLine": null
                    }
                ],
                "line": 84,
                "startLine": 84,
                "originalLine": 84,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/conf/PropStoreConfigIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "EdColeman",
            "cshannon",
            "ctubbsii",
            "Manno15"
        ],
        "tdv": 28.0,
        "description": {
            "bodyText": "This only changes the PropStoreSonfigIT test, with no other code changes.  Using a shared min instance in this test speeds up the my test runs by about 60 to 90 seconds and now completes in around 3:30."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2462,
        "title": {
            "body": "Added FaTE TStatus.SUBMITTED",
            "bodyHTML": "Added FaTE TStatus.SUBMITTED"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM49WsNZ",
                "body": "> I'm not really sure I understand the difference between the NEW state that already exists and your new SUBMITTED state.\r\n\r\nPrior to this change, when `Fate.startTransaction` was called to allocate a transaction id its state would be `NEW`. Then, when `Fate.seedTransaction()` was called to associate the Repo with the transaction id, the state would be changed to `IN_PROGRESS`. `Fate.startTransaction` would just serialize the Repo into ZooKeeper, it didn't actually run it.\r\n\r\nWith this change, there is an intermediate state (SUBMITTED).\r\n\r\nHere's an excerpt from FateIT:\r\n\r\n```\r\n      long txid = fate.startTransaction();\r\n      assertEquals(TStatus.NEW, getTxStatus(zk, txid));\r\n      fate.seedTransaction(txid, new TestOperation(NS, TID), true);\r\n      assertEquals(TStatus.SUBMITTED, getTxStatus(zk, txid));\r\n```",
                "bodyText": "I'm not really sure I understand the difference between the NEW state that already exists and your new SUBMITTED state.\n\nPrior to this change, when Fate.startTransaction was called to allocate a transaction id its state would be NEW. Then, when Fate.seedTransaction() was called to associate the Repo with the transaction id, the state would be changed to IN_PROGRESS. Fate.startTransaction would just serialize the Repo into ZooKeeper, it didn't actually run it.\nWith this change, there is an intermediate state (SUBMITTED).\nHere's an excerpt from FateIT:\n      long txid = fate.startTransaction();\n      assertEquals(TStatus.NEW, getTxStatus(zk, txid));\n      fate.seedTransaction(txid, new TestOperation(NS, TID), true);\n      assertEquals(TStatus.SUBMITTED, getTxStatus(zk, txid));",
                "createdAt": "2022-02-03T20:09:58Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM49W6cV",
                "body": "I took a quick look and confirmed that the metrics look okay - the TX state is added to the expected states.",
                "bodyText": "I took a quick look and confirmed that the metrics look okay - the TX state is added to the expected states.",
                "createdAt": "2022-02-03T21:25:50Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM49ZSQv",
                "body": "I just had a thought for an alternative approach. I am not sure if it is a better solution to adding the `SUBMITTED` state though. Would it be easier to change the code to set the state to NEW when the transaction is seeded? We know the transaction is new because it will have an ID so I am just wondering if we need an additional state.",
                "bodyText": "I just had a thought for an alternative approach. I am not sure if it is a better solution to adding the SUBMITTED state though. Would it be easier to change the code to set the state to NEW when the transaction is seeded? We know the transaction is new because it will have an ID so I am just wondering if we need an additional state.",
                "createdAt": "2022-02-04T14:28:19Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM49ZTvq",
                "body": "So, currently the NEW fate transactions are aged off. If we moved NEW to mean SUBMITTED, then we would need another state to still exist so that they could be aged off. At that point, we're at the same place.",
                "bodyText": "So, currently the NEW fate transactions are aged off. If we moved NEW to mean SUBMITTED, then we would need another state to still exist so that they could be aged off. At that point, we're at the same place.",
                "createdAt": "2022-02-04T14:35:14Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM49ZViB",
                "body": "> So, currently the NEW fate transactions are aged off. If we moved NEW to mean SUBMITTED, then we would need another state to still exist so that they could be aged off. At that point, we're at the same place.\r\n\r\nI was thinking to not store the TxD in ZK. It doesn't look like we are really doing anything between the creation and seeding.",
                "bodyText": "So, currently the NEW fate transactions are aged off. If we moved NEW to mean SUBMITTED, then we would need another state to still exist so that they could be aged off. At that point, we're at the same place.\n\nI was thinking to not store the TxD in ZK. It doesn't look like we are really doing anything between the creation and seeding.",
                "createdAt": "2022-02-04T14:43:43Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM49ZWJs",
                "body": "> I was thinking to not store the TxD in ZK. It doesn't look like we are really doing anything between the creation and seeding.\r\n\r\nI'm not sure of the side effects of that approach, if any. Will need someone else with more FaTE knowledge to chime in.",
                "bodyText": "I was thinking to not store the TxD in ZK. It doesn't look like we are really doing anything between the creation and seeding.\n\nI'm not sure of the side effects of that approach, if any. Will need someone else with more FaTE knowledge to chime in.",
                "createdAt": "2022-02-04T14:46:31Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM49ZZyr",
                "body": "> > I was thinking to not store the TxD in ZK. It doesn't look like we are really doing anything between the creation and seeding.\r\n> \r\n> I'm not sure of the side effects of that approach, if any. Will need someone else with more FaTE knowledge to chime in.\r\n\r\nYeah, I am not sure either. One side effect, which I think would be a good one, would be less TxIDs created in ZK. Currently the call to create the TxID is technically repeatable but it will create a lot of extra TxIDs in ZK and extra calls to ZK to age them off. The TxID is just a random number so its not like we are tracking it for other purposes, like we do with TableId.",
                "bodyText": "I was thinking to not store the TxD in ZK. It doesn't look like we are really doing anything between the creation and seeding.\n\nI'm not sure of the side effects of that approach, if any. Will need someone else with more FaTE knowledge to chime in.\n\nYeah, I am not sure either. One side effect, which I think would be a good one, would be less TxIDs created in ZK. Currently the call to create the TxID is technically repeatable but it will create a lot of extra TxIDs in ZK and extra calls to ZK to age them off. The TxID is just a random number so its not like we are tracking it for other purposes, like we do with TableId.",
                "createdAt": "2022-02-04T15:03:49Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM49Zoxf",
                "body": "> The TxID is just a random number so its not like we are tracking it for other purposes, like we do with TableId.\r\n\r\nIsn't storing it in ZK guaranteeing it's unique, though?",
                "bodyText": "The TxID is just a random number so its not like we are tracking it for other purposes, like we do with TableId.\n\nIsn't storing it in ZK guaranteeing it's unique, though?",
                "createdAt": "2022-02-04T16:10:33Z",
                "author": "ctubbsii"
            },
            {
                "id": "IC_kwDOACaFSM49ZscX",
                "body": "> > The TxID is just a random number so its not like we are tracking it for other purposes, like we do with TableId.\r\n> \r\n> Isn't storing it in ZK guaranteeing it's unique, though?\r\n\r\nYes",
                "bodyText": "The TxID is just a random number so its not like we are tracking it for other purposes, like we do with TableId.\n\nIsn't storing it in ZK guaranteeing it's unique, though?\n\nYes",
                "createdAt": "2022-02-04T16:27:55Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM49Z2y8",
                "body": "@milleruntime - are you good with this approach then considering the discussion?",
                "bodyText": "@milleruntime - are you good with this approach then considering the discussion?",
                "createdAt": "2022-02-04T17:15:50Z",
                "author": "dlmarion"
            },
            {
                "id": "IC_kwDOACaFSM49Z3yC",
                "body": "> @milleruntime - are you good with this approach then considering the discussion?\r\n\r\nYeah I think this approach is fine. I wanted to look through the code closer but if its holding you up, feel free to merge.",
                "bodyText": "@milleruntime - are you good with this approach then considering the discussion?\n\nYeah I think this approach is fine. I wanted to look through the code closer but if its holding you up, feel free to merge.",
                "createdAt": "2022-02-04T17:21:20Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM49Z_pr",
                "body": "I created a follow on: https://github.com/apache/accumulo/issues/2466",
                "bodyText": "I created a follow on: #2466",
                "createdAt": "2022-02-04T18:02:48Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 34,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4ecY9L",
                "comments": [
                    {
                        "bodyText": "enums should always be compared with == and not .equals\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                            if (status.equals(TStatus.SUBMITTED)) {\n          \n          \n            \n                              store.setStatus(tid, TStatus.IN_PROGRESS);\n          \n          \n            \n                            }\n          \n          \n            \n                            if (status == TStatus.SUBMITTED) {\n          \n          \n            \n                              store.setStatus(tid, TStatus.IN_PROGRESS);\n          \n          \n            \n                            }",
                        "body": "enums should always be compared with `==` and not `.equals`\r\n\r\n```suggestion\r\n                if (status == TStatus.SUBMITTED) {\r\n                  store.setStatus(tid, TStatus.IN_PROGRESS);\r\n                }\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 86,
                        "originalStartLine": 84
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 86,
                "originalStartLine": 84,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/fate/Fate.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4ecZKE",
                "comments": [
                    {
                        "bodyText": "New enums should be appended to the list rather than inserted into the middle, so it doesn't affect their ordinal, which could be important for serialization issues.",
                        "body": "New enums should be appended to the list rather than inserted into the middle, so it doesn't affect their ordinal, which could be important for serialization issues.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 41,
                        "originalStartLine": 39
                    },
                    {
                        "bodyText": "Addressed in 46a503a",
                        "body": "Addressed in 46a503ace773ab8f3c1f35a91691c78014e43f9b",
                        "startLine": null,
                        "line": null,
                        "originalLine": 41,
                        "originalStartLine": 39
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 41,
                "originalStartLine": 39,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/fate/ReadOnlyTStore.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4ecZRo",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                        if (status.equals(TStatus.SUBMITTED) || status.equals(TStatus.IN_PROGRESS)\n          \n          \n            \n                            || status.equals(TStatus.FAILED_IN_PROGRESS)) {\n          \n          \n            \n                        if (status == TStatus.SUBMITTED || status == TStatus.IN_PROGRESS\n          \n          \n            \n                            || status == TStatus.FAILED_IN_PROGRESS) {",
                        "body": "```suggestion\r\n            if (status == TStatus.SUBMITTED || status == TStatus.IN_PROGRESS\r\n                || status == TStatus.FAILED_IN_PROGRESS) {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 178,
                        "originalStartLine": 177
                    },
                    {
                        "bodyText": "Addressed in 46a503a",
                        "body": "Addressed in 46a503ace773ab8f3c1f35a91691c78014e43f9b",
                        "startLine": null,
                        "line": null,
                        "originalLine": 178,
                        "originalStartLine": 177
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 178,
                "originalStartLine": 177,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/fate/ZooStore.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4ecZgn",
                "comments": [
                    {
                        "bodyText": "This is already using a format string. So, you don't need to do the concatenation as well:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                String txdir = String.format(\"%s/tx_%016x\", ZK_ROOT + Constants.ZFATE, txid);\n          \n          \n            \n                String txdir = String.format(\"%s%s/tx_%016x\", ZK_ROOT, Constants.ZFATE, txid);",
                        "body": "This is already using a format string. So, you don't need to do the concatenation as well:\r\n```suggestion\r\n    String txdir = String.format(\"%s%s/tx_%016x\", ZK_ROOT, Constants.ZFATE, txid);\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 189,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 46a503a",
                        "body": "Addressed in 46a503ace773ab8f3c1f35a91691c78014e43f9b",
                        "startLine": null,
                        "line": null,
                        "originalLine": 189,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 189,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/fate/zookeeper/FateIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4ecZlA",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              public static void inCall() throws InterruptedException {\n          \n          \n            \n              private static void inCall() throws InterruptedException {",
                        "body": "```suggestion\r\n  private static void inCall() throws InterruptedException {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 176,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 46a503a",
                        "body": "Addressed in 46a503ace773ab8f3c1f35a91691c78014e43f9b",
                        "startLine": null,
                        "line": null,
                        "originalLine": 176,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 176,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/fate/zookeeper/FateIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4ecZ6F",
                "comments": [
                    {
                        "bodyText": "Should there be a few millis of sleep in here so it doesn't rapid cycle?\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                      s = getTxStatus(zk, txid);\n          \n          \n            \n                      s = getTxStatus(zk, txid);\n          \n          \n            \n                      UtilWaitThread.sleep(50);",
                        "body": "Should there be a few millis of sleep in here so it doesn't rapid cycle?\r\n```suggestion\r\n          s = getTxStatus(zk, txid);\r\n          UtilWaitThread.sleep(50);\r\n```",
                        "startLine": null,
                        "line": 162,
                        "originalLine": 161,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Addressed in 46a503a",
                        "body": "Addressed in 46a503ace773ab8f3c1f35a91691c78014e43f9b",
                        "startLine": null,
                        "line": 162,
                        "originalLine": 161,
                        "originalStartLine": null
                    }
                ],
                "line": 162,
                "startLine": 162,
                "originalLine": 161,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/fate/zookeeper/FateIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4ecZ7a",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  while (!s.equals(TStatus.SUCCESSFUL)) {\n          \n          \n            \n                    s = getTxStatus(zk, txid);\n          \n          \n            \n                  }\n          \n          \n            \n                  while (!s.equals(TStatus.SUCCESSFUL)) {\n          \n          \n            \n                    s = getTxStatus(zk, txid);\n          \n          \n            \n                    UtilWaitThread.sleep(50);\n          \n          \n            \n                  }",
                        "body": "```suggestion\r\n      while (!s.equals(TStatus.SUCCESSFUL)) {\r\n        s = getTxStatus(zk, txid);\r\n        UtilWaitThread.sleep(50);\r\n      }\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 156,
                        "originalStartLine": 154
                    },
                    {
                        "bodyText": "Addressed in 46a503a",
                        "body": "Addressed in 46a503ace773ab8f3c1f35a91691c78014e43f9b",
                        "startLine": null,
                        "line": null,
                        "originalLine": 156,
                        "originalStartLine": 154
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 156,
                "originalStartLine": 154,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/fate/zookeeper/FateIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4ecpDX",
                "comments": [
                    {
                        "bodyText": "Are we sure we want transactions in the SUBMITTED state to be subject to age-off? I think NEW makes sense because they are probably leftover from a crash and the transaction ID is just not used. However, SUBMITTED seems more similar to IN_PROGRESS here. It could still run. Right?\n(Also, same question in AgeOffStore constructor below)",
                        "body": "Are we sure we want transactions in the `SUBMITTED` state to be subject to age-off? I think `NEW` makes sense because they are probably leftover from a crash and the transaction ID is just not used. However, `SUBMITTED` seems more similar to `IN_PROGRESS` here. It could still run. Right?\r\n(Also, same question in `AgeOffStore` constructor below)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 97,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Good catch, I was in the mode of making sure I added the enum to the switch statements. I'll update.",
                        "body": "Good catch, I was in the mode of making sure I added the enum to the switch statements. I'll update.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 97,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Modified in f228aab",
                        "body": "Modified in f228aab",
                        "startLine": null,
                        "line": null,
                        "originalLine": 97,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 97,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/fate/AgeOffStore.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4ecpzW",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  while (!s.equals(TStatus.SUCCESSFUL)) {\n          \n          \n            \n                  while (s != TStatus.SUCCESSFUL) {",
                        "body": "```suggestion\r\n      while (s != TStatus.SUCCESSFUL) {\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 154,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 154,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/fate/zookeeper/FateIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4eeSF5",
                "comments": [
                    {
                        "bodyText": "I think there are some OPs that do work in the isReady() function so I wonder if changing when it gets set to IN_PROGRESS will affect them. I will see if I can find one.",
                        "body": "I think there are some OPs that do work in the `isReady()` function so I wonder if changing when it gets set to IN_PROGRESS will affect them. I will see if I can find one.",
                        "startLine": null,
                        "line": 290,
                        "originalLine": 290,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The BulkImport and Compact operations do things in the isReady() function. I don't know if it matters if the status is IN_PROGRESS or SUBMITTED though.",
                        "body": "The BulkImport and Compact operations do things in the `isReady()` function. I don't know if it matters if the status is IN_PROGRESS or SUBMITTED though.",
                        "startLine": null,
                        "line": 290,
                        "originalLine": 290,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Also the ShutdownTServer operation",
                        "body": "Also the `ShutdownTServer` operation",
                        "startLine": null,
                        "line": 290,
                        "originalLine": 290,
                        "originalStartLine": null
                    }
                ],
                "line": 290,
                "startLine": 290,
                "originalLine": 290,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/fate/Fate.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "EdColeman",
            "milleruntime",
            "ctubbsii"
        ],
        "tdv": 118.0,
        "description": {
            "bodyText": "When a FaTE transaction is created in the Manager its status is set\nto IN_PROGRESS even though it's not actually running, it could be\nwaiting to run. The output from the fate print command will show\nthat the newly created transaction is IN_PROGRESS and could be\nconfusing to users. This change introduces the SUBMITTED state, which\nis the state of the transaction after it has been created but before\nit is executed."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2615,
        "title": {
            "body": "Add details to ZooKeeper watcher logs",
            "bodyHTML": "Add details to ZooKeeper watcher logs"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5BFwKh",
                "body": "I thought of this while trying to parse the logs in #2613. More details in the logs for ZK events would help troubleshoot some of the ZK-related log messages we get when integration tests fail, and possibly help troubleshoot production instances as well.",
                "bodyText": "I thought of this while trying to parse the logs in #2613. More details in the logs for ZK events would help troubleshoot some of the ZK-related log messages we get when integration tests fail, and possibly help troubleshoot production instances as well.",
                "createdAt": "2022-04-07T17:49:29Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4gOrG7",
                "comments": [
                    {
                        "bodyText": "Printing the values in one log statement is nice cause of the likelihood of multiple threads. Does the WatchedEvent type toString() print the same values?",
                        "body": "Printing the values in one log statement is nice cause of the likelihood of multiple threads. Does the `WatchedEvent` type toString() print the same values?",
                        "startLine": null,
                        "line": 314,
                        "originalLine": 314,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes, it does. It looks like \"WatchedEvent: \" followed by those three values. There aren't newlines, but I figured formatting changes here doesn't really matter, since it's a trace log message, and thus should be rarely seen.",
                        "body": "Yes, it does. It looks like \"WatchedEvent: \" followed by those three values. There aren't newlines, but I figured formatting changes here doesn't really matter, since it's a trace log message, and thus should be rarely seen.",
                        "startLine": null,
                        "line": 314,
                        "originalLine": 314,
                        "originalStartLine": null
                    }
                ],
                "line": 314,
                "startLine": 314,
                "originalLine": 314,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ServiceLock.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "milleruntime"
        ],
        "tdv": -8.0,
        "description": {
            "bodyText": "Add more details to the log messages produced while processing ZooKeeper\nWatchedEvents. Also, try to standardize some messages by adding the\nevent at the end, after whatever core message is conveyed. Most of the\ntime, we won't see these messages, but it definitely helps to have\ngreater insight into what event triggered the situation, rather than\npicking out and printing only certain details from the WatchedEvent."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2937,
        "title": {
            "body": "Combine CleanZookeeper and DeleteZooInstance utilities",
            "bodyHTML": "Combine CleanZookeeper and DeleteZooInstance utilities"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5KoxK6",
                "body": "> small nit\r\n\r\nThanks for catching that, fixed it now.",
                "bodyText": "small nit\n\nThanks for catching that, fixed it now.",
                "createdAt": "2022-09-20T11:13:18Z",
                "author": "cshannon"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4lMhWO",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  // If clean is set to true thenn a specific instance should not be set\n          \n          \n            \n                  // If clean is set to true then a specific instance should not be set",
                        "body": "```suggestion\r\n      // If clean is set to true then a specific instance should not be set\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 50,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 50,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/main/java/org/apache/accumulo/server/util/DeleteZooInstance.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "cshannon",
            "dlmarion"
        ],
        "tdv": -157.0,
        "description": {
            "bodyText": "Combine the CleanZookeeper utility, which will delete all old instances, and the DeleteZooInstance utility, which deletes a single instance, into one utility class and use a flag to determine which action to take.\nThis is a follow on to #2807 and replaces PR #2925"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3032,
        "title": {
            "body": "Handle closed filesystem",
            "bodyHTML": "Handle closed filesystem"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5Mj1mj",
                "body": "Have not tested this yet, its tricky to test.",
                "bodyText": "Have not tested this yet, its tricky to test.",
                "createdAt": "2022-10-19T19:16:23Z",
                "author": "keith-turner"
            },
            {
                "id": "IC_kwDOACaFSM5MkK8D",
                "body": "This fixes #3031 ",
                "bodyText": "This fixes #3031",
                "createdAt": "2022-10-19T20:42:53Z",
                "author": "ctubbsii"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4mI0sW",
                "comments": [
                    {
                        "bodyText": "This change does not contribute to the correctness of this PR in any way, just though it was nice to do since I noticed while debugging.",
                        "body": "This change does not contribute to the correctness of this PR in any way, just though it was nice to do since I noticed while debugging.",
                        "startLine": null,
                        "line": 134,
                        "originalLine": 134,
                        "originalStartLine": null
                    }
                ],
                "line": 134,
                "startLine": 134,
                "originalLine": 134,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "ctubbsii",
            "dlmarion"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "helix",
        "pr_number": 2710,
        "title": {
            "body": "Prevent the spectator routing table from containing SWAP_IN instances",
            "bodyHTML": "Prevent the spectator routing table from containing SWAP_IN instances"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5uDkc4",
                "body": "CI passed except for testCacheDataUpdates which is a flaky test.\r\n\r\nThis PR is ready to be merged.\r\n\r\nFinal Commit Message:\r\nPrevent the spectator routing table from containing SWAP_IN instances.",
                "bodyText": "CI passed except for testCacheDataUpdates which is a flaky test.\nThis PR is ready to be merged.\nFinal Commit Message:\nPrevent the spectator routing table from containing SWAP_IN instances.",
                "createdAt": "2023-12-08T01:46:38Z",
                "author": "zpinto"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc42DaMQ",
                "comments": [
                    {
                        "bodyText": "If we don't have the usage of this, maybe let's remove it.",
                        "body": "If we don't have the usage of this, maybe let's remove it.",
                        "startLine": null,
                        "line": 217,
                        "originalLine": 215,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "We have usage of this in RoutingTableProvider.",
                        "body": "We have usage of this in RoutingTableProvider.",
                        "startLine": null,
                        "line": 217,
                        "originalLine": 215,
                        "originalStartLine": null
                    }
                ],
                "line": 217,
                "startLine": 217,
                "originalLine": 215,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingDataCache.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "zpinto",
            "xyuanlu",
            "junkaixue"
        ],
        "tdv": 46.0,
        "description": {
            "bodyText": "Issues\n\n not populate SWAP_IN replicas in routing tables until SWAP is completed to avoid spectator serving traffic for replicas on the swapping in instance. #2662\n\nDescription\nDuring a swap operation, we are essentially creating a mirror node which is labeled with the SWAP_IN instance operation. Until the point that the swap operation is complete we do not want to serve traffic to this node. To achieve this, the RoutingDataCache will have a notion of routableInstanceConfigs and routableLiveInstances.\nOnly these nodes are used to create the routingTables. At this time, only SWAP_IN instances are considered not to be routable.\nTests\n\n Updated the swap tests in TestInstanceOperation to include starting a spectator and validating the EV, CS, and Default routing tables.\n\nAll TestInstanceOperation tests are passing.\nChanges that Break Backward Compatibility (Optional)\nNA\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "struts",
        "pr_number": 559,
        "title": {
            "body": "WW-5184 - Add optional parameter value check to ParametersInterceptor",
            "bodyHTML": "WW-5184 - Add optional parameter value check to ParametersInterceptor"
        },
        "comments": [
            {
                "id": "IC_kwDOAPMNSs5EWYby",
                "body": "\n[![Coverage Status](https://coveralls.io/builds/49828402/badge)](https://coveralls.io/builds/49828402)\n\nCoverage increased (+0.04%) to 50.675% when pulling **584634a9b5ed66eabc5655a49d704a7038bd1e27 on brianandle:WW-5184_v2** into **4b3ee53f939ac040b6d5351591eace6023d78514 on apache:master**.\n",
                "bodyText": "Coverage increased (+0.04%) to 50.675% when pulling 584634a on brianandle:WW-5184_v2 into 4b3ee53 on apache:master.",
                "createdAt": "2022-06-05T01:19:13Z",
                "author": "coveralls"
            },
            {
                "id": "IC_kwDOAPMNSs5EgxgR",
                "body": "@lukaszlenart, sorry just noticed the comment, so you're thinking of a ParameterValueAware similar to ParameterNameAware correct? If so I can work on that in the morning (I'm in PST timezone).",
                "bodyText": "@lukaszlenart, sorry just noticed the comment, so you're thinking of a ParameterValueAware similar to ParameterNameAware correct? If so I can work on that in the morning (I'm in PST timezone).",
                "createdAt": "2022-06-08T04:20:19Z",
                "author": "brianandle"
            },
            {
                "id": "IC_kwDOAPMNSs5Eg1kC",
                "body": "Added ParameterValueAware interface and unit test",
                "bodyText": "Added ParameterValueAware interface and unit test",
                "createdAt": "2022-06-08T04:51:25Z",
                "author": "brianandle"
            },
            {
                "id": "IC_kwDOAPMNSs5E8v9Z",
                "body": "I would postpone this change and introduce it into 6.1.0 - right now there is a few bugs targeting 6.0.1 which is a priority for me",
                "bodyText": "I would postpone this change and introduce it into 6.1.0 - right now there is a few bugs targeting 6.0.1 which is a priority for me",
                "createdAt": "2022-06-15T18:05:10Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5KUglG",
                "body": "LGTM üëç ",
                "bodyText": "LGTM üëç",
                "createdAt": "2022-09-14T14:53:06Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5KUhA6",
                "body": "@brianandle could you add this new options to https://struts.apache.org/core-developers/parameters-interceptor ? Thanks in advance!",
                "bodyText": "@brianandle could you add this new options to https://struts.apache.org/core-developers/parameters-interceptor ? Thanks in advance!",
                "createdAt": "2022-09-14T14:54:14Z",
                "author": "lukaszlenart"
            },
            {
                "id": "IC_kwDOAPMNSs5KgTKC",
                "body": "Sure. I'll work on that on Monday.\n________________________________\nFrom: Lukasz Lenart ***@***.***>\nSent: Wednesday, September 14, 2022 7:54 AM\nTo: apache/struts ***@***.***>\nCc: brianandle ***@***.***>; Mention ***@***.***>\nSubject: Re: [apache/struts] WW-5184 - Add optional parameter value check to ParametersInterceptor (PR #559)\n\n\n@brianandle<https://github.com/brianandle> could you add this new options to https://struts.apache.org/core-developers/parameters-interceptor ? Thanks in advance!\n\n‚Äî\nReply to this email directly, view it on GitHub<https://github.com/apache/struts/pull/559#issuecomment-1246892090>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AZLWUEVT55DHCUZ7TR6V44TV6HRKDANCNFSM5X4H5MIA>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n",
                "bodyText": "Sure. I'll work on that on Monday.\n‚Ä¶\n________________________________\nFrom: Lukasz Lenart ***@***.***>\nSent: Wednesday, September 14, 2022 7:54 AM\nTo: apache/struts ***@***.***>\nCc: brianandle ***@***.***>; Mention ***@***.***>\nSubject: Re: [apache/struts] WW-5184 - Add optional parameter value check to ParametersInterceptor (PR #559)\n\n\n@brianandle<https://github.com/brianandle> could you add this new options to https://struts.apache.org/core-developers/parameters-interceptor ? Thanks in advance!\n\n‚Äî\nReply to this email directly, view it on GitHub<#559 (comment)>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AZLWUEVT55DHCUZ7TR6V44TV6HRKDANCNFSM5X4H5MIA>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>",
                "createdAt": "2022-09-17T02:31:27Z",
                "author": "brianandle"
            },
            {
                "id": "IC_kwDOAPMNSs5KkQU5",
                "body": "Created https://github.com/apache/struts-site/pull/170 for the doc changes",
                "bodyText": "Created apache/struts-site#170 for the doc changes",
                "createdAt": "2022-09-19T13:25:05Z",
                "author": "brianandle"
            }
        ],
        "total_comments_count": 22,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPMNSs4h8yx_",
                "comments": [
                    {
                        "bodyText": "BTW another methods annotated with @Inject as well as some other changes are required enabling user to configure these patterns via XML configuration.",
                        "body": "BTW another methods annotated with `@Inject` as well as some other changes are required enabling user to configure these patterns via XML configuration.",
                        "startLine": null,
                        "line": 412,
                        "originalLine": 412,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "No matter what I did I couldn't get Inject to work on these, and I had assumed that's because I was using it inappropriately. The other setters that are documented by Struts, setParamNameMaxLength, setAcceptParamNames, setExcludeParams don't utilize the @Inject annotation and are injected via the following params and thus I followed suit\nacceptParamNames, excludeParams, paramNameMaxLength",
                        "body": "No matter what I did I couldn't get Inject to work on these, and I had assumed that's because I was using it inappropriately. The other setters that are documented by Struts, setParamNameMaxLength, setAcceptParamNames, setExcludeParams don't utilize the @Inject annotation and are injected via the following params and thus I followed suit\r\n\r\nacceptParamNames, excludeParams, paramNameMaxLength\r\n\r\n\r\n",
                        "startLine": null,
                        "line": 412,
                        "originalLine": 412,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Ah I see , thanks for clarification!",
                        "body": "Ah I see , thanks for clarification!",
                        "startLine": null,
                        "line": 412,
                        "originalLine": 412,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Hmm I think it makes sense to have some default patterns set here however. Currently it's empty and user has to set it in all interceptors stacks as far as I understood right? If so then like what is done for parameters names, better to have some defaults patterns set here e.g. your already provided patterns in tests for %{} and ${}",
                        "body": "Hmm I think it makes sense to have some default patterns set here however. Currently it's empty and user has to set it in all interceptors stacks as far as I understood right? If so then like what is done for parameters names, better to have some defaults patterns set here e.g. your already provided patterns in tests for %{} and ${}",
                        "startLine": null,
                        "line": 412,
                        "originalLine": 412,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "My concern would be the regression impact. I would sure hope that Struts users aren't ever expecting users to pass in params with values with %{} and ${} but that level of change seems best to include with a major (which ironically I just missed).\nI do think we could prevent an entire attack vector by excluding %{} and ${} in param values but again I'd be worried about the regression impact.\nIf the Struts team wants to do that I wouldn't object but I wasn't going to go that far on my own.",
                        "body": "My concern would be the regression impact. I would sure hope that Struts users aren't ever expecting users to pass in params with values with %{} and ${} but that level of change seems best to include with a major (which ironically I just missed).\r\n\r\nI do think we could prevent an entire attack vector by excluding %{} and ${} in param values but again I'd be worried about the regression impact.\r\n\r\nIf the Struts team wants to do that I wouldn't object but I wasn't going to go that far on my own.",
                        "startLine": null,
                        "line": 412,
                        "originalLine": 412,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "And yes it would need to be defined such as:\n<package name=\"default\" extends=\"struts-default\">\n    <interceptors>\n        <interceptor-stack name=\"myCustomStack\">\n            <interceptor-ref name=\"defaultStack\">\n            \t       <param name=\"params.excludeValuePatterns\">.*\\$\\{.*?\\}.*,.*%\\{.*?\\}.*</param>\n            </interceptor-ref>\n        </interceptor-stack>\n    </interceptors>",
                        "body": "And yes it would need to be defined such as:\r\n\r\n    <package name=\"default\" extends=\"struts-default\">\r\n        <interceptors>\r\n            <interceptor-stack name=\"myCustomStack\">\r\n                <interceptor-ref name=\"defaultStack\">\r\n                \t       <param name=\"params.excludeValuePatterns\">.*\\$\\{.*?\\}.*,.*%\\{.*?\\}.*</param>\r\n                </interceptor-ref>\r\n            </interceptor-stack>\r\n        </interceptors>\r\n  </package>\r\n",
                        "startLine": null,
                        "line": 412,
                        "originalLine": 412,
                        "originalStartLine": null
                    }
                ],
                "line": 412,
                "startLine": 412,
                "originalLine": 412,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4h8zBS",
                "comments": [
                    {
                        "bodyText": "Sorry my failure in previous PR. Could you please log such thing with WARN level? as well as other similar places.",
                        "body": "Sorry my failure in previous PR. Could you please log such thing with WARN level? as well as other similar places.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 362,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Changed to warn and updated pull request",
                        "body": "Changed to warn and updated pull request",
                        "startLine": null,
                        "line": null,
                        "originalLine": 362,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 362,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4h8zFO",
                "comments": [
                    {
                        "bodyText": "same here",
                        "body": "same here",
                        "startLine": null,
                        "line": null,
                        "originalLine": 455,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Changed to warn and updated pull request",
                        "body": "Changed to warn and updated pull request",
                        "startLine": null,
                        "line": null,
                        "originalLine": 455,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 455,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPMNSs4h8zG-",
                "comments": [
                    {
                        "bodyText": "and here",
                        "body": "and here",
                        "startLine": null,
                        "line": null,
                        "originalLine": 478,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Changed to warn and updated pull request",
                        "body": "Changed to warn and updated pull request",
                        "startLine": null,
                        "line": null,
                        "originalLine": 478,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 478,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "brianandle",
            "coveralls",
            "lukaszlenart",
            "yasserzamani"
        ],
        "tdv": 510.0,
        "description": {
            "bodyText": "Implements WW-5184\n\nAdd optional parameter value check to ParametersInterceptor\nAdd Unit Tests"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 4115,
        "title": {
            "body": "Fix ImportConfiguration.builder().setKeepOffline()",
            "bodyHTML": "Fix ImportConfiguration.builder().setKeepOffline()"
        },
        "comments": [],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM425U3W",
                "comments": [
                    {
                        "bodyText": "Does the following sound correct?  Want to make sure I understand these changes.\n\nWithout these changes the table would be in the new state, so client.tableOperations().isOnline(destTable) would have returned false.\nThe call to client.tableOperations().online(destTable, true) just kinda fix things for the rest of the test.\n\nIf that is true, it makes me wonder if the call client.tableOperations().online(destTable, true) should be a bit more strict about what table states it will transition.",
                        "body": "Does the following sound correct?  Want to make sure I understand these changes.\r\n\r\n * Without these changes the table would be in the new state, so `client.tableOperations().isOnline(destTable)` would have returned false.  \r\n * The call to `client.tableOperations().online(destTable, true)` just kinda fix things for the rest of the test.\r\n\r\nIf that is true, it makes me wonder if the call `client.tableOperations().online(destTable, true)` should be a bit more strict about what table states it will transition.",
                        "startLine": null,
                        "line": 298,
                        "originalLine": 298,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yea I think you are understanding things correctly.\nI think it could make sense to be more strict about transition states but could that cause issues if a similar situation arises where a table is stuck in a state and we want to manually transition it but if the tableOp does not allow for it, then it would be really stuck without being able to manually transition. For example if for some reason a table is stuck in NEW and we want to online it but that is not an allowed transition, then it would remain stuck in that state.",
                        "body": "Yea I think you are understanding things correctly.\r\n\r\nI think it could make sense to be more strict about transition states but could that cause issues if a similar situation arises where a table is stuck in a state and we want to manually transition it but if the tableOp does not allow for it, then it would be really stuck without being able to manually transition. For example if for some reason a table is stuck in NEW and we want to online it but that is not an allowed transition, then it would remain stuck in that state.",
                        "startLine": null,
                        "line": 298,
                        "originalLine": 298,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah it can fix things, but it can also hide bugs in other parts of the code.  If it were more strict maybe this bug would have been found sooner.  I think it would be good to make it more strict and leave fixing buggy situations to something else like zookeeper surgery or a specialized tool if the need arises frequently enough.",
                        "body": "Yeah it can fix things, but it can also hide bugs in other parts of the code.  If it were more strict maybe this bug would have been found sooner.  I think it would be good to make it more strict and leave fixing buggy situations to something else like zookeeper surgery or a specialized tool if the need arises frequently enough.",
                        "startLine": null,
                        "line": 298,
                        "originalLine": 298,
                        "originalStartLine": null
                    }
                ],
                "line": 298,
                "startLine": 298,
                "originalLine": 298,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/ImportExportIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "DomGarguilo",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Fixes #4045\nThis PR adds logic to properly transition the state of a new table created via importTable() to offline (or online) depending on the value supplied via the ImportConfiguration.\nThis was corrected by the change in FinishImportTable where the table was never transitioned from the NEW to OFFLINE table state when the (then onlineTable) param was set.\nOther changes:\n\nadded a check in the IT to make sure the new table is in the OFFLINE state instead of just \"not online\"\nrenamed the member variable from onlineTable to keepOffline for clarity and consistency"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2794,
        "title": {
            "body": "Wait for server process to notice property changes in MiniAccumuloClusterTest",
            "bodyHTML": "Wait for server process to notice property changes in MiniAccumuloClusterTest"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5FwoKH",
                "body": "lol - same test failure after change\r\n```\r\n[ERROR] Tests run: 6, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 25.258 s <<< FAILURE! - in org.apache.accumulo.minicluster.MiniAccumuloClusterTest\r\n[ERROR] org.apache.accumulo.minicluster.MiniAccumuloClusterTest.testPerTableClasspath  Time elapsed: 8.501 s  <<< ERROR!\r\norg.apache.accumulo.core.client.MutationsRejectedException: # constraint violations : 1  security codes: {}  # server errors 0 # exceptions 0\r\n\tat org.apache.accumulo.core.clientImpl.TabletServerBatchWriter.checkForFailures(TabletServerBatchWriter.java:563)\r\n\tat org.apache.accumulo.core.clientImpl.TabletServerBatchWriter.close(TabletServerBatchWriter.java:362)\r\n\tat org.apache.accumulo.core.clientImpl.BatchWriterImpl.close(BatchWriterImpl.java:57)\r\n```",
                "bodyText": "lol - same test failure after change\n[ERROR] Tests run: 6, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 25.258 s <<< FAILURE! - in org.apache.accumulo.minicluster.MiniAccumuloClusterTest\n[ERROR] org.apache.accumulo.minicluster.MiniAccumuloClusterTest.testPerTableClasspath  Time elapsed: 8.501 s  <<< ERROR!\norg.apache.accumulo.core.client.MutationsRejectedException: # constraint violations : 1  security codes: {}  # server errors 0 # exceptions 0\n\tat org.apache.accumulo.core.clientImpl.TabletServerBatchWriter.checkForFailures(TabletServerBatchWriter.java:563)\n\tat org.apache.accumulo.core.clientImpl.TabletServerBatchWriter.close(TabletServerBatchWriter.java:362)\n\tat org.apache.accumulo.core.clientImpl.BatchWriterImpl.close(BatchWriterImpl.java:57)",
                "createdAt": "2022-06-29T18:58:07Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4itwkm",
                "comments": [
                    {
                        "bodyText": "Would something like this work instead of just the sleep to make sure the property is set?\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                Thread.sleep(5000);\n          \n          \n            \n                String classpathKey = VFS_CONTEXT_CLASSPATH_PROPERTY.getKey() + \"cx1\";\n          \n          \n            \n                String classpathValue = jarFile.toURI().toString();\n          \n          \n            \n                conn.instanceOperations().setProperty(classpathKey, classpathValue);\n          \n          \n            \n            \n          \n          \n            \n                Map<String,String> systemConfiguration = conn.instanceOperations().getSystemConfiguration();\n          \n          \n            \n            \n          \n          \n            \n                while (!systemConfiguration.containsKey(classpathKey)\n          \n          \n            \n                    || !systemConfiguration.get(classpathKey).equals(classpathValue)) {\n          \n          \n            \n            \n          \n          \n            \n                  log.info(\"Expected {} but instead found {}. Sleeping for 1000ms\", classpathValue,\n          \n          \n            \n                      systemConfiguration.get(classpathKey));\n          \n          \n            \n                  Thread.sleep(1000);\n          \n          \n            \n                  systemConfiguration = conn.instanceOperations().getSystemConfiguration();\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nI haven't been able to replicate the test failure but the test passes with the changes above.",
                        "body": "Would something like this work instead of just the sleep to make sure the property is set?\r\n```suggestion\r\n    String classpathKey = VFS_CONTEXT_CLASSPATH_PROPERTY.getKey() + \"cx1\";\r\n    String classpathValue = jarFile.toURI().toString();\r\n    conn.instanceOperations().setProperty(classpathKey, classpathValue);\r\n\r\n    Map<String,String> systemConfiguration = conn.instanceOperations().getSystemConfiguration();\r\n\r\n    while (!systemConfiguration.containsKey(classpathKey)\r\n        || !systemConfiguration.get(classpathKey).equals(classpathValue)) {\r\n\r\n      log.info(\"Expected {} but instead found {}. Sleeping for 1000ms\", classpathValue,\r\n          systemConfiguration.get(classpathKey));\r\n      Thread.sleep(1000);\r\n      systemConfiguration = conn.instanceOperations().getSystemConfiguration();\r\n    }\r\n```\r\nI haven't been able to replicate the test failure but the test passes with the changes above.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 216,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "It's likely that the test thread will see the configuration change, it's the fact that the TabletServer does not see the change before the BatchWriter is used. I might have to move this one test to its own class.",
                        "body": "It's likely that the test thread will see the configuration change, it's the fact that the TabletServer does *not* see the change before the BatchWriter is used. I might have to move this one test to its own class.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 216,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Checking if the property is set will only verify that the change has propagated locally. Each process will have its own cache and sets of watchers on the property node.  So checking if the property change has propagated in one process does not provide any guarantees that all of the other processes have synced.",
                        "body": "Checking if the property is set will only verify that the change has propagated locally. Each process will have its own cache and sets of watchers on the property node.  So checking if the property change has propagated in one process does not provide any guarantees that all of the other processes have synced.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 216,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Gotcha, thanks for the additional info. Good to know.",
                        "body": "Gotcha, thanks for the additional info. Good to know.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 216,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 216,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "minicluster/src/test/java/org/apache/accumulo/minicluster/MiniAccumuloClusterTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "EdColeman",
            "DomGarguilo"
        ],
        "tdv": 50.0,
        "description": {
            "bodyText": "MiniAccumuloClusterTest.testPerTableClasspath is intermittently failing with\na MutationsRejectedException when the BatchWriter is closed because the TabletServer\nis not seeing property changes made in the test right before the BatchWriter is\ncreated. This change introduces a small sleep in an attempt to allow the\nTabletServer to react to the configuration changes before the BatchWriter is used\nin the test thread."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2666,
        "title": {
            "body": "Fix flaky tests org.apache.helix.rest.metadatastore.TestZkMetadataStoreDirectory (#2645)",
            "bodyHTML": "Fix flaky tests org.apache.helix.rest.metadatastore.TestZkMetadataStoreDirectory (#2645)"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc51QxI8",
                "body": "Since no update for a couple of days. I think it is OK to just fix this and move forward.",
                "bodyText": "Since no update for a couple of days. I think it is OK to just fix this and move forward.",
                "createdAt": "2024-02-27T18:14:29Z",
                "author": "junkaixue"
            }
        ],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc45HuVn",
                "comments": [
                    {
                        "bodyText": "Would be good to have it in the abstractestclass to be a common used method.",
                        "body": "Would be good to have it in the abstractestclass to be a common used method.",
                        "startLine": 378,
                        "line": 383,
                        "originalLine": 383,
                        "originalStartLine": 378
                    }
                ],
                "line": 383,
                "startLine": 378,
                "originalLine": 383,
                "originalStartLine": 378,
                "subjectType": "LINE",
                "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "hofi1",
            "junkaixue"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #2645\nDescription\nSets return the elements in a non-deterministic order, which means that this assertion is not correct, because it checks whether the collections contain the same elements in the same order. This leads to a flack test. To fix this problem, the assertion has been rewritten to check if the collections contain the same amount of elements as well as booth collections contain all values of the other collection.\nTests that cause problems:\n\n\n  \n    \n      helix/helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java\n    \n    \n        Lines 133 to 141\n      in\n      5f1a3f7\n    \n  \n  \n    \n\n        \n          \n           public void testGetAllMetadataStoreRealms() { \n        \n\n        \n          \n             Set<String> realms = new HashSet<>(); \n        \n\n        \n          \n             realms.add(TEST_REALM_1); \n        \n\n        \n          \n             realms.add(TEST_REALM_2); \n        \n\n        \n          \n            \n        \n\n        \n          \n             for (String namespace : _routingZkAddrMap.keySet()) { \n        \n\n        \n          \n               Assert.assertEquals(_metadataStoreDirectory.getAllMetadataStoreRealms(namespace), realms); \n        \n\n        \n          \n             } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nand\n\n  \n    \n      helix/helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java\n    \n    \n        Lines 144 to 152\n      in\n      5f1a3f7\n    \n  \n  \n    \n\n        \n          \n           public void testGetAllShardingKeys() { \n        \n\n        \n          \n             Set<String> allShardingKeys = new HashSet<>(); \n        \n\n        \n          \n             allShardingKeys.addAll(TEST_SHARDING_KEYS_1); \n        \n\n        \n          \n             allShardingKeys.addAll(TEST_SHARDING_KEYS_2); \n        \n\n        \n          \n            \n        \n\n        \n          \n             for (String namespace : _routingZkAddrMap.keySet()) { \n        \n\n        \n          \n               Assert.assertEquals(_metadataStoreDirectory.getAllShardingKeys(namespace), allShardingKeys); \n        \n\n        \n          \n             } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nThis problem was found by the NonDex Engine ‚Äì to reproduce run\nmvn -pl helix-rest edu.illinois:nondex-maven-plugin:2.1.1:nondex -Dtest=org.apache.helix.rest.metadatastore.TestZkMetadataStoreDirectory\nSolution\nReplace the assertions with a custom matcher, which checks if the sets contain the same elements without taking care of the order of the elements returned by the set.\nCustom Matcher:\n\n\n  \n    \n      helix/helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java\n    \n    \n        Lines 378 to 383\n      in\n      9cd4181\n    \n  \n  \n    \n\n        \n          \n           private void assertCollectionsContainSameElementsIgnoringOrder(Collection<String> collection1, \n        \n\n        \n          \n            Collection<String> collection2) { \n        \n\n        \n          \n              Assert.assertEquals(collection2.size(), collection1.size()); \n        \n\n        \n          \n              Assert.assertTrue(collection2.containsAll(collection1)); \n        \n\n        \n          \n              Assert.assertTrue(collection1.containsAll(collection2)); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nTests\nNo test have been written ‚Äì one existing test has been updated.\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  02:51 min\n[INFO] Finished at: 2023-10-04T23:16:04-05:00\n[INFO] ------------------------------------------------------------------------"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1583,
        "title": {
            "body": "Fix redundant workflow context updates for finished workflows",
            "bodyHTML": "Fix redundant workflow context updates for finished workflows"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDc0MjE1NDIxOQ==",
                "body": "This PR is ready to be merged.\r\n\r\nFinal commit message:\r\nFix redundant workflow context updates for finished workflows\r\n\r\nIf the workflow has been finished, there is no need to update the workflow context.\r\nIn this commit, this behavior has been fixed and optimized.",
                "bodyText": "This PR is ready to be merged.\nFinal commit message:\nFix redundant workflow context updates for finished workflows\nIf the workflow has been finished, there is no need to update the workflow context.\nIn this commit, this behavior has been fixed and optimized.",
                "createdAt": "2020-12-10T00:36:26Z",
                "author": "alirezazamani"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzM5NDQ2OnYy",
                "comments": [
                    {
                        "bodyText": "This update is not necessary. When there is a job that needs to be scheduled, we update the workflow context there. If there is no job, then we do not need to update the workflow context",
                        "body": "This update is not necessary. When there is a job that needs to be scheduled, we update the workflow context there. If there is no job, then we do not need to update the workflow context",
                        "startLine": null,
                        "line": 220,
                        "originalLine": 220,
                        "originalStartLine": null
                    }
                ],
                "line": 220,
                "startLine": 220,
                "originalLine": 220,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/task/WorkflowDispatcher.java",
                "diffSide": "LEFT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU1NzgwOnYy",
                "comments": [
                    {
                        "bodyText": "More tests will be added to this file as we move toward reducing context writes",
                        "body": "More tests will be added to this file as we move toward reducing context writes",
                        "startLine": null,
                        "line": 35,
                        "originalLine": 35,
                        "originalStartLine": null
                    }
                ],
                "line": 35,
                "startLine": 35,
                "originalLine": 35,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestContextRedundantUpdates.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "alirezazamani",
            "jiajunwang"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #1582\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIf the workflow has been finished before, there is no need to update the workflow context.\nIn this PR, this behavior has been fixed and optimized.\n\nTests\n\n\n The following tests are written for this issue:\nTestContextRedundantUpdates\nMore test will be added to this file as we move toward reducing context writes\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\nHelix-core:\n\n\n[INFO] Tests run: 1253, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,396.908 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1253, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:30 h\n[INFO] Finished at: 2020-12-09T00:16:20-08:00\n[INFO] ------------------------------------------------------------------------\n\nThe failed test is unrelated to this change and is failing even without this PR.\nHelix-rest:\n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 103.579 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:49 min\n[INFO] Finished at: 2020-12-09T09:28:35-08:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3542,
        "title": {
            "body": "Backported MANAGER_TABLET_GROUP_WATCHER_INTERVAL property",
            "bodyHTML": "Backported MANAGER_TABLET_GROUP_WATCHER_INTERVAL property"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5f7qxk",
                "body": "How does a user know what a \"correct\" or \"better\" value would be over the default for tuning?  Is there a log statement (or a metric) that reports how long the the triggered action takes to run?\r\n\r\nIf the processing time is longer than what the user selects for the wait time - could it lead to an ever growing backlog of tasks - or could it lead to resource starvation because it never gets to pause and just runs continuously?",
                "bodyText": "How does a user know what a \"correct\" or \"better\" value would be over the default for tuning?  Is there a log statement (or a metric) that reports how long the the triggered action takes to run?\nIf the processing time is longer than what the user selects for the wait time - could it lead to an ever growing backlog of tasks - or could it lead to resource starvation because it never gets to pause and just runs continuously?",
                "createdAt": "2023-06-27T13:10:33Z",
                "author": "EdColeman"
            },
            {
                "id": "IC_kwDOACaFSM5f8tUE",
                "body": "> Is there a log statement (or a metric) that reports how long the the triggered action takes to run?\r\n\r\nA [message](https://github.com/apache/accumulo/blob/2.1/server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java#L349) is printed to the log that it's waiting for some amount of time. This property just changes the the amount of wait time before the next check starts. A user could determine the time delta between these log statements to determine how long one iteration of the loop takes.\r\n\r\n> If the processing time is longer than what the user selects for the wait time - could it lead to an ever growing backlog of tasks\r\n\r\nYes, but that could happen right now too.\r\n",
                "bodyText": "Is there a log statement (or a metric) that reports how long the the triggered action takes to run?\n\nA message is printed to the log that it's waiting for some amount of time. This property just changes the the amount of wait time before the next check starts. A user could determine the time delta between these log statements to determine how long one iteration of the loop takes.\n\nIf the processing time is longer than what the user selects for the wait time - could it lead to an ever growing backlog of tasks\n\nYes, but that could happen right now too.",
                "createdAt": "2023-06-27T15:27:26Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 19,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4vWm9l",
                "comments": [
                    {
                        "bodyText": "This should pass a LongSupplier to compute the value dynamically from the current value of the configurable interval time.",
                        "body": "This should pass a LongSupplier to compute the value dynamically from the current value of the configurable interval time.",
                        "startLine": null,
                        "line": 1104,
                        "originalLine": 1110,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I'm not sure that makes sense here. This is done during Manager startup before clients can connect to it. The RecoveryManager is created and the value of timeToCacheRecoveryWalExistence is used in the RecoveryManager constructor to set the expiration time on the Caffeine CacheBuilder. This is only called once, not in a loop, and I don't think the Caffeine cache can be updated after construction.",
                        "body": "I'm not sure that makes sense here. This is done during Manager startup before clients can connect to it. The RecoveryManager is created and the value of `timeToCacheRecoveryWalExistence` is used in the RecoveryManager constructor to set the expiration time on the Caffeine CacheBuilder. This is only called once, not in a loop, and I don't think the Caffeine cache can be updated after construction.",
                        "startLine": null,
                        "line": 1104,
                        "originalLine": 1110,
                        "originalStartLine": null
                    }
                ],
                "line": 1104,
                "startLine": 1104,
                "originalLine": 1110,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/Manager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4vWn3G",
                "comments": [
                    {
                        "bodyText": "Computing it once at the time of the Manager startup makes this a fixed property, only changeable at restarts. You can do that, of course, but should add it to the Property.fixedProperties. However, a better idea is to have the field be a LongSupplier, and compute it from the config dynamically. You can use Guava's Suppliers.memoize to create the supplier. You can configure the memoizing supplier to cache the value for a certain amount of time, if you don't want it to do the lookup from the config too frequently.",
                        "body": "Computing it once at the time of the Manager startup makes this a fixed property, only changeable at restarts. You can do that, of course, but should add it to the `Property.fixedProperties`. However, a better idea is to have the field be a LongSupplier, and compute it from the config dynamically. You can use Guava's `Suppliers.memoize` to create the supplier. You can configure the memoizing supplier to cache the value for a certain amount of time, if you don't want it to do the lookup from the config too frequently.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 452,
                        "originalStartLine": 451
                    },
                    {
                        "bodyText": "I think I can do this without the supplier. TabletGroupWatcher calls manager.getWaitTImeBetweenScans(). That method can just get the current value of the property from the configuration and return it.",
                        "body": "I think I can do this without the supplier. TabletGroupWatcher calls `manager.getWaitTImeBetweenScans()`. That method can just get the current value of the property from the configuration and return it.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 452,
                        "originalStartLine": 451
                    },
                    {
                        "bodyText": "baea8d7 provides the TabletGroupWatcher with the current value of the property.",
                        "body": "baea8d7 provides the TabletGroupWatcher with the current value of the property.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 452,
                        "originalStartLine": 451
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 452,
                "originalStartLine": 451,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/Manager.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4vWofo",
                "comments": [
                    {
                        "bodyText": "Using the Supplier idea I suggested, the value can be obtained once at the top of this loop, and reused for the rest of the loop iteration, using a final local variable, so it doesn't change in the middle of the iteration.",
                        "body": "Using the Supplier idea I suggested, the value can be obtained once at the top of this loop, and reused for the rest of the loop iteration, using a final local variable, so it doesn't change in the middle of the iteration.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 200,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "baea8d7 provides the TabletGroupWatcher with the current value of the property.",
                        "body": "baea8d7 provides the TabletGroupWatcher with the current value of the property.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 200,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 200,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4vaE_p",
                "comments": [
                    {
                        "bodyText": "I'm not sure etc. is doing much to help the reader understand the category of things this affects. The migrations is only one example. If there were a second example in the list, then etc. could make sense, because one might be able to infer a category of tasks from two examples. If there's no second example to add to the list, you could just phrase it as \"states to determine outstanding tasks, such as migrations.\"\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  \"Time to wait between scanning tablet states to determine migrations, etc.\", \"2.1.2\"),\n          \n          \n            \n                  \"Time to wait between scanning tablet states to identify outstanding tasks to perform, such as migrations.\", \"2.1.2\"),",
                        "body": "I'm not sure `etc.` is doing much to help the reader understand the category of things this affects. The migrations is only one example. If there were a second example in the list, then `etc.` could make sense, because one might be able to infer a category of tasks from two examples. If there's no second example to add to the list, you could just phrase it as \"states to determine outstanding tasks, such as migrations.\"\r\n\r\n```suggestion\r\n      \"Time to wait between scanning tablet states to identify outstanding tasks to perform, such as migrations.\", \"2.1.2\"),\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 316,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Updated property description in ff6923e",
                        "body": "Updated property description in ff6923e",
                        "startLine": null,
                        "line": null,
                        "originalLine": 316,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 316,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4vaFYY",
                "comments": [
                    {
                        "bodyText": "I still think you need to use a local variable in here, so the log message isn't logging a different value than what's actually being used, which makes debugging a pain.\nAnd, this, as well as the occurrence above are still in the same while (manager.stillManager()) loop. It would be weird if the value changed from one operation to another in that same loop. They should share the same local value.",
                        "body": "I still think you need to use a local variable in here, so the log message isn't logging a different value than what's actually being used, which makes debugging a pain.\r\n\r\nAnd, this, as well as the occurrence above are still in the same `while (manager.stillManager())` loop. It would be weird if the value changed from one operation to another in that same loop. They should share the same local value.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 351,
                        "originalStartLine": 348
                    },
                    {
                        "bodyText": "Created a local variable at the top of the loop so that the value for the property is the same for the entire iteration, in ff6923e",
                        "body": "Created a local variable at the top of the loop so that the value for the property is the same for the entire iteration, in ff6923e",
                        "startLine": null,
                        "line": null,
                        "originalLine": 351,
                        "originalStartLine": 348
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 351,
                "originalStartLine": 348,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/TabletGroupWatcher.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4vaHdK",
                "comments": [
                    {
                        "bodyText": "The getWaitTimeBetweenScans() method returns the current value, but this.timeToCacheRecoveryWalExistence is still based on, and fixed to, the initial value. It doesn't seem like a good idea to have a property be runtime-mutable, but also be the basis for a runtime-immutable characteristic, at the same time. Should these be separate properties, one that is a fixedProperty and one that is mutable at runtime?",
                        "body": "The `getWaitTimeBetweenScans()` method returns the current value, but `this.timeToCacheRecoveryWalExistence` is still based on, and fixed to, the initial value. It doesn't seem like a good idea to have a property be runtime-mutable, but also be the basis for a runtime-immutable characteristic, at the same time. Should these be separate properties, one that is a fixedProperty and one that is mutable at runtime?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 456,
                        "originalStartLine": 450
                    },
                    {
                        "bodyText": "Created a separate property in ff6923e",
                        "body": "Created a separate property in ff6923e",
                        "startLine": null,
                        "line": null,
                        "originalLine": 456,
                        "originalStartLine": 450
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 456,
                "originalStartLine": 450,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/Manager.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4vdufy",
                "comments": [
                    {
                        "bodyText": "Since this is now only used once, and the implementation is trivial, this should now be inline'd, rather than add a new API method to Manager.",
                        "body": "Since this is now only used once, and the implementation is trivial, this should now be inline'd, rather than add a new API method to Manager.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 455,
                        "originalStartLine": 452
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 455,
                "originalStartLine": 452,
                "subjectType": "LINE",
                "path": "server/manager/src/main/java/org/apache/accumulo/manager/Manager.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4vdu5-",
                "comments": [
                    {
                        "bodyText": "This should be grouped adjacent to the other manager.recovery.* property.",
                        "body": "This should be grouped adjacent to the other `manager.recovery.*` property.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 320,
                        "originalStartLine": 318
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 320,
                "originalStartLine": 318,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "dlmarion",
            "EdColeman",
            "ctubbsii"
        ],
        "tdv": -5.0,
        "description": {
            "bodyText": "TabletGroupWatcher prior to this change was hardcoded to wait for 60s between loops looking for tablets that needed some type of maintenance. This property allows the user to configure that potentially making the Manager more responsive to tablets being unassigned or unbalanced.\nFixes #3541"
        }
    },
    {
        "repo": "zookeeper",
        "pr_number": 2001,
        "title": {
            "body": "ZOOKEEPER-4697: Add Builder to construct ZooKeeper and ZooKeeperAdmin",
            "bodyHTML": "ZOOKEEPER-4697: Add Builder to construct ZooKeeper and ZooKeeperAdmin"
        },
        "comments": [
            {
                "id": "IC_kwDOAAJ0585dky0H",
                "body": "@eolivelli @jowiho Can you please take a look at this ? I think it supersedes [ZOOKEEPER-4656][](#1947) though I did not realize this in creating [ZOOKEEPER-4697][].\r\n\r\n[ZOOKEEPER-4656]: https://issues.apache.org/jira/browse/ZOOKEEPER-4656\r\n[ZOOKEEPER-4697]: https://issues.apache.org/jira/browse/ZOOKEEPER-4697 ",
                "bodyText": "@eolivelli @jowiho Can you please take a look at this ? I think it supersedes ZOOKEEPER-4656(#1947) though I did not realize this in creating ZOOKEEPER-4697.",
                "createdAt": "2023-05-31T10:26:18Z",
                "author": "kezhuw"
            },
            {
                "id": "IC_kwDOAAJ0585dk3M7",
                "body": "I like this proposal. Will check it in this week.",
                "bodyText": "I like this proposal. Will check it in this week.",
                "createdAt": "2023-05-31T10:38:52Z",
                "author": "tisonkun"
            },
            {
                "id": "IC_kwDOAAJ0585dla_G",
                "body": "@kezhuw, I agree that your solution supersedes [ZOOKEEPER-4656](https://issues.apache.org/jira/browse/ZOOKEEPER-4656)(#1947). I never got round to writing a builder for ZookeeperAdmin, mainly because the complexity of testing it. So I'm happy to see that you did just that. Thanks!\r\n\r\nI've closed my PR (#1947) in favor of this PR.\r\n\r\n",
                "bodyText": "@kezhuw, I agree that your solution supersedes ZOOKEEPER-4656(#1947). I never got round to writing a builder for ZookeeperAdmin, mainly because the complexity of testing it. So I'm happy to see that you did just that. Thanks!\nI've closed my PR (#1947) in favor of this PR.",
                "createdAt": "2023-05-31T12:08:08Z",
                "author": "jowiho"
            },
            {
                "id": "IC_kwDOAAJ0585erE4W",
                "body": "cc @eolivelli may you give another look on this PR?",
                "bodyText": "cc @eolivelli may you give another look on this PR?",
                "createdAt": "2023-06-13T01:07:20Z",
                "author": "tisonkun"
            },
            {
                "id": "IC_kwDOAAJ0585jbzvc",
                "body": "@tisonkun @eolivelli Shall we merge this ?",
                "bodyText": "@tisonkun @eolivelli Shall we merge this ?",
                "createdAt": "2023-08-07T16:38:54Z",
                "author": "kezhuw"
            }
        ],
        "total_comments_count": 13,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAJ0584uH4xt",
                "comments": [
                    {
                        "bodyText": "NULL_DEREFERENCE:  object returned by getServerAddresses(connectStringParser) could be null and is dereferenced by call to StaticHostProvider(...) at line 1091.\n\n‚ÑπÔ∏è Expand to see all @sonatype-lift commands\nYou can reply with the following commands. For example, reply with @sonatype-lift ignoreall to leave out all findings.\n\n\n\nCommand\nUsage\n\n\n\n\n@sonatype-lift ignore\nLeave out the above finding from this PR\n\n\n@sonatype-lift ignoreall\nLeave out all the existing findings from this PR\n\n\n@sonatype-lift exclude <file|issue|path|tool>\nExclude specified file|issue|path|tool from Lift findings by updating your config.toml file\n\n\n\nNote: When talking to LiftBot, you need to refresh the page to see its response.\nClick here to add LiftBot to another repo.",
                        "body": "<picture><img alt=\"15% of developers fix this issue\" src=\"https://lift.sonatype.com/api/commentimage/fixrate/15/display.svg\"></picture>\n\n<b>*NULL_DEREFERENCE:</b>*  object returned by `getServerAddresses(connectStringParser)` could be null and is dereferenced by call to `StaticHostProvider(...)` at line 1091.\n\n---\n\n<details><summary>‚ÑπÔ∏è Expand to see all <b>@sonatype-lift</b> commands</summary>\n\nYou can reply with the following commands. For example, reply with ***@sonatype-lift ignoreall*** to leave out all findings.\n| **Command** | **Usage** |\n| ------------- | ------------- |\n| `@sonatype-lift ignore` | Leave out the above finding from this PR |\n| `@sonatype-lift ignoreall` | Leave out all the existing findings from this PR |\n| `@sonatype-lift exclude <file\\|issue\\|path\\|tool>` | Exclude specified `file\\|issue\\|path\\|tool` from Lift findings by updating your config.toml file |\n\n**Note:** When talking to LiftBot, you need to **refresh** the page to see its response.\n<sub>[Click here](https://github.com/apps/sonatype-lift/installations/new) to add LiftBot to another repo.</sub></details>\n\n",
                        "startLine": null,
                        "line": 1092,
                        "originalLine": 1091,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is false negative. ConnectStringParser.serverAddresses is never null so does connectStringParser.getServerAddresses().\n@sonatype-lift ignore",
                        "body": "This is false negative. `ConnectStringParser.serverAddresses` is never `null` so does `connectStringParser.getServerAddresses()`.\r\n\r\n@sonatype-lift ignore",
                        "startLine": null,
                        "line": 1092,
                        "originalLine": 1091,
                        "originalStartLine": null
                    }
                ],
                "line": 1092,
                "startLine": 1092,
                "originalLine": 1091,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAJ0584uLvty",
                "comments": [
                    {
                        "bodyText": "Please don't go this way.\nThis is totally out of our control.\nIf developers know the class they can instantiate it explicitly.\nIt it fine to add a  buildZooKeeperAdmin() method",
                        "body": "Please don't go this way.\r\n\r\nThis is totally out of our control.\r\nIf developers know the class they can instantiate it explicitly.\r\n\r\nIt it fine to add a  buildZooKeeperAdmin() method ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 184,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I felt similar(multiple ways to construct). I think there are candidates for us to go:\n\nOnly build and buildAdmin for ZooKeeper and ZooKeeperAdmin. For other derivations, they should resort to ZooKeeperBuilder.toOptions and CustomZooKeeper(ZooKeeperOptions) for full options customization.\nRestrict ZooKeeperBuilder.toOptions to some level of private, so CustomZooKeeper(ZooKeeperOptions) is a simple hook for ZooKeeperBuilder. This way clients are encouraged(or forced) to use ZooKeeperBuilder::build(Class<T> class) to construct CustomZooKeeper.\nCombine above two and support only ZooKeeper and ZooKeeperAdmin. No third party derivations are supported or encouraged.\n\nMaybe we can go 3 and unleash restriction in future if requested ? Currently, all other derivations are test purpose.\nFor \"some level of private\", I means @InterfaceAudience.Private or moving to package where ZooKeeper resides in.",
                        "body": "I felt similar(multiple ways to construct). I think there are candidates for us to go:\r\n\r\n1. Only `build` and `buildAdmin` for `ZooKeeper` and `ZooKeeperAdmin`. For other derivations, they should resort to `ZooKeeperBuilder.toOptions` and `CustomZooKeeper(ZooKeeperOptions)` for full options customization.\r\n2. Restrict `ZooKeeperBuilder.toOptions` to some level of private, so `CustomZooKeeper(ZooKeeperOptions)` is a simple hook for `ZooKeeperBuilder`. This way clients are encouraged(or forced) to use `ZooKeeperBuilder::build(Class<T> class)` to construct `CustomZooKeeper`.\r\n3. Combine above two and support only `ZooKeeper` and `ZooKeeperAdmin`. No third party derivations are supported or encouraged.\r\n\r\nMaybe we can go 3 and unleash restriction in future if requested ? Currently, all other derivations are test purpose.\r\n\r\nFor \"some level of private\", I means `@InterfaceAudience.Private` or moving to package where `ZooKeeper` resides in.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 184,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I have added a follow up commit to build only ZooKeeper and ZooKeeperAdmin(e.g. candidate 3 from above).\nI limited ZooKeeper(ZooKeeperOptions options), ZooKeeperAdmin(ZooKeeperOptions options) and ZooKeeperOptions to private using InterfaceAudience.Private now. ZooKeeperAdmin resides in different package than ZooKeeper, so I have resorted to InterfaceAudience.Private somewhere.",
                        "body": "I have added a follow up commit to build only `ZooKeeper` and `ZooKeeperAdmin`(e.g. candidate 3 from above).\r\n\r\nI limited `ZooKeeper(ZooKeeperOptions options)`, `ZooKeeperAdmin(ZooKeeperOptions options)` and `ZooKeeperOptions` to private using `InterfaceAudience.Private` now. `ZooKeeperAdmin` resides in different package than `ZooKeeper`, so I have resorted to `InterfaceAudience.Private` somewhere.\r\n",
                        "startLine": null,
                        "line": null,
                        "originalLine": 184,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "No third party derivations are supported or encouraged\n\nAnyone inherits ZooKeeper should be fine to build their own constructing method. And yes, we don't encourage that. If it's a common use case, it can go to upstream; if it's not, the upstream can be refactored to accept combination over inheritance. ZooKeeper is one of the key abstractions we deliver to users.",
                        "body": "> No third party derivations are supported or encouraged\r\n\r\nAnyone inherits `ZooKeeper` should be fine to build their own constructing method. And yes, we don't encourage that. If it's a common use case, it can go to upstream; if it's not, the upstream can be refactored to accept combination over inheritance. `ZooKeeper` is one of the key abstractions we deliver to users.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 184,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 184,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperBuilder.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kezhuw",
            "tisonkun",
            "jowiho",
            "eolivelli"
        ],
        "tdv": 63.0,
        "description": {
            "bodyText": "Currently, there are 10 constructor variants for ZooKeeper and 4 for ZooKeeperAdmin. It is enough for us to resort to a builder.\nThe build method throws IOException to make it a drop-in replacement of existing constructors of ZooKeeper.\nThis pr also unify body of ZooKeeper constructor to one. Previously, there are diverged to two. One has sessionId and sessionPasswd, and another doesn't have. This pr uses sessionId == 0 to differentiate the two as it is used in server side to differentiate session create and reconnect."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 1441,
        "title": {
            "body": "Improve Upgrader9to10 code",
            "bodyHTML": "Improve Upgrader9to10 code"
        },
        "comments": [],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjE1NDk1OTI4OnYy",
                "comments": [
                    {
                        "bodyText": "Could check that the key sets are disjoint using Collections.disjoint().",
                        "body": "Could check that the key sets are disjoint using `Collections.disjoint()`.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 160,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Will do. That's definitely better.",
                        "body": "Will do. That's definitely better.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 160,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 160,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/upgrade/GCUpgrade9to10TestIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjE1NDk2Mjg1OnYy",
                "comments": [
                    {
                        "bodyText": "Will this be checked in the later check that the maps are equal?",
                        "body": "Will this be checked in the later check that the maps are equal?",
                        "startLine": null,
                        "line": 167,
                        "originalLine": 174,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes, but... if there's an error, I'd rather see it fail here, where I don't have to view and determine the difference between two maps, each of size 100,000. The later check for the entire map equality is more of an extra sanity check on the whole list.",
                        "body": "Yes, but... if there's an error, I'd rather see it fail here, where I don't have to view and determine the difference between two maps, each of size 100,000. The later check for the entire map equality is more of an extra sanity check on the whole list.",
                        "startLine": null,
                        "line": 167,
                        "originalLine": 174,
                        "originalStartLine": null
                    }
                ],
                "line": 167,
                "startLine": 167,
                "originalLine": 174,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/upgrade/GCUpgrade9to10TestIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjE1NDk2NTAxOnYy",
                "comments": [
                    {
                        "bodyText": "Could make this field public.",
                        "body": "Could make this field public.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 128,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes. I'm not sure why I didn't. Maybe just trying to limit what was exposed. I can make that change.",
                        "body": "Yes. I'm not sure why I didn't. Maybe just trying to limit what was exposed. I can make that change.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 128,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 128,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/upgrade/GCUpgrade9to10TestIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjE1NTA2MzI4OnYy",
                "comments": [
                    {
                        "bodyText": "If the disjoint check is done maybe this line could be dispensed with.",
                        "body": "If the disjoint check is done maybe this line could be dispensed with.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 155,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Done.",
                        "body": "Done.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 155,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 155,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/upgrade/GCUpgrade9to10TestIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "ctubbsii",
            "keith-turner"
        ],
        "tdv": -75.0,
        "description": {
            "bodyText": "This changes the batching strategy for the Upgrader9to10 class.\nThe previous strategy was to fill a data structure until JVM memory was\nsufficiently used up (50% of heap size), then process the upgrade for\nthose entries, and repeat until no more entries are left to upgrade.\nThis new strategy batches candidates for upgrade in batches of size 4\nmillion characters (approx. 8MB batches), regardless of memory.\nThis stabilizes the testing, as it is much simpler to reproduce and test\nfixed-size batches, than it is to manipulate the JVM heap size during\ntesting. As a result, many improvements to the GCUpgrade9to10TestIT were\nmade here. This also fixes that IT, which began failing with the use of\nthe G1GC instead of CMS (#1427), because G1GC didn't work well with a\nmaster configured with a 16MB JVM heap and crashed frequently OOMEs."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2969,
        "title": {
            "body": "Add missing chopped column to Ample",
            "bodyHTML": "Add missing chopped column to Ample"
        },
        "comments": [],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4lbnhN",
                "comments": [
                    {
                        "bodyText": "Could do this if don't want to add a method to get chopped.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                      te.chopped = true;",
                        "body": "Could do this if don't want to add a method to get chopped.\r\n\r\n```suggestion\r\n```",
                        "startLine": null,
                        "line": 411,
                        "originalLine": 405,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I don't follow your suggestion. It looks like you are just deleting the line?",
                        "body": "I don't follow your suggestion. It looks like you are just deleting the line?",
                        "startLine": null,
                        "line": 411,
                        "originalLine": 405,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I am guessing you are saying to have a getter and setter, so we can check the fetched list.",
                        "body": "I am guessing you are saying to have a getter and setter, so we can check the fetched list.",
                        "startLine": null,
                        "line": 411,
                        "originalLine": 405,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I Was just thinking that just doing nothing when seeing chopped would be ok if the getter is not added now.  Nothing would be calling the getter.",
                        "body": "I Was just thinking that just doing nothing when seeing chopped would be ok if the getter is not added now.  Nothing would be calling the getter.",
                        "startLine": null,
                        "line": 411,
                        "originalLine": 405,
                        "originalStartLine": null
                    }
                ],
                "line": 411,
                "startLine": 411,
                "originalLine": 405,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4lbn8I",
                "comments": [
                    {
                        "bodyText": "Would be better to make this private and have a method to access it, or could not have it at all.  The reason a method would be good is that ensureFetched() could be called in  the method to make sure it was actually retrieved.  All other fields do this.  It avoids bugs where someone did not fetch a field from the metadata table but they try to use it.  Like if someone read this chopped field but never fetched it, then it would always be false.",
                        "body": "Would be better to make this private and have a method to access it, or could not have it at all.  The reason a method would be good is that `ensureFetched()` could be called in  the method to make sure it was actually retrieved.  All other fields do this.  It avoids bugs where someone did not fetch a field from the metadata table but they try to use it.  Like if someone read this chopped field but never fetched it, then it would always be false.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 110,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Added a getter and call to ensureChecked in c2e5554",
                        "body": "Added a getter and call to ensureChecked in [c2e5554](https://github.com/apache/accumulo/pull/2969/commits/c2e555499e06daa220dd5982a6a021f599dbdfe8)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 110,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 110,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "dlmarion",
            "keith-turner"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Fixes #2961"
        }
    },
    {
        "repo": "helix",
        "pr_number": 2505,
        "title": {
            "body": "Replace deprecated verifier with new set of Verifiers",
            "bodyHTML": "Replace deprecated verifier with new set of Verifiers"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5dPv6O",
                "body": "Thanks @qqu0127 and @parakhnr for review. This change has been approved by @parakhnr and @qqu0127. Ready to be merged.\r\nCommit message: Replace the deprecated verifier with new set of verifiers.",
                "bodyText": "Thanks @qqu0127 and @parakhnr for review. This change has been approved by @parakhnr and @qqu0127. Ready to be merged.\nCommit message: Replace the deprecated verifier with new set of verifiers.",
                "createdAt": "2023-05-26T13:37:28Z",
                "author": "desaikomal"
            }
        ],
        "total_comments_count": 8,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4t6et8",
                "comments": [
                    {
                        "bodyText": "I know this change is just for refactoring but if you want can we use TestHelper.verify() instead of using Thread.sleep().",
                        "body": "I know this change is just for refactoring but if you want can we use `TestHelper.verify()` instead of using `Thread.sleep()`.",
                        "startLine": null,
                        "line": 84,
                        "originalLine": 85,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "since I got +1, i will do it. Typically, i try to do specific change rather than mix 2/3 things in one. cognitive load increases.",
                        "body": "since I got +1, i will do it. Typically, i try to do specific change rather than mix 2/3 things in one. cognitive load increases.",
                        "startLine": null,
                        "line": 84,
                        "originalLine": 85,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@parakhnr - can you please review one more time?",
                        "body": "@parakhnr - can you please review one more time?",
                        "startLine": null,
                        "line": 84,
                        "originalLine": 85,
                        "originalStartLine": null
                    }
                ],
                "line": 84,
                "startLine": 84,
                "originalLine": 85,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/manager/TestDistributedControllerManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAPIHxc4t9YeZ",
                "comments": [
                    {
                        "bodyText": "Actually 100, won't help much, the verify method does the following:\n\nRecord startTime = currentTime\nInvoke verifier.verifyByZkCallback()\n2.1 Wait for max 30 seconds(default timeout) for the state to be verified\nIf currentTime - startTime > 100 repeat 1.\n\nSo I think we need to have time out > (30 seconds + some buffer) if we want the verification to be retried. If we don't want the verification to be retried(which is the current implementation), then we need to use verifier.verifyByZkCallback(30seconds default timeout + 100 milliseconds) instead of verifier.verifyByZkCallback().\nApologies for the previous comment as I didn't read through the TestHelper.verify method code.",
                        "body": "Actually 100, won't help much, the verify method does the following:\r\n1. Record startTime = currentTime\r\n2. Invoke verifier.verifyByZkCallback()\r\n    2.1 Wait for max 30 seconds(default timeout) for the state to be verified\r\n3.  If currentTime - startTime > 100 repeat 1.\r\n\r\nSo I think we need to have time out > (30 seconds + some buffer) if we want the verification to be retried. If we don't want the verification to be retried(which is the current implementation), then we need to use `verifier.verifyByZkCallback(30seconds default timeout + 100 milliseconds)` instead of `verifier.verifyByZkCallback()`. \r\n\r\nApologies for the previous comment as I didn't read through the `TestHelper.verify` method code.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 87,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think, i don't need it re=tried as earlier code just did sleep and moved on.\nThis is also the reason, I like to stick to the scope of the change to be what I set out with.",
                        "body": "I think, i don't need it re=tried as earlier code just did sleep and moved on. \r\nThis is also the reason, I like to stick to the scope of the change to be what I set out with.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 87,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Still re-try is not required, can you please review it one final time.",
                        "body": "Still re-try is not required, can you please review it one final time.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 87,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Ok. Lets stick to original one or use callback with timeout that has 30 seconds + 100 milliseconds set.",
                        "body": "Ok. Lets stick to original one or use callback with timeout that has 30 seconds + 100 milliseconds set. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 87,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 87,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/manager/TestDistributedControllerManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "desaikomal",
            "parakhnr",
            "qqu0127",
            "xyuanlu"
        ],
        "tdv": -135.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #2485\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nWhile debugging the failure for the test case in DistributedController test case, realized we are using deprecated verifier. So let us first use the right verifier and see if it helps with resolving the temporary failures. These are all integration tests which depends on ZK timing and so not sure if just replacing correct verifier will help. But first order problem is to use right code.\n\nTests\n\n[] The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\nI created a branch and ran the test 4 times to make sure that there is no regression with using different verifier.\nHere is the link to the branch with testing:\ndesaikomal#2\nfailure were in different test cases.\n\nChanges that Break Backward Compatibility (Optional)\n\nMy PR contains changes that break backward compatibility or previous assumptions for certain methods or API. They include:\n\n(Consider including all behavior changes for public methods or API. Also include these changes in merge description so that other developers are aware of these changes. This allows them to make relevant code changes in feature branches accounting for the new method/API behavior.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2756,
        "title": {
            "body": "Add Verify calls to NamespaceConfigurationTest",
            "bodyHTML": "Add Verify calls to NamespaceConfigurationTest"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5EdNU9",
                "body": "Thanks @ctubbsii !",
                "bodyText": "Thanks @ctubbsii !",
                "createdAt": "2022-06-07T10:52:13Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4h87mV",
                "comments": [
                    {
                        "bodyText": "@EdColeman This is failing but I wasn't sure what you meant by the TODO. Suggestions?",
                        "body": "@EdColeman This is failing but I wasn't sure what you meant by the TODO. Suggestions?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 118,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 118,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/base/src/test/java/org/apache/accumulo/server/conf/NamespaceConfigurationTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "milleruntime",
            "ctubbsii"
        ],
        "tdv": 5.0,
        "description": {
            "bodyText": ""
        }
    },
    {
        "repo": "commons-lang",
        "pr_number": 933,
        "title": {
            "body": "[LANG-1689] Simple Optional in ObjectUtils#isEmpty()",
            "bodyHTML": "[LANG-1689] Simple Optional in ObjectUtils#isEmpty()"
        },
        "comments": [
            {
                "id": "IC_kwDOAAMmKs5IMl6G",
                "body": "# [Codecov](https://codecov.io/gh/apache/commons-lang/pull/933?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) Report\n> Merging [#933](https://codecov.io/gh/apache/commons-lang/pull/933?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (6923fb7) into [master](https://codecov.io/gh/apache/commons-lang/commit/9f71c33b000083dab7bb746a2fca193a78a51f13?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) (9f71c33) will **increase** coverage by `0.01%`.\n> The diff coverage is `50.00%`.\n\n```diff\n@@             Coverage Diff              @@\n##             master     #933      +/-   ##\n============================================\n+ Coverage     91.65%   91.66%   +0.01%     \n- Complexity     7397     7400       +3     \n============================================\n  Files           188      188              \n  Lines         15772    15774       +2     \n  Branches       2972     2974       +2     \n============================================\n+ Hits          14456    14460       +4     \n+ Misses          725      724       -1     \n+ Partials        591      590       -1     \n```\n\n\n| [Impacted Files](https://codecov.io/gh/apache/commons-lang/pull/933?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation) | Coverage Œî | |\n|---|---|---|\n| [...ain/java/org/apache/commons/lang3/ObjectUtils.java](https://codecov.io/gh/apache/commons-lang/pull/933/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbGFuZzMvT2JqZWN0VXRpbHMuamF2YQ==) | `94.47% <50.00%> (+0.05%)` | :arrow_up: |\n| [...he/commons/lang3/concurrent/AtomicInitializer.java](https://codecov.io/gh/apache/commons-lang/pull/933/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation#diff-c3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbGFuZzMvY29uY3VycmVudC9BdG9taWNJbml0aWFsaXplci5qYXZh) | `100.00% <0.00%> (+25.00%)` | :arrow_up: |\n\n:mega: We‚Äôre building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=The+Apache+Software+Foundation)\n",
                "bodyText": "Codecov Report\n\nMerging #933 (6923fb7) into master (9f71c33) will increase coverage by 0.01%.\nThe diff coverage is 50.00%.\n\n@@             Coverage Diff              @@\n##             master     #933      +/-   ##\n============================================\n+ Coverage     91.65%   91.66%   +0.01%     \n- Complexity     7397     7400       +3     \n============================================\n  Files           188      188              \n  Lines         15772    15774       +2     \n  Branches       2972     2974       +2     \n============================================\n+ Hits          14456    14460       +4     \n+ Misses          725      724       -1     \n+ Partials        591      590       -1     \n\n\n\nImpacted Files\nCoverage Œî\n\n\n\n\n\n...ain/java/org/apache/commons/lang3/ObjectUtils.java\n94.47% <50.00%> (+0.05%)\n‚¨ÜÔ∏è\n\n\n...he/commons/lang3/concurrent/AtomicInitializer.java\n100.00% <0.00%> (+25.00%)\n‚¨ÜÔ∏è\n\n\n\nüì£ We‚Äôre building smart automated test selection to slash your CI/CD build times. Learn more",
                "createdAt": "2022-08-10T20:54:34Z",
                "author": "codecov-commenter"
            },
            {
                "id": "IC_kwDOAAMmKs5IVSPE",
                "body": "Hm, at first I thought this would be OK but now I'm not sure and would like community feedback:\r\n- There are APIs in the JRE called `isEmpty()` on various classes that usually return true when `size() == 0`; for example `Collection`, `String`, and `Map`.\r\n- There _isn't_ an `Optional` API called `isEmpty`, instead, there is a different concept represented by `isPresent()`; which returns true when the wrapped value is non-null.\r\n\r\nSo it feels like this PR conflates the two concepts.\r\n",
                "bodyText": "Hm, at first I thought this would be OK but now I'm not sure and would like community feedback:\n\nThere are APIs in the JRE called isEmpty() on various classes that usually return true when size() == 0; for example Collection, String, and Map.\nThere isn't an Optional API called isEmpty, instead, there is a different concept represented by isPresent(); which returns true when the wrapped value is non-null.\n\nSo it feels like this PR conflates the two concepts.",
                "createdAt": "2022-08-12T21:39:23Z",
                "author": "garydgregory"
            },
            {
                "id": "IC_kwDOAAMmKs5IdOTN",
                "body": "I was thinking about this, and if we wanted to look at the contents of the Optional rather than the optional itself, there are three ways I've though of doing it - two recursive and two non-recursive:\r\n\r\n## Recursive with Functional Methods:\r\n\r\n```java\r\nif (object instanceof Optional<?>) {\r\n    return ((Optional<?>) object).map(ObjectUtils::isEmpty).orElse(false);\r\n}\r\n```\r\n\r\n## Recursive with Non-Functional Methods:\r\n\r\n```java\r\nif (object instanceof Optional<?>) {\r\n    return ((Optional<?>) object).isPresent() && isEmpty(((Optional<?>) object).get());\r\n}\r\n```\r\n\r\n## Non-recursive\r\n\r\n```java\r\npublic static boolean isEmpty(Object object) {\r\n    if (object instanceof Optional<?>) {\r\n        object = ((Optional<?>) object).orElse(null);\r\n    }\r\n    if (object == null) {\r\n        return true;\r\n    }\r\n    if (object instanceof CharSequence) {\r\n        return ((CharSequence) object).length() == 0;\r\n    }\r\n    if (isArray(object)) {\r\n        return Array.getLength(object) == 0;\r\n    }\r\n    if (object instanceof Collection<?>) {\r\n        return ((Collection<?>) object).isEmpty();\r\n    }\r\n    if (object instanceof Map<?, ?>) {\r\n        return ((Map<?, ?>) object).isEmpty();\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\nI like the non-recursive method best, however, it does change the `Object object` parameter from final to non-final.\r\n\r\n---\r\n\r\nAlso, there is an isEmpty() method on optionals that was added in Java 11: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Optional.html#isEmpty()",
                "bodyText": "I was thinking about this, and if we wanted to look at the contents of the Optional rather than the optional itself, there are three ways I've though of doing it - two recursive and two non-recursive:\nRecursive with Functional Methods:\nif (object instanceof Optional<?>) {\n    return ((Optional<?>) object).map(ObjectUtils::isEmpty).orElse(false);\n}\nRecursive with Non-Functional Methods:\nif (object instanceof Optional<?>) {\n    return ((Optional<?>) object).isPresent() && isEmpty(((Optional<?>) object).get());\n}\nNon-recursive\npublic static boolean isEmpty(Object object) {\n    if (object instanceof Optional<?>) {\n        object = ((Optional<?>) object).orElse(null);\n    }\n    if (object == null) {\n        return true;\n    }\n    if (object instanceof CharSequence) {\n        return ((CharSequence) object).length() == 0;\n    }\n    if (isArray(object)) {\n        return Array.getLength(object) == 0;\n    }\n    if (object instanceof Collection<?>) {\n        return ((Collection<?>) object).isEmpty();\n    }\n    if (object instanceof Map<?, ?>) {\n        return ((Map<?, ?>) object).isEmpty();\n    }\n    return false;\n}\nI like the non-recursive method best, however, it does change the Object object parameter from final to non-final.\n\nAlso, there is an isEmpty() method on optionals that was added in Java 11: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Optional.html#isEmpty()",
                "createdAt": "2022-08-15T19:05:13Z",
                "author": "hendrixjoseph"
            },
            {
                "id": "IC_kwDOAAMmKs5Ie5w9",
                "body": "I create another PR (#934) that uses the approach mentioned in my previous comment (using the non-recursive way) instead of looking at the optional itself.\r\n\r\nI'm unsure which is the \"better\" or \"preferred\" way and I agree more community input is needed.",
                "bodyText": "I create another PR (#934) that uses the approach mentioned in my previous comment (using the non-recursive way) instead of looking at the optional itself.\nI'm unsure which is the \"better\" or \"preferred\" way and I agree more community input is needed.",
                "createdAt": "2022-08-16T02:05:27Z",
                "author": "hendrixjoseph"
            },
            {
                "id": "IC_kwDOAAMmKs5IgblO",
                "body": "Hi All:\r\n\r\nThe addition of Optional#isEmpty() in Java 11 seems to be an argument in favor of supporting Optional in our isEmpty() method, I think we need to consider if it makes sense, as opposed to just being doable. IOW, is a wrapper of a null value \"empty\"? Is a wrapper of an empty String empty? Is a wrapper of an empty Collection empty?\r\n\r\nUsing recursion seems to be a recipe for confusion: Why recurse into one kind of object and not another? IOW, why recuse into Optional and not into Collections and Maps?\r\n\r\nWhat do others think? \r\n\r\nI do not think we need to consider an implementation vs. another until we can give answers and provide a consistent picture.\r\n",
                "bodyText": "Hi All:\nThe addition of Optional#isEmpty() in Java 11 seems to be an argument in favor of supporting Optional in our isEmpty() method, I think we need to consider if it makes sense, as opposed to just being doable. IOW, is a wrapper of a null value \"empty\"? Is a wrapper of an empty String empty? Is a wrapper of an empty Collection empty?\nUsing recursion seems to be a recipe for confusion: Why recurse into one kind of object and not another? IOW, why recuse into Optional and not into Collections and Maps?\nWhat do others think?\nI do not think we need to consider an implementation vs. another until we can give answers and provide a consistent picture.",
                "createdAt": "2022-08-16T10:35:52Z",
                "author": "garydgregory"
            }
        ],
        "total_comments_count": 7,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmKs4j9aLS",
                "comments": [
                    {
                        "bodyText": "What if it's an Optional with an empty string in it?",
                        "body": "What if it's an Optional with an empty string in it?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1058,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The optional would be non-empty. Take the following code snippet:\nOptional<String> optional = Optional.of(\"\");\nboolean empty = ObjectUtils.isEmpty(optional);\n// empty is false\nIn the case of Optionals, we're concerned whether the optional is empty, not if the contents of the optional is empty.\nThis is similar to having an array or collection of length 1 that only contains an empty string. In that case, ObjectUtils.isEmpty would still return false.\nI can update the JavaDoc to make it more clear.\n(And unrelated to this conversation, I notices I accidently slipped a couple tabs instead of spaces in. I'll fix that shortly.)",
                        "body": "The optional would be non-empty. Take the following code snippet:\r\n```java\r\nOptional<String> optional = Optional.of(\"\");\r\nboolean empty = ObjectUtils.isEmpty(optional);\r\n// empty is false\r\n```\r\nIn the case of Optionals, we're concerned whether the optional is empty, not if the contents of the optional is empty.\r\n\r\nThis is similar to having an array or collection of length 1 that only contains an empty string. In that case, ObjectUtils.isEmpty would still return false.\r\n\r\nI can update the JavaDoc to make it more clear.\r\n\r\n(And unrelated to this conversation, I notices I accidently slipped a couple tabs instead of spaces in. I'll fix that shortly.)",
                        "startLine": null,
                        "line": null,
                        "originalLine": 1058,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 1058,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "src/main/java/org/apache/commons/lang3/ObjectUtils.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "hendrixjoseph",
            "codecov-commenter",
            "garydgregory"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Original JIRA ticket (not by me): https://issues.apache.org/jira/projects/LANG/issues/LANG-1689\nMethod isEmpty in ObjectUtils was modified to return the negation of Optional.isPresent (i.e. !optional.isPresent()) when the passed in object is an Optional.\nThe object contained within the Optional is not checked if it is also empty. This gives the caller the option to check if it's present (or not) on their own.\n\nFor instance, the caller might want to do something like the following:\nObjectUtils.isEmpty(optional) && ObjectUtils.isNotEmpty(optional.get())."
        }
    },
    {
        "repo": "zookeeper",
        "pr_number": 1799,
        "title": {
            "body": "ZOOKEEPER-4453: NettyServerCnxnFactory: allow to configure the early TLS connection drop feature",
            "bodyHTML": "ZOOKEEPER-4453: NettyServerCnxnFactory: allow to configure the early TLS connection drop feature"
        },
        "comments": [
            {
                "id": "IC_kwDOAAJ05848668Z",
                "body": "I saw a second zookeeper started in Kubernetes using this branch so the fix seems good.",
                "bodyText": "I saw a second zookeeper started in Kubernetes using this branch so the fix seems good.",
                "createdAt": "2022-01-26T10:45:04Z",
                "author": "andrekramer1"
            },
            {
                "id": "IC_kwDOAAJ058487AWZ",
                "body": "@andrekramer1  thank you for confirming.\r\nare you able to test TLS as well ?",
                "bodyText": "@andrekramer1  thank you for confirming.\nare you able to test TLS as well ?",
                "createdAt": "2022-01-26T11:14:26Z",
                "author": "eolivelli"
            },
            {
                "id": "IC_kwDOAAJ058487Cbn",
                "body": "@eolivelli not able to test SSL and it was a one node Kubernetes test. It is similar to what I had with the new config false.",
                "bodyText": "@eolivelli not able to test SSL and it was a one node Kubernetes test. It is similar to what I had with the new config false.",
                "createdAt": "2022-01-26T11:25:50Z",
                "author": "andrekramer1"
            },
            {
                "id": "IC_kwDOAAJ058487MoB",
                "body": "I pushed this patch by mistake to master branch.\r\nSorry",
                "bodyText": "I pushed this patch by mistake to master branch.\nSorry",
                "createdAt": "2022-01-26T12:24:54Z",
                "author": "eolivelli"
            },
            {
                "id": "IC_kwDOAAJ058487M22",
                "body": "I have push forced the master branch. Sorry",
                "bodyText": "I have push forced the master branch. Sorry",
                "createdAt": "2022-01-26T12:26:17Z",
                "author": "eolivelli"
            },
            {
                "id": "IC_kwDOAAJ058487NHK",
                "body": "@symat reopened as #1800",
                "bodyText": "@symat reopened as #1800",
                "createdAt": "2022-01-26T12:27:58Z",
                "author": "eolivelli"
            }
        ],
        "total_comments_count": 22,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAJ0584eNCHM",
                "comments": [
                    {
                        "bodyText": "nit: I know we were throwing IOException before which resulted in DisconnectReason.IO_EXCEPTION, but now that we do proper close here, we might use some better DisconnectReason. I see e.g. DisconnectReason.SERVER_SHUTDOWN. Although I'm not sure when this part is triggered... I guess this can be triggered either during initialization or shutdown. Maybe DisconnectReason.IO_EXCEPTION is good enough.\nAlso: before this change we did log the 'getRemoteSocketAddress()' in line 534, which might be handy to add to this warning above. (if someone is trying to figure out in the ZK log why a session terminated)",
                        "body": "nit: I know we were throwing IOException before which resulted in DisconnectReason.IO_EXCEPTION, but now that we do proper close here, we might use some better DisconnectReason. I see e.g. DisconnectReason.SERVER_SHUTDOWN. Although I'm not sure when this part is triggered... I guess this can be triggered either during initialization or shutdown. Maybe DisconnectReason.IO_EXCEPTION is good enough.\r\n\r\nAlso: before this change we did log the 'getRemoteSocketAddress()' in line 534, which might be handy to add to this warning above. (if someone is trying to figure out in the ZK log why a session terminated) ",
                        "startLine": null,
                        "line": 527,
                        "originalLine": 527,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "we have the same \"ZK down\" exception in line 477. Maybe the logic should be changed there as well?",
                        "body": "we have the same \"ZK down\" exception in line 477. Maybe the logic should be changed there as well?",
                        "startLine": null,
                        "line": 527,
                        "originalLine": 527,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "this is the same behaviour as before.\nI would like to not change the behaviour with this patch if it is not strictly needed.\n\nbefore this change we did log the 'getRemoteSocketAddress()' in line 534, which might be handy to add to this warning above\nwe are still printing it. I cannot get this comment",
                        "body": "this is the same behaviour as before.\r\nI would like to not change the behaviour with this patch if it is not strictly needed.\r\n\r\n> before this change we did log the 'getRemoteSocketAddress()' in line 534, which might be handy to add to this warning above\r\nwe are still printing it. I cannot get this comment",
                        "startLine": null,
                        "line": 527,
                        "originalLine": 527,
                        "originalStartLine": null
                    }
                ],
                "line": 527,
                "startLine": 527,
                "originalLine": 527,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAJ0584eNC8Y",
                "comments": [
                    {
                        "bodyText": "nit: if you clear this in the finally block, then let's move the setProperty call into the try block. (now if the test killed just before the try block, the property won't be cleared. - very-very unlikely, but still...)\nAlternatively I would be OK to put the clearProperty call to the afterEach() method and then you don't need the try-finally block.\nAlso just double-checking: we don't run multiple test classes (or methods in the same class) paralel in the same JVM, right? Let's make sure we avoid some flaky execution.",
                        "body": "nit: if you clear this in the finally block, then let's move the setProperty call into the try block. (now if the test killed just before the try block, the property won't be cleared. - very-very unlikely, but still...)\r\n\r\nAlternatively I would be OK to put the clearProperty call to the afterEach() method and then you don't need the try-finally block.\r\n\r\nAlso just double-checking: we don't run multiple test classes (or methods in the same class) paralel in the same JVM, right? Let's make sure we avoid some flaky execution.",
                        "startLine": null,
                        "line": 247,
                        "originalLine": 247,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "we don't run multiple test classes (or methods in the same class)\nthis is correct, and as ZK uses System properties it wont't be possible in the short term",
                        "body": "> we don't run multiple test classes (or methods in the same class)\r\nthis is correct, and as ZK uses System properties it wont't be possible in the short term",
                        "startLine": null,
                        "line": 247,
                        "originalLine": 247,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "then let's move the setProperty call into the try block\n@symat fixed",
                        "body": "> then let's move the setProperty call into the try block\r\n@symat fixed",
                        "startLine": null,
                        "line": 247,
                        "originalLine": 247,
                        "originalStartLine": null
                    }
                ],
                "line": 247,
                "startLine": 247,
                "originalLine": 247,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAJ0584eNDvs",
                "comments": [
                    {
                        "bodyText": "nit: should we maybe use a final field initialized in a constructor of the NettyServerCnxnFactory instead of parsing the system property all the time?",
                        "body": "nit: should we maybe use a final field initialized in a constructor of the NettyServerCnxnFactory instead of parsing the system property all the time? ",
                        "startLine": null,
                        "line": 232,
                        "originalLine": 232,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "this is the common practice in ZooKeeper.\nit also helps testing.\nI don't like it, but this is how we are doing thru the rest of the codebase.\nIn this case we are not hitting an hot path so the cost is negligible and changing it will make harder testing\nSo I would keep it this way",
                        "body": "this is the common practice in ZooKeeper.\r\nit also helps testing.\r\nI don't like it, but this is how we are doing thru the rest of the codebase.\r\nIn this case we are not hitting an hot path so the cost is negligible and changing it will make harder testing\r\n\r\nSo I would keep it this way ",
                        "startLine": null,
                        "line": 232,
                        "originalLine": 232,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "OK",
                        "body": "OK",
                        "startLine": null,
                        "line": 232,
                        "originalLine": 232,
                        "originalStartLine": null
                    }
                ],
                "line": 232,
                "startLine": 232,
                "originalLine": 232,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAJ0584eND-O",
                "comments": [
                    {
                        "bodyText": "nit: I know we had warning level before, but what do you think about INFO level instead? I like to have logs here, just not sure if this is really something the user should worry.",
                        "body": "nit: I know we had warning level before, but what do you think about INFO level instead? I like to have logs here, just not sure if this is really something the user should worry.",
                        "startLine": null,
                        "line": 234,
                        "originalLine": 234,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "This is exactly the same thing we printed before in the \"catch\" block below, but without spamming the logs with a stacktrace and with a meaning less message.\nSo I did this way in order to not change the behaviour too much but at least removing the stacktrace",
                        "body": "This is exactly the same thing we printed before in the \"catch\" block below, but without spamming the logs with a stacktrace and with a meaning less message.\r\n\r\nSo I did this way in order to not change the behaviour too much but at least removing the stacktrace",
                        "startLine": null,
                        "line": 234,
                        "originalLine": 234,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "changed to INFO",
                        "body": "changed to INFO",
                        "startLine": null,
                        "line": 234,
                        "originalLine": 234,
                        "originalStartLine": null
                    }
                ],
                "line": 234,
                "startLine": 234,
                "originalLine": 234,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOAAJ0584eNFk9",
                "comments": [
                    {
                        "bodyText": "I like this to be false by default. However, AFACT this behaviour was enabled in 3.7.0 by default. Maybe we should mention it in the documentation. (and also in the release doc of 3.7.1 and 3.8.0 if we don't forget)",
                        "body": "I like this to be false by default. However, AFACT this behaviour was enabled in 3.7.0 by default. Maybe we should mention it in the documentation. (and also in the release doc of 3.7.1 and 3.8.0 if we don't forget)",
                        "startLine": null,
                        "line": 1166,
                        "originalLine": 1166,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "that \"feature\" was enabled in 3.6. this is way Pulsar and Pravega users are not able to upgrade ZK.\nI can update the docs and explain the story.\nI would like this patch to land to 3.6. 3.7 and 3.8",
                        "body": "that \"feature\" was enabled in 3.6. this is way Pulsar and Pravega users are not able to upgrade ZK.\r\n\r\nI can update the docs and explain the story.\r\nI would like this patch to land to 3.6. 3.7 and 3.8",
                        "startLine": null,
                        "line": 1166,
                        "originalLine": 1166,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "updated",
                        "body": "updated",
                        "startLine": null,
                        "line": 1166,
                        "originalLine": 1166,
                        "originalStartLine": null
                    }
                ],
                "line": 1166,
                "startLine": 1166,
                "originalLine": 1166,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "zookeeper-docs/src/main/resources/markdown/zookeeperAdmin.md",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "eolivelli",
            "andrekramer1",
            "symat"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "add new flag netty.server.earlyDropSecureConnectionHandshakes to turn on/off ZOOKEEPER-3682\ndisable ZOOKEEPER-3682 by default\nadd docs\nadd tests for this patch and for ZOOKEEPER-3682\n\nsee https://issues.apache.org/jira/browse/ZOOKEEPER-4453 for more context"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3912,
        "title": {
            "body": "Fixes handling of incorrect compaction configuration",
            "bodyHTML": "Fixes handling of incorrect compaction configuration"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5qj1Fv",
                "body": "I created #3913 concurrent to this and it addresses some of the problem, but differently. ",
                "bodyText": "I created #3913 concurrent to this and it addresses some of the problem, but differently.",
                "createdAt": "2023-10-31T18:36:19Z",
                "author": "dlmarion"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM40d1nN",
                "comments": [
                    {
                        "bodyText": "How often is makePlan called? Would it be helpful if it emitted a message saying that it will do nothing?  Maybe info or debug?",
                        "body": "How often is makePlan called? Would it be helpful if it emitted a message saying that it will do nothing?  Maybe info or debug?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Its called very often, it probably would be helpful if it periodically logged a reminder.  I add something where it logs an error every 5 mins.",
                        "body": "Its called very often, it probably would be helpful if it periodically logged a reminder.  I add something where it logs an error every 5 mins.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "@EdColeman added periodic error logging in 9955320",
                        "body": "@EdColeman added periodic error logging in 9955320",
                        "startLine": null,
                        "line": null,
                        "originalLine": 34,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 34,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/NullCompactionPlanner.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM40d34S",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              private Cache<Pair<TableId,CompactionServiceId>,Long> unknownCompactionServiceErrorCache;\n          \n          \n            \n              private final Cache<Pair<TableId,CompactionServiceId>,Long> unknownCompactionServiceErrorCache;",
                        "body": "```suggestion\r\n  private final Cache<Pair<TableId,CompactionServiceId>,Long> unknownCompactionServiceErrorCache;\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 88,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 88,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionManager.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "keith-turner",
            "dlmarion",
            "EdColeman"
        ],
        "tdv": 112.0,
        "description": {
            "bodyText": "An incorrectly configured compaction service would fail to create.  This would cause tables configured to use that service to spam the logs saying the serivce did not exists.  Two changes were made to address this.\nFirst, when a compaction service fails to create its planner plugin it will log an error and fall back to using a new NullPlanner that does nothing.  Once the configuration is fixed and the planner pluging can be created, it will replace the NullPlanner. Falling back to the NullPlanner allows the service to exists and do nothing, this way tables configured to use it do not complain.\nSecond, when a table is configured to use a compaction service that does not exist repeated logging of this is suppressed per table.  Also the existing code attempted to fall back to the default compaction service but this was not working.  So the fallback code was removed and the log message was adjusted.  Falling back could cause problems if its not what the user desires.\nTwo ITs were added to test the above situations."
        }
    },
    {
        "repo": "httpcomponents-client",
        "pr_number": 343,
        "title": {
            "body": "Httpclient-2194 async retries not including body",
            "bodyHTML": "Httpclient-2194 async retries not including body"
        },
        "comments": [],
        "total_comments_count": 2,
        "review_threads": [
            {
                "id": "PRRT_kwDOAAMmQs4dsL5C",
                "comments": [
                    {
                        "bodyText": "@JasonMathison Damn. Good catch. However, I propose AsyncEntityProducer#isRepeatable check be dropped here. At this point if the entity producer is not null we should always call AsyncEntityProducer#releaseResources.",
                        "body": "@JasonMathison Damn. Good catch. However, I propose `AsyncEntityProducer#isRepeatable` check be dropped here. At this point if the entity producer is not null we should always call `AsyncEntityProducer#releaseResources`. ",
                        "startLine": null,
                        "line": null,
                        "originalLine": 131,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "PR updated.",
                        "body": "PR updated.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 131,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 131,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "httpclient5/src/main/java/org/apache/hc/client5/http/impl/async/AsyncHttpRequestRetryExec.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "JasonMathison",
            "ok2c"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "https://issues.apache.org/jira/browse/HTTPCLIENT-2194\nWe found that our async retries were failing because there was no body being set.  Releasing the entityProducer resets the starting point to 0 and resolved the issue for us."
        }
    },
    {
        "repo": "helix",
        "pr_number": 2586,
        "title": {
            "body": "Add InstanceConfig override for /partitionAssignment API",
            "bodyHTML": "Add InstanceConfig override for /partitionAssignment API"
        },
        "comments": [
            {
                "id": "IC_kwDOAPIHxc5jyeDF",
                "body": "This PR is ready to be merged\r\n\r\nFinal Commit Message:\r\nAdd InstanceConfigs inputField to allow overriding the existing InstanceConfigs for /partitionAssignment API.",
                "bodyText": "This PR is ready to be merged\nFinal Commit Message:\nAdd InstanceConfigs inputField to allow overriding the existing InstanceConfigs for /partitionAssignment API.",
                "createdAt": "2023-08-11T03:39:25Z",
                "author": "zpinto"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOAPIHxc4xJetI",
                "comments": [
                    {
                        "bodyText": "As this is a new field, so will there be a case where client might pass json with out this property?\nShould we use JsonIgnoreProperties.html#ignoreUnknown",
                        "body": "As this is a new field, so will there be a case where client might pass json with out this property?\r\n\r\nShould we use [JsonIgnoreProperties.html#ignoreUnknown](http://fasterxml.github.io/jackson-annotations/javadoc/2.9/com/fasterxml/jackson/annotation/JsonIgnoreProperties.html#ignoreUnknown() )",
                        "startLine": null,
                        "line": 109,
                        "originalLine": 109,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yes, this case is covered in the unit tests that already existed. JsonProperty does not require that this field be there in InstanceChangeMap.",
                        "body": "Yes, this case is covered in the unit tests that already existed. JsonProperty does not require that this field be there in InstanceChangeMap.",
                        "startLine": null,
                        "line": 109,
                        "originalLine": 109,
                        "originalStartLine": null
                    }
                ],
                "line": 109,
                "startLine": 109,
                "originalLine": 109,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ResourceAssignmentOptimizerAccessor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "zpinto",
            "himanshukandwal",
            "xyuanlu",
            "desaikomal"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Add InstanceConfig override for /partitionAssignment API to allow for simulating different assignment with different InstanceConfigs.\nIssues\nNA\nDescription\nThis change will allow callers of the /partitionAssignment API to pass a list of InstanceConfigs to override the existing ones. Callers will be able to do things like change the DOMAIN config to simulate FAULT_DOMAINs with skewed capacity and more.\nTests\n\n\n testComputePartitionAssignmentWaged\n- Add another part of the test that uses the InstanceConfig inputField to replace HELIX_ENABLED in the Instance's persisted(ZK) InstanceConfig. While this particular use of the InstanceConfig may not be necessary since we already have ActivateInstance and DeactivateInstance fields, it is the easiest way to test that the InstanceConfig override can be passed.\n\n\nThe following is the result of the \"mvn test\" command on the appropriate module:\n\n\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 116.65 s - in org.apache.helix.rest.server.TestResourceAssignmentOptimizerAccessor\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n[INFO] --- jacoco:0.8.6:report (generate-code-coverage-report) @ helix-rest ---\n[INFO] Loading execution data file /Users/zapinto/Documents/git/zpinto/helix/helix-rest/target/jacoco.exec\n[INFO] Analyzed bundle 'Apache Helix :: Restful Interface' with 92 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  02:03 min\n[INFO] Finished at: 2023-08-09T14:34:45-07:00\n[INFO] ------------------------------------------------------------------------\n\nChanges that Break Backward Compatibility (Optional)\nPreserves backwards compatibility by adding and not removing old inputFields\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "helix",
        "pr_number": 1685,
        "title": {
            "body": "Change participant message monitor to use dynamic metric",
            "bodyHTML": "Change participant message monitor to use dynamic metric"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDgwNzc0ODUwNg==",
                "body": "This PR is ready to be merged. Approved by @dasahcc \r\nFinal commit message: \"Change participant message monitor to use dynamic metric\"",
                "bodyText": "This PR is ready to be merged. Approved by @dasahcc\nFinal commit message: \"Change participant message monitor to use dynamic metric\"",
                "createdAt": "2021-03-25T23:45:37Z",
                "author": "zhangmeng916"
            }
        ],
        "total_comments_count": 4,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgwMjU2NjIxOnYy",
                "comments": [
                    {
                        "bodyText": "NIT: I think our formatter has problem. Let manually fix this first.",
                        "body": "NIT: I think our formatter has problem. Let manually fix this first.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 49,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Yeah, seems caused by formatter. Changed back.",
                        "body": "Yeah, seems caused by formatter. Changed back.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 49,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 49,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgwMjU3MDk5OnYy",
                "comments": [
                    {
                        "bodyText": "NIT: Is this necessary? We can increase with negative value so minimize the APIs.",
                        "body": "NIT: Is this necessary? We can increase with negative value so minimize the APIs.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 234,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 234,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "metrics-common/src/main/java/org/apache/helix/monitoring/mbeans/dynamicMBeans/DynamicMBeanProvider.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "zhangmeng916",
            "junkaixue"
        ],
        "tdv": 47.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixed #1683\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nParticipantMessageMonitor used a static metric implementation. To uniform our metrics in Helix-core, we would like to convert all static metrics to dynamic metric framework. The PR serves as an example for this cleanup work.\n\nTests\nhelix-core\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestResourceChangeDetector.testResetSnapshots:453 expected:<0> but was:<1>\n[ERROR]   TestPauseSignal.testPauseSignal:106 expected: but was:\n[INFO]\n[ERROR] Tests run: 1264, Failures: 2, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:35 h\n[INFO] Finished at: 2021-03-24T13:38:47-07:00\n(If CI test fails due to known issue, please specify the issue and test PR locally. Then copy & paste the result of \"mvn test\" to here.)\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3725,
        "title": {
            "body": "Use memory percentage for GC batch size",
            "bodyHTML": "Use memory percentage for GC batch size"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5nGD1D",
                "body": "@ctubbsii, simplified PR to the single change in Property.java as per suggestion.",
                "bodyText": "@ctubbsii, simplified PR to the single change in Property.java as per suggestion.",
                "createdAt": "2023-09-21T13:57:33Z",
                "author": "markowens"
            }
        ],
        "total_comments_count": 9,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4x2p1E",
                "comments": [
                    {
                        "bodyText": "Probably shouldn't log here, as it will log 3x every cycle.",
                        "body": "Probably shouldn't log here, as it will log 3x every cycle.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 106,
                        "originalStartLine": 104
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 106,
                "originalStartLine": 104,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/GCRun.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            },
            {
                "id": "PRRT_kwDOACaFSM4x2p-2",
                "comments": [
                    {
                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  \"The amount of memory used to calculate batch size for garbage collection.\", \"2.1.0\"),\n          \n          \n            \n                  \"The amount of memory used as the batch size for garbage collection.\", \"2.1.0\"),",
                        "body": "```suggestion\r\n      \"The amount of memory used as the batch size for garbage collection.\", \"2.1.0\"),\r\n```",
                        "startLine": null,
                        "line": null,
                        "originalLine": 871,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 871,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4x2rKu",
                "comments": [
                    {
                        "bodyText": "GC is redundant.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                log.info(\"GC candidate batch size: {} bytes ({} of GC memory)\", getCandidateBatchSize(),\n          \n          \n            \n                log.info(\"candidate batch size: {} bytes ({} of memory)\", getCandidateBatchSize(),\n          \n      \n    \n    \n  \n\nI'm not sure the parenthetical addition is adding much either. The site configuration is already logged on startup, so they can already see the String value in the logs.",
                        "body": "GC is redundant.\r\n\r\n```suggestion\r\n    log.info(\"candidate batch size: {} bytes ({} of memory)\", getCandidateBatchSize(),\r\n```\r\n\r\nI'm not sure the parenthetical addition is adding much either. The site configuration is already logged on startup, so they can already see the String value in the logs.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "For a long running cluster, the logs will likely roll and that may be a consideration for keeping this - maybe a debug level?",
                        "body": "For a long running cluster, the logs will likely roll and that may be a consideration for keeping this - maybe a debug level?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "I think that's an unrelated change. We can add an independent thing if we want to report the config on a regular basis, or when something changes, or some other mechanism. I don't think that needs to be conflated with this PR.",
                        "body": "I think that's an unrelated change. We can add an independent thing if we want to report the config on a regular basis, or when something changes, or some other mechanism. I don't think that needs to be conflated with this PR.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "To be clear, I'm not suggesting we remove this log statement... just that the original message was sufficient. I'm trying to minimize unrelated changes to the core task of changing the property type. This is for a patch release, after all... minimizing changes to the stable version is the default goal.",
                        "body": "To be clear, I'm not suggesting we remove this log statement... just that the original message was sufficient. I'm trying to minimize unrelated changes to the core task of changing the property type. This is for a patch release, after all... minimizing changes to the stable version is the default goal.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 93,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 93,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "PRRT_kwDOACaFSM4x2r28",
                "comments": [
                    {
                        "bodyText": "Instead of doing arbitrary sleep durations, should use Wait.waitFor, which can wait up to a max duration (scaled by timeout.factor) for the condition being tested to happen.\nBut actually, I don't think this test is needed at all. It's just testing the ConfigurationTypeHelper.getMemoryAsBytes, which already has test coverage.\nI think it can just be deleted.",
                        "body": "Instead of doing arbitrary sleep durations, should use Wait.waitFor, which can wait up to a max duration (scaled by timeout.factor) for the condition being tested to happen.\r\n\r\nBut actually, I don't think this test is needed at all. It's just testing the ConfigurationTypeHelper.getMemoryAsBytes, which already has test coverage.\r\n\r\nI think it can just be deleted.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 318,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 318,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/GarbageCollectorIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "jmark99",
            "markowens",
            "ctubbsii",
            "EdColeman"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Update Accumulo to use a memory percentage value to determine the candidate batch size for garbage collection.\nUpdated Property.java to use a memory type rather than a bytes type.\nAdded logging to print the size and percentage used by the GC."
        }
    },
    {
        "repo": "helix",
        "pr_number": 1449,
        "title": {
            "body": "HelixClusterVerifier verify() with default waitTillVerify time -- part one",
            "bodyHTML": "HelixClusterVerifier verify() with default waitTillVerify time -- part one"
        },
        "comments": [
            {
                "id": "MDEyOklzc3VlQ29tbWVudDcwNTI1MTE0Mw==",
                "body": "This diff is approved. Please help to merge into trunk\r\n\r\n>fix #1448 part 1\r\nHelixClusterVerifier verify() and related method may return\r\npre-maturely. The reason is that the verify the converging stable\r\ncondition too early before controller has a chance to make\r\nchange. Basically the previous stable state is mistaken as the\r\nexpected next stable state.\r\n\r\nWe fix this issue by adding waitTillVerify() timeout in\r\nconstruction time of verifier.",
                "bodyText": "This diff is approved. Please help to merge into trunk\n\nfix #1448 part 1\nHelixClusterVerifier verify() and related method may return\npre-maturely. The reason is that the verify the converging stable\ncondition too early before controller has a chance to make\nchange. Basically the previous stable state is mistaken as the\nexpected next stable state.\n\nWe fix this issue by adding waitTillVerify() timeout in\nconstruction time of verifier.",
                "createdAt": "2020-10-07T23:49:03Z",
                "author": "kaisun2000"
            }
        ],
        "total_comments_count": 12,
        "review_threads": [
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODU3NzIxOnYy",
                "comments": [
                    {
                        "bodyText": "Does this number change mean what we previously tested was wrong? How to justify the number change?",
                        "body": "Does this number change mean what we previously tested was wrong? How to justify the number change?",
                        "startLine": null,
                        "line": 444,
                        "originalLine": 444,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "see line 418, 419\n      // remove newly added resource/ideastate\n      _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, resourceName);\n\nThe newly added resource in the previous test is not really valid. (Confirmed with JJ before.) Or they would break this test. So in this diff, it is removed.  Accordingly the number here needs to be adjusted too.",
                        "body": "see line 418, 419\r\n```\r\n      // remove newly added resource/ideastate\r\n      _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, resourceName);\r\n```\r\n\r\nThe newly added resource in the previous test is not really valid. (Confirmed with JJ before.) Or they would break this test. So in this diff, it is removed.  Accordingly the number here needs to be adjusted too.",
                        "startLine": null,
                        "line": 444,
                        "originalLine": 444,
                        "originalStartLine": null
                    }
                ],
                "line": 444,
                "startLine": 444,
                "originalLine": 444,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/controller/changedetector/TestResourceChangeDetector.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODU5NTY2OnYy",
                "comments": [
                    {
                        "bodyText": "Just want to make sure, besides waiting for some time before verifying, the verify by polling function is same as what we previously did.",
                        "body": "Just want to make sure, besides waiting for some time before verifying, the verify by polling function is same as what we previously did.",
                        "startLine": null,
                        "line": 217,
                        "originalLine": 217,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "The new one BestPossibleExternalViewVerifier replaced the deprecated one ClusterStateVerifier and BestPossAndExtViewZkVerifier",
                        "body": "The new one BestPossibleExternalViewVerifier replaced the deprecated one ClusterStateVerifier and BestPossAndExtViewZkVerifier",
                        "startLine": null,
                        "line": 217,
                        "originalLine": 217,
                        "originalStartLine": null
                    }
                ],
                "line": 217,
                "startLine": 217,
                "originalLine": 217,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/TestDisableCustomCodeRunner.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODU5NzI3OnYy",
                "comments": [
                    {
                        "bodyText": "Remove this line.",
                        "body": "Remove this line.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 119,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "removed,",
                        "body": "removed,",
                        "startLine": null,
                        "line": null,
                        "originalLine": 119,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 119,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODYwMTc2OnYy",
                "comments": [
                    {
                        "bodyText": "Can we define the number somewhere instead of using a math expression?",
                        "body": "Can we define the number somewhere instead of using a math expression?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 120,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 120,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODY3MTAwOnYy",
                "comments": [
                    {
                        "bodyText": "Is previous verification moved to somewhere else?",
                        "body": "Is previous verification moved to somewhere else?",
                        "startLine": null,
                        "line": 98,
                        "originalLine": 98,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "replaced by line 102. The previous way is really too old. Older than deprecated ClusterVerifier and it does not work sometimes.",
                        "body": "replaced by line 102. The previous way is really too old. Older than deprecated ClusterVerifier and it does not work sometimes.",
                        "startLine": null,
                        "line": 98,
                        "originalLine": 98,
                        "originalStartLine": null
                    }
                ],
                "line": 98,
                "startLine": 98,
                "originalLine": 98,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestSemiAutoRebalance.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            },
            {
                "id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODY3MzI5OnYy",
                "comments": [
                    {
                        "bodyText": "Please change Db2 to a better name.",
                        "body": "Please change Db2 to a better name.",
                        "startLine": null,
                        "line": null,
                        "originalLine": 179,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Changed to \"verifierClusterDb2\" as the purpose it to validate cluster Db2",
                        "body": "Changed to \"verifierClusterDb2\" as the purpose it to validate cluster Db2",
                        "startLine": null,
                        "line": null,
                        "originalLine": 179,
                        "originalStartLine": null
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 179,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "kaisun2000",
            "zhangmeng916",
            "alirezazamani"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nfix #1448 part 1\nDescription\n\n\n Here are some details about my PR, including screenshots of any UI changes:\nHelixClusterVerifier verify() and related method may return\npre-maturely. The reason is that the verify the converging stable\ncondition too early before controller has a chance to make\nchange. Basically the previous stable state is mistaken as the\nexpected next stable state.\nWe fix this issue by adding waitTillVerify() timeout in\nconstruction time of verifier.\n\n\nTests\n\n The following tests are written for this issue:\n\ngithub run https://github.com/apache/helix/runs/1222609480?check_suite_focus=true\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n2020-10-07T21:51:30.9005474Z\n2020-10-07T21:51:31.3163346Z [ERROR] Failures:\n2020-10-07T21:51:31.3164350Z [ERROR]   TestDisableCustomCodeRunner.test:236 expected: but was:\n2020-10-07T21:51:31.3187463Z [ERROR]   TestTaskRebalancer.testNamedQueue ¬ª ThreadTimeout Method org.testng.internal.T...\n2020-10-07T21:51:31.3189714Z [ERROR]   TestHelixAdminCli.testInstanceOperations:469 ¬ª Helix Failed to drop instance: ...\n2020-10-07T21:51:31.3190815Z [ERROR] Tests run: 1212, Failures: 3, Errors: 0, Skipped: 4\n2020-10-07T21:51:31.3310693Z [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M3:test (default-test) on project helix-core: There are test failures.\n2020-10-07T21:51:31.3311431Z [ERROR]\n2020-10-07T21:51:31.3312114Z [ERROR] Please refer to /home/runner/work/helix/helix/helix-core/target/surefire-reports for the individual test results.\n2020-10-07T21:51:31.3312933Z [ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n2020-10-07T21:51:31.3313549Z [ERROR] -> [Help 1]\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3992,
        "title": {
            "body": "Add resourceGroup as a tag in the emitted metrics",
            "bodyHTML": "Add resourceGroup as a tag in the emitted metrics"
        },
        "comments": [],
        "total_comments_count": 6,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM41tzEX",
                "comments": [
                    {
                        "bodyText": "wondering if we should add instance_name to the tags...",
                        "body": "wondering if we should add instance_name to the tags...",
                        "startLine": null,
                        "line": 85,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "If I recall correctly, there are tags that are automatically added on initialization - maybe we could make that a default?  I'm not sure of the impact of adding a \"constant\" tag (assuming most installations run a single instance). Or maybe instance name is synonymous with system name?\nIf metrics are forwarded to a central collector then we should support a tag that allows differentiation, so the usages may be wider than running multiple instances within a single cluster,",
                        "body": "If I recall correctly, there are tags that are automatically added on initialization - maybe we could make that a default?  I'm not sure of the impact of adding a \"constant\" tag (assuming most installations run a single instance). Or maybe instance name is synonymous with system name?\r\n\r\nIf metrics are forwarded to a central collector then we should support a tag that allows differentiation, so the usages may be wider than running multiple instances within a single cluster,",
                        "startLine": null,
                        "line": 85,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "this list of tags ends up being the \"common\" tags, line 92 below, that are added to each emitted metric from the server process. Current the list of \"common\" tags are:\n\nprocess.name (tserver1, sserver2, etc.)\nhost\nport\nresource group (this PR adds that)\n\nIf you happen to have metrics from multiple Accumulo instances being sent to the same metric repository, then I'm not sure there is a direct way of getting metrics for just one instance.",
                        "body": "this list of tags ends up being the \"common\" tags, line 92 below, that are added to each emitted metric from the server process. Current the list of \"common\" tags are:\r\n\r\n  * process.name (tserver1, sserver2, etc.)\r\n  * host\r\n  * port\r\n  * resource group (this PR adds that)\r\n  \r\n  If you happen to have metrics from multiple Accumulo instances being sent to the same metric repository, then I'm not sure there is a direct way of getting metrics for just one instance.",
                        "startLine": null,
                        "line": 85,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Likely outside of the scope of this PR, but maybe we could consider migrating the standard tags to something that mirrors the syslog naming conventions (https://datatracker.ietf.org/doc/html/rfc5424)\nThat could make it easier to correlate metrics and log messages that are sent to syslog.",
                        "body": "Likely outside of the scope of this PR, but maybe we could consider migrating the standard tags to something that mirrors the syslog naming conventions (https://datatracker.ietf.org/doc/html/rfc5424)\r\n\r\nThat could make it easier to correlate metrics and log messages that are sent to syslog. ",
                        "startLine": null,
                        "line": 85,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "added instance name tag in #3998 targeting 2.1.3",
                        "body": "added instance name tag in #3998 targeting 2.1.3",
                        "startLine": null,
                        "line": 85,
                        "originalLine": 82,
                        "originalStartLine": null
                    },
                    {
                        "bodyText": "Likely outside of the scope of this PR, but maybe we could consider migrating the standard tags to something that mirrors the syslog naming conventions (https://datatracker.ietf.org/doc/html/rfc5424)\n\nMicrometer recommends the lowercase dot notation, see https://micrometer.io/docs/concepts#_tag_naming. Maybe the metric names and tags are tranformed to syslog standard when syslog is the sink?",
                        "body": "> Likely outside of the scope of this PR, but maybe we could consider migrating the standard tags to something that mirrors the syslog naming conventions (https://datatracker.ietf.org/doc/html/rfc5424)\r\n> \r\nMicrometer recommends the lowercase dot notation, see https://micrometer.io/docs/concepts#_tag_naming. Maybe the metric names and tags are tranformed to syslog standard when syslog is the sink?\r\n",
                        "startLine": null,
                        "line": 85,
                        "originalLine": 82,
                        "originalStartLine": null
                    }
                ],
                "line": 85,
                "startLine": 85,
                "originalLine": 82,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "core/src/main/java/org/apache/accumulo/core/metrics/MetricsUtil.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "dlmarion",
            "EdColeman"
        ],
        "tdv": 0.0,
        "description": {
            "bodyText": "Related to #3991"
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 3923,
        "title": {
            "body": "Update TabletManagementIteratorIT for merge and wal checks",
            "bodyHTML": "Update TabletManagementIteratorIT for merge and wal checks"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM5rMnp6",
                "body": "> Would be nice to check split in addition to merge in the test.\r\n\r\nI added split as well on the latest update",
                "bodyText": "Would be nice to check split in addition to merge in the test.\n\nI added split as well on the latest update",
                "createdAt": "2023-11-07T13:07:14Z",
                "author": "cshannon"
            }
        ],
        "total_comments_count": 3,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM40sUGH",
                "comments": [
                    {
                        "bodyText": "Could throw in a check before setting the merge op id.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  setOperationId(client, metaCopy4, t4, null, TabletOperationType.MERGING);\n          \n          \n            \n                  assertEquals(2, findTabletsNeedingAttention(client, metaCopy4, tabletMgmtParams),\n          \n          \n            \n                          \"Tablets have no location and a hosting goal of always, so they should need attention\");\n          \n          \n            \n                  setOperationId(client, metaCopy4, t4, null, TabletOperationType.MERGING);",
                        "body": "Could throw in a check before setting the merge op id.\r\n\r\n```suggestion\r\n      assertEquals(2, findTabletsNeedingAttention(client, metaCopy4, tabletMgmtParams),\r\n              \"Tablets have no location and a hosting goal of always, so they should need attention\");\r\n      setOperationId(client, metaCopy4, t4, null, TabletOperationType.MERGING);\r\n```",
                        "startLine": null,
                        "line": 183,
                        "originalLine": 179,
                        "originalStartLine": null
                    }
                ],
                "line": 183,
                "startLine": 183,
                "originalLine": 179,
                "originalStartLine": null,
                "subjectType": "LINE",
                "path": "test/src/main/java/org/apache/accumulo/test/functional/TabletManagementIteratorIT.java",
                "diffSide": "RIGHT",
                "startDiffSide": null
            }
        ],
        "participants": [
            "cshannon",
            "keith-turner"
        ],
        "tdv": 28.0,
        "description": {
            "bodyText": "This updates tests in TabletManagementIteratorIT to verify that the iterator properly detects tablets needing attention if WALs exist on tablets that are part of a merge operation. It also will test that if op type is DELETING that the tablet does not care if there are WALs.\nThis PR only updates the tests in TabletManagementIteratorIT and doesn't try and do anything with TGW because after the refactoring in #3904 both the iterator and TGW share the same code for checking the goal state (where the WAL checks are done)\nHowever, another possible follow on test improvement would be to create a test for the TabletGoalState class where all the logic was refactored to inside of compute() to test the different cases for computing the resulting state. This could likely just be a normal unit test with mocking and not an IT."
        }
    },
    {
        "repo": "accumulo",
        "pr_number": 2403,
        "title": {
            "body": "Create RunningCompactionInfo in core for reuse",
            "bodyHTML": "Create RunningCompactionInfo in core for reuse"
        },
        "comments": [
            {
                "id": "IC_kwDOACaFSM47yk96",
                "body": "> * Moves the logic for parsing progress from running compactions to core so that\r\n>       server utilities can get the progress as well\r\n\r\nWere there any current server utilities that would benefit from this information or are these changes mostly to make the information more accessible for future changes?",
                "bodyText": "Moves the logic for parsing progress from running compactions to core so that\nserver utilities can get the progress as well\n\n\nWere there any current server utilities that would benefit from this information or are these changes mostly to make the information more accessible for future changes?",
                "createdAt": "2021-12-30T17:14:18Z",
                "author": "DomGarguilo"
            },
            {
                "id": "IC_kwDOACaFSM472I2P",
                "body": "> > * Moves the logic for parsing progress from running compactions to core so that\r\n> >   server utilities can get the progress as well\r\n> \r\n> Were there any current server utilities that would benefit from this information or are these changes mostly to make the information more accessible for future changes?\r\n\r\nThe `listcompactions` shell command is the only one that comes to mind. But I was planning on creating a new `ec-admin` command to hold all the commands for external compactions, to include listing running compactions.",
                "bodyText": "Moves the logic for parsing progress from running compactions to core so that\nserver utilities can get the progress as well\n\n\nWere there any current server utilities that would benefit from this information or are these changes mostly to make the information more accessible for future changes?\n\nThe listcompactions shell command is the only one that comes to mind. But I was planning on creating a new ec-admin command to hold all the commands for external compactions, to include listing running compactions.",
                "createdAt": "2022-01-03T12:06:34Z",
                "author": "milleruntime"
            },
            {
                "id": "IC_kwDOACaFSM472S9o",
                "body": "I am going to merge this so I can continue working on related changes. Let me know if there was anything else you saw.",
                "bodyText": "I am going to merge this so I can continue working on related changes. Let me know if there was anything else you saw.",
                "createdAt": "2022-01-03T13:23:23Z",
                "author": "milleruntime"
            }
        ],
        "total_comments_count": 5,
        "review_threads": [
            {
                "id": "PRRT_kwDOACaFSM4dmevA",
                "comments": [
                    {
                        "bodyText": "Should these public variables be final?",
                        "body": "Should these public variables be final?",
                        "startLine": null,
                        "line": null,
                        "originalLine": 26,
                        "originalStartLine": 24
                    },
                    {
                        "bodyText": "Fixed in 149e858",
                        "body": "Fixed in 149e858",
                        "startLine": null,
                        "line": null,
                        "originalLine": 26,
                        "originalStartLine": 24
                    }
                ],
                "line": null,
                "startLine": null,
                "originalLine": 26,
                "originalStartLine": 24,
                "subjectType": "LINE",
                "path": "server/monitor/src/main/java/org/apache/accumulo/monitor/rest/compactions/external/CompactorInfo.java",
                "diffSide": "RIGHT",
                "startDiffSide": "RIGHT"
            }
        ],
        "participants": [
            "milleruntime",
            "DomGarguilo",
            "ctubbsii"
        ],
        "tdv": -50.0,
        "description": {
            "bodyText": "Create RunningCompactionInfo in core to be reused outside the Monitor\nMoves the logic for parsing progress from running compactions to core so that\nserver utilities can get the progress as well"
        }
    }
]